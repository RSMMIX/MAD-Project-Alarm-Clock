
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e670  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  0800e870  0800e870  0001e870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f268  0800f268  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f268  0800f268  0001f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f270  0800f270  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f270  0800f270  0001f270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f274  0800f274  0001f274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  0800f278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000078c  200002a0  0800f518  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a2c  0800f518  00020a2c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eaa5  00000000  00000000  00020311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047e6  00000000  00000000  0003edb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c8  00000000  00000000  000435a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001408  00000000  00000000  00044f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c9e0  00000000  00000000  00046370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002306e  00000000  00000000  00072d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108a12  00000000  00000000  00095dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c1c  00000000  00000000  0019e7d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001a63ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002a0 	.word	0x200002a0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e858 	.word	0x0800e858

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a4 	.word	0x200002a4
 800023c:	0800e858 	.word	0x0800e858

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	460b      	mov	r3, r1
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	4613      	mov	r3, r2
 80005fc:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	b29a      	uxth	r2, r3
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	b29b      	uxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	b29b      	uxth	r3, r3
 800060e:	4413      	add	r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	f203 1305 	addw	r3, r3, #261	; 0x105
 8000616:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8000618:	8afb      	ldrh	r3, [r7, #22]
 800061a:	425b      	negs	r3, r3
 800061c:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800061e:	237e      	movs	r3, #126	; 0x7e
 8000620:	733b      	strb	r3, [r7, #12]
 8000622:	23ff      	movs	r3, #255	; 0xff
 8000624:	737b      	strb	r3, [r7, #13]
 8000626:	2306      	movs	r3, #6
 8000628:	73bb      	strb	r3, [r7, #14]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	2300      	movs	r3, #0
 8000630:	743b      	strb	r3, [r7, #16]
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	747b      	strb	r3, [r7, #17]
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	74bb      	strb	r3, [r7, #18]
 800063a:	8afb      	ldrh	r3, [r7, #22]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29b      	uxth	r3, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	74fb      	strb	r3, [r7, #19]
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	753b      	strb	r3, [r7, #20]
 800064a:	23ef      	movs	r3, #239	; 0xef
 800064c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 800064e:	f107 010c 	add.w	r1, r7, #12
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	220a      	movs	r2, #10
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <Send_cmd+0x7c>)
 800065a:	f00a f81f 	bl	800a69c <HAL_UART_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000854 	.word	0x20000854

0800066c <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8000670:	2201      	movs	r2, #1
 8000672:	2100      	movs	r1, #0
 8000674:	2003      	movs	r0, #3
 8000676:	f7ff ffb9 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 800067a:	20c8      	movs	r0, #200	; 0xc8
 800067c:	f004 ff18 	bl	80054b0 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <DF_SetEQ>:

void DF_SetEQ(uint8_t mode)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  Send_cmd(0x07,0x00, mode);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	461a      	mov	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f7ff ffa9 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 800069a:	20c8      	movs	r0, #200	; 0xc8
 800069c:	f004 ff08 	bl	80054b0 <HAL_Delay>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <DF_SetVolume>:

void DF_SetVolume(uint8_t volume)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  Send_cmd(0x06,0x00, volume);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	461a      	mov	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	2006      	movs	r0, #6
 80006ba:	f7ff ff97 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 80006be:	20c8      	movs	r0, #200	; 0xc8
 80006c0:	f004 fef6 	bl	80054b0 <HAL_Delay>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <DF_Init>:


void DF_Init (uint8_t volume)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 80006d6:	2202      	movs	r2, #2
 80006d8:	2100      	movs	r1, #0
 80006da:	203f      	movs	r0, #63	; 0x3f
 80006dc:	f7ff ff86 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 80006e0:	20c8      	movs	r0, #200	; 0xc8
 80006e2:	f004 fee5 	bl	80054b0 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	461a      	mov	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	2006      	movs	r0, #6
 80006ee:	f7ff ff7d 	bl	80005ec <Send_cmd>
	HAL_Delay(500);
 80006f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f6:	f004 fedb 	bl	80054b0 <HAL_Delay>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	200e      	movs	r0, #14
 800070c:	f7ff ff6e 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 8000710:	20c8      	movs	r0, #200	; 0xc8
 8000712:	f004 fecd 	bl	80054b0 <HAL_Delay>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <DF_Playback>:
	Send_cmd(0x02, 0, 0);
	HAL_Delay(200);
}

void DF_Playback (void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
	Send_cmd(0x0D, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	200d      	movs	r0, #13
 8000724:	f7ff ff62 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 8000728:	20c8      	movs	r0, #200	; 0xc8
 800072a:	f004 fec1 	bl	80054b0 <HAL_Delay>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <selectSong>:
	}
}


void selectSong (void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key))
 8000738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073c:	482b      	ldr	r0, [pc, #172]	; (80007ec <selectSong+0xb8>)
 800073e:	f006 f93f 	bl	80069c0 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d114      	bne.n	8000772 <selectSong+0x3e>
	{
		HAL_Delay(50);
 8000748:	2032      	movs	r0, #50	; 0x32
 800074a:	f004 feb1 	bl	80054b0 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key)){
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	4826      	ldr	r0, [pc, #152]	; (80007ec <selectSong+0xb8>)
 8000754:	f006 f934 	bl	80069c0 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d109      	bne.n	8000772 <selectSong+0x3e>
			DF_SetFolder(1, songList);
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <selectSong+0xbc>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	2001      	movs	r0, #1
 8000766:	f000 f847 	bl	80007f8 <DF_SetFolder>
			savedSong = songList;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <selectSong+0xbc>)
 800076c:	881a      	ldrh	r2, [r3, #0]
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <selectSong+0xc0>)
 8000770:	801a      	strh	r2, [r3, #0]
		}
	}

	if (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key))
 8000772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <selectSong+0xb8>)
 8000778:	f006 f922 	bl	80069c0 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10d      	bne.n	800079e <selectSong+0x6a>
	{
		HAL_Delay(50);
 8000782:	2032      	movs	r0, #50	; 0x32
 8000784:	f004 fe94 	bl	80054b0 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key));
 8000788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078c:	4817      	ldr	r0, [pc, #92]	; (80007ec <selectSong+0xb8>)
 800078e:	f006 f917 	bl	80069c0 <HAL_GPIO_ReadPin>
		songList--;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <selectSong+0xbc>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <selectSong+0xbc>)
 800079c:	801a      	strh	r2, [r3, #0]
		//DF_Previous();
	}

	if (!HAL_GPIO_ReadPin(Next_Port, Next_Key))
 800079e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <selectSong+0xb8>)
 80007a4:	f006 f90c 	bl	80069c0 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10d      	bne.n	80007ca <selectSong+0x96>
	{
		HAL_Delay(50);
 80007ae:	2032      	movs	r0, #50	; 0x32
 80007b0:	f004 fe7e 	bl	80054b0 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Next_Port, Next_Key));
 80007b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <selectSong+0xb8>)
 80007ba:	f006 f901 	bl	80069c0 <HAL_GPIO_ReadPin>
		songList++;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <selectSong+0xbc>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <selectSong+0xbc>)
 80007c8:	801a      	strh	r2, [r3, #0]
		//DF_Next();
	}

	if(songList < 1)
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <selectSong+0xbc>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <selectSong+0xa6>
		songList = 10;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <selectSong+0xbc>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	801a      	strh	r2, [r3, #0]
	else if(songList > 10)
		songList = 1;
}
 80007d8:	e006      	b.n	80007e8 <selectSong+0xb4>
	else if(songList > 10)
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <selectSong+0xbc>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	2b0a      	cmp	r3, #10
 80007e0:	d902      	bls.n	80007e8 <selectSong+0xb4>
		songList = 1;
 80007e2:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <selectSong+0xbc>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	801a      	strh	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020400 	.word	0x40020400
 80007f0:	20000070 	.word	0x20000070
 80007f4:	200002c0 	.word	0x200002c0

080007f8 <DF_SetFolder>:




void DF_SetFolder(uint8_t fol ,uint8_t num)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]
  Send_cmd(0x0F, fol, num);
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4619      	mov	r1, r3
 800080e:	200f      	movs	r0, #15
 8000810:	f7ff feec 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 8000814:	20c8      	movs	r0, #200	; 0xc8
 8000816:	f004 fe4b 	bl	80054b0 <HAL_Delay>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MusicController>:


void MusicController (uint32_t val)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]


	uint32_t value = val*30/4095;
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	1a9b      	subs	r3, r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	461a      	mov	r2, r3
 8000838:	4b3f      	ldr	r3, [pc, #252]	; (8000938 <MusicController+0x114>)
 800083a:	fba3 1302 	umull	r1, r3, r3, r2
 800083e:	1ad2      	subs	r2, r2, r3
 8000840:	0852      	lsrs	r2, r2, #1
 8000842:	4413      	add	r3, r2
 8000844:	0adb      	lsrs	r3, r3, #11
 8000846:	60bb      	str	r3, [r7, #8]

	DF_SetVolume(value);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff2b 	bl	80006a8 <DF_SetVolume>

	if (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key))
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	4839      	ldr	r0, [pc, #228]	; (800093c <MusicController+0x118>)
 8000858:	f006 f8b2 	bl	80069c0 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d121      	bne.n	80008a6 <MusicController+0x82>
	{
		while (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key));
 8000862:	bf00      	nop
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	4834      	ldr	r0, [pc, #208]	; (800093c <MusicController+0x118>)
 800086a:	f006 f8a9 	bl	80069c0 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f7      	beq.n	8000864 <MusicController+0x40>
		if (isplaying)
 8000874:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MusicController+0x11c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d008      	beq.n	800088e <MusicController+0x6a>
		{
			ispause = 1;
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <MusicController+0x120>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
			isplaying = 0;
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MusicController+0x11c>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
			DF_Pause();
 8000888:	f7ff ff3b 	bl	8000702 <DF_Pause>
 800088c:	e00b      	b.n	80008a6 <MusicController+0x82>
		}

		else if (ispause)
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MusicController+0x120>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d007      	beq.n	80008a6 <MusicController+0x82>
		{
			isplaying = 1;
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MusicController+0x11c>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
			ispause = 0;
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MusicController+0x120>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			DF_Playback();
 80008a2:	f7ff ff3a 	bl	800071a <DF_Playback>
		}
	}

	if (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key))
 80008a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008aa:	4824      	ldr	r0, [pc, #144]	; (800093c <MusicController+0x118>)
 80008ac:	f006 f888 	bl	80069c0 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d12b      	bne.n	800090e <MusicController+0xea>
	{
		while (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key)){
 80008b6:	e022      	b.n	80008fe <MusicController+0xda>
			uint16_t num = HAL_RNG_GetRandomNumber(&hrng) % 8 + 1;
 80008b8:	4823      	ldr	r0, [pc, #140]	; (8000948 <MusicController+0x124>)
 80008ba:	f008 f831 	bl	8008920 <HAL_RNG_GetRandomNumber>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	3301      	adds	r3, #1
 80008ca:	81fb      	strh	r3, [r7, #14]
			while(pre_num == num){
 80008cc:	e009      	b.n	80008e2 <MusicController+0xbe>
				num = HAL_RNG_GetRandomNumber(&hrng) % 8 + 1;
 80008ce:	481e      	ldr	r0, [pc, #120]	; (8000948 <MusicController+0x124>)
 80008d0:	f008 f826 	bl	8008920 <HAL_RNG_GetRandomNumber>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	b29b      	uxth	r3, r3
 80008de:	3301      	adds	r3, #1
 80008e0:	81fb      	strh	r3, [r7, #14]
			while(pre_num == num){
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MusicController+0x128>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	89fa      	ldrh	r2, [r7, #14]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d0f0      	beq.n	80008ce <MusicController+0xaa>
			}
			pre_num = num;
 80008ec:	4a17      	ldr	r2, [pc, #92]	; (800094c <MusicController+0x128>)
 80008ee:	89fb      	ldrh	r3, [r7, #14]
 80008f0:	8013      	strh	r3, [r2, #0]
			DF_SetFolder(2, num);
 80008f2:	89fb      	ldrh	r3, [r7, #14]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	2002      	movs	r0, #2
 80008fa:	f7ff ff7d 	bl	80007f8 <DF_SetFolder>
		while (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key)){
 80008fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MusicController+0x118>)
 8000904:	f006 f85c 	bl	80069c0 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0d4      	beq.n	80008b8 <MusicController+0x94>
		}

//		DF_SetFolder(1,4);
	}

	if (!HAL_GPIO_ReadPin(Next_Port, Next_Key))
 800090e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <MusicController+0x118>)
 8000914:	f006 f854 	bl	80069c0 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d108      	bne.n	8000930 <MusicController+0x10c>
	{
		while (!HAL_GPIO_ReadPin(Next_Port, Next_Key));
 800091e:	bf00      	nop
 8000920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MusicController+0x118>)
 8000926:	f006 f84b 	bl	80069c0 <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f7      	beq.n	8000920 <MusicController+0xfc>
		//DF_SetFolder();
	}
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	00100101 	.word	0x00100101
 800093c:	40020400 	.word	0x40020400
 8000940:	20000000 	.word	0x20000000
 8000944:	200002bc 	.word	0x200002bc
 8000948:	2000058c 	.word	0x2000058c
 800094c:	200002c2 	.word	0x200002c2

08000950 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000964:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <MX_ADC1_Init+0xb8>)
 8000966:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_ADC1_Init+0xb4>)
 800096a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800096e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000978:	2201      	movs	r2, #1
 800097a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_ADC1_Init+0xb4>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_ADC1_Init+0xb4>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <MX_ADC1_Init+0xbc>)
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_ADC1_Init+0xb4>)
 800099e:	2202      	movs	r2, #2
 80009a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009b2:	f004 fda1 	bl	80054f8 <HAL_ADC_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009bc:	f003 f874 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009c0:	230d      	movs	r3, #13
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009d2:	f004 feed 	bl	80057b0 <HAL_ADC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009dc:	f003 f864 	bl	8003aa8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009e0:	230a      	movs	r3, #10
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009ee:	f004 fedf 	bl	80057b0 <HAL_ADC_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009f8:	f003 f856 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200002c4 	.word	0x200002c4
 8000a08:	40012000 	.word	0x40012000
 8000a0c:	0f000001 	.word	0x0f000001

08000a10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <HAL_ADC_MspInit+0xd0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d152      	bne.n	8000ad8 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a32:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000a62:	2309      	movs	r3, #9
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	481c      	ldr	r0, [pc, #112]	; (8000ae8 <HAL_ADC_MspInit+0xd8>)
 8000a76:	f005 fdf7 	bl	8006668 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <HAL_ADC_MspInit+0xe0>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000aa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000abe:	f005 fa5b 	bl	8005f78 <HAL_DMA_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000ac8:	f002 ffee 	bl	8003aa8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000ad0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ad2:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40012000 	.word	0x40012000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	2000030c 	.word	0x2000030c
 8000af0:	40026410 	.word	0x40026410

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_DMA_Init+0x38>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <MX_DMA_Init+0x38>)
 8000b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_DMA_Init+0x38>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2038      	movs	r0, #56	; 0x38
 8000b18:	f005 f9f7 	bl	8005f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b1c:	2038      	movs	r0, #56	; 0x38
 8000b1e:	f005 fa10 	bl	8005f42 <HAL_NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <DS3231_Init+0x30>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f8c9 	bl	8000cd6 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f88d 	bl	8000c64 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8000b4a:	f000 f8e6 	bl	8000d1a <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8000b4e:	f000 f8ac 	bl	8000caa <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 f846 	bl	8000be4 <DS3231_SetInterruptMode>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000036c 	.word	0x2000036c

08000b64 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	733b      	strb	r3, [r7, #12]
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <DS3231_SetRegByte+0x38>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	f107 020c 	add.w	r2, r7, #12
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	21d0      	movs	r1, #208	; 0xd0
 8000b8e:	f005 fffd 	bl	8006b8c <HAL_I2C_Master_Transmit>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000036c 	.word	0x2000036c

08000ba0 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <DS3231_GetRegByte+0x40>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	1dfa      	adds	r2, r7, #7
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	21d0      	movs	r1, #208	; 0xd0
 8000bba:	f005 ffe7 	bl	8006b8c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <DS3231_GetRegByte+0x40>)
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	f107 020f 	add.w	r2, r7, #15
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	21d0      	movs	r1, #208	; 0xd0
 8000bd0:	f006 f8d0 	bl	8006d74 <HAL_I2C_Master_Receive>
	return val;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000036c 	.word	0x2000036c

08000be4 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000bee:	200e      	movs	r0, #14
 8000bf0:	f7ff ffd6 	bl	8000ba0 <DS3231_GetRegByte>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8000bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfc:	f023 0304 	bic.w	r3, r3, #4
 8000c00:	b25a      	sxtb	r2, r3
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4619      	mov	r1, r3
 8000c16:	200e      	movs	r0, #14
 8000c18:	f7ff ffa4 	bl	8000b64 <DS3231_SetRegByte>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000c2e:	200e      	movs	r0, #14
 8000c30:	f7ff ffb6 	bl	8000ba0 <DS3231_GetRegByte>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 8000c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3c:	f023 0318 	bic.w	r3, r3, #24
 8000c40:	b25a      	sxtb	r2, r3
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	f003 0318 	and.w	r3, r3, #24
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	200e      	movs	r0, #14
 8000c58:	f7ff ff84 	bl	8000b64 <DS3231_SetRegByte>
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000c6e:	200e      	movs	r0, #14
 8000c70:	f7ff ff96 	bl	8000ba0 <DS3231_GetRegByte>
 8000c74:	4603      	mov	r3, r0
 8000c76:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8000c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7c:	f023 0302 	bic.w	r3, r3, #2
 8000c80:	b25a      	sxtb	r2, r3
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	200e      	movs	r0, #14
 8000c98:	f7ff ff64 	bl	8000b64 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff ffa1 	bl	8000be4 <DS3231_SetInterruptMode>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8000cb0:	200f      	movs	r0, #15
 8000cb2:	f7ff ff75 	bl	8000ba0 <DS3231_GetRegByte>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f023 0302 	bic.w	r3, r3, #2
 8000cbc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f023 0302 	bic.w	r3, r3, #2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	200f      	movs	r0, #15
 8000cca:	f7ff ff4b 	bl	8000b64 <DS3231_SetRegByte>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000ce0:	200e      	movs	r0, #14
 8000ce2:	f7ff ff5d 	bl	8000ba0 <DS3231_GetRegByte>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	f023 0301 	bic.w	r3, r3, #1
 8000cf2:	b25a      	sxtb	r2, r3
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	200e      	movs	r0, #14
 8000d08:	f7ff ff2c 	bl	8000b64 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff ff69 	bl	8000be4 <DS3231_SetInterruptMode>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8000d20:	200f      	movs	r0, #15
 8000d22:	f7ff ff3d 	bl	8000ba0 <DS3231_GetRegByte>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	200f      	movs	r0, #15
 8000d3a:	f7ff ff13 	bl	8000b64 <DS3231_SetRegByte>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DS3231_SetAlarm1Second>:

/**
 * @brief Set alarm 1 second to match. Does not change alarm 1 matching mode.
 * @param second Second, 0 to 59.
 */
void DS3231_SetAlarm1Second(uint8_t second){
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_SECOND) & 0x80;
 8000d50:	2007      	movs	r0, #7
 8000d52:	f7ff ff25 	bl	8000ba0 <DS3231_GetRegByte>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d5c:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m1 = temp | (DS3231_EncodeBCD(second) & 0x3f);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fa71 	bl	8001248 <DS3231_EncodeBCD>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_SECOND, a1m1);
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f7ff fef0 	bl	8000b64 <DS3231_SetRegByte>
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <DS3231_SetAlarm1Minute>:

/**
 * @brief Set alarm 1 minute to match. Does not change alarm 1 matching mode.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetAlarm1Minute(uint8_t minute){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_MINUTE) & 0x80;
 8000d96:	2008      	movs	r0, #8
 8000d98:	f7ff ff02 	bl	8000ba0 <DS3231_GetRegByte>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000da2:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m2 = temp | (DS3231_EncodeBCD(minute) & 0x3f);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fa4e 	bl	8001248 <DS3231_EncodeBCD>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000db4:	b25a      	sxtb	r2, r3
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_MINUTE, a1m2);
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2008      	movs	r0, #8
 8000dc6:	f7ff fecd 	bl	8000b64 <DS3231_SetRegByte>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <DS3231_SetAlarm1Hour>:

/**
 * @brief Set alarm 1 hour to match. Does not change alarm 1 matching mode.
 * @param hour Hour, 0 to 59.
 */
void DS3231_SetAlarm1Hour(uint8_t hour_24mode){
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_HOUR) & 0x80;
 8000ddc:	2009      	movs	r0, #9
 8000dde:	f7ff fedf 	bl	8000ba0 <DS3231_GetRegByte>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000de8:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m3 = temp | (DS3231_EncodeBCD(hour_24mode) & 0x3f);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fa2b 	bl	8001248 <DS3231_EncodeBCD>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_HOUR, a1m3);
 8000e06:	7bbb      	ldrb	r3, [r7, #14]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2009      	movs	r0, #9
 8000e0c:	f7ff feaa 	bl	8000b64 <DS3231_SetRegByte>
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <DS3231_SetAlarm1Day>:

/**
 * @brief Set alarm 1 day. Alarm 1 can only be set to match either date or day. Does not change alarm 1 matching mode.
 * @param day Days since last Sunday, 1 to 7.
 */
void DS3231_SetAlarm1Day(uint8_t day){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_DATE) & 0x80;
 8000e22:	200a      	movs	r0, #10
 8000e24:	f7ff febc 	bl	8000ba0 <DS3231_GetRegByte>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e2e:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m4 = temp | (0x01 << DS3231_DYDT) | (DS3231_EncodeBCD(day) & 0x3f);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fa08 	bl	8001248 <DS3231_EncodeBCD>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4a:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_DATE, a1m4);
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	200a      	movs	r0, #10
 8000e52:	f7ff fe87 	bl	8000b64 <DS3231_SetRegByte>
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <DS3231_SetAlarm1Mode>:

/**
 * @brief Set alarm 1 mode.
 * @param alarmMode Alarm 1 mode, DS3231_A1_EVERY_S, DS3231_A1_MATCH_S, DS3231_A1_MATCH_S_M, DS3231_A1_MATCH_S_M_H, DS3231_A1_MATCH_S_M_H_DATE or DS3231_A1_MATCH_S_M_H_DAY.
 */
void DS3231_SetAlarm1Mode(DS3231_Alarm1Mode alarmMode){
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	temp = DS3231_GetRegByte(DS3231_A1_SECOND) & 0x7f;
 8000e68:	2007      	movs	r0, #7
 8000e6a:	f7ff fe99 	bl	8000ba0 <DS3231_GetRegByte>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e74:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_SECOND, temp | (((alarmMode >> 0) & 0x01) << DS3231_AXMY));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	01db      	lsls	r3, r3, #7
 8000e7a:	b25a      	sxtb	r2, r3
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	2007      	movs	r0, #7
 8000e8a:	f7ff fe6b 	bl	8000b64 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_MINUTE) & 0x7f;
 8000e8e:	2008      	movs	r0, #8
 8000e90:	f7ff fe86 	bl	8000ba0 <DS3231_GetRegByte>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e9a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_MINUTE, temp | (((alarmMode >> 1) & 0x01) << DS3231_AXMY));
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	085b      	lsrs	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	01db      	lsls	r3, r3, #7
 8000ea4:	b25a      	sxtb	r2, r3
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2008      	movs	r0, #8
 8000eb4:	f7ff fe56 	bl	8000b64 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_HOUR) & 0x7f;
 8000eb8:	2009      	movs	r0, #9
 8000eba:	f7ff fe71 	bl	8000ba0 <DS3231_GetRegByte>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ec4:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_HOUR, temp | (((alarmMode >> 2) & 0x01) << DS3231_AXMY));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	01db      	lsls	r3, r3, #7
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4619      	mov	r1, r3
 8000edc:	2009      	movs	r0, #9
 8000ede:	f7ff fe41 	bl	8000b64 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_DATE) & 0x7f;
 8000ee2:	200a      	movs	r0, #10
 8000ee4:	f7ff fe5c 	bl	8000ba0 <DS3231_GetRegByte>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eee:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_DATE, temp | (((alarmMode >> 3) & 0x01) << DS3231_AXMY) | (alarmMode & 0x80));
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	01db      	lsls	r3, r3, #7
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b25a      	sxtb	r2, r3
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4619      	mov	r1, r3
 8000f14:	200a      	movs	r0, #10
 8000f16:	f7ff fe25 	bl	8000b64 <DS3231_SetRegByte>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <DS3231_IsAlarm1Triggered>:

/**
 * @brief Check if alarm 1 is triggered.
 * @return A1F flag bit, 0 or 1.
 */
uint8_t DS3231_IsAlarm1Triggered(){
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_A1F) & 0x01;
 8000f26:	200f      	movs	r0, #15
 8000f28:	f7ff fe3a 	bl	8000ba0 <DS3231_GetRegByte>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f7ff fe2f 	bl	8000ba0 <DS3231_GetRegByte>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f966 	bl	8001216 <DS3231_DecodeBCD>
 8000f4a:	4603      	mov	r3, r0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 8000f54:	2004      	movs	r0, #4
 8000f56:	f7ff fe23 	bl	8000ba0 <DS3231_GetRegByte>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f95a 	bl	8001216 <DS3231_DecodeBCD>
 8000f62:	4603      	mov	r3, r0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8000f6c:	2005      	movs	r0, #5
 8000f6e:	f7ff fe17 	bl	8000ba0 <DS3231_GetRegByte>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f94b 	bl	8001216 <DS3231_DecodeBCD>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f7ff fe07 	bl	8000ba0 <DS3231_GetRegByte>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f93e 	bl	8001216 <DS3231_DecodeBCD>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8000f9e:	2005      	movs	r0, #5
 8000fa0:	f7ff fdfe 	bl	8000ba0 <DS3231_GetRegByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	09db      	lsrs	r3, r3, #7
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	0091      	lsls	r1, r2, #2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000fc4:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b29b      	uxth	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff fddf 	bl	8000ba0 <DS3231_GetRegByte>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f916 	bl	8001216 <DS3231_DecodeBCD>
 8000fea:	4603      	mov	r3, r0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff fdd3 	bl	8000ba0 <DS3231_GetRegByte>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f90a 	bl	8001216 <DS3231_DecodeBCD>
 8001002:	4603      	mov	r3, r0
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}

08001008 <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fdc7 	bl	8000ba0 <DS3231_GetRegByte>
 8001012:	4603      	mov	r3, r0
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8fe 	bl	8001216 <DS3231_DecodeBCD>
 800101a:	4603      	mov	r3, r0
}
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}

08001020 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f90b 	bl	8001248 <DS3231_EncodeBCD>
 8001032:	4603      	mov	r3, r0
 8001034:	4619      	mov	r1, r3
 8001036:	2003      	movs	r0, #3
 8001038:	f7ff fd94 	bl	8000b64 <DS3231_SetRegByte>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <DS3231_SetDate>:

/**
 * @brief Set the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS3231_SetDate(uint8_t date) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8f9 	bl	8001248 <DS3231_EncodeBCD>
 8001056:	4603      	mov	r3, r0
 8001058:	4619      	mov	r1, r3
 800105a:	2004      	movs	r0, #4
 800105c:	f7ff fd82 	bl	8000b64 <DS3231_SetRegByte>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <DS3231_SetMonth>:

/**
 * @brief Set the current month.
 * @param month Month, 1 to 12.
 */
void DS3231_SetMonth(uint8_t month) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8001072:	2005      	movs	r0, #5
 8001074:	f7ff fd94 	bl	8000ba0 <DS3231_GetRegByte>
 8001078:	4603      	mov	r3, r0
 800107a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800107e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f8e0 	bl	8001248 <DS3231_EncodeBCD>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	4313      	orrs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4619      	mov	r1, r3
 8001094:	2005      	movs	r0, #5
 8001096:	f7ff fd65 	bl	8000b64 <DS3231_SetRegByte>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <DS3231_SetYear>:

/**
 * @brief Set the current year.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetYear(uint16_t year) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
	uint8_t century = (year / 100) % 20;
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <DS3231_SetYear+0x80>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <DS3231_SetYear+0x84>)
 80010bc:	fba3 1302 	umull	r1, r3, r3, r2
 80010c0:	0919      	lsrs	r1, r3, #4
 80010c2:	460b      	mov	r3, r1
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	73fb      	strb	r3, [r7, #15]
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 80010d0:	2005      	movs	r0, #5
 80010d2:	f7ff fd65 	bl	8000ba0 <DS3231_GetRegByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010de:	b25a      	sxtb	r2, r3
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	4619      	mov	r1, r3
 80010f0:	2005      	movs	r0, #5
 80010f2:	f7ff fd37 	bl	8000b64 <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <DS3231_SetYear+0x80>)
 80010fa:	fba2 1203 	umull	r1, r2, r2, r3
 80010fe:	0952      	lsrs	r2, r2, #5
 8001100:	2164      	movs	r1, #100	; 0x64
 8001102:	fb01 f202 	mul.w	r2, r1, r2
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	b29b      	uxth	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f89b 	bl	8001248 <DS3231_EncodeBCD>
 8001112:	4603      	mov	r3, r0
 8001114:	4619      	mov	r1, r3
 8001116:	2006      	movs	r0, #6
 8001118:	f7ff fd24 	bl	8000b64 <DS3231_SetRegByte>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	51eb851f 	.word	0x51eb851f
 8001128:	cccccccd 	.word	0xcccccccd

0800112c <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f882 	bl	8001248 <DS3231_EncodeBCD>
 8001144:	4603      	mov	r3, r0
 8001146:	4619      	mov	r1, r3
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fd0b 	bl	8000b64 <DS3231_SetRegByte>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f870 	bl	8001248 <DS3231_EncodeBCD>
 8001168:	4603      	mov	r3, r0
 800116a:	4619      	mov	r1, r3
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fcf9 	bl	8000b64 <DS3231_SetRegByte>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f85e 	bl	8001248 <DS3231_EncodeBCD>
 800118c:	4603      	mov	r3, r0
 800118e:	4619      	mov	r1, r3
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fce7 	bl	8000b64 <DS3231_SetRegByte>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	717b      	strb	r3, [r7, #5]
	DS3231_SetHour(hour_24mode);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffba 	bl	800112c <DS3231_SetHour>
	DS3231_SetMinute(minute);
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffcb 	bl	8001156 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ffd9 	bl	800117a <DS3231_SetSecond>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <DS3231_SetFullDate>:
 * @param date Date, 0 to 31.
 * @param month Month, 1 to 12.
 * @param dow Days since last Sunday, 1 to 7.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetFullDate(uint8_t date, uint8_t month, uint8_t dow, uint16_t year){
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4604      	mov	r4, r0
 80011d8:	4608      	mov	r0, r1
 80011da:	4611      	mov	r1, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4623      	mov	r3, r4
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	4603      	mov	r3, r0
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	460b      	mov	r3, r1
 80011e8:	717b      	strb	r3, [r7, #5]
 80011ea:	4613      	mov	r3, r2
 80011ec:	807b      	strh	r3, [r7, #2]
	DS3231_SetDate(date);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff27 	bl	8001044 <DS3231_SetDate>
	DS3231_SetMonth(month);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff35 	bl	8001068 <DS3231_SetMonth>
	DS3231_SetDayOfWeek(dow);
 80011fe:	797b      	ldrb	r3, [r7, #5]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff0d 	bl	8001020 <DS3231_SetDayOfWeek>
	DS3231_SetYear(year);
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff4b 	bl	80010a4 <DS3231_SetYear>
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}

08001216 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	4413      	add	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	b2da      	uxtb	r2, r3
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4413      	add	r3, r2
 800123a:	b2db      	uxtb	r3, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <DS3231_EncodeBCD+0x40>)
 8001256:	fba3 1302 	umull	r1, r3, r3, r2
 800125a:	08d9      	lsrs	r1, r3, #3
 800125c:	460b      	mov	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4907      	ldr	r1, [pc, #28]	; (8001288 <DS3231_EncodeBCD+0x40>)
 800126c:	fba1 1303 	umull	r1, r3, r1, r3
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4413      	add	r3, r2
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	cccccccd 	.word	0xcccccccd

0800128c <MX_GPIO_Init>:
     PC5   ------> ETH_RXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a2:	4b9c      	ldr	r3, [pc, #624]	; (8001514 <MX_GPIO_Init+0x288>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a9b      	ldr	r2, [pc, #620]	; (8001514 <MX_GPIO_Init+0x288>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b99      	ldr	r3, [pc, #612]	; (8001514 <MX_GPIO_Init+0x288>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b96      	ldr	r3, [pc, #600]	; (8001514 <MX_GPIO_Init+0x288>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a95      	ldr	r2, [pc, #596]	; (8001514 <MX_GPIO_Init+0x288>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b93      	ldr	r3, [pc, #588]	; (8001514 <MX_GPIO_Init+0x288>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d2:	4b90      	ldr	r3, [pc, #576]	; (8001514 <MX_GPIO_Init+0x288>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a8f      	ldr	r2, [pc, #572]	; (8001514 <MX_GPIO_Init+0x288>)
 80012d8:	f043 0320 	orr.w	r3, r3, #32
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b8d      	ldr	r3, [pc, #564]	; (8001514 <MX_GPIO_Init+0x288>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	4b8a      	ldr	r3, [pc, #552]	; (8001514 <MX_GPIO_Init+0x288>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a89      	ldr	r2, [pc, #548]	; (8001514 <MX_GPIO_Init+0x288>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b87      	ldr	r3, [pc, #540]	; (8001514 <MX_GPIO_Init+0x288>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b84      	ldr	r3, [pc, #528]	; (8001514 <MX_GPIO_Init+0x288>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a83      	ldr	r2, [pc, #524]	; (8001514 <MX_GPIO_Init+0x288>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b81      	ldr	r3, [pc, #516]	; (8001514 <MX_GPIO_Init+0x288>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b7e      	ldr	r3, [pc, #504]	; (8001514 <MX_GPIO_Init+0x288>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a7d      	ldr	r2, [pc, #500]	; (8001514 <MX_GPIO_Init+0x288>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b7b      	ldr	r3, [pc, #492]	; (8001514 <MX_GPIO_Init+0x288>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	4b78      	ldr	r3, [pc, #480]	; (8001514 <MX_GPIO_Init+0x288>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a77      	ldr	r2, [pc, #476]	; (8001514 <MX_GPIO_Init+0x288>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b75      	ldr	r3, [pc, #468]	; (8001514 <MX_GPIO_Init+0x288>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134a:	4b72      	ldr	r3, [pc, #456]	; (8001514 <MX_GPIO_Init+0x288>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a71      	ldr	r2, [pc, #452]	; (8001514 <MX_GPIO_Init+0x288>)
 8001350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b6f      	ldr	r3, [pc, #444]	; (8001514 <MX_GPIO_Init+0x288>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2168      	movs	r1, #104	; 0x68
 8001366:	486c      	ldr	r0, [pc, #432]	; (8001518 <MX_GPIO_Init+0x28c>)
 8001368:	f005 fb42 	bl	80069f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	486a      	ldr	r0, [pc, #424]	; (800151c <MX_GPIO_Init+0x290>)
 8001372:	f005 fb3d 	bl	80069f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800137c:	4868      	ldr	r0, [pc, #416]	; (8001520 <MX_GPIO_Init+0x294>)
 800137e:	f005 fb37 	bl	80069f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	4867      	ldr	r0, [pc, #412]	; (8001524 <MX_GPIO_Init+0x298>)
 8001388:	f005 fb32 	bl	80069f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 800138c:	2314      	movs	r3, #20
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	485e      	ldr	r0, [pc, #376]	; (8001518 <MX_GPIO_Init+0x28c>)
 80013a0:	f005 f962 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80013a4:	2368      	movs	r3, #104	; 0x68
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4857      	ldr	r0, [pc, #348]	; (8001518 <MX_GPIO_Init+0x28c>)
 80013bc:	f005 f954 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	4852      	ldr	r0, [pc, #328]	; (8001520 <MX_GPIO_Init+0x294>)
 80013d6:	f005 f947 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013da:	2332      	movs	r3, #50	; 0x32
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ea:	230b      	movs	r3, #11
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	484a      	ldr	r0, [pc, #296]	; (8001520 <MX_GPIO_Init+0x294>)
 80013f6:	f005 f937 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013fa:	2386      	movs	r3, #134	; 0x86
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800140a:	230b      	movs	r3, #11
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4844      	ldr	r0, [pc, #272]	; (8001528 <MX_GPIO_Init+0x29c>)
 8001416:	f005 f927 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800141a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001420:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001426:	2301      	movs	r3, #1
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4839      	ldr	r0, [pc, #228]	; (8001518 <MX_GPIO_Init+0x28c>)
 8001432:	f005 f919 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001436:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4836      	ldr	r0, [pc, #216]	; (8001524 <MX_GPIO_Init+0x298>)
 800144c:	f005 f90c 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	482d      	ldr	r0, [pc, #180]	; (800151c <MX_GPIO_Init+0x290>)
 8001468:	f005 f8fe 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4827      	ldr	r0, [pc, #156]	; (800151c <MX_GPIO_Init+0x290>)
 8001480:	f005 f8f2 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8001484:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	4820      	ldr	r0, [pc, #128]	; (8001520 <MX_GPIO_Init+0x294>)
 800149e:	f005 f8e3 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <MX_GPIO_Init+0x29c>)
 80014b8:	f005 f8d6 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ce:	230b      	movs	r3, #11
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4810      	ldr	r0, [pc, #64]	; (800151c <MX_GPIO_Init+0x290>)
 80014da:	f005 f8c5 	bl	8006668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <MX_GPIO_Init+0x298>)
 80014f6:	f005 f8b7 	bl	8006668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	f004 fd03 	bl	8005f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001504:	2028      	movs	r0, #40	; 0x28
 8001506:	f004 fd1c 	bl	8005f42 <HAL_NVIC_EnableIRQ>

}
 800150a:	bf00      	nop
 800150c:	3738      	adds	r7, #56	; 0x38
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40021000 	.word	0x40021000
 800151c:	40021800 	.word	0x40021800
 8001520:	40020800 	.word	0x40020800
 8001524:	40020400 	.word	0x40020400
 8001528:	40020000 	.word	0x40020000

0800152c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <MX_I2C1_Init+0x7c>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_I2C1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_I2C1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001568:	f005 fa80 	bl	8006a6c <HAL_I2C_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001572:	f002 fa99 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_I2C1_Init+0x74>)
 800157a:	f005 ff5d 	bl	8007438 <HAL_I2CEx_ConfigAnalogFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001584:	f002 fa90 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_I2C1_Init+0x74>)
 800158c:	f005 ff9f 	bl	80074ce <HAL_I2CEx_ConfigDigitalFilter>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001596:	f002 fa87 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000370 	.word	0x20000370
 80015a4:	40005400 	.word	0x40005400
 80015a8:	00c0eaff 	.word	0x00c0eaff

080015ac <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <MX_I2C4_Init+0x74>)
 80015b2:	4a1c      	ldr	r2, [pc, #112]	; (8001624 <MX_I2C4_Init+0x78>)
 80015b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_I2C4_Init+0x74>)
 80015b8:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <MX_I2C4_Init+0x7c>)
 80015ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_I2C4_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_I2C4_Init+0x74>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_I2C4_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_I2C4_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_I2C4_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_I2C4_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_I2C4_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <MX_I2C4_Init+0x74>)
 80015e8:	f005 fa40 	bl	8006a6c <HAL_I2C_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80015f2:	f002 fa59 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4809      	ldr	r0, [pc, #36]	; (8001620 <MX_I2C4_Init+0x74>)
 80015fa:	f005 ff1d 	bl	8007438 <HAL_I2CEx_ConfigAnalogFilter>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001604:	f002 fa50 	bl	8003aa8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001608:	2100      	movs	r1, #0
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_I2C4_Init+0x74>)
 800160c:	f005 ff5f 	bl	80074ce <HAL_I2CEx_ConfigDigitalFilter>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001616:	f002 fa47 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200003c4 	.word	0x200003c4
 8001624:	40006000 	.word	0x40006000
 8001628:	00c0eaff 	.word	0x00c0eaff

0800162c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0b0      	sub	sp, #192	; 0xc0
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2290      	movs	r2, #144	; 0x90
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00a fa56 	bl	800bafe <memset>
  if(i2cHandle->Instance==I2C1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a44      	ldr	r2, [pc, #272]	; (8001768 <HAL_I2C_MspInit+0x13c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d13e      	bne.n	80016da <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800165c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001660:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4618      	mov	r0, r3
 800166e:	f006 fcaf 	bl	8007fd0 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001678:	f002 fa16 	bl	8003aa8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_I2C_MspInit+0x140>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a3a      	ldr	r2, [pc, #232]	; (800176c <HAL_I2C_MspInit+0x140>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	6313      	str	r3, [r2, #48]	; 0x30
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_I2C_MspInit+0x140>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001694:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169c:	2312      	movs	r3, #18
 800169e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ae:	2304      	movs	r3, #4
 80016b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016b8:	4619      	mov	r1, r3
 80016ba:	482d      	ldr	r0, [pc, #180]	; (8001770 <HAL_I2C_MspInit+0x144>)
 80016bc:	f004 ffd4 	bl	8006668 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_I2C_MspInit+0x140>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a29      	ldr	r2, [pc, #164]	; (800176c <HAL_I2C_MspInit+0x140>)
 80016c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_I2C_MspInit+0x140>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80016d8:	e042      	b.n	8001760 <HAL_I2C_MspInit+0x134>
  else if(i2cHandle->Instance==I2C4)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a25      	ldr	r2, [pc, #148]	; (8001774 <HAL_I2C_MspInit+0x148>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d13d      	bne.n	8001760 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80016e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4618      	mov	r0, r3
 80016f6:	f006 fc6b 	bl	8007fd0 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001700:	f002 f9d2 	bl	8003aa8 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_I2C_MspInit+0x140>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_I2C_MspInit+0x140>)
 800170a:	f043 0320 	orr.w	r3, r3, #32
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_I2C_MspInit+0x140>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800171c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001720:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001724:	2312      	movs	r3, #18
 8001726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001736:	2304      	movs	r3, #4
 8001738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800173c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <HAL_I2C_MspInit+0x14c>)
 8001744:	f004 ff90 	bl	8006668 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_I2C_MspInit+0x140>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_I2C_MspInit+0x140>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_I2C_MspInit+0x140>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	bf00      	nop
 8001762:	37c0      	adds	r7, #192	; 0xc0
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40005400 	.word	0x40005400
 800176c:	40023800 	.word	0x40023800
 8001770:	40020400 	.word	0x40020400
 8001774:	40006000 	.word	0x40006000
 8001778:	40021400 	.word	0x40021400

0800177c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001780:	f3bf 8f4f 	dsb	sy
}
 8001784:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001786:	f3bf 8f6f 	isb	sy
}
 800178a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <SCB_EnableICache+0x48>)
 800178e:	2200      	movs	r2, #0
 8001790:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001794:	f3bf 8f4f 	dsb	sy
}
 8001798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800179a:	f3bf 8f6f 	isb	sy
}
 800179e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <SCB_EnableICache+0x48>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <SCB_EnableICache+0x48>)
 80017a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ac:	f3bf 8f4f 	dsb	sy
}
 80017b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017b2:	f3bf 8f6f 	isb	sy
}
 80017b6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <SCB_EnableDCache+0x84>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017d6:	f3bf 8f4f 	dsb	sy
}
 80017da:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <SCB_EnableDCache+0x84>)
 80017de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017e2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0b5b      	lsrs	r3, r3, #13
 80017e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017ec:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001800:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001806:	4911      	ldr	r1, [pc, #68]	; (800184c <SCB_EnableDCache+0x84>)
 8001808:	4313      	orrs	r3, r2
 800180a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ef      	bne.n	80017f8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1e5a      	subs	r2, r3, #1
 800181c:	60fa      	str	r2, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1e5      	bne.n	80017ee <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001822:	f3bf 8f4f 	dsb	sy
}
 8001826:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <SCB_EnableDCache+0x84>)
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <SCB_EnableDCache+0x84>)
 800182e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001832:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001834:	f3bf 8f4f 	dsb	sy
}
 8001838:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183a:	f3bf 8f6f 	isb	sy
}
 800183e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <sendStringViaUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendStringViaUART(const char *str) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7fe fd41 	bl	80002e0 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <sendStringViaUART+0x28>)
 800186a:	f008 ff17 	bl	800a69c <HAL_UART_Transmit>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	200007cc 	.word	0x200007cc

0800187c <generateAndSortRandomNumbers>:

void generateAndSortRandomNumbers(uint32_t array[], uint32_t size) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b09e      	sub	sp, #120	; 0x78
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < size; i++) {
 8001886:	2300      	movs	r3, #0
 8001888:	677b      	str	r3, [r7, #116]	; 0x74
 800188a:	e012      	b.n	80018b2 <generateAndSortRandomNumbers+0x36>
    array[i] = abs(HAL_RNG_GetRandomNumber(&hrng)) % 4 + 1;
 800188c:	481b      	ldr	r0, [pc, #108]	; (80018fc <generateAndSortRandomNumbers+0x80>)
 800188e:	f007 f847 	bl	8008920 <HAL_RNG_GetRandomNumber>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	bfb8      	it	lt
 8001898:	425b      	neglt	r3, r3
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	460a      	mov	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < size; i++) {
 80018ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ae:	3301      	adds	r3, #1
 80018b0:	677b      	str	r3, [r7, #116]	; 0x74
 80018b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3e8      	bcc.n	800188c <generateAndSortRandomNumbers+0x10>
  }

  char message[100];

  for (int i = 0; i < 4; i++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	673b      	str	r3, [r7, #112]	; 0x70
 80018be:	e012      	b.n	80018e6 <generateAndSortRandomNumbers+0x6a>
    sprintf(message, "%d ", array[i]);
 80018c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	490c      	ldr	r1, [pc, #48]	; (8001900 <generateAndSortRandomNumbers+0x84>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00a f8b1 	bl	800ba38 <siprintf>
    sendStringViaUART(message);
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ffb8 	bl	8001850 <sendStringViaUART>
  for (int i = 0; i < 4; i++) {
 80018e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e2:	3301      	adds	r3, #1
 80018e4:	673b      	str	r3, [r7, #112]	; 0x70
 80018e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	dde9      	ble.n	80018c0 <generateAndSortRandomNumbers+0x44>
  }
  sendStringViaUART(space);
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <generateAndSortRandomNumbers+0x88>)
 80018ee:	f7ff ffaf 	bl	8001850 <sendStringViaUART>
}
 80018f2:	bf00      	nop
 80018f4:	3778      	adds	r7, #120	; 0x78
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000058c 	.word	0x2000058c
 8001900:	0800e9ac 	.word	0x0800e9ac
 8001904:	2000006c 	.word	0x2000006c

08001908 <compareArrays>:

int compareArrays(int array1[], int array2[], int size) {
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
    int match = 1;  // Assume arrays match initially
 8001914:	2301      	movs	r3, #1
 8001916:	617b      	str	r3, [r7, #20]

    // Compare elements of the arrays
    for (int i = 0; i < size; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	e011      	b.n	8001942 <compareArrays+0x3a>
        if (array1[i] != array2[i]) {
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4413      	add	r3, r2
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	440b      	add	r3, r1
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d002      	beq.n	800193c <compareArrays+0x34>
            match = 0;  // Arrays do not match
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
            break;
 800193a:	e006      	b.n	800194a <compareArrays+0x42>
    for (int i = 0; i < size; i++) {
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	3301      	adds	r3, #1
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbe9      	blt.n	800191e <compareArrays+0x16>
        }
    }

    if (match) {
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <compareArrays+0x4c>
    	return 1;
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <compareArrays+0x4e>
    	//char message[] = "Match\r\n";
    	//HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
    } else {
    	return 0;
 8001954:	2300      	movs	r3, #0
    	//char message[] = "Not Match\r\n";
    	//HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
    }
}
 8001956:	4618      	mov	r0, r3
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <letTheMusicLouderThanAnySound>:

void letTheMusicLouderThanAnySound(float dt){
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	ed87 0a01 	vstr	s0, [r7, #4]


	float dutycycle = dt;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60fb      	str	r3, [r7, #12]
	    htim2.Instance -> CCR3 = (24-1) * dutycycle;
 8001972:	edd7 7a03 	vldr	s15, [r7, #12]
 8001976:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 800197a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <letTheMusicLouderThanAnySound+0x5c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001986:	ee17 2a90 	vmov	r2, s15
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800198c:	210c      	movs	r1, #12
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <letTheMusicLouderThanAnySound+0x5c>)
 8001990:	f007 fca4 	bl	80092dc <HAL_TIM_PWM_Start>
	    HAL_Delay(1000);
 8001994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001998:	f003 fd8a 	bl	80054b0 <HAL_Delay>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800199c:	210c      	movs	r1, #12
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <letTheMusicLouderThanAnySound+0x5c>)
 80019a0:	f007 fd96 	bl	80094d0 <HAL_TIM_PWM_Stop>
	    pwm = (GPIOA->IDR & GPIO_PIN_3) >> 3;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <letTheMusicLouderThanAnySound+0x60>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <letTheMusicLouderThanAnySound+0x64>)
 80019b4:	701a      	strb	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000650 	.word	0x20000650
 80019c4:	40020000 	.word	0x40020000
 80019c8:	20000534 	.word	0x20000534

080019cc <pabfai>:

void pabfai(int dt){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]


		float duty = (float)dt/100.0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019de:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a20 <pabfai+0x54>
 80019e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e6:	edc7 7a03 	vstr	s15, [r7, #12]
	    htim5.Instance -> CCR3 = (1000-1) * duty;
 80019ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001a24 <pabfai+0x58>
 80019f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <pabfai+0x5c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fe:	ee17 2a90 	vmov	r2, s15
 8001a02:	63da      	str	r2, [r3, #60]	; 0x3c
	    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001a04:	2100      	movs	r1, #0
 8001a06:	4808      	ldr	r0, [pc, #32]	; (8001a28 <pabfai+0x5c>)
 8001a08:	f007 fc68 	bl	80092dc <HAL_TIM_PWM_Start>
//	    HAL_Delay(1000);
//	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_);
	    pwm = (GPIOA->IDR & GPIO_PIN_0) >> 9;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <pabfai+0x60>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <pabfai+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]

}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	42c80000 	.word	0x42c80000
 8001a24:	4479c000 	.word	0x4479c000
 8001a28:	20000734 	.word	0x20000734
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	20000534 	.word	0x20000534

08001a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0a0      	sub	sp, #128	; 0x80
 8001a38:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001a3a:	f7ff fe9f 	bl	800177c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001a3e:	f7ff fec3 	bl	80017c8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a42:	f003 fccf 	bl	80053e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a46:	f000 fa53 	bl	8001ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4a:	f7ff fc1f 	bl	800128c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a4e:	f7ff f851 	bl	8000af4 <MX_DMA_Init>
  MX_SPI5_Init();
 8001a52:	f002 f875 	bl	8003b40 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001a56:	f002 fa49 	bl	8003eec <MX_TIM1_Init>
  MX_RNG_Init();
 8001a5a:	f002 f829 	bl	8003ab0 <MX_RNG_Init>
  MX_I2C4_Init();
 8001a5e:	f7ff fda5 	bl	80015ac <MX_I2C4_Init>
  MX_TIM2_Init();
 8001a62:	f002 faef 	bl	8004044 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001a66:	f7ff fd61 	bl	800152c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001a6a:	f002 fdd5 	bl	8004618 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001a6e:	f002 fb43 	bl	80040f8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001a72:	f002 fda1 	bl	80045b8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001a76:	f7fe ff6b 	bl	8000950 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001a7a:	f002 fbd9 	bl	8004230 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001a7e:	f002 fc4f 	bl	8004320 <MX_TIM9_Init>
  MX_TIM4_Init();
 8001a82:	f002 fb87 	bl	8004194 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8001a86:	f003 f9a5 	bl	8004dd4 <ILI9341_Init>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim1);
 8001a8a:	489a      	ldr	r0, [pc, #616]	; (8001cf4 <main+0x2c0>)
 8001a8c:	f007 fb56 	bl	800913c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001a90:	4899      	ldr	r0, [pc, #612]	; (8001cf8 <main+0x2c4>)
 8001a92:	f007 fb53 	bl	800913c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Init(&htim5);
 8001a96:	4899      	ldr	r0, [pc, #612]	; (8001cfc <main+0x2c8>)
 8001a98:	f007 fbc8 	bl	800922c <HAL_TIM_PWM_Init>

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4897      	ldr	r0, [pc, #604]	; (8001cfc <main+0x2c8>)
 8001aa0:	f007 fc1c 	bl	80092dc <HAL_TIM_PWM_Start>


  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);

  HAL_UART_Init(&huart3);
 8001aa4:	4896      	ldr	r0, [pc, #600]	; (8001d00 <main+0x2cc>)
 8001aa6:	f008 fdab 	bl	800a600 <HAL_UART_Init>
  uint16_t mapColorByHourAndMinute(uint16_t hour, uint16_t minute);
  uint16_t complementaryColor(uint16_t color);



  DF_Init(30);
 8001aaa:	201e      	movs	r0, #30
 8001aac:	f7fe fe0e 	bl	80006cc <DF_Init>
	DF_PlayFromStart();
 8001ab0:	f7fe fddc 	bl	800066c <DF_PlayFromStart>
	DF_SetEQ(3);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f7fe fde5 	bl	8000684 <DF_SetEQ>
	DS3231_Init(&hi2c4);
 8001aba:	4892      	ldr	r0, [pc, #584]	; (8001d04 <main+0x2d0>)
 8001abc:	f7ff f838 	bl	8000b30 <DS3231_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
	__disable_irq();
	//Set interrupt mode to square wave mode, enable square wave interrupt at pin 3.
	DS3231_SetInterruptMode(DS3231_SQUARE_WAVE_INTERRUPT);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff f88d 	bl	8000be4 <DS3231_SetInterruptMode>
	//Set interrupting frequency to 1 Hz.
	DS3231_SetRateSelect(DS3231_1HZ);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff f8aa 	bl	8000c24 <DS3231_SetRateSelect>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ad0:	b662      	cpsie	i
}
 8001ad2:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    ILI9341_Fill_Screen(WHITE);
 8001ad4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ad8:	f003 fb28 	bl	800512c <ILI9341_Fill_Screen>
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f003 f91b 	bl	8004d18 <ILI9341_Set_Rotation>
     starttime = count;
 8001ae2:	4b89      	ldr	r3, [pc, #548]	; (8001d08 <main+0x2d4>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a89      	ldr	r2, [pc, #548]	; (8001d0c <main+0x2d8>)
 8001ae8:	6013      	str	r3, [r2, #0]

     cmdBuffer[0] = 0x03;
 8001aea:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <main+0x2dc>)
 8001aec:	2203      	movs	r2, #3
 8001aee:	701a      	strb	r2, [r3, #0]
     cmdBuffer[1] = 0x00;
 8001af0:	4b87      	ldr	r3, [pc, #540]	; (8001d10 <main+0x2dc>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	705a      	strb	r2, [r3, #1]
     cmdBuffer[2] = 0x04;
 8001af6:	4b86      	ldr	r3, [pc, #536]	; (8001d10 <main+0x2dc>)
 8001af8:	2204      	movs	r2, #4
 8001afa:	709a      	strb	r2, [r3, #2]
     //DS3231_SetFullDate(13, 10, 5, 2023);
     DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff f871 	bl	8000be4 <DS3231_SetInterruptMode>
	DS3231_ClearAlarm1Flag();
 8001b02:	f7ff f90a 	bl	8000d1a <DS3231_ClearAlarm1Flag>

	DS3231_EnableAlarm1(DS3231_ENABLED);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff f8e5 	bl	8000cd6 <DS3231_EnableAlarm1>
	DS3231_SetAlarm1Mode(DS3231_A1_MATCH_S_M_H_DAY);
 8001b0c:	2080      	movs	r0, #128	; 0x80
 8001b0e:	f7ff f9a6 	bl	8000e5e <DS3231_SetAlarm1Mode>
//	DS3231_SetAlarm1Second(5);
//	DS3231_SetAlarm1Minute(29);
//	DS3231_SetAlarm1Hour(19);
     ILI9341_Draw_Rectangle(0,0, 320,200,  WHITE);
 8001b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	23c8      	movs	r3, #200	; 0xc8
 8001b1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2000      	movs	r0, #0
 8001b22:	f003 fc03 	bl	800532c <ILI9341_Draw_Rectangle>
//	   	    pwm = (GPIOA->IDR & GPIO_PIN_3) >> 3;

	  // letTheMusicLouderThanAnySound(0.7);


	   HAL_ADC_Start_DMA(&hadc1, ADC_read, 2);
 8001b26:	2202      	movs	r2, #2
 8001b28:	497a      	ldr	r1, [pc, #488]	; (8001d14 <main+0x2e0>)
 8001b2a:	487b      	ldr	r0, [pc, #492]	; (8001d18 <main+0x2e4>)
 8001b2c:	f003 fd28 	bl	8005580 <HAL_ADC_Start_DMA>
	   char message[20];
	   sprintf(message, "%d %d\r\n", ADC_read[0],ADC_read[1]);
 8001b30:	4b78      	ldr	r3, [pc, #480]	; (8001d14 <main+0x2e0>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b77      	ldr	r3, [pc, #476]	; (8001d14 <main+0x2e0>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001b3c:	4977      	ldr	r1, [pc, #476]	; (8001d1c <main+0x2e8>)
 8001b3e:	f009 ff7b 	bl	800ba38 <siprintf>
	   HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 8001b42:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	2214      	movs	r2, #20
 8001b4c:	486c      	ldr	r0, [pc, #432]	; (8001d00 <main+0x2cc>)
 8001b4e:	f008 fda5 	bl	800a69c <HAL_UART_Transmit>




	   int TFT_level = ADC_read[1]*100/4095;
 8001b52:	4b70      	ldr	r3, [pc, #448]	; (8001d14 <main+0x2e0>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2264      	movs	r2, #100	; 0x64
 8001b58:	fb03 f202 	mul.w	r2, r3, r2
 8001b5c:	4b70      	ldr	r3, [pc, #448]	; (8001d20 <main+0x2ec>)
 8001b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b62:	1ad2      	subs	r2, r2, r3
 8001b64:	0852      	lsrs	r2, r2, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	0adb      	lsrs	r3, r3, #11
 8001b6a:	677b      	str	r3, [r7, #116]	; 0x74
	   char message2[20];
	   sprintf(message2, "TFT %d\r\n",TFT_level);
 8001b6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b72:	496c      	ldr	r1, [pc, #432]	; (8001d24 <main+0x2f0>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f009 ff5f 	bl	800ba38 <siprintf>
	  	   HAL_UART_Transmit(&huart3, (uint8_t *)message2, sizeof(message2), HAL_MAX_DELAY);
 8001b7a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	2214      	movs	r2, #20
 8001b84:	485e      	ldr	r0, [pc, #376]	; (8001d00 <main+0x2cc>)
 8001b86:	f008 fd89 	bl	800a69c <HAL_UART_Transmit>


	   pabfai(TFT_level);
 8001b8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b8c:	f7ff ff1e 	bl	80019cc <pabfai>

	   // Debug time Tera term
	   if ( count - teratermTime > 3000){
 8001b90:	4b5d      	ldr	r3, [pc, #372]	; (8001d08 <main+0x2d4>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b64      	ldr	r3, [pc, #400]	; (8001d28 <main+0x2f4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d914      	bls.n	8001bcc <main+0x198>
		   char message[20];
		   sprintf(message, "%d\r\n", screen);
 8001ba2:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <main+0x2f8>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bac:	4960      	ldr	r1, [pc, #384]	; (8001d30 <main+0x2fc>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f009 ff42 	bl	800ba38 <siprintf>
		   HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 8001bb4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	2214      	movs	r2, #20
 8001bbe:	4850      	ldr	r0, [pc, #320]	; (8001d00 <main+0x2cc>)
 8001bc0:	f008 fd6c 	bl	800a69c <HAL_UART_Transmit>
		   teratermTime = count;
 8001bc4:	4b50      	ldr	r3, [pc, #320]	; (8001d08 <main+0x2d4>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a57      	ldr	r2, [pc, #348]	; (8001d28 <main+0x2f4>)
 8001bca:	6013      	str	r3, [r2, #0]

	   }

	   // If Alarm trigger
		if(alarmtrigger)
 8001bcc:	4b59      	ldr	r3, [pc, #356]	; (8001d34 <main+0x300>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <main+0x1b6>
		{
			ILI9341_Fill_Screen(WHITE);
 8001bd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bd8:	f003 faa8 	bl	800512c <ILI9341_Fill_Screen>
			alarmtime = count;
 8001bdc:	4b4a      	ldr	r3, [pc, #296]	; (8001d08 <main+0x2d4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a55      	ldr	r2, [pc, #340]	; (8001d38 <main+0x304>)
 8001be2:	6013      	str	r3, [r2, #0]
			alarm();
 8001be4:	f000 fab4 	bl	8002150 <alarm>
 8001be8:	e79d      	b.n	8001b26 <main+0xf2>
		   //alarmtrigger = 0;
		   //HAL_Delay(3000)
		}
		else{
	   // Screen state looping
	   switch(screen){
 8001bea:	4b50      	ldr	r3, [pc, #320]	; (8001d2c <main+0x2f8>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	f200 8146 	bhi.w	8001e82 <main+0x44e>
 8001bf6:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <main+0x1c8>)
 8001bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfc:	08001c0d 	.word	0x08001c0d
 8001c00:	08001d5d 	.word	0x08001d5d
 8001c04:	08001e05 	.word	0x08001e05
 8001c08:	08001e63 	.word	0x08001e63
	   case 1: // First state : show time
		   // Update screen every second

		   MusicController(ADC_read[0]);
 8001c0c:	4b41      	ldr	r3, [pc, #260]	; (8001d14 <main+0x2e0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fe07 	bl	8000824 <MusicController>


		   if((count-starttime) > 1000){
 8001c16:	4b3c      	ldr	r3, [pc, #240]	; (8001d08 <main+0x2d4>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b3c      	ldr	r3, [pc, #240]	; (8001d0c <main+0x2d8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c24:	d92f      	bls.n	8001c86 <main+0x252>
				updateT();
 8001c26:	f000 fc0d 	bl	8002444 <updateT>
				bgcolor = mapColorByHourAndMinute(hur,min);
 8001c2a:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <main+0x308>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4a43      	ldr	r2, [pc, #268]	; (8001d40 <main+0x30c>)
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	b292      	uxth	r2, r2
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fc6b 	bl	8003514 <mapColorByHourAndMinute>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <main+0x310>)
 8001c44:	801a      	strh	r2, [r3, #0]
				fontcolor = complementaryColor(bgcolor);
 8001c46:	4b3f      	ldr	r3, [pc, #252]	; (8001d44 <main+0x310>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fce2 	bl	8003614 <complementaryColor>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b3c      	ldr	r3, [pc, #240]	; (8001d48 <main+0x314>)
 8001c56:	801a      	strh	r2, [r3, #0]

				if (old_min != min){
 8001c58:	4b39      	ldr	r3, [pc, #228]	; (8001d40 <main+0x30c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <main+0x318>)
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d009      	beq.n	8001c7a <main+0x246>
					old_min = min;
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <main+0x30c>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	4b37      	ldr	r3, [pc, #220]	; (8001d4c <main+0x318>)
 8001c6e:	801a      	strh	r2, [r3, #0]
					ILI9341_Fill_Screen(bgcolor);
 8001c70:	4b34      	ldr	r3, [pc, #208]	; (8001d44 <main+0x310>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f003 fa59 	bl	800512c <ILI9341_Fill_Screen>
				}

				showT();
 8001c7a:	f000 fc23 	bl	80024c4 <showT>
				starttime = count;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <main+0x2d4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a22      	ldr	r2, [pc, #136]	; (8001d0c <main+0x2d8>)
 8001c84:	6013      	str	r3, [r2, #0]
			}
//		   Check_Key();

			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001c86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c8a:	4831      	ldr	r0, [pc, #196]	; (8001d50 <main+0x31c>)
 8001c8c:	f004 fe98 	bl	80069c0 <HAL_GPIO_ReadPin>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d10f      	bne.n	8001cb6 <main+0x282>
				 HAL_Delay(50);
 8001c96:	2032      	movs	r0, #50	; 0x32
 8001c98:	f003 fc0a 	bl	80054b0 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001c9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca0:	482b      	ldr	r0, [pc, #172]	; (8001d50 <main+0x31c>)
 8001ca2:	f004 fe8d 	bl	80069c0 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d104      	bne.n	8001cb6 <main+0x282>
					DS3231_SetFullTime(21 , 12, 30);
 8001cac:	221e      	movs	r2, #30
 8001cae:	210c      	movs	r1, #12
 8001cb0:	2015      	movs	r0, #21
 8001cb2:	f7ff fa74 	bl	800119e <DS3231_SetFullTime>
//			   alarmtime = count;
//			   alarmtrigger = 0;
//			   //HAL_Delay(3000)
//			}
			// Go to state 2
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && count - clicktime > 1000){
 8001cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cba:	4826      	ldr	r0, [pc, #152]	; (8001d54 <main+0x320>)
 8001cbc:	f004 fe80 	bl	80069c0 <HAL_GPIO_ReadPin>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f040 80d8 	bne.w	8001e78 <main+0x444>
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <main+0x2d4>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <main+0x324>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cd6:	f240 80cf 	bls.w	8001e78 <main+0x444>
					ILI9341_Fill_Screen(WHITE);
 8001cda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cde:	f003 fa25 	bl	800512c <ILI9341_Fill_Screen>
					clicktime = count;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <main+0x2d4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	; (8001d58 <main+0x324>)
 8001ce8:	6013      	str	r3, [r2, #0]
					screen = 2;
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <main+0x2f8>)
 8001cec:	2202      	movs	r2, #2
 8001cee:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001cf0:	e0c2      	b.n	8001e78 <main+0x444>
 8001cf2:	bf00      	nop
 8001cf4:	20000604 	.word	0x20000604
 8001cf8:	2000069c 	.word	0x2000069c
 8001cfc:	20000734 	.word	0x20000734
 8001d00:	200007cc 	.word	0x200007cc
 8001d04:	200003c4 	.word	0x200003c4
 8001d08:	20000418 	.word	0x20000418
 8001d0c:	2000041c 	.word	0x2000041c
 8001d10:	20000448 	.word	0x20000448
 8001d14:	20000550 	.word	0x20000550
 8001d18:	200002c4 	.word	0x200002c4
 8001d1c:	0800e9b0 	.word	0x0800e9b0
 8001d20:	00100101 	.word	0x00100101
 8001d24:	0800e9b8 	.word	0x0800e9b8
 8001d28:	20000540 	.word	0x20000540
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	0800e9c4 	.word	0x0800e9c4
 8001d34:	2000043c 	.word	0x2000043c
 8001d38:	20000420 	.word	0x20000420
 8001d3c:	20000426 	.word	0x20000426
 8001d40:	20000425 	.word	0x20000425
 8001d44:	2000054c 	.word	0x2000054c
 8001d48:	2000054e 	.word	0x2000054e
 8001d4c:	200000c4 	.word	0x200000c4
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020000 	.word	0x40020000
 8001d58:	20000538 	.word	0x20000538

	   case 2:// Second State : Set Time
		   // If enter this state at first , set flag and time to set to current time
		   if(enterStateFlag == 0)
 8001d5c:	4b50      	ldr	r3, [pc, #320]	; (8001ea0 <main+0x46c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d11f      	bne.n	8001da4 <main+0x370>
		   {
			   setMin = DS3231_GetMinute();
 8001d64:	f7ff f944 	bl	8000ff0 <DS3231_GetMinute>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <main+0x470>)
 8001d6e:	601a      	str	r2, [r3, #0]
			   setHour = DS3231_GetHour();
 8001d70:	f7ff f932 	bl	8000fd8 <DS3231_GetHour>
 8001d74:	4603      	mov	r3, r0
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <main+0x474>)
 8001d7a:	601a      	str	r2, [r3, #0]
			   setDate = date;
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	; (8001eac <main+0x478>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	461a      	mov	r2, r3
 8001d82:	4b4b      	ldr	r3, [pc, #300]	; (8001eb0 <main+0x47c>)
 8001d84:	601a      	str	r2, [r3, #0]
			   setMonth = month;
 8001d86:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <main+0x480>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b4a      	ldr	r3, [pc, #296]	; (8001eb8 <main+0x484>)
 8001d8e:	601a      	str	r2, [r3, #0]
			   setYear = year;
 8001d90:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <main+0x488>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a4a      	ldr	r2, [pc, #296]	; (8001ec0 <main+0x48c>)
 8001d96:	6013      	str	r3, [r2, #0]
			   currentIndex = 0;
 8001d98:	4b4a      	ldr	r3, [pc, #296]	; (8001ec4 <main+0x490>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
			   enterStateFlag = 1;
 8001d9e:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <main+0x46c>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
		   }
		   //?
		   if(setDate == 99){
 8001da4:	4b42      	ldr	r3, [pc, #264]	; (8001eb0 <main+0x47c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b63      	cmp	r3, #99	; 0x63
 8001daa:	d11c      	bne.n	8001de6 <main+0x3b2>

			   	   setMin = DS3231_GetMinute();
 8001dac:	f7ff f920 	bl	8000ff0 <DS3231_GetMinute>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <main+0x470>)
 8001db6:	601a      	str	r2, [r3, #0]
			   	   setHour = DS3231_GetHour();
 8001db8:	f7ff f90e 	bl	8000fd8 <DS3231_GetHour>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b39      	ldr	r3, [pc, #228]	; (8001ea8 <main+0x474>)
 8001dc2:	601a      	str	r2, [r3, #0]
				   setDate = date;
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <main+0x478>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <main+0x47c>)
 8001dcc:	601a      	str	r2, [r3, #0]
				   setMonth = month;
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <main+0x480>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b38      	ldr	r3, [pc, #224]	; (8001eb8 <main+0x484>)
 8001dd6:	601a      	str	r2, [r3, #0]
				   setYear = year;
 8001dd8:	4b38      	ldr	r3, [pc, #224]	; (8001ebc <main+0x488>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a38      	ldr	r2, [pc, #224]	; (8001ec0 <main+0x48c>)
 8001dde:	6013      	str	r3, [r2, #0]
				   currentIndex = 0;
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <main+0x490>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]

			   }
		   // Setting
			   if(count-starttime > 1000){
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <main+0x494>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <main+0x498>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001df4:	d942      	bls.n	8001e7c <main+0x448>
//			   		showSetTime();
				    setPage();
 8001df6:	f000 ff59 	bl	8002cac <setPage>
			   		starttime = count;
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <main+0x494>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a33      	ldr	r2, [pc, #204]	; (8001ecc <main+0x498>)
 8001e00:	6013      	str	r3, [r2, #0]
			   	}
			   break;
 8001e02:	e03b      	b.n	8001e7c <main+0x448>

	   case 3:// Third State : Set Alarm
		   		   // If enter this state at first , set flag and index
		   if(enterStateFlag == 0)
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <main+0x46c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d105      	bne.n	8001e18 <main+0x3e4>
		   {
			   currentIndex = 2;
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	; (8001ec4 <main+0x490>)
 8001e0e:	2202      	movs	r2, #2
 8001e10:	701a      	strb	r2, [r3, #0]
			   enterStateFlag = 1;
 8001e12:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <main+0x46c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	601a      	str	r2, [r3, #0]
		   }
		   if(setHour == 99){
 8001e18:	4b23      	ldr	r3, [pc, #140]	; (8001ea8 <main+0x474>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b63      	cmp	r3, #99	; 0x63
 8001e1e:	d111      	bne.n	8001e44 <main+0x410>
			   setHour = hur;
 8001e20:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <main+0x49c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <main+0x474>)
 8001e28:	601a      	str	r2, [r3, #0]
			   setMin = min;
 8001e2a:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <main+0x4a0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <main+0x470>)
 8001e32:	601a      	str	r2, [r3, #0]
			   setSec = sec;
 8001e34:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <main+0x4a4>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <main+0x4a8>)
 8001e3c:	601a      	str	r2, [r3, #0]
			   currentIndex = 0;
 8001e3e:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <main+0x490>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
		   }
		   //Setting
		   if(count-starttime > 1000){
 8001e44:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <main+0x494>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <main+0x498>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e52:	d915      	bls.n	8001e80 <main+0x44c>
//				showSetAlarm();
				setPage();
 8001e54:	f000 ff2a 	bl	8002cac <setPage>
				starttime = count;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <main+0x494>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1b      	ldr	r2, [pc, #108]	; (8001ecc <main+0x498>)
 8001e5e:	6013      	str	r3, [r2, #0]
			}
		   break;
 8001e60:	e00e      	b.n	8001e80 <main+0x44c>

	   case 4:
//		   Check_Key();
		   if(songList != savedSong){
 8001e62:	4b1f      	ldr	r3, [pc, #124]	; (8001ee0 <main+0x4ac>)
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <main+0x4b0>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d001      	beq.n	8001e72 <main+0x43e>
			   DF_Pause();
 8001e6e:	f7fe fc48 	bl	8000702 <DF_Pause>
		   }
		   setPage();
 8001e72:	f000 ff1b 	bl	8002cac <setPage>
		   break;
 8001e76:	e004      	b.n	8001e82 <main+0x44e>
			break;
 8001e78:	bf00      	nop
 8001e7a:	e002      	b.n	8001e82 <main+0x44e>
			   break;
 8001e7c:	bf00      	nop
 8001e7e:	e000      	b.n	8001e82 <main+0x44e>
		   break;
 8001e80:	bf00      	nop

	   char message[50];
	   //sprintf(message, "2: %d %d %d | 3: %d %d %d | cur = %d\r\n", setDate, setMonth, setYear, setHour, setMin, setSec, currentIndex);
	   //HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);

	   if (previousScreen !=  screen){
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <main+0x4b4>)
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	4b19      	ldr	r3, [pc, #100]	; (8001eec <main+0x4b8>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	f43f ae4b 	beq.w	8001b26 <main+0xf2>
		   currentIndex = 0;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <main+0x490>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
		   previousScreen = screen;
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <main+0x4b8>)
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <main+0x4b4>)
 8001e9c:	701a      	strb	r2, [r3, #0]
   {
 8001e9e:	e642      	b.n	8001b26 <main+0xf2>
 8001ea0:	20000544 	.word	0x20000544
 8001ea4:	2000000c 	.word	0x2000000c
 8001ea8:	20000010 	.word	0x20000010
 8001eac:	20000428 	.word	0x20000428
 8001eb0:	20000014 	.word	0x20000014
 8001eb4:	20000429 	.word	0x20000429
 8001eb8:	20000018 	.word	0x20000018
 8001ebc:	2000042c 	.word	0x2000042c
 8001ec0:	2000001c 	.word	0x2000001c
 8001ec4:	20000535 	.word	0x20000535
 8001ec8:	20000418 	.word	0x20000418
 8001ecc:	2000041c 	.word	0x2000041c
 8001ed0:	20000426 	.word	0x20000426
 8001ed4:	20000425 	.word	0x20000425
 8001ed8:	20000424 	.word	0x20000424
 8001edc:	20000008 	.word	0x20000008
 8001ee0:	20000070 	.word	0x20000070
 8001ee4:	200002c0 	.word	0x200002c0
 8001ee8:	20000536 	.word	0x20000536
 8001eec:	20000004 	.word	0x20000004

08001ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b094      	sub	sp, #80	; 0x50
 8001ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	2234      	movs	r2, #52	; 0x34
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f009 fdfd 	bl	800bafe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f14:	f005 fb28 	bl	8007568 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <SystemClock_Config+0xd8>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a2a      	ldr	r2, [pc, #168]	; (8001fc8 <SystemClock_Config+0xd8>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <SystemClock_Config+0xd8>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f30:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <SystemClock_Config+0xdc>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <SystemClock_Config+0xdc>)
 8001f36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <SystemClock_Config+0xdc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001f60:	23c8      	movs	r3, #200	; 0xc8
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f68:	2309      	movs	r3, #9
 8001f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4618      	mov	r0, r3
 8001f76:	f005 fb57 	bl	8007628 <HAL_RCC_OscConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f80:	f001 fd92 	bl	8003aa8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f84:	f005 fb00 	bl	8007588 <HAL_PWREx_EnableOverDrive>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001f8e:	f001 fd8b 	bl	8003aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f92:	230f      	movs	r3, #15
 8001f94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f96:	2302      	movs	r3, #2
 8001f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	2106      	movs	r1, #6
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f005 fde7 	bl	8007b84 <HAL_RCC_ClockConfig>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001fbc:	f001 fd74 	bl	8003aa8 <Error_Handler>
  }
}
 8001fc0:	bf00      	nop
 8001fc2:	3750      	adds	r7, #80	; 0x50
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40007000 	.word	0x40007000

08001fd0 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t lenght){
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xffff;
 8001fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe0:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	737b      	strb	r3, [r7, #13]

	while (lenght--){
 8001fe6:	e023      	b.n	8002030 <CRC16_2+0x60>
		crc ^= *ptr++;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	607a      	str	r2, [r7, #4]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	89fb      	ldrh	r3, [r7, #14]
 8001ff4:	4053      	eors	r3, r2
 8001ff6:	81fb      	strh	r3, [r7, #14]

		for (s = 0 ; s <8 ;s++){
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	737b      	strb	r3, [r7, #13]
 8001ffc:	e015      	b.n	800202a <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 8001ffe:	89fb      	ldrh	r3, [r7, #14]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00a      	beq.n	800201e <CRC16_2+0x4e>
				crc >>= 1;
 8002008:	89fb      	ldrh	r3, [r7, #14]
 800200a:	085b      	lsrs	r3, r3, #1
 800200c:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 800200e:	89fb      	ldrh	r3, [r7, #14]
 8002010:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8002014:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8002018:	43db      	mvns	r3, r3
 800201a:	81fb      	strh	r3, [r7, #14]
 800201c:	e002      	b.n	8002024 <CRC16_2+0x54>

			}
			else{
				crc >>= 1;
 800201e:	89fb      	ldrh	r3, [r7, #14]
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	81fb      	strh	r3, [r7, #14]
		for (s = 0 ; s <8 ;s++){
 8002024:	7b7b      	ldrb	r3, [r7, #13]
 8002026:	3301      	adds	r3, #1
 8002028:	737b      	strb	r3, [r7, #13]
 800202a:	7b7b      	ldrb	r3, [r7, #13]
 800202c:	2b07      	cmp	r3, #7
 800202e:	d9e6      	bls.n	8001ffe <CRC16_2+0x2e>
	while (lenght--){
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	1e5a      	subs	r2, r3, #1
 8002034:	70fa      	strb	r2, [r7, #3]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1d6      	bne.n	8001fe8 <CRC16_2+0x18>
			}
		}
	}
	return crc;
 800203a:	89fb      	ldrh	r3, [r7, #14]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <updateSensor>:

void updateSensor() {
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 800204e:	23c8      	movs	r3, #200	; 0xc8
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2303      	movs	r3, #3
 8002054:	4a39      	ldr	r2, [pc, #228]	; (800213c <updateSensor+0xf4>)
 8002056:	21b8      	movs	r1, #184	; 0xb8
 8002058:	4839      	ldr	r0, [pc, #228]	; (8002140 <updateSensor+0xf8>)
 800205a:	f004 fd97 	bl	8006b8c <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 800205e:	23c8      	movs	r3, #200	; 0xc8
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2303      	movs	r3, #3
 8002064:	4a35      	ldr	r2, [pc, #212]	; (800213c <updateSensor+0xf4>)
 8002066:	21b8      	movs	r1, #184	; 0xb8
 8002068:	4835      	ldr	r0, [pc, #212]	; (8002140 <updateSensor+0xf8>)
 800206a:	f004 fd8f 	bl	8006b8c <HAL_I2C_Master_Transmit>

	HAL_Delay(1);
 800206e:	2001      	movs	r0, #1
 8002070:	f003 fa1e 	bl	80054b0 <HAL_Delay>

	// receive sensor data

	HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1 , dataBuffer , 8, 200);
 8002074:	23c8      	movs	r3, #200	; 0xc8
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2308      	movs	r3, #8
 800207a:	4a32      	ldr	r2, [pc, #200]	; (8002144 <updateSensor+0xfc>)
 800207c:	21b8      	movs	r1, #184	; 0xb8
 800207e:	4830      	ldr	r0, [pc, #192]	; (8002140 <updateSensor+0xf8>)
 8002080:	f004 fe78 	bl	8006d74 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8 ;
 8002084:	4b2f      	ldr	r3, [pc, #188]	; (8002144 <updateSensor+0xfc>)
 8002086:	79db      	ldrb	r3, [r3, #7]
 8002088:	b29b      	uxth	r3, r3
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <updateSensor+0xfc>)
 8002090:	799b      	ldrb	r3, [r3, #6]
 8002092:	b29a      	uxth	r2, r3
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	4413      	add	r3, r2
 8002098:	80fb      	strh	r3, [r7, #6]

	if (Rcrc == CRC16_2(dataBuffer,6)){
 800209a:	2106      	movs	r1, #6
 800209c:	4829      	ldr	r0, [pc, #164]	; (8002144 <updateSensor+0xfc>)
 800209e:	f7ff ff97 	bl	8001fd0 <CRC16_2>
 80020a2:	4603      	mov	r3, r0
 80020a4:	461a      	mov	r2, r3
 80020a6:	88fb      	ldrh	r3, [r7, #6]
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d143      	bne.n	8002134 <updateSensor+0xec>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8 ) + dataBuffer[5];
 80020ac:	4b25      	ldr	r3, [pc, #148]	; (8002144 <updateSensor+0xfc>)
 80020ae:	791b      	ldrb	r3, [r3, #4]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <updateSensor+0xfc>)
 80020bc:	795b      	ldrb	r3, [r3, #5]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4413      	add	r3, r2
 80020c2:	80bb      	strh	r3, [r7, #4]

		temp = temperature  / 10.0 ;
 80020c4:	88bb      	ldrh	r3, [r7, #4]
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80020ce:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80020d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <updateSensor+0x100>)
 80020dc:	edc3 7a00 	vstr	s15, [r3]

		temp = (((dataBuffer[4] & 0x80) >> 7 ) == 1)? (temp * (-1)) : temp ;
 80020e0:	4b18      	ldr	r3, [pc, #96]	; (8002144 <updateSensor+0xfc>)
 80020e2:	791b      	ldrb	r3, [r3, #4]
 80020e4:	09db      	lsrs	r3, r3, #7
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <updateSensor+0xb0>
 80020ec:	4b16      	ldr	r3, [pc, #88]	; (8002148 <updateSensor+0x100>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	eef1 7a67 	vneg.f32	s15, s15
 80020f6:	e002      	b.n	80020fe <updateSensor+0xb6>
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <updateSensor+0x100>)
 80020fa:	edd3 7a00 	vldr	s15, [r3]
 80020fe:	4b12      	ldr	r3, [pc, #72]	; (8002148 <updateSensor+0x100>)
 8002100:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humi = (dataBuffer[2] << 8) + dataBuffer[3] ;
 8002104:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <updateSensor+0xfc>)
 8002106:	789b      	ldrb	r3, [r3, #2]
 8002108:	b29b      	uxth	r3, r3
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <updateSensor+0xfc>)
 8002110:	78db      	ldrb	r3, [r3, #3]
 8002112:	b29b      	uxth	r3, r3
 8002114:	4413      	add	r3, r2
 8002116:	807b      	strh	r3, [r7, #2]
		RH = humi / 10.0 ;
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002122:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002126:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800212a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <updateSensor+0x104>)
 8002130:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002134:	bf00      	nop
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20000448 	.word	0x20000448
 8002140:	20000370 	.word	0x20000370
 8002144:	2000044c 	.word	0x2000044c
 8002148:	20000440 	.word	0x20000440
 800214c:	20000444 	.word	0x20000444

08002150 <alarm>:

void alarm(){
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b08b      	sub	sp, #44	; 0x2c
 8002154:	af02      	add	r7, sp, #8
	//-----------------------------------
	ILI9341_Draw_Text("WAKE UP!!", 50,50, BLACK, 4, WHITE);
 8002156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800215a:	9301      	str	r3, [sp, #4]
 800215c:	2304      	movs	r3, #4
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2300      	movs	r3, #0
 8002162:	2232      	movs	r2, #50	; 0x32
 8002164:	2132      	movs	r1, #50	; 0x32
 8002166:	48ab      	ldr	r0, [pc, #684]	; (8002414 <alarm+0x2c4>)
 8002168:	f002 fcd6 	bl	8004b18 <ILI9341_Draw_Text>




	//-----------------------------------
	generateAndSortRandomNumbers(randomNumbers,4);
 800216c:	2104      	movs	r1, #4
 800216e:	48aa      	ldr	r0, [pc, #680]	; (8002418 <alarm+0x2c8>)
 8002170:	f7ff fb84 	bl	800187c <generateAndSortRandomNumbers>
	char pinNumber[4][2];
	uint16_t btnColor[4] = {YELLOW , RED , GREEN , BLUE};
 8002174:	4aa9      	ldr	r2, [pc, #676]	; (800241c <alarm+0x2cc>)
 8002176:	463b      	mov	r3, r7
 8002178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800217c:	e883 0003 	stmia.w	r3, {r0, r1}
//	snprintf(buttonInput, 15, "%d %d %d %d",randomNumbers[0],randomNumbers[1],randomNumbers[2],randomNumbers[3]);
	for(int i=0;i<4;i++){
 8002180:	2300      	movs	r3, #0
 8002182:	61fb      	str	r3, [r7, #28]
 8002184:	e046      	b.n	8002214 <alarm+0xc4>
		sprintf(pinNumber[i], "%d", randomNumbers[i]);
 8002186:	f107 0208 	add.w	r2, r7, #8
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	18d0      	adds	r0, r2, r3
 8002190:	4aa1      	ldr	r2, [pc, #644]	; (8002418 <alarm+0x2c8>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002198:	461a      	mov	r2, r3
 800219a:	49a1      	ldr	r1, [pc, #644]	; (8002420 <alarm+0x2d0>)
 800219c:	f009 fc4c 	bl	800ba38 <siprintf>
		ILI9341_Draw_Filled_Circle(60 + i*50,110, 20, btnColor[i]);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	0092      	lsls	r2, r2, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	461a      	mov	r2, r3
 80021ac:	0091      	lsls	r1, r2, #2
 80021ae:	461a      	mov	r2, r3
 80021b0:	460b      	mov	r3, r1
 80021b2:	4413      	add	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	333c      	adds	r3, #60	; 0x3c
 80021ba:	b298      	uxth	r0, r3
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	3320      	adds	r3, #32
 80021c2:	443b      	add	r3, r7
 80021c4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80021c8:	2214      	movs	r2, #20
 80021ca:	216e      	movs	r1, #110	; 0x6e
 80021cc:	f002 fb23 	bl	8004816 <ILI9341_Draw_Filled_Circle>
		ILI9341_Draw_Text(pinNumber[i], 50 + i*50,100, BLACK, 4, btnColor[i]);
 80021d0:	f107 0208 	add.w	r2, r7, #8
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	18d0      	adds	r0, r2, r3
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3301      	adds	r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	0091      	lsls	r1, r2, #2
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	4413      	add	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	b2d9      	uxtb	r1, r3
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	3320      	adds	r3, #32
 80021fa:	443b      	add	r3, r7
 80021fc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	2304      	movs	r3, #4
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	2264      	movs	r2, #100	; 0x64
 800220a:	f002 fc85 	bl	8004b18 <ILI9341_Draw_Text>
	for(int i=0;i<4;i++){
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3301      	adds	r3, #1
 8002212:	61fb      	str	r3, [r7, #28]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	2b03      	cmp	r3, #3
 8002218:	ddb5      	ble.n	8002186 <alarm+0x36>
	}
	DF_SetVolume(30);
 800221a:	201e      	movs	r0, #30
 800221c:	f7fe fa44 	bl	80006a8 <DF_SetVolume>
	DF_SetFolder(1, songList);
 8002220:	4b80      	ldr	r3, [pc, #512]	; (8002424 <alarm+0x2d4>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	4619      	mov	r1, r3
 8002226:	2001      	movs	r0, #1
 8002228:	f7fe fae6 	bl	80007f8 <DF_SetFolder>
//	ILI9341_Draw_Text(buttonInput, 50,100, BLACK, 4, WHITE);
	int cnt = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	61bb      	str	r3, [r7, #24]
	while(1){
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET){
 8002230:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002234:	487c      	ldr	r0, [pc, #496]	; (8002428 <alarm+0x2d8>)
 8002236:	f004 fbc3 	bl	80069c0 <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	2b01      	cmp	r3, #1
 800223e:	d108      	bne.n	8002252 <alarm+0x102>
			DF_SetVolume(30);
 8002240:	201e      	movs	r0, #30
 8002242:	f7fe fa31 	bl	80006a8 <DF_SetVolume>
			DF_SetFolder(1, songList);
 8002246:	4b77      	ldr	r3, [pc, #476]	; (8002424 <alarm+0x2d4>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	2001      	movs	r0, #1
 800224e:	f7fe fad3 	bl	80007f8 <DF_SetFolder>
		}
		if(cnt != 4){
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b04      	cmp	r3, #4
 8002256:	d04f      	beq.n	80022f8 <alarm+0x1a8>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8002258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800225c:	4872      	ldr	r0, [pc, #456]	; (8002428 <alarm+0x2d8>)
 800225e:	f004 fbaf 	bl	80069c0 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10b      	bne.n	8002280 <alarm+0x130>
				userButtonInput[cnt++] = 1;
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	61ba      	str	r2, [r7, #24]
 800226e:	4a6f      	ldr	r2, [pc, #444]	; (800242c <alarm+0x2dc>)
 8002270:	2101      	movs	r1, #1
 8002272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				letTheMusicLouderThanAnySound(0.1);
 8002276:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 8002430 <alarm+0x2e0>
 800227a:	f7ff fb73 	bl	8001964 <letTheMusicLouderThanAnySound>
 800227e:	e08b      	b.n	8002398 <alarm+0x248>

			}
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8002280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002284:	4868      	ldr	r0, [pc, #416]	; (8002428 <alarm+0x2d8>)
 8002286:	f004 fb9b 	bl	80069c0 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10b      	bne.n	80022a8 <alarm+0x158>
				userButtonInput[cnt++] = 2;
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	61ba      	str	r2, [r7, #24]
 8002296:	4a65      	ldr	r2, [pc, #404]	; (800242c <alarm+0x2dc>)
 8002298:	2102      	movs	r1, #2
 800229a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				letTheMusicLouderThanAnySound(0.4);
 800229e:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8002434 <alarm+0x2e4>
 80022a2:	f7ff fb5f 	bl	8001964 <letTheMusicLouderThanAnySound>
 80022a6:	e077      	b.n	8002398 <alarm+0x248>
			}
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 80022a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022ac:	485e      	ldr	r0, [pc, #376]	; (8002428 <alarm+0x2d8>)
 80022ae:	f004 fb87 	bl	80069c0 <HAL_GPIO_ReadPin>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <alarm+0x180>
				userButtonInput[cnt++] = 3;
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	61ba      	str	r2, [r7, #24]
 80022be:	4a5b      	ldr	r2, [pc, #364]	; (800242c <alarm+0x2dc>)
 80022c0:	2103      	movs	r1, #3
 80022c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				letTheMusicLouderThanAnySound(0.6);
 80022c6:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8002438 <alarm+0x2e8>
 80022ca:	f7ff fb4b 	bl	8001964 <letTheMusicLouderThanAnySound>
 80022ce:	e063      	b.n	8002398 <alarm+0x248>
			}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET){
 80022d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d4:	4859      	ldr	r0, [pc, #356]	; (800243c <alarm+0x2ec>)
 80022d6:	f004 fb73 	bl	80069c0 <HAL_GPIO_ReadPin>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d15b      	bne.n	8002398 <alarm+0x248>
				userButtonInput[cnt++] = 4;
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	61ba      	str	r2, [r7, #24]
 80022e6:	4a51      	ldr	r2, [pc, #324]	; (800242c <alarm+0x2dc>)
 80022e8:	2104      	movs	r1, #4
 80022ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				letTheMusicLouderThanAnySound(0.1);
 80022ee:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8002430 <alarm+0x2e0>
 80022f2:	f7ff fb37 	bl	8001964 <letTheMusicLouderThanAnySound>
 80022f6:	e04f      	b.n	8002398 <alarm+0x248>
			}
		}
		else{
//			snprintf(buttonInput, 15, "%d %d %d %d",userButtonInput[0],userButtonInput[1],userButtonInput[2],userButtonInput[3]);
//			ILI9341_Draw_Text(buttonInput, 50,10, BLACK, 4, WHITE);
			if(compareArrays(randomNumbers,userButtonInput,4) == 1){
 80022f8:	2204      	movs	r2, #4
 80022fa:	494c      	ldr	r1, [pc, #304]	; (800242c <alarm+0x2dc>)
 80022fc:	4846      	ldr	r0, [pc, #280]	; (8002418 <alarm+0x2c8>)
 80022fe:	f7ff fb03 	bl	8001908 <compareArrays>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <alarm+0x1c8>
				ILI9341_Fill_Screen(WHITE);
 8002308:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800230c:	f002 ff0e 	bl	800512c <ILI9341_Fill_Screen>
				alarmtrigger = 0;
 8002310:	4b4b      	ldr	r3, [pc, #300]	; (8002440 <alarm+0x2f0>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
				break;
 8002316:	e076      	b.n	8002406 <alarm+0x2b6>
			}else{
				generateAndSortRandomNumbers(randomNumbers,4);
 8002318:	2104      	movs	r1, #4
 800231a:	483f      	ldr	r0, [pc, #252]	; (8002418 <alarm+0x2c8>)
 800231c:	f7ff faae 	bl	800187c <generateAndSortRandomNumbers>
				for(int i=0;i<4;i++){
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	e033      	b.n	800238e <alarm+0x23e>
					sprintf(pinNumber[i], "%d", randomNumbers[i]);
 8002326:	f107 0208 	add.w	r2, r7, #8
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	18d0      	adds	r0, r2, r3
 8002330:	4a39      	ldr	r2, [pc, #228]	; (8002418 <alarm+0x2c8>)
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002338:	461a      	mov	r2, r3
 800233a:	4939      	ldr	r1, [pc, #228]	; (8002420 <alarm+0x2d0>)
 800233c:	f009 fb7c 	bl	800ba38 <siprintf>
					ILI9341_Draw_Text(pinNumber[i], 50 + i*50,100, BLACK, 4, btnColor[i]);
 8002340:	f107 0208 	add.w	r2, r7, #8
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	18d0      	adds	r0, r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	3301      	adds	r3, #1
 800234e:	b2db      	uxtb	r3, r3
 8002350:	461a      	mov	r2, r3
 8002352:	0092      	lsls	r2, r2, #2
 8002354:	4413      	add	r3, r2
 8002356:	461a      	mov	r2, r3
 8002358:	0091      	lsls	r1, r2, #2
 800235a:	461a      	mov	r2, r3
 800235c:	460b      	mov	r3, r1
 800235e:	4413      	add	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	b2d9      	uxtb	r1, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	3320      	adds	r3, #32
 800236a:	443b      	add	r3, r7
 800236c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	2304      	movs	r3, #4
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	2264      	movs	r2, #100	; 0x64
 800237a:	f002 fbcd 	bl	8004b18 <ILI9341_Draw_Text>
					userButtonInput[i] = 0;
 800237e:	4a2b      	ldr	r2, [pc, #172]	; (800242c <alarm+0x2dc>)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2100      	movs	r1, #0
 8002384:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i=0;i<4;i++){
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	3301      	adds	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	2b03      	cmp	r3, #3
 8002392:	ddc8      	ble.n	8002326 <alarm+0x1d6>
				}
//				snprintf(buttonInput, 15, "%d %d %d %d",randomNumbers[0],randomNumbers[1],randomNumbers[2],randomNumbers[3]);
//				ILI9341_Draw_Text(buttonInput, 50,100, BLACK, 4, WHITE);
				cnt = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]
			}
		}
		for(int i=0;i<4;i++){
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	e02f      	b.n	80023fe <alarm+0x2ae>
			ILI9341_Draw_Text(pinNumber[i], 50 + i*30,100, (userButtonInput[i] == randomNumbers[i]) ? GREEN : ((userButtonInput[i] == 0) ? BLACK : RED), 4, WHITE);
 800239e:	f107 0208 	add.w	r2, r7, #8
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	18d0      	adds	r0, r2, r3
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	461a      	mov	r2, r3
 80023ae:	0112      	lsls	r2, r2, #4
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	3332      	adds	r3, #50	; 0x32
 80023b8:	b2d9      	uxtb	r1, r3
 80023ba:	4a1c      	ldr	r2, [pc, #112]	; (800242c <alarm+0x2dc>)
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023c2:	4c15      	ldr	r4, [pc, #84]	; (8002418 <alarm+0x2c8>)
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d00a      	beq.n	80023e4 <alarm+0x294>
 80023ce:	4a17      	ldr	r2, [pc, #92]	; (800242c <alarm+0x2dc>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <alarm+0x28e>
 80023da:	2300      	movs	r3, #0
 80023dc:	e004      	b.n	80023e8 <alarm+0x298>
 80023de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023e2:	e001      	b.n	80023e8 <alarm+0x298>
 80023e4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80023e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ec:	9201      	str	r2, [sp, #4]
 80023ee:	2204      	movs	r2, #4
 80023f0:	9200      	str	r2, [sp, #0]
 80023f2:	2264      	movs	r2, #100	; 0x64
 80023f4:	f002 fb90 	bl	8004b18 <ILI9341_Draw_Text>
		for(int i=0;i<4;i++){
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	3301      	adds	r3, #1
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b03      	cmp	r3, #3
 8002402:	ddcc      	ble.n	800239e <alarm+0x24e>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET){
 8002404:	e714      	b.n	8002230 <alarm+0xe0>
//			else{
//				letTheMusicLouderThanAnySound(0.2);
//			}
		}
	}
	DF_Pause();
 8002406:	f7fe f97c 	bl	8000702 <DF_Pause>
}
 800240a:	bf00      	nop
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}
 8002412:	bf00      	nop
 8002414:	0800e9cc 	.word	0x0800e9cc
 8002418:	20000514 	.word	0x20000514
 800241c:	0800e9dc 	.word	0x0800e9dc
 8002420:	0800e9d8 	.word	0x0800e9d8
 8002424:	20000070 	.word	0x20000070
 8002428:	40020400 	.word	0x40020400
 800242c:	20000524 	.word	0x20000524
 8002430:	3dcccccd 	.word	0x3dcccccd
 8002434:	3ecccccd 	.word	0x3ecccccd
 8002438:	3f19999a 	.word	0x3f19999a
 800243c:	40020000 	.word	0x40020000
 8002440:	2000043c 	.word	0x2000043c

08002444 <updateT>:

 void updateT(){
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
 	sec = DS3231_GetSecond();
 8002448:	f7fe fdde 	bl	8001008 <DS3231_GetSecond>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	4b15      	ldr	r3, [pc, #84]	; (80024a8 <updateT+0x64>)
 8002452:	701a      	strb	r2, [r3, #0]
 	min = DS3231_GetMinute();
 8002454:	f7fe fdcc 	bl	8000ff0 <DS3231_GetMinute>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	4b13      	ldr	r3, [pc, #76]	; (80024ac <updateT+0x68>)
 800245e:	701a      	strb	r2, [r3, #0]
 	hur = DS3231_GetHour();
 8002460:	f7fe fdba 	bl	8000fd8 <DS3231_GetHour>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <updateT+0x6c>)
 800246a:	701a      	strb	r2, [r3, #0]
 	dow = DS3231_GetDayOfWeek()-1;
 800246c:	f7fe fd64 	bl	8000f38 <DS3231_GetDayOfWeek>
 8002470:	4603      	mov	r3, r0
 8002472:	3b01      	subs	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <updateT+0x70>)
 8002478:	701a      	strb	r2, [r3, #0]
 	date = DS3231_GetDate()-1;
 800247a:	f7fe fd69 	bl	8000f50 <DS3231_GetDate>
 800247e:	4603      	mov	r3, r0
 8002480:	3b01      	subs	r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b0c      	ldr	r3, [pc, #48]	; (80024b8 <updateT+0x74>)
 8002486:	701a      	strb	r2, [r3, #0]
 	month = DS3231_GetMonth()-1;
 8002488:	f7fe fd6e 	bl	8000f68 <DS3231_GetMonth>
 800248c:	4603      	mov	r3, r0
 800248e:	3b01      	subs	r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <updateT+0x78>)
 8002494:	701a      	strb	r2, [r3, #0]
 	year = DS3231_GetYear();
 8002496:	f7fe fd76 	bl	8000f86 <DS3231_GetYear>
 800249a:	4603      	mov	r3, r0
 800249c:	461a      	mov	r2, r3
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <updateT+0x7c>)
 80024a0:	601a      	str	r2, [r3, #0]

 }
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000424 	.word	0x20000424
 80024ac:	20000425 	.word	0x20000425
 80024b0:	20000426 	.word	0x20000426
 80024b4:	20000427 	.word	0x20000427
 80024b8:	20000428 	.word	0x20000428
 80024bc:	20000429 	.word	0x20000429
 80024c0:	2000042c 	.word	0x2000042c

080024c4 <showT>:
 void showT(){
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b092      	sub	sp, #72	; 0x48
 80024c8:	af02      	add	r7, sp, #8

	updateSensor();
 80024ca:	f7ff fdbd 	bl	8002048 <updateSensor>
//		sprintf(strH,"%02d",setHour);
//		sprintf(strM,"%02d",setMin);
//		sprintf(strS,"%02d",setSec);
//	}

	sprintf(strH,"%02d",hur);
 80024ce:	4b72      	ldr	r3, [pc, #456]	; (8002698 <showT+0x1d4>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	461a      	mov	r2, r3
 80024d4:	4971      	ldr	r1, [pc, #452]	; (800269c <showT+0x1d8>)
 80024d6:	4872      	ldr	r0, [pc, #456]	; (80026a0 <showT+0x1dc>)
 80024d8:	f009 faae 	bl	800ba38 <siprintf>
	sprintf(strM,"%02d",min);
 80024dc:	4b71      	ldr	r3, [pc, #452]	; (80026a4 <showT+0x1e0>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	496e      	ldr	r1, [pc, #440]	; (800269c <showT+0x1d8>)
 80024e4:	4870      	ldr	r0, [pc, #448]	; (80026a8 <showT+0x1e4>)
 80024e6:	f009 faa7 	bl	800ba38 <siprintf>
	sprintf(strS,"%02d",sec);
 80024ea:	4b70      	ldr	r3, [pc, #448]	; (80026ac <showT+0x1e8>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	496a      	ldr	r1, [pc, #424]	; (800269c <showT+0x1d8>)
 80024f2:	486f      	ldr	r0, [pc, #444]	; (80026b0 <showT+0x1ec>)
 80024f4:	f009 faa0 	bl	800ba38 <siprintf>

 	sprintf(strsensor,"%.1f C %.1f %%RH",temp,RH);
 80024f8:	4b6e      	ldr	r3, [pc, #440]	; (80026b4 <showT+0x1f0>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002502:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <showT+0x1f4>)
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800250c:	ed8d 7b00 	vstr	d7, [sp]
 8002510:	ec53 2b16 	vmov	r2, r3, d6
 8002514:	4969      	ldr	r1, [pc, #420]	; (80026bc <showT+0x1f8>)
 8002516:	486a      	ldr	r0, [pc, #424]	; (80026c0 <showT+0x1fc>)
 8002518:	f009 fa8e 	bl	800ba38 <siprintf>
// 	else{
// 		dow = dayofweek(setDate, setMonth + 1, setYear);
// 		snprintf(timedate,50,"%d %s %d",setDate, months[setMonth], setYear);
// 	}

 	dow = dayofweek(date + 1, month + 1, year);
 800251c:	4b69      	ldr	r3, [pc, #420]	; (80026c4 <showT+0x200>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	3301      	adds	r3, #1
 8002522:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <showT+0x204>)
 8002524:	7812      	ldrb	r2, [r2, #0]
 8002526:	1c51      	adds	r1, r2, #1
 8002528:	4a68      	ldr	r2, [pc, #416]	; (80026cc <showT+0x208>)
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f001 fa69 	bl	8003a04 <dayofweek>
 8002532:	4603      	mov	r3, r0
 8002534:	b2da      	uxtb	r2, r3
 8002536:	4b66      	ldr	r3, [pc, #408]	; (80026d0 <showT+0x20c>)
 8002538:	701a      	strb	r2, [r3, #0]
 	snprintf(timedate,50,"%d %s %d",date+1, months[month], year);
 800253a:	4b62      	ldr	r3, [pc, #392]	; (80026c4 <showT+0x200>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	1c59      	adds	r1, r3, #1
 8002540:	4b61      	ldr	r3, [pc, #388]	; (80026c8 <showT+0x204>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <showT+0x210>)
 8002548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800254c:	4a5f      	ldr	r2, [pc, #380]	; (80026cc <showT+0x208>)
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	9201      	str	r2, [sp, #4]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	460b      	mov	r3, r1
 8002556:	4a60      	ldr	r2, [pc, #384]	; (80026d8 <showT+0x214>)
 8002558:	2132      	movs	r1, #50	; 0x32
 800255a:	4860      	ldr	r0, [pc, #384]	; (80026dc <showT+0x218>)
 800255c:	f009 fa38 	bl	800b9d0 <sniprintf>

	snprintf(timeString, 50, "%s:%s:%s", strH, strM, strS);
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <showT+0x1ec>)
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <showT+0x1e4>)
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	4b4d      	ldr	r3, [pc, #308]	; (80026a0 <showT+0x1dc>)
 800256a:	4a5d      	ldr	r2, [pc, #372]	; (80026e0 <showT+0x21c>)
 800256c:	2132      	movs	r1, #50	; 0x32
 800256e:	485d      	ldr	r0, [pc, #372]	; (80026e4 <showT+0x220>)
 8002570:	f009 fa2e 	bl	800b9d0 <sniprintf>
	ILI9341_Draw_Text(timeString, 42, 100, fontcolor, 5, bgcolor);
 8002574:	4b5c      	ldr	r3, [pc, #368]	; (80026e8 <showT+0x224>)
 8002576:	881a      	ldrh	r2, [r3, #0]
 8002578:	4b5c      	ldr	r3, [pc, #368]	; (80026ec <showT+0x228>)
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	2305      	movs	r3, #5
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4613      	mov	r3, r2
 8002584:	2264      	movs	r2, #100	; 0x64
 8002586:	212a      	movs	r1, #42	; 0x2a
 8002588:	4856      	ldr	r0, [pc, #344]	; (80026e4 <showT+0x220>)
 800258a:	f002 fac5 	bl	8004b18 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text(strH, 50,90, BLACK, 5, WHITE);
//	ILI9341_Draw_Text(strM, 120,90, BLACK, 5, WHITE);
//	ILI9341_Draw_Text(strS, 210,90, BLACK, 5, WHITE);

	uint32_t dow_x = 56 + (9 - strlen(day[dow])) * 12;
 800258e:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <showT+0x20c>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	461a      	mov	r2, r3
 8002594:	4b56      	ldr	r3, [pc, #344]	; (80026f0 <showT+0x22c>)
 8002596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd fea0 	bl	80002e0 <strlen>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4613      	mov	r3, r2
 80025a4:	0092      	lsls	r2, r2, #2
 80025a6:	1a9b      	subs	r3, r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	33a4      	adds	r3, #164	; 0xa4
 80025ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	ILI9341_Draw_Text(day[dow], dow_x, 10 , fontcolor, 4, bgcolor);
 80025ae:	4b48      	ldr	r3, [pc, #288]	; (80026d0 <showT+0x20c>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b4e      	ldr	r3, [pc, #312]	; (80026f0 <showT+0x22c>)
 80025b6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80025ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025bc:	b2d9      	uxtb	r1, r3
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <showT+0x224>)
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	4b4a      	ldr	r3, [pc, #296]	; (80026ec <showT+0x228>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	2304      	movs	r3, #4
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	220a      	movs	r2, #10
 80025d0:	f002 faa2 	bl	8004b18 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(strsensor, 75,40 , fontcolor, 2, bgcolor);
 80025d4:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <showT+0x224>)
 80025d6:	881a      	ldrh	r2, [r3, #0]
 80025d8:	4b44      	ldr	r3, [pc, #272]	; (80026ec <showT+0x228>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	2302      	movs	r3, #2
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	4613      	mov	r3, r2
 80025e4:	2228      	movs	r2, #40	; 0x28
 80025e6:	214b      	movs	r1, #75	; 0x4b
 80025e8:	4835      	ldr	r0, [pc, #212]	; (80026c0 <showT+0x1fc>)
 80025ea:	f002 fa95 	bl	8004b18 <ILI9341_Draw_Text>
 //	ILI9341_Draw_Text(strsensor, 80,40 , BLACK, 1, WHITE);
//	ILI9341_Draw_Text(strdate, 50,210, BLACK, 2, WHITE);
//	ILI9341_Draw_Text(months[month], 80,210, BLACK, 2, WHITE);
//	ILI9341_Draw_Text(stryear, 200,210, BLACK, 2, WHITE);
	uint32_t time_x = 50 + (9-((setMonth == 99) ? strlen(months[month]) : strlen(months[setMonth]))) * 7;
 80025ee:	4b41      	ldr	r3, [pc, #260]	; (80026f4 <showT+0x230>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b63      	cmp	r3, #99	; 0x63
 80025f4:	d10e      	bne.n	8002614 <showT+0x150>
 80025f6:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <showT+0x204>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <showT+0x210>)
 80025fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd fe6c 	bl	80002e0 <strlen>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	3371      	adds	r3, #113	; 0x71
 8002612:	e00c      	b.n	800262e <showT+0x16a>
 8002614:	4b37      	ldr	r3, [pc, #220]	; (80026f4 <showT+0x230>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2e      	ldr	r2, [pc, #184]	; (80026d4 <showT+0x210>)
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fd fe5e 	bl	80002e0 <strlen>
 8002624:	4603      	mov	r3, r0
 8002626:	461a      	mov	r2, r3
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	3371      	adds	r3, #113	; 0x71
 800262e:	63bb      	str	r3, [r7, #56]	; 0x38
//	if (month % 2 == 1)
//		x -= 5;
 	ILI9341_Draw_Text(timedate, time_x, 210, fontcolor, 2, bgcolor);
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	b2d9      	uxtb	r1, r3
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <showT+0x224>)
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	4b2c      	ldr	r3, [pc, #176]	; (80026ec <showT+0x228>)
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	2302      	movs	r3, #2
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	4613      	mov	r3, r2
 8002644:	22d2      	movs	r2, #210	; 0xd2
 8002646:	4825      	ldr	r0, [pc, #148]	; (80026dc <showT+0x218>)
 8002648:	f002 fa66 	bl	8004b18 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text(timedate, 50, 210, BLACK, 2, WHITE);
	char willBeAlarmIn[50] = "";
 800264c:	2300      	movs	r3, #0
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	f107 0308 	add.w	r3, r7, #8
 8002654:	222e      	movs	r2, #46	; 0x2e
 8002656:	2100      	movs	r1, #0
 8002658:	4618      	mov	r0, r3
 800265a:	f009 fa50 	bl	800bafe <memset>
	snprintf(willBeAlarmIn, 50, "Alarm at %02d:%02d", setAlarmHour, setAlarmMin);
 800265e:	4b26      	ldr	r3, [pc, #152]	; (80026f8 <showT+0x234>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b26      	ldr	r3, [pc, #152]	; (80026fc <showT+0x238>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	1d38      	adds	r0, r7, #4
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	4613      	mov	r3, r2
 800266c:	4a24      	ldr	r2, [pc, #144]	; (8002700 <showT+0x23c>)
 800266e:	2132      	movs	r1, #50	; 0x32
 8002670:	f009 f9ae 	bl	800b9d0 <sniprintf>
	ILI9341_Draw_Text(willBeAlarmIn, 75, 140, fontcolor, 2, bgcolor);
 8002674:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <showT+0x224>)
 8002676:	881a      	ldrh	r2, [r3, #0]
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <showT+0x228>)
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	1d38      	adds	r0, r7, #4
 800267e:	9301      	str	r3, [sp, #4]
 8002680:	2302      	movs	r3, #2
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	4613      	mov	r3, r2
 8002686:	228c      	movs	r2, #140	; 0x8c
 8002688:	214b      	movs	r1, #75	; 0x4b
 800268a:	f002 fa45 	bl	8004b18 <ILI9341_Draw_Text>

 }
 800268e:	bf00      	nop
 8002690:	3740      	adds	r7, #64	; 0x40
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20000426 	.word	0x20000426
 800269c:	0800e9e4 	.word	0x0800e9e4
 80026a0:	2000045c 	.word	0x2000045c
 80026a4:	20000425 	.word	0x20000425
 80026a8:	20000458 	.word	0x20000458
 80026ac:	20000424 	.word	0x20000424
 80026b0:	20000454 	.word	0x20000454
 80026b4:	20000440 	.word	0x20000440
 80026b8:	20000444 	.word	0x20000444
 80026bc:	0800e9ec 	.word	0x0800e9ec
 80026c0:	200004ac 	.word	0x200004ac
 80026c4:	20000428 	.word	0x20000428
 80026c8:	20000429 	.word	0x20000429
 80026cc:	2000042c 	.word	0x2000042c
 80026d0:	20000427 	.word	0x20000427
 80026d4:	2000003c 	.word	0x2000003c
 80026d8:	0800ea00 	.word	0x0800ea00
 80026dc:	20000460 	.word	0x20000460
 80026e0:	0800ea0c 	.word	0x0800ea0c
 80026e4:	200004e0 	.word	0x200004e0
 80026e8:	2000054e 	.word	0x2000054e
 80026ec:	2000054c 	.word	0x2000054c
 80026f0:	20000020 	.word	0x20000020
 80026f4:	20000018 	.word	0x20000018
 80026f8:	20000434 	.word	0x20000434
 80026fc:	20000430 	.word	0x20000430
 8002700:	0800ea18 	.word	0x0800ea18

08002704 <showSetTime>:

void showSetTime(){
 8002704:	b580      	push	{r7, lr}
 8002706:	b09c      	sub	sp, #112	; 0x70
 8002708:	af02      	add	r7, sp, #8
	sprintf(strdate,"%02d",setDate+1);
 800270a:	4b7d      	ldr	r3, [pc, #500]	; (8002900 <showSetTime+0x1fc>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3301      	adds	r3, #1
 8002710:	461a      	mov	r2, r3
 8002712:	497c      	ldr	r1, [pc, #496]	; (8002904 <showSetTime+0x200>)
 8002714:	487c      	ldr	r0, [pc, #496]	; (8002908 <showSetTime+0x204>)
 8002716:	f009 f98f 	bl	800ba38 <siprintf>
	sprintf(strmonth,"%s",months[setMonth]);
 800271a:	4b7c      	ldr	r3, [pc, #496]	; (800290c <showSetTime+0x208>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a7c      	ldr	r2, [pc, #496]	; (8002910 <showSetTime+0x20c>)
 8002720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002724:	461a      	mov	r2, r3
 8002726:	497b      	ldr	r1, [pc, #492]	; (8002914 <showSetTime+0x210>)
 8002728:	487b      	ldr	r0, [pc, #492]	; (8002918 <showSetTime+0x214>)
 800272a:	f009 f985 	bl	800ba38 <siprintf>
	sprintf(stryear,"%d",setYear);
 800272e:	4b7b      	ldr	r3, [pc, #492]	; (800291c <showSetTime+0x218>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	497a      	ldr	r1, [pc, #488]	; (8002920 <showSetTime+0x21c>)
 8002736:	487b      	ldr	r0, [pc, #492]	; (8002924 <showSetTime+0x220>)
 8002738:	f009 f97e 	bl	800ba38 <siprintf>

//	snprintf(timedate,50,"%s %s %s",strdate, strmonth, stryear);
//	ILI9341_Draw_Text(timedate, 80,10, BLACK, 2, WHITE);


	char getStr[100] = "";
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	2260      	movs	r2, #96	; 0x60
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f009 f9d8 	bl	800bafe <memset>
	sprintf(getStr,"Setting");
 800274e:	1d3b      	adds	r3, r7, #4
 8002750:	4975      	ldr	r1, [pc, #468]	; (8002928 <showSetTime+0x224>)
 8002752:	4618      	mov	r0, r3
 8002754:	f009 f970 	bl	800ba38 <siprintf>
	ILI9341_Draw_Text(getStr, 72,10, BLACK, 4, WHITE);
 8002758:	1d38      	adds	r0, r7, #4
 800275a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2304      	movs	r3, #4
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	220a      	movs	r2, #10
 8002768:	2148      	movs	r1, #72	; 0x48
 800276a:	f002 f9d5 	bl	8004b18 <ILI9341_Draw_Text>

	sprintf(getStr,"Date");
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	496e      	ldr	r1, [pc, #440]	; (800292c <showSetTime+0x228>)
 8002772:	4618      	mov	r0, r3
 8002774:	f009 f960 	bl	800ba38 <siprintf>
	ILI9341_Draw_Text(getStr, 115,60, BLACK, 3, WHITE);
 8002778:	1d38      	adds	r0, r7, #4
 800277a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	2303      	movs	r3, #3
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2300      	movs	r3, #0
 8002786:	223c      	movs	r2, #60	; 0x3c
 8002788:	2173      	movs	r1, #115	; 0x73
 800278a:	f002 f9c5 	bl	8004b18 <ILI9341_Draw_Text>

	sprintf(getStr,"Time");
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	4967      	ldr	r1, [pc, #412]	; (8002930 <showSetTime+0x22c>)
 8002792:	4618      	mov	r0, r3
 8002794:	f009 f950 	bl	800ba38 <siprintf>
	ILI9341_Draw_Text(getStr, 115,130, BLACK, 3, WHITE);
 8002798:	1d38      	adds	r0, r7, #4
 800279a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800279e:	9301      	str	r3, [sp, #4]
 80027a0:	2303      	movs	r3, #3
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	2300      	movs	r3, #0
 80027a6:	2282      	movs	r2, #130	; 0x82
 80027a8:	2173      	movs	r1, #115	; 0x73
 80027aa:	f002 f9b5 	bl	8004b18 <ILI9341_Draw_Text>

	if (currentIndex == 0)
 80027ae:	4b61      	ldr	r3, [pc, #388]	; (8002934 <showSetTime+0x230>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10b      	bne.n	80027ce <showSetTime+0xca>
		ILI9341_Draw_Text(strdate, 55,100, BLUE, 2, WHITE);
 80027b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	2302      	movs	r3, #2
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	231f      	movs	r3, #31
 80027c2:	2264      	movs	r2, #100	; 0x64
 80027c4:	2137      	movs	r1, #55	; 0x37
 80027c6:	4850      	ldr	r0, [pc, #320]	; (8002908 <showSetTime+0x204>)
 80027c8:	f002 f9a6 	bl	8004b18 <ILI9341_Draw_Text>
 80027cc:	e00a      	b.n	80027e4 <showSetTime+0xe0>
	else
		ILI9341_Draw_Text(strdate, 55,100, BLACK, 2, WHITE);
 80027ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d2:	9301      	str	r3, [sp, #4]
 80027d4:	2302      	movs	r3, #2
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2300      	movs	r3, #0
 80027da:	2264      	movs	r2, #100	; 0x64
 80027dc:	2137      	movs	r1, #55	; 0x37
 80027de:	484a      	ldr	r0, [pc, #296]	; (8002908 <showSetTime+0x204>)
 80027e0:	f002 f99a 	bl	8004b18 <ILI9341_Draw_Text>




	if (currentIndex == 1)
 80027e4:	4b53      	ldr	r3, [pc, #332]	; (8002934 <showSetTime+0x230>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10b      	bne.n	8002804 <showSetTime+0x100>
		ILI9341_Draw_Text(strmonth, 100,100, BLUE, 2, WHITE);
 80027ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	2302      	movs	r3, #2
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	231f      	movs	r3, #31
 80027f8:	2264      	movs	r2, #100	; 0x64
 80027fa:	2164      	movs	r1, #100	; 0x64
 80027fc:	4846      	ldr	r0, [pc, #280]	; (8002918 <showSetTime+0x214>)
 80027fe:	f002 f98b 	bl	8004b18 <ILI9341_Draw_Text>
 8002802:	e00a      	b.n	800281a <showSetTime+0x116>
	else
		ILI9341_Draw_Text(strmonth, 100,100, BLACK, 2, WHITE);
 8002804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002808:	9301      	str	r3, [sp, #4]
 800280a:	2302      	movs	r3, #2
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	2300      	movs	r3, #0
 8002810:	2264      	movs	r2, #100	; 0x64
 8002812:	2164      	movs	r1, #100	; 0x64
 8002814:	4840      	ldr	r0, [pc, #256]	; (8002918 <showSetTime+0x214>)
 8002816:	f002 f97f 	bl	8004b18 <ILI9341_Draw_Text>



	if (currentIndex== 2)
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <showSetTime+0x230>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d10b      	bne.n	800283a <showSetTime+0x136>
		ILI9341_Draw_Text(stryear, 215,100, BLUE, 2, WHITE);
 8002822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2302      	movs	r3, #2
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	231f      	movs	r3, #31
 800282e:	2264      	movs	r2, #100	; 0x64
 8002830:	21d7      	movs	r1, #215	; 0xd7
 8002832:	483c      	ldr	r0, [pc, #240]	; (8002924 <showSetTime+0x220>)
 8002834:	f002 f970 	bl	8004b18 <ILI9341_Draw_Text>
 8002838:	e00a      	b.n	8002850 <showSetTime+0x14c>
	else
		ILI9341_Draw_Text(stryear, 215,100, BLACK, 2, WHITE);
 800283a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2302      	movs	r3, #2
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2300      	movs	r3, #0
 8002846:	2264      	movs	r2, #100	; 0x64
 8002848:	21d7      	movs	r1, #215	; 0xd7
 800284a:	4836      	ldr	r0, [pc, #216]	; (8002924 <showSetTime+0x220>)
 800284c:	f002 f964 	bl	8004b18 <ILI9341_Draw_Text>


	// hour

	sprintf(getStr,"%02d",setHour);
 8002850:	4b39      	ldr	r3, [pc, #228]	; (8002938 <showSetTime+0x234>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	1d3b      	adds	r3, r7, #4
 8002856:	492b      	ldr	r1, [pc, #172]	; (8002904 <showSetTime+0x200>)
 8002858:	4618      	mov	r0, r3
 800285a:	f009 f8ed 	bl	800ba38 <siprintf>



	if (currentIndex== 3)
 800285e:	4b35      	ldr	r3, [pc, #212]	; (8002934 <showSetTime+0x230>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b03      	cmp	r3, #3
 8002864:	d10b      	bne.n	800287e <showSetTime+0x17a>
			ILI9341_Draw_Text(getStr, 120,170, BLUE, 2, WHITE);
 8002866:	1d38      	adds	r0, r7, #4
 8002868:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2302      	movs	r3, #2
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	231f      	movs	r3, #31
 8002874:	22aa      	movs	r2, #170	; 0xaa
 8002876:	2178      	movs	r1, #120	; 0x78
 8002878:	f002 f94e 	bl	8004b18 <ILI9341_Draw_Text>
 800287c:	e00a      	b.n	8002894 <showSetTime+0x190>
		else
			ILI9341_Draw_Text(getStr, 120,170, BLACK, 2, WHITE);
 800287e:	1d38      	adds	r0, r7, #4
 8002880:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2302      	movs	r3, #2
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2300      	movs	r3, #0
 800288c:	22aa      	movs	r2, #170	; 0xaa
 800288e:	2178      	movs	r1, #120	; 0x78
 8002890:	f002 f942 	bl	8004b18 <ILI9341_Draw_Text>

	sprintf(getStr,":");
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4929      	ldr	r1, [pc, #164]	; (800293c <showSetTime+0x238>)
 8002898:	4618      	mov	r0, r3
 800289a:	f009 f8cd 	bl	800ba38 <siprintf>
	ILI9341_Draw_Text(getStr, 150,170, BLACK, 2, WHITE);
 800289e:	1d38      	adds	r0, r7, #4
 80028a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	2302      	movs	r3, #2
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2300      	movs	r3, #0
 80028ac:	22aa      	movs	r2, #170	; 0xaa
 80028ae:	2196      	movs	r1, #150	; 0x96
 80028b0:	f002 f932 	bl	8004b18 <ILI9341_Draw_Text>

	// minute
	sprintf(getStr,"%02d",setMin);
 80028b4:	4b22      	ldr	r3, [pc, #136]	; (8002940 <showSetTime+0x23c>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	4912      	ldr	r1, [pc, #72]	; (8002904 <showSetTime+0x200>)
 80028bc:	4618      	mov	r0, r3
 80028be:	f009 f8bb 	bl	800ba38 <siprintf>

	if (currentIndex== 4)
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <showSetTime+0x230>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d10b      	bne.n	80028e2 <showSetTime+0x1de>
			ILI9341_Draw_Text(getStr, 160,170, BLUE, 2, WHITE);
 80028ca:	1d38      	adds	r0, r7, #4
 80028cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	2302      	movs	r3, #2
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	231f      	movs	r3, #31
 80028d8:	22aa      	movs	r2, #170	; 0xaa
 80028da:	21a0      	movs	r1, #160	; 0xa0
 80028dc:	f002 f91c 	bl	8004b18 <ILI9341_Draw_Text>
		else
			ILI9341_Draw_Text(getStr, 160,170, BLACK, 2, WHITE);

//	ILI9341_Draw_Text(day[dow], 50, 10 , BLACK, 4, WHITE);
}
 80028e0:	e00a      	b.n	80028f8 <showSetTime+0x1f4>
			ILI9341_Draw_Text(getStr, 160,170, BLACK, 2, WHITE);
 80028e2:	1d38      	adds	r0, r7, #4
 80028e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2302      	movs	r3, #2
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	22aa      	movs	r2, #170	; 0xaa
 80028f2:	21a0      	movs	r1, #160	; 0xa0
 80028f4:	f002 f910 	bl	8004b18 <ILI9341_Draw_Text>
}
 80028f8:	bf00      	nop
 80028fa:	3768      	adds	r7, #104	; 0x68
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000014 	.word	0x20000014
 8002904:	0800e9e4 	.word	0x0800e9e4
 8002908:	20000494 	.word	0x20000494
 800290c:	20000018 	.word	0x20000018
 8002910:	2000003c 	.word	0x2000003c
 8002914:	0800ea2c 	.word	0x0800ea2c
 8002918:	20000498 	.word	0x20000498
 800291c:	2000001c 	.word	0x2000001c
 8002920:	0800e9d8 	.word	0x0800e9d8
 8002924:	200004a8 	.word	0x200004a8
 8002928:	0800ea30 	.word	0x0800ea30
 800292c:	0800ea38 	.word	0x0800ea38
 8002930:	0800ea40 	.word	0x0800ea40
 8002934:	20000535 	.word	0x20000535
 8002938:	20000010 	.word	0x20000010
 800293c:	0800ea48 	.word	0x0800ea48
 8002940:	2000000c 	.word	0x2000000c

08002944 <showSetAlarm>:

void showSetAlarm(){
 8002944:	b580      	push	{r7, lr}
 8002946:	b09c      	sub	sp, #112	; 0x70
 8002948:	af02      	add	r7, sp, #8



		char getStr[100] = "";
 800294a:	2300      	movs	r3, #0
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	1d3b      	adds	r3, r7, #4
 8002950:	2260      	movs	r2, #96	; 0x60
 8002952:	2100      	movs	r1, #0
 8002954:	4618      	mov	r0, r3
 8002956:	f009 f8d2 	bl	800bafe <memset>


		sprintf(getStr,"Setting Alarm Time");
 800295a:	463b      	mov	r3, r7
 800295c:	4951      	ldr	r1, [pc, #324]	; (8002aa4 <showSetAlarm+0x160>)
 800295e:	4618      	mov	r0, r3
 8002960:	f009 f86a 	bl	800ba38 <siprintf>
		ILI9341_Draw_Text(getStr, 50, 20, BLACK , 2, WHITE);
 8002964:	4638      	mov	r0, r7
 8002966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	2302      	movs	r3, #2
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	2214      	movs	r2, #20
 8002974:	2132      	movs	r1, #50	; 0x32
 8002976:	f002 f8cf 	bl	8004b18 <ILI9341_Draw_Text>


		ILI9341_Draw_Text("Hour   Minute", 90,90, BLACK, 2, WHITE);
 800297a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	2302      	movs	r3, #2
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2300      	movs	r3, #0
 8002986:	225a      	movs	r2, #90	; 0x5a
 8002988:	215a      	movs	r1, #90	; 0x5a
 800298a:	4847      	ldr	r0, [pc, #284]	; (8002aa8 <showSetAlarm+0x164>)
 800298c:	f002 f8c4 	bl	8004b18 <ILI9341_Draw_Text>

		sprintf(getStr,"%02d",setAlarmHour);
 8002990:	4b46      	ldr	r3, [pc, #280]	; (8002aac <showSetAlarm+0x168>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	463b      	mov	r3, r7
 8002996:	4946      	ldr	r1, [pc, #280]	; (8002ab0 <showSetAlarm+0x16c>)
 8002998:	4618      	mov	r0, r3
 800299a:	f009 f84d 	bl	800ba38 <siprintf>

		if (currentIndex== 2)
 800299e:	4b45      	ldr	r3, [pc, #276]	; (8002ab4 <showSetAlarm+0x170>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d10b      	bne.n	80029be <showSetAlarm+0x7a>
			ILI9341_Draw_Text(getStr, 95,110, BLUE, 3, WHITE);
 80029a6:	4638      	mov	r0, r7
 80029a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	2303      	movs	r3, #3
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	231f      	movs	r3, #31
 80029b4:	226e      	movs	r2, #110	; 0x6e
 80029b6:	215f      	movs	r1, #95	; 0x5f
 80029b8:	f002 f8ae 	bl	8004b18 <ILI9341_Draw_Text>
 80029bc:	e00a      	b.n	80029d4 <showSetAlarm+0x90>
		else
			ILI9341_Draw_Text(getStr, 95,110, BLACK, 3, WHITE);
 80029be:	4638      	mov	r0, r7
 80029c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c4:	9301      	str	r3, [sp, #4]
 80029c6:	2303      	movs	r3, #3
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	2300      	movs	r3, #0
 80029cc:	226e      	movs	r2, #110	; 0x6e
 80029ce:	215f      	movs	r1, #95	; 0x5f
 80029d0:	f002 f8a2 	bl	8004b18 <ILI9341_Draw_Text>

		// minute
		sprintf(getStr,"%02d",setAlarmMin);
 80029d4:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <showSetAlarm+0x174>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	463b      	mov	r3, r7
 80029da:	4935      	ldr	r1, [pc, #212]	; (8002ab0 <showSetAlarm+0x16c>)
 80029dc:	4618      	mov	r0, r3
 80029de:	f009 f82b 	bl	800ba38 <siprintf>

		if (currentIndex== 3)
 80029e2:	4b34      	ldr	r3, [pc, #208]	; (8002ab4 <showSetAlarm+0x170>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d10b      	bne.n	8002a02 <showSetAlarm+0xbe>
			ILI9341_Draw_Text(getStr, 184,110, BLUE, 3, WHITE);
 80029ea:	4638      	mov	r0, r7
 80029ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2303      	movs	r3, #3
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	231f      	movs	r3, #31
 80029f8:	226e      	movs	r2, #110	; 0x6e
 80029fa:	21b8      	movs	r1, #184	; 0xb8
 80029fc:	f002 f88c 	bl	8004b18 <ILI9341_Draw_Text>
 8002a00:	e00a      	b.n	8002a18 <showSetAlarm+0xd4>
		else
			ILI9341_Draw_Text(getStr, 184,110, BLACK, 3, WHITE);
 8002a02:	4638      	mov	r0, r7
 8002a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	226e      	movs	r2, #110	; 0x6e
 8002a12:	21b8      	movs	r1, #184	; 0xb8
 8002a14:	f002 f880 	bl	8004b18 <ILI9341_Draw_Text>

		sprintf(getStr,"%s",day[setAlarmDay]);
 8002a18:	4b28      	ldr	r3, [pc, #160]	; (8002abc <showSetAlarm+0x178>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a28      	ldr	r2, [pc, #160]	; (8002ac0 <showSetAlarm+0x17c>)
 8002a1e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a22:	463b      	mov	r3, r7
 8002a24:	4927      	ldr	r1, [pc, #156]	; (8002ac4 <showSetAlarm+0x180>)
 8002a26:	4618      	mov	r0, r3
 8002a28:	f009 f806 	bl	800ba38 <siprintf>
		uint32_t dow_x = 75 + (9 - strlen(day[setAlarmDay])) * 12;
 8002a2c:	4b23      	ldr	r3, [pc, #140]	; (8002abc <showSetAlarm+0x178>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a23      	ldr	r2, [pc, #140]	; (8002ac0 <showSetAlarm+0x17c>)
 8002a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fc52 	bl	80002e0 <strlen>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4613      	mov	r3, r2
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	33b7      	adds	r3, #183	; 0xb7
 8002a48:	667b      	str	r3, [r7, #100]	; 0x64
		if (currentIndex== 4)
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <showSetAlarm+0x170>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d10c      	bne.n	8002a6c <showSetAlarm+0x128>
			ILI9341_Draw_Text(getStr, dow_x,175, BLUE, 3, WHITE);
 8002a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a54:	b2d9      	uxtb	r1, r3
 8002a56:	4638      	mov	r0, r7
 8002a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	2303      	movs	r3, #3
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	231f      	movs	r3, #31
 8002a64:	22af      	movs	r2, #175	; 0xaf
 8002a66:	f002 f857 	bl	8004b18 <ILI9341_Draw_Text>
 8002a6a:	e00b      	b.n	8002a84 <showSetAlarm+0x140>
		else
			ILI9341_Draw_Text(getStr, dow_x,175, BLACK, 3, WHITE);
 8002a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a6e:	b2d9      	uxtb	r1, r3
 8002a70:	4638      	mov	r0, r7
 8002a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a76:	9301      	str	r3, [sp, #4]
 8002a78:	2303      	movs	r3, #3
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	22af      	movs	r2, #175	; 0xaf
 8002a80:	f002 f84a 	bl	8004b18 <ILI9341_Draw_Text>



		ILI9341_Draw_Text(":", 155,110, BLACK, 3, WHITE);
 8002a84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	226e      	movs	r2, #110	; 0x6e
 8002a92:	219b      	movs	r1, #155	; 0x9b
 8002a94:	480c      	ldr	r0, [pc, #48]	; (8002ac8 <showSetAlarm+0x184>)
 8002a96:	f002 f83f 	bl	8004b18 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text(strS, 160,20, BLACK, 2, WHITE);
	//ILI9341_Draw_Text(day[dow], 60,200, BLACK, 2, WHITE);


//	ILI9341_Draw_Text(day[dow], 10, 200 , BLACK, 4, WHITE);
}
 8002a9a:	bf00      	nop
 8002a9c:	3768      	adds	r7, #104	; 0x68
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	0800ea4c 	.word	0x0800ea4c
 8002aa8:	0800ea60 	.word	0x0800ea60
 8002aac:	20000434 	.word	0x20000434
 8002ab0:	0800e9e4 	.word	0x0800e9e4
 8002ab4:	20000535 	.word	0x20000535
 8002ab8:	20000430 	.word	0x20000430
 8002abc:	20000438 	.word	0x20000438
 8002ac0:	20000020 	.word	0x20000020
 8002ac4:	0800ea2c 	.word	0x0800ea2c
 8002ac8:	0800ea48 	.word	0x0800ea48

08002acc <songSelectpage>:



void songSelectpage(){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af02      	add	r7, sp, #8
	for(int i=0;i<25;i++){
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad6:	e017      	b.n	8002b08 <songSelectpage+0x3c>
		ILI9341_Draw_Rectangle(starPos[i][0]-6, starPos[i][1]-6, 12, 12, BLACK);
 8002ad8:	4a69      	ldr	r2, [pc, #420]	; (8002c80 <songSelectpage+0x1b4>)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b06      	subs	r3, #6
 8002ae4:	b298      	uxth	r0, r3
 8002ae6:	4a66      	ldr	r2, [pc, #408]	; (8002c80 <songSelectpage+0x1b4>)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b06      	subs	r3, #6
 8002af4:	b299      	uxth	r1, r3
 8002af6:	2300      	movs	r3, #0
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	230c      	movs	r3, #12
 8002afc:	220c      	movs	r2, #12
 8002afe:	f002 fc15 	bl	800532c <ILI9341_Draw_Rectangle>
	for(int i=0;i<25;i++){
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	3301      	adds	r3, #1
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	2b18      	cmp	r3, #24
 8002b0c:	dde4      	ble.n	8002ad8 <songSelectpage+0xc>
	}
	for(int i =0;i<25;i++){
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
 8002b12:	e036      	b.n	8002b82 <songSelectpage+0xb6>
		uint32_t x = 30+ HAL_RNG_GetRandomNumber(&hrng) % 200;
 8002b14:	485b      	ldr	r0, [pc, #364]	; (8002c84 <songSelectpage+0x1b8>)
 8002b16:	f005 ff03 	bl	8008920 <HAL_RNG_GetRandomNumber>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4b5a      	ldr	r3, [pc, #360]	; (8002c88 <songSelectpage+0x1bc>)
 8002b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8002b22:	099b      	lsrs	r3, r3, #6
 8002b24:	21c8      	movs	r1, #200	; 0xc8
 8002b26:	fb01 f303 	mul.w	r3, r1, r3
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	331e      	adds	r3, #30
 8002b2e:	61bb      	str	r3, [r7, #24]
		uint32_t y = 20+HAL_RNG_GetRandomNumber(&hrng) % 210;
 8002b30:	4854      	ldr	r0, [pc, #336]	; (8002c84 <songSelectpage+0x1b8>)
 8002b32:	f005 fef5 	bl	8008920 <HAL_RNG_GetRandomNumber>
 8002b36:	4602      	mov	r2, r0
 8002b38:	0853      	lsrs	r3, r2, #1
 8002b3a:	4954      	ldr	r1, [pc, #336]	; (8002c8c <songSelectpage+0x1c0>)
 8002b3c:	fba1 1303 	umull	r1, r3, r1, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	21d2      	movs	r1, #210	; 0xd2
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	3314      	adds	r3, #20
 8002b4c:	617b      	str	r3, [r7, #20]
		ILI9341_Draw_Star(x, y, 5, 0xfde0);
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	b298      	uxth	r0, r3
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	b299      	uxth	r1, r3
 8002b56:	f64f 53e0 	movw	r3, #64992	; 0xfde0
 8002b5a:	2205      	movs	r2, #5
 8002b5c:	f000 fd94 	bl	8003688 <ILI9341_Draw_Star>
		starPos[i][0] = x;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	b2d9      	uxtb	r1, r3
 8002b64:	4a46      	ldr	r2, [pc, #280]	; (8002c80 <songSelectpage+0x1b4>)
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
		starPos[i][1] = y;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	b2d9      	uxtb	r1, r3
 8002b70:	4a43      	ldr	r2, [pc, #268]	; (8002c80 <songSelectpage+0x1b4>)
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	460a      	mov	r2, r1
 8002b7a:	705a      	strb	r2, [r3, #1]
	for(int i =0;i<25;i++){
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	2b18      	cmp	r3, #24
 8002b86:	ddc5      	ble.n	8002b14 <songSelectpage+0x48>
	}
	ILI9341_Draw_Text("Song Number : ", 40,110, WHITE, 2,BLACK );
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b94:	226e      	movs	r2, #110	; 0x6e
 8002b96:	2128      	movs	r1, #40	; 0x28
 8002b98:	483d      	ldr	r0, [pc, #244]	; (8002c90 <songSelectpage+0x1c4>)
 8002b9a:	f001 ffbd 	bl	8004b18 <ILI9341_Draw_Text>

	char getname[20] = "";
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	1d3b      	adds	r3, r7, #4
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	605a      	str	r2, [r3, #4]
 8002baa:	609a      	str	r2, [r3, #8]
 8002bac:	60da      	str	r2, [r3, #12]
	sprintf(getname,"%d",songList);
 8002bae:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <songSelectpage+0x1c8>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	4938      	ldr	r1, [pc, #224]	; (8002c98 <songSelectpage+0x1cc>)
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f008 ff3d 	bl	800ba38 <siprintf>
	HAL_UART_Transmit(&huart3, getname, strlen(getname), 1000);
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fd fb8d 	bl	80002e0 <strlen>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	4639      	mov	r1, r7
 8002bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bd0:	4832      	ldr	r0, [pc, #200]	; (8002c9c <songSelectpage+0x1d0>)
 8002bd2:	f007 fd63 	bl	800a69c <HAL_UART_Transmit>
	if(previous_songlist != songList){
 8002bd6:	4b32      	ldr	r3, [pc, #200]	; (8002ca0 <songSelectpage+0x1d4>)
 8002bd8:	881a      	ldrh	r2, [r3, #0]
 8002bda:	4b2e      	ldr	r3, [pc, #184]	; (8002c94 <songSelectpage+0x1c8>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d014      	beq.n	8002c0c <songSelectpage+0x140>
		ILI9341_Draw_Filled_Rectangle_Coord(200,105, 240,130, BLACK);
 8002be2:	2300      	movs	r3, #0
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2382      	movs	r3, #130	; 0x82
 8002be8:	22f0      	movs	r2, #240	; 0xf0
 8002bea:	2169      	movs	r1, #105	; 0x69
 8002bec:	20c8      	movs	r0, #200	; 0xc8
 8002bee:	f001 fe9a 	bl	8004926 <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(40,140, 300,160, BLACK);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	23a0      	movs	r3, #160	; 0xa0
 8002bf8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bfc:	218c      	movs	r1, #140	; 0x8c
 8002bfe:	2028      	movs	r0, #40	; 0x28
 8002c00:	f001 fe91 	bl	8004926 <ILI9341_Draw_Filled_Rectangle_Coord>
		previous_songlist = songList;
 8002c04:	4b23      	ldr	r3, [pc, #140]	; (8002c94 <songSelectpage+0x1c8>)
 8002c06:	881a      	ldrh	r2, [r3, #0]
 8002c08:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <songSelectpage+0x1d4>)
 8002c0a:	801a      	strh	r2, [r3, #0]
	}
	ILI9341_Draw_Text(getname, 200,105, WHITE, 3, BLACK);
 8002c0c:	4638      	mov	r0, r7
 8002c0e:	2300      	movs	r3, #0
 8002c10:	9301      	str	r3, [sp, #4]
 8002c12:	2303      	movs	r3, #3
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c1a:	2269      	movs	r2, #105	; 0x69
 8002c1c:	21c8      	movs	r1, #200	; 0xc8
 8002c1e:	f001 ff7b 	bl	8004b18 <ILI9341_Draw_Text>

	uint16_t song_x = 70 + (16-strlen(songs[songList-1]))*5;
 8002c22:	4b1c      	ldr	r3, [pc, #112]	; (8002c94 <songSelectpage+0x1c8>)
 8002c24:	881b      	ldrh	r3, [r3, #0]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	4a1e      	ldr	r2, [pc, #120]	; (8002ca4 <songSelectpage+0x1d8>)
 8002c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fb56 	bl	80002e0 <strlen>
 8002c34:	4603      	mov	r3, r0
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	0392      	lsls	r2, r2, #14
 8002c3c:	1ad2      	subs	r2, r2, r3
 8002c3e:	0092      	lsls	r2, r2, #2
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3396      	adds	r3, #150	; 0x96
 8002c46:	83fb      	strh	r3, [r7, #30]
	sprintf(getname,"%s",songs[songList-1]);
 8002c48:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <songSelectpage+0x1c8>)
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <songSelectpage+0x1d8>)
 8002c50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002c54:	463b      	mov	r3, r7
 8002c56:	4914      	ldr	r1, [pc, #80]	; (8002ca8 <songSelectpage+0x1dc>)
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f008 feed 	bl	800ba38 <siprintf>

	ILI9341_Draw_Text(getname, song_x,140, WHITE, 2, BLACK);
 8002c5e:	8bfb      	ldrh	r3, [r7, #30]
 8002c60:	b2d9      	uxtb	r1, r3
 8002c62:	4638      	mov	r0, r7
 8002c64:	2300      	movs	r3, #0
 8002c66:	9301      	str	r3, [sp, #4]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c70:	228c      	movs	r2, #140	; 0x8c
 8002c72:	f001 ff51 	bl	8004b18 <ILI9341_Draw_Text>
//	ILI9341_Draw_Filled_Circle(X, Y, Radius, Colour)

}
 8002c76:	bf00      	nop
 8002c78:	3728      	adds	r7, #40	; 0x28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000558 	.word	0x20000558
 8002c84:	2000058c 	.word	0x2000058c
 8002c88:	51eb851f 	.word	0x51eb851f
 8002c8c:	9c09c09d 	.word	0x9c09c09d
 8002c90:	0800ea70 	.word	0x0800ea70
 8002c94:	20000070 	.word	0x20000070
 8002c98:	0800e9d8 	.word	0x0800e9d8
 8002c9c:	200007cc 	.word	0x200007cc
 8002ca0:	20000072 	.word	0x20000072
 8002ca4:	20000074 	.word	0x20000074
 8002ca8:	0800ea2c 	.word	0x0800ea2c

08002cac <setPage>:

void setPage(){
 8002cac:	b5b0      	push	{r4, r5, r7, lr}
 8002cae:	b090      	sub	sp, #64	; 0x40
 8002cb0:	af02      	add	r7, sp, #8
	if((count-starttime) > 1000){
 8002cb2:	4b98      	ldr	r3, [pc, #608]	; (8002f14 <setPage+0x268>)
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4b98      	ldr	r3, [pc, #608]	; (8002f18 <setPage+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc0:	d919      	bls.n	8002cf6 <setPage+0x4a>
		if(screen == 2)
 8002cc2:	4b96      	ldr	r3, [pc, #600]	; (8002f1c <setPage+0x270>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d102      	bne.n	8002cd0 <setPage+0x24>
			showSetTime();
 8002cca:	f7ff fd1b 	bl	8002704 <showSetTime>
 8002cce:	e00e      	b.n	8002cee <setPage+0x42>
		else if(screen == 3)
 8002cd0:	4b92      	ldr	r3, [pc, #584]	; (8002f1c <setPage+0x270>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b03      	cmp	r3, #3
 8002cd6:	d102      	bne.n	8002cde <setPage+0x32>
			showSetAlarm();
 8002cd8:	f7ff fe34 	bl	8002944 <showSetAlarm>
 8002cdc:	e007      	b.n	8002cee <setPage+0x42>

		else if(screen == 4){
 8002cde:	4b8f      	ldr	r3, [pc, #572]	; (8002f1c <setPage+0x270>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d103      	bne.n	8002cee <setPage+0x42>
			songSelectpage();
 8002ce6:	f7ff fef1 	bl	8002acc <songSelectpage>
			selectSong();
 8002cea:	f7fd fd23 	bl	8000734 <selectSong>
//			HAL_UART_Transmit(&huart3, songList,  , Timeout);
		}

		starttime = count;
 8002cee:	4b89      	ldr	r3, [pc, #548]	; (8002f14 <setPage+0x268>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a89      	ldr	r2, [pc, #548]	; (8002f18 <setPage+0x26c>)
 8002cf4:	6013      	str	r3, [r2, #0]
	}




   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && count - debounceTime > 1000){
 8002cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002cfa:	4889      	ldr	r0, [pc, #548]	; (8002f20 <setPage+0x274>)
 8002cfc:	f003 fe60 	bl	80069c0 <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f040 8156 	bne.w	8002fb4 <setPage+0x308>
 8002d08:	4b82      	ldr	r3, [pc, #520]	; (8002f14 <setPage+0x268>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b85      	ldr	r3, [pc, #532]	; (8002f24 <setPage+0x278>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d16:	f240 814d 	bls.w	8002fb4 <setPage+0x308>
	   debounceTime = count;
 8002d1a:	4b7e      	ldr	r3, [pc, #504]	; (8002f14 <setPage+0x268>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a81      	ldr	r2, [pc, #516]	; (8002f24 <setPage+0x278>)
 8002d20:	6013      	str	r3, [r2, #0]
	   switch(currentIndex){
 8002d22:	4b81      	ldr	r3, [pc, #516]	; (8002f28 <setPage+0x27c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	f200 8336 	bhi.w	8003398 <setPage+0x6ec>
 8002d2c:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <setPage+0x88>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d49 	.word	0x08002d49
 8002d38:	08002e03 	.word	0x08002e03
 8002d3c:	08002e45 	.word	0x08002e45
 8002d40:	08002e89 	.word	0x08002e89
 8002d44:	08002ee5 	.word	0x08002ee5
	   case 0:
		   if(screen == 2){
 8002d48:	4b74      	ldr	r3, [pc, #464]	; (8002f1c <setPage+0x270>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	f040 8127 	bne.w	8002fa0 <setPage+0x2f4>
			   setDate++;
 8002d52:	4b76      	ldr	r3, [pc, #472]	; (8002f2c <setPage+0x280>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a74      	ldr	r2, [pc, #464]	; (8002f2c <setPage+0x280>)
 8002d5a:	6013      	str	r3, [r2, #0]
			   if(setMonth == 3 || setMonth == 5 || setMonth == 8 || setMonth == 10)
 8002d5c:	4b74      	ldr	r3, [pc, #464]	; (8002f30 <setPage+0x284>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d00b      	beq.n	8002d7c <setPage+0xd0>
 8002d64:	4b72      	ldr	r3, [pc, #456]	; (8002f30 <setPage+0x284>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b05      	cmp	r3, #5
 8002d6a:	d007      	beq.n	8002d7c <setPage+0xd0>
 8002d6c:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <setPage+0x284>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d003      	beq.n	8002d7c <setPage+0xd0>
 8002d74:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <setPage+0x284>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b0a      	cmp	r3, #10
 8002d7a:	d10d      	bne.n	8002d98 <setPage+0xec>
				   setDate %= 30;
 8002d7c:	4b6b      	ldr	r3, [pc, #428]	; (8002f2c <setPage+0x280>)
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <setPage+0x288>)
 8002d82:	fba3 2301 	umull	r2, r3, r3, r1
 8002d86:	091a      	lsrs	r2, r3, #4
 8002d88:	4613      	mov	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	1aca      	subs	r2, r1, r3
 8002d92:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <setPage+0x280>)
 8002d94:	601a      	str	r2, [r3, #0]
			   else{
				   setDate %= 31;
			   }
		   }

		   break;
 8002d96:	e103      	b.n	8002fa0 <setPage+0x2f4>
			   else if(setMonth == 1)
 8002d98:	4b65      	ldr	r3, [pc, #404]	; (8002f30 <setPage+0x284>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d120      	bne.n	8002de2 <setPage+0x136>
				   setDate = setYear%4==0 ? setDate%29 : setDate%28;
 8002da0:	4b65      	ldr	r3, [pc, #404]	; (8002f38 <setPage+0x28c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10c      	bne.n	8002dc6 <setPage+0x11a>
 8002dac:	4b5f      	ldr	r3, [pc, #380]	; (8002f2c <setPage+0x280>)
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <setPage+0x290>)
 8002db2:	fba3 2301 	umull	r2, r3, r3, r1
 8002db6:	091a      	lsrs	r2, r3, #4
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	1aca      	subs	r2, r1, r3
 8002dc4:	e00a      	b.n	8002ddc <setPage+0x130>
 8002dc6:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <setPage+0x280>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	0893      	lsrs	r3, r2, #2
 8002dcc:	495c      	ldr	r1, [pc, #368]	; (8002f40 <setPage+0x294>)
 8002dce:	fba1 3103 	umull	r3, r1, r1, r3
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	1a5b      	subs	r3, r3, r1
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	1ad2      	subs	r2, r2, r3
 8002ddc:	4b53      	ldr	r3, [pc, #332]	; (8002f2c <setPage+0x280>)
 8002dde:	601a      	str	r2, [r3, #0]
		   break;
 8002de0:	e0de      	b.n	8002fa0 <setPage+0x2f4>
				   setDate %= 31;
 8002de2:	4b52      	ldr	r3, [pc, #328]	; (8002f2c <setPage+0x280>)
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	4b57      	ldr	r3, [pc, #348]	; (8002f44 <setPage+0x298>)
 8002de8:	fba3 2301 	umull	r2, r3, r3, r1
 8002dec:	1aca      	subs	r2, r1, r3
 8002dee:	0852      	lsrs	r2, r2, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	091a      	lsrs	r2, r3, #4
 8002df4:	4613      	mov	r3, r2
 8002df6:	015b      	lsls	r3, r3, #5
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	1aca      	subs	r2, r1, r3
 8002dfc:	4b4b      	ldr	r3, [pc, #300]	; (8002f2c <setPage+0x280>)
 8002dfe:	601a      	str	r2, [r3, #0]
		   break;
 8002e00:	e0ce      	b.n	8002fa0 <setPage+0x2f4>
	   case 1:
		   if(screen == 2) {
 8002e02:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <setPage+0x270>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	f040 80cc 	bne.w	8002fa4 <setPage+0x2f8>
			   setMonth++;
 8002e0c:	4b48      	ldr	r3, [pc, #288]	; (8002f30 <setPage+0x284>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a47      	ldr	r2, [pc, #284]	; (8002f30 <setPage+0x284>)
 8002e14:	6013      	str	r3, [r2, #0]
			   setMonth %= 12;
 8002e16:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <setPage+0x284>)
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	4b4b      	ldr	r3, [pc, #300]	; (8002f48 <setPage+0x29c>)
 8002e1c:	fba3 2301 	umull	r2, r3, r3, r1
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	1aca      	subs	r2, r1, r3
 8002e2c:	4b40      	ldr	r3, [pc, #256]	; (8002f30 <setPage+0x284>)
 8002e2e:	601a      	str	r2, [r3, #0]


			   ILI9341_Draw_Rectangle(90,100, 125,30,  WHITE);
 8002e30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e34:	9300      	str	r3, [sp, #0]
 8002e36:	231e      	movs	r3, #30
 8002e38:	227d      	movs	r2, #125	; 0x7d
 8002e3a:	2164      	movs	r1, #100	; 0x64
 8002e3c:	205a      	movs	r0, #90	; 0x5a
 8002e3e:	f002 fa75 	bl	800532c <ILI9341_Draw_Rectangle>
		   }

		   break;
 8002e42:	e0af      	b.n	8002fa4 <setPage+0x2f8>
	   case 2:
		   if(screen == 2) {setYear++;}
 8002e44:	4b35      	ldr	r3, [pc, #212]	; (8002f1c <setPage+0x270>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d105      	bne.n	8002e58 <setPage+0x1ac>
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <setPage+0x28c>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	4a39      	ldr	r2, [pc, #228]	; (8002f38 <setPage+0x28c>)
 8002e54:	6013      	str	r3, [r2, #0]
		   else if(screen == 3){
			   setAlarmHour++;
			   setAlarmHour %=24;
		   }

		   break;
 8002e56:	e0a7      	b.n	8002fa8 <setPage+0x2fc>
		   else if(screen == 3){
 8002e58:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <setPage+0x270>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	f040 80a3 	bne.w	8002fa8 <setPage+0x2fc>
			   setAlarmHour++;
 8002e62:	4b3a      	ldr	r3, [pc, #232]	; (8002f4c <setPage+0x2a0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <setPage+0x2a0>)
 8002e6a:	6013      	str	r3, [r2, #0]
			   setAlarmHour %=24;
 8002e6c:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <setPage+0x2a0>)
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <setPage+0x29c>)
 8002e72:	fba3 2301 	umull	r2, r3, r3, r1
 8002e76:	091a      	lsrs	r2, r3, #4
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	1aca      	subs	r2, r1, r3
 8002e82:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <setPage+0x2a0>)
 8002e84:	601a      	str	r2, [r3, #0]
		   break;
 8002e86:	e08f      	b.n	8002fa8 <setPage+0x2fc>
	   case 3:
		   if(screen == 2){
 8002e88:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <setPage+0x270>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d112      	bne.n	8002eb6 <setPage+0x20a>
			   setHour++;
 8002e90:	4b2f      	ldr	r3, [pc, #188]	; (8002f50 <setPage+0x2a4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	4a2e      	ldr	r2, [pc, #184]	; (8002f50 <setPage+0x2a4>)
 8002e98:	6013      	str	r3, [r2, #0]
			   setHour %= 24;
 8002e9a:	4b2d      	ldr	r3, [pc, #180]	; (8002f50 <setPage+0x2a4>)
 8002e9c:	6819      	ldr	r1, [r3, #0]
 8002e9e:	4b2a      	ldr	r3, [pc, #168]	; (8002f48 <setPage+0x29c>)
 8002ea0:	fba3 2301 	umull	r2, r3, r3, r1
 8002ea4:	091a      	lsrs	r2, r3, #4
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	1aca      	subs	r2, r1, r3
 8002eb0:	4b27      	ldr	r3, [pc, #156]	; (8002f50 <setPage+0x2a4>)
 8002eb2:	601a      	str	r2, [r3, #0]
	   		else if(screen == 3){
	   			setAlarmMin++;
	   			setAlarmMin %=60;
	   		}

		   break;
 8002eb4:	e07a      	b.n	8002fac <setPage+0x300>
	   		else if(screen == 3){
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <setPage+0x270>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d176      	bne.n	8002fac <setPage+0x300>
	   			setAlarmMin++;
 8002ebe:	4b25      	ldr	r3, [pc, #148]	; (8002f54 <setPage+0x2a8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	4a23      	ldr	r2, [pc, #140]	; (8002f54 <setPage+0x2a8>)
 8002ec6:	6013      	str	r3, [r2, #0]
	   			setAlarmMin %=60;
 8002ec8:	4b22      	ldr	r3, [pc, #136]	; (8002f54 <setPage+0x2a8>)
 8002eca:	6819      	ldr	r1, [r3, #0]
 8002ecc:	4b19      	ldr	r3, [pc, #100]	; (8002f34 <setPage+0x288>)
 8002ece:	fba3 2301 	umull	r2, r3, r3, r1
 8002ed2:	095a      	lsrs	r2, r3, #5
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	1aca      	subs	r2, r1, r3
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <setPage+0x2a8>)
 8002ee0:	601a      	str	r2, [r3, #0]
		   break;
 8002ee2:	e063      	b.n	8002fac <setPage+0x300>
	   case 4:
	   		if(screen == 2){
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <setPage+0x270>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d137      	bne.n	8002f5c <setPage+0x2b0>
	   			   setMin++;
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <setPage+0x2ac>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a19      	ldr	r2, [pc, #100]	; (8002f58 <setPage+0x2ac>)
 8002ef4:	6013      	str	r3, [r2, #0]
	   			   setMin %= 60;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <setPage+0x2ac>)
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <setPage+0x288>)
 8002efc:	fba3 2301 	umull	r2, r3, r3, r1
 8002f00:	095a      	lsrs	r2, r3, #5
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	1aca      	subs	r2, r1, r3
 8002f0c:	4b12      	ldr	r3, [pc, #72]	; (8002f58 <setPage+0x2ac>)
 8002f0e:	601a      	str	r2, [r3, #0]
	   			setAlarmDay %= 7;

	   			ILI9341_Draw_Rectangle( 70,175, 200,40,  WHITE);
	   		}

	   		break;
 8002f10:	e04e      	b.n	8002fb0 <setPage+0x304>
 8002f12:	bf00      	nop
 8002f14:	20000418 	.word	0x20000418
 8002f18:	2000041c 	.word	0x2000041c
 8002f1c:	20000004 	.word	0x20000004
 8002f20:	40020400 	.word	0x40020400
 8002f24:	2000053c 	.word	0x2000053c
 8002f28:	20000535 	.word	0x20000535
 8002f2c:	20000014 	.word	0x20000014
 8002f30:	20000018 	.word	0x20000018
 8002f34:	88888889 	.word	0x88888889
 8002f38:	2000001c 	.word	0x2000001c
 8002f3c:	8d3dcb09 	.word	0x8d3dcb09
 8002f40:	24924925 	.word	0x24924925
 8002f44:	08421085 	.word	0x08421085
 8002f48:	aaaaaaab 	.word	0xaaaaaaab
 8002f4c:	20000434 	.word	0x20000434
 8002f50:	20000010 	.word	0x20000010
 8002f54:	20000430 	.word	0x20000430
 8002f58:	2000000c 	.word	0x2000000c
	   		else if(screen == 3){
 8002f5c:	4b9a      	ldr	r3, [pc, #616]	; (80031c8 <setPage+0x51c>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	d125      	bne.n	8002fb0 <setPage+0x304>
	   			setAlarmDay++;
 8002f64:	4b99      	ldr	r3, [pc, #612]	; (80031cc <setPage+0x520>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	4a98      	ldr	r2, [pc, #608]	; (80031cc <setPage+0x520>)
 8002f6c:	6013      	str	r3, [r2, #0]
	   			setAlarmDay %= 7;
 8002f6e:	4b97      	ldr	r3, [pc, #604]	; (80031cc <setPage+0x520>)
 8002f70:	6819      	ldr	r1, [r3, #0]
 8002f72:	4b97      	ldr	r3, [pc, #604]	; (80031d0 <setPage+0x524>)
 8002f74:	fba3 2301 	umull	r2, r3, r3, r1
 8002f78:	1aca      	subs	r2, r1, r3
 8002f7a:	0852      	lsrs	r2, r2, #1
 8002f7c:	4413      	add	r3, r2
 8002f7e:	089a      	lsrs	r2, r3, #2
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	1aca      	subs	r2, r1, r3
 8002f88:	4b90      	ldr	r3, [pc, #576]	; (80031cc <setPage+0x520>)
 8002f8a:	601a      	str	r2, [r3, #0]
	   			ILI9341_Draw_Rectangle( 70,175, 200,40,  WHITE);
 8002f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2328      	movs	r3, #40	; 0x28
 8002f94:	22c8      	movs	r2, #200	; 0xc8
 8002f96:	21af      	movs	r1, #175	; 0xaf
 8002f98:	2046      	movs	r0, #70	; 0x46
 8002f9a:	f002 f9c7 	bl	800532c <ILI9341_Draw_Rectangle>
	   		break;
 8002f9e:	e007      	b.n	8002fb0 <setPage+0x304>
		   break;
 8002fa0:	bf00      	nop
 8002fa2:	e1f9      	b.n	8003398 <setPage+0x6ec>
		   break;
 8002fa4:	bf00      	nop
 8002fa6:	e1f7      	b.n	8003398 <setPage+0x6ec>
		   break;
 8002fa8:	bf00      	nop
 8002faa:	e1f5      	b.n	8003398 <setPage+0x6ec>
		   break;
 8002fac:	bf00      	nop
 8002fae:	e1f3      	b.n	8003398 <setPage+0x6ec>
	   		break;
 8002fb0:	bf00      	nop
	   switch(currentIndex){
 8002fb2:	e1f1      	b.n	8003398 <setPage+0x6ec>

	   }
   }
   else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET && count - debounceTime > 1000){
 8002fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fb8:	4886      	ldr	r0, [pc, #536]	; (80031d4 <setPage+0x528>)
 8002fba:	f003 fd01 	bl	80069c0 <HAL_GPIO_ReadPin>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f040 80ab 	bne.w	800311c <setPage+0x470>
 8002fc6:	4b84      	ldr	r3, [pc, #528]	; (80031d8 <setPage+0x52c>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b84      	ldr	r3, [pc, #528]	; (80031dc <setPage+0x530>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fd4:	f240 80a2 	bls.w	800311c <setPage+0x470>
	   debounceTime = count;
 8002fd8:	4b7f      	ldr	r3, [pc, #508]	; (80031d8 <setPage+0x52c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a7f      	ldr	r2, [pc, #508]	; (80031dc <setPage+0x530>)
 8002fde:	6013      	str	r3, [r2, #0]
	   switch(currentIndex){
 8002fe0:	4b7f      	ldr	r3, [pc, #508]	; (80031e0 <setPage+0x534>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	f200 81d7 	bhi.w	8003398 <setPage+0x6ec>
 8002fea:	a201      	add	r2, pc, #4	; (adr r2, 8002ff0 <setPage+0x344>)
 8002fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff0:	08003005 	.word	0x08003005
 8002ff4:	08003021 	.word	0x08003021
 8002ff8:	0800303d 	.word	0x0800303d
 8002ffc:	08003075 	.word	0x08003075
 8003000:	080030bf 	.word	0x080030bf
	   case 0:
		   if(screen == 2){
 8003004:	4b70      	ldr	r3, [pc, #448]	; (80031c8 <setPage+0x51c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d17d      	bne.n	8003108 <setPage+0x45c>
			   if(setDate > 0)
 800300c:	4b75      	ldr	r3, [pc, #468]	; (80031e4 <setPage+0x538>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d079      	beq.n	8003108 <setPage+0x45c>
				   setDate--;
 8003014:	4b73      	ldr	r3, [pc, #460]	; (80031e4 <setPage+0x538>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3b01      	subs	r3, #1
 800301a:	4a72      	ldr	r2, [pc, #456]	; (80031e4 <setPage+0x538>)
 800301c:	6013      	str	r3, [r2, #0]
		   }

		   break;
 800301e:	e073      	b.n	8003108 <setPage+0x45c>
	   case 1:
		   if(screen == 2) {
 8003020:	4b69      	ldr	r3, [pc, #420]	; (80031c8 <setPage+0x51c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d171      	bne.n	800310c <setPage+0x460>
			   if (setMonth > 0)
 8003028:	4b6f      	ldr	r3, [pc, #444]	; (80031e8 <setPage+0x53c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d06d      	beq.n	800310c <setPage+0x460>
				   setMonth--;
 8003030:	4b6d      	ldr	r3, [pc, #436]	; (80031e8 <setPage+0x53c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3b01      	subs	r3, #1
 8003036:	4a6c      	ldr	r2, [pc, #432]	; (80031e8 <setPage+0x53c>)
 8003038:	6013      	str	r3, [r2, #0]
//			   ILI9341_Draw_Rectangle(75,200, 125,40,  WHITE);

		   }

		   break;
 800303a:	e067      	b.n	800310c <setPage+0x460>
	   case 2:
		   if(screen == 2) {
 800303c:	4b62      	ldr	r3, [pc, #392]	; (80031c8 <setPage+0x51c>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d109      	bne.n	8003058 <setPage+0x3ac>
			   if(setYear > 0)
 8003044:	4b69      	ldr	r3, [pc, #420]	; (80031ec <setPage+0x540>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d061      	beq.n	8003110 <setPage+0x464>
				   setYear--;
 800304c:	4b67      	ldr	r3, [pc, #412]	; (80031ec <setPage+0x540>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	4a66      	ldr	r2, [pc, #408]	; (80031ec <setPage+0x540>)
 8003054:	6013      	str	r3, [r2, #0]
					   setAlarmHour--;

						   }
		   }

		   break;
 8003056:	e05b      	b.n	8003110 <setPage+0x464>
		   else if(screen == 3){
 8003058:	4b5b      	ldr	r3, [pc, #364]	; (80031c8 <setPage+0x51c>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b03      	cmp	r3, #3
 800305e:	d157      	bne.n	8003110 <setPage+0x464>
			   if(setAlarmHour > 0){
 8003060:	4b63      	ldr	r3, [pc, #396]	; (80031f0 <setPage+0x544>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d053      	beq.n	8003110 <setPage+0x464>
					   setAlarmHour--;
 8003068:	4b61      	ldr	r3, [pc, #388]	; (80031f0 <setPage+0x544>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	4a60      	ldr	r2, [pc, #384]	; (80031f0 <setPage+0x544>)
 8003070:	6013      	str	r3, [r2, #0]
		   break;
 8003072:	e04d      	b.n	8003110 <setPage+0x464>

	   case 3:
		   if(screen == 2){
 8003074:	4b54      	ldr	r3, [pc, #336]	; (80031c8 <setPage+0x51c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d109      	bne.n	8003090 <setPage+0x3e4>
			   if(setHour > 0){
 800307c:	4b5d      	ldr	r3, [pc, #372]	; (80031f4 <setPage+0x548>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d047      	beq.n	8003114 <setPage+0x468>
	   			   setHour--;
 8003084:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <setPage+0x548>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3b01      	subs	r3, #1
 800308a:	4a5a      	ldr	r2, [pc, #360]	; (80031f4 <setPage+0x548>)
 800308c:	6013      	str	r3, [r2, #0]
			   if(setAlarmMin > 0){
					   setAlarmMin--;
					   ILI9341_Draw_Rectangle(90,175, 125,30,  WHITE);
						   }
		   }
		   break;
 800308e:	e041      	b.n	8003114 <setPage+0x468>
		   else if(screen == 3){
 8003090:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <setPage+0x51c>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b03      	cmp	r3, #3
 8003096:	d13d      	bne.n	8003114 <setPage+0x468>
			   if(setAlarmMin > 0){
 8003098:	4b57      	ldr	r3, [pc, #348]	; (80031f8 <setPage+0x54c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d039      	beq.n	8003114 <setPage+0x468>
					   setAlarmMin--;
 80030a0:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <setPage+0x54c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	4a54      	ldr	r2, [pc, #336]	; (80031f8 <setPage+0x54c>)
 80030a8:	6013      	str	r3, [r2, #0]
					   ILI9341_Draw_Rectangle(90,175, 125,30,  WHITE);
 80030aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	231e      	movs	r3, #30
 80030b2:	227d      	movs	r2, #125	; 0x7d
 80030b4:	21af      	movs	r1, #175	; 0xaf
 80030b6:	205a      	movs	r0, #90	; 0x5a
 80030b8:	f002 f938 	bl	800532c <ILI9341_Draw_Rectangle>
		   break;
 80030bc:	e02a      	b.n	8003114 <setPage+0x468>


	   case 4:
	   		   if(screen == 2){
 80030be:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <setPage+0x51c>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d109      	bne.n	80030da <setPage+0x42e>
	   			   if(setMin > 0){
 80030c6:	4b4d      	ldr	r3, [pc, #308]	; (80031fc <setPage+0x550>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d024      	beq.n	8003118 <setPage+0x46c>
	   	   			   setMin--;
 80030ce:	4b4b      	ldr	r3, [pc, #300]	; (80031fc <setPage+0x550>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	4a49      	ldr	r2, [pc, #292]	; (80031fc <setPage+0x550>)
 80030d6:	6013      	str	r3, [r2, #0]
						   }
			   ILI9341_Draw_Rectangle(60,200, 200,40,  WHITE);
//			   ILI9341_Draw_Rectangle(90,200, 125,40,  RED);
		   }

	   		   break;
 80030d8:	e01e      	b.n	8003118 <setPage+0x46c>
	   		else if(screen == 3){
 80030da:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <setPage+0x51c>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b03      	cmp	r3, #3
 80030e0:	d11a      	bne.n	8003118 <setPage+0x46c>
			   if(setAlarmDay > 0){
 80030e2:	4b3a      	ldr	r3, [pc, #232]	; (80031cc <setPage+0x520>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d004      	beq.n	80030f4 <setPage+0x448>
					   setAlarmDay--;
 80030ea:	4b38      	ldr	r3, [pc, #224]	; (80031cc <setPage+0x520>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	4a36      	ldr	r2, [pc, #216]	; (80031cc <setPage+0x520>)
 80030f2:	6013      	str	r3, [r2, #0]
			   ILI9341_Draw_Rectangle(60,200, 200,40,  WHITE);
 80030f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2328      	movs	r3, #40	; 0x28
 80030fc:	22c8      	movs	r2, #200	; 0xc8
 80030fe:	21c8      	movs	r1, #200	; 0xc8
 8003100:	203c      	movs	r0, #60	; 0x3c
 8003102:	f002 f913 	bl	800532c <ILI9341_Draw_Rectangle>
	   		   break;
 8003106:	e007      	b.n	8003118 <setPage+0x46c>
		   break;
 8003108:	bf00      	nop
 800310a:	e145      	b.n	8003398 <setPage+0x6ec>
		   break;
 800310c:	bf00      	nop
 800310e:	e143      	b.n	8003398 <setPage+0x6ec>
		   break;
 8003110:	bf00      	nop
 8003112:	e141      	b.n	8003398 <setPage+0x6ec>
		   break;
 8003114:	bf00      	nop
 8003116:	e13f      	b.n	8003398 <setPage+0x6ec>
	   		   break;
 8003118:	bf00      	nop
	   switch(currentIndex){
 800311a:	e13d      	b.n	8003398 <setPage+0x6ec>

	   }
   }
   else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTime > 100){
 800311c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003120:	482c      	ldr	r0, [pc, #176]	; (80031d4 <setPage+0x528>)
 8003122:	f003 fc4d 	bl	80069c0 <HAL_GPIO_ReadPin>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	f040 80c1 	bne.w	80032b0 <setPage+0x604>
 800312e:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <setPage+0x52c>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b2a      	ldr	r3, [pc, #168]	; (80031dc <setPage+0x530>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b64      	cmp	r3, #100	; 0x64
 800313a:	f240 80b9 	bls.w	80032b0 <setPage+0x604>
	   debounceTime = count;
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <setPage+0x52c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a26      	ldr	r2, [pc, #152]	; (80031dc <setPage+0x530>)
 8003144:	6013      	str	r3, [r2, #0]
//	   else{

		   // update setting Time


		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8003146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800314a:	4822      	ldr	r0, [pc, #136]	; (80031d4 <setPage+0x528>)
 800314c:	f003 fc38 	bl	80069c0 <HAL_GPIO_ReadPin>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d17d      	bne.n	8003252 <setPage+0x5a6>
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <setPage+0x52c>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b29      	ldr	r3, [pc, #164]	; (8003200 <setPage+0x554>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003164:	4293      	cmp	r3, r2
 8003166:	d974      	bls.n	8003252 <setPage+0x5a6>


			   if(screen == 2){
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <setPage+0x51c>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d149      	bne.n	8003204 <setPage+0x558>
			   DS3231_SetFullDate(setDate+1,setMonth+1, dayofweek(setDate + 1, setMonth + 1, setYear), setYear);
 8003170:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <setPage+0x538>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	3301      	adds	r3, #1
 8003178:	b2dc      	uxtb	r4, r3
 800317a:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <setPage+0x53c>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	3301      	adds	r3, #1
 8003182:	b2dd      	uxtb	r5, r3
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <setPage+0x538>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	1c58      	adds	r0, r3, #1
 800318a:	4b17      	ldr	r3, [pc, #92]	; (80031e8 <setPage+0x53c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3301      	adds	r3, #1
 8003190:	4a16      	ldr	r2, [pc, #88]	; (80031ec <setPage+0x540>)
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	4619      	mov	r1, r3
 8003196:	f000 fc35 	bl	8003a04 <dayofweek>
 800319a:	4603      	mov	r3, r0
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4b13      	ldr	r3, [pc, #76]	; (80031ec <setPage+0x540>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4629      	mov	r1, r5
 80031a6:	4620      	mov	r0, r4
 80031a8:	f7fe f812 	bl	80011d0 <DS3231_SetFullDate>
			   DS3231_SetMinute(setMin);
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <setPage+0x550>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd ffcf 	bl	8001156 <DS3231_SetMinute>
			   DS3231_SetHour(setHour);
 80031b8:	4b0e      	ldr	r3, [pc, #56]	; (80031f4 <setPage+0x548>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd ffb4 	bl	800112c <DS3231_SetHour>
 80031c4:	e039      	b.n	800323a <setPage+0x58e>
 80031c6:	bf00      	nop
 80031c8:	20000004 	.word	0x20000004
 80031cc:	20000438 	.word	0x20000438
 80031d0:	24924925 	.word	0x24924925
 80031d4:	40020400 	.word	0x40020400
 80031d8:	20000418 	.word	0x20000418
 80031dc:	2000053c 	.word	0x2000053c
 80031e0:	20000535 	.word	0x20000535
 80031e4:	20000014 	.word	0x20000014
 80031e8:	20000018 	.word	0x20000018
 80031ec:	2000001c 	.word	0x2000001c
 80031f0:	20000434 	.word	0x20000434
 80031f4:	20000010 	.word	0x20000010
 80031f8:	20000430 	.word	0x20000430
 80031fc:	2000000c 	.word	0x2000000c
 8003200:	20000548 	.word	0x20000548


			   }
			   else if (screen == 3){
 8003204:	4b66      	ldr	r3, [pc, #408]	; (80033a0 <setPage+0x6f4>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d116      	bne.n	800323a <setPage+0x58e>

				   DS3231_SetAlarm1Hour(setAlarmHour);
 800320c:	4b65      	ldr	r3, [pc, #404]	; (80033a4 <setPage+0x6f8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd fddd 	bl	8000dd2 <DS3231_SetAlarm1Hour>
				   DS3231_SetAlarm1Minute(setAlarmMin);
 8003218:	4b63      	ldr	r3, [pc, #396]	; (80033a8 <setPage+0x6fc>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd fdb4 	bl	8000d8c <DS3231_SetAlarm1Minute>
				   DS3231_SetAlarm1Second(0);
 8003224:	2000      	movs	r0, #0
 8003226:	f7fd fd8e 	bl	8000d46 <DS3231_SetAlarm1Second>
				   DS3231_SetAlarm1Day(setAlarmDay+1);  // ใส่ day of week
 800322a:	4b60      	ldr	r3, [pc, #384]	; (80033ac <setPage+0x700>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3301      	adds	r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd fdef 	bl	8000e18 <DS3231_SetAlarm1Day>
			   }


			   debounceTimeSave = count;
 800323a:	4b5d      	ldr	r3, [pc, #372]	; (80033b0 <setPage+0x704>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <setPage+0x708>)
 8003240:	6013      	str	r3, [r2, #0]


			   HAL_UART_Transmit(&huart3, (uint8_t *)"SAVED!!", sizeof("SAVED!!"), HAL_MAX_DELAY);
 8003242:	f04f 33ff 	mov.w	r3, #4294967295
 8003246:	2208      	movs	r2, #8
 8003248:	495b      	ldr	r1, [pc, #364]	; (80033b8 <setPage+0x70c>)
 800324a:	485c      	ldr	r0, [pc, #368]	; (80033bc <setPage+0x710>)
 800324c:	f007 fa26 	bl	800a69c <HAL_UART_Transmit>
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8003250:	e0a0      	b.n	8003394 <setPage+0x6e8>
		   }
		   else{

			   if (screen==2){
 8003252:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <setPage+0x6f4>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b02      	cmp	r3, #2
 8003258:	d113      	bne.n	8003282 <setPage+0x5d6>
			   currentIndex += 1;
 800325a:	4b59      	ldr	r3, [pc, #356]	; (80033c0 <setPage+0x714>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b57      	ldr	r3, [pc, #348]	; (80033c0 <setPage+0x714>)
 8003264:	701a      	strb	r2, [r3, #0]
			   currentIndex %= 5;
 8003266:	4b56      	ldr	r3, [pc, #344]	; (80033c0 <setPage+0x714>)
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <setPage+0x718>)
 800326c:	fba3 1302 	umull	r1, r3, r3, r2
 8003270:	0899      	lsrs	r1, r3, #2
 8003272:	460b      	mov	r3, r1
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	b2da      	uxtb	r2, r3
 800327c:	4b50      	ldr	r3, [pc, #320]	; (80033c0 <setPage+0x714>)
 800327e:	701a      	strb	r2, [r3, #0]
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8003280:	e088      	b.n	8003394 <setPage+0x6e8>
			   }
			   else if(screen==3){
 8003282:	4b47      	ldr	r3, [pc, #284]	; (80033a0 <setPage+0x6f4>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b03      	cmp	r3, #3
 8003288:	f040 8084 	bne.w	8003394 <setPage+0x6e8>



				   currentIndex += 1;
 800328c:	4b4c      	ldr	r3, [pc, #304]	; (80033c0 <setPage+0x714>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	b2da      	uxtb	r2, r3
 8003294:	4b4a      	ldr	r3, [pc, #296]	; (80033c0 <setPage+0x714>)
 8003296:	701a      	strb	r2, [r3, #0]

				   if (currentIndex < 2 || currentIndex > 4){
 8003298:	4b49      	ldr	r3, [pc, #292]	; (80033c0 <setPage+0x714>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d903      	bls.n	80032a8 <setPage+0x5fc>
 80032a0:	4b47      	ldr	r3, [pc, #284]	; (80033c0 <setPage+0x714>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d975      	bls.n	8003394 <setPage+0x6e8>
					   currentIndex = 2;
 80032a8:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <setPage+0x714>)
 80032aa:	2202      	movs	r2, #2
 80032ac:	701a      	strb	r2, [r3, #0]
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 80032ae:	e071      	b.n	8003394 <setPage+0x6e8>

//
//	   }
   }

   else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && count - debounceTime > 200 ){
 80032b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032b4:	4844      	ldr	r0, [pc, #272]	; (80033c8 <setPage+0x71c>)
 80032b6:	f003 fb83 	bl	80069c0 <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d16b      	bne.n	8003398 <setPage+0x6ec>
 80032c0:	4b3b      	ldr	r3, [pc, #236]	; (80033b0 <setPage+0x704>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b41      	ldr	r3, [pc, #260]	; (80033cc <setPage+0x720>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2bc8      	cmp	r3, #200	; 0xc8
 80032cc:	d964      	bls.n	8003398 <setPage+0x6ec>
	   debounceTime = count;
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <setPage+0x704>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a3e      	ldr	r2, [pc, #248]	; (80033cc <setPage+0x720>)
 80032d4:	6013      	str	r3, [r2, #0]

	   clicktime = count;
 80032d6:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <setPage+0x704>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a3d      	ldr	r2, [pc, #244]	; (80033d0 <setPage+0x724>)
 80032dc:	6013      	str	r3, [r2, #0]
	   ILI9341_Fill_Screen(WHITE);
 80032de:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80032e2:	f001 ff23 	bl	800512c <ILI9341_Fill_Screen>


	   if(screen == 4){
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <setPage+0x6f4>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d114      	bne.n	8003318 <setPage+0x66c>
		   ILI9341_Fill_Screen(bgcolor);
 80032ee:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <setPage+0x728>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f001 ff1a 	bl	800512c <ILI9341_Fill_Screen>
	   }


	   while (count - clicktime < 1000){
 80032f8:	e00e      	b.n	8003318 <setPage+0x66c>
		   char message[50];
		   sprintf(message, "%d %d\r\n", clicktime, count);
 80032fa:	4b35      	ldr	r3, [pc, #212]	; (80033d0 <setPage+0x724>)
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	4b2c      	ldr	r3, [pc, #176]	; (80033b0 <setPage+0x704>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	1d38      	adds	r0, r7, #4
 8003304:	4934      	ldr	r1, [pc, #208]	; (80033d8 <setPage+0x72c>)
 8003306:	f008 fb97 	bl	800ba38 <siprintf>
		   HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 800330a:	1d39      	adds	r1, r7, #4
 800330c:	f04f 33ff 	mov.w	r3, #4294967295
 8003310:	2232      	movs	r2, #50	; 0x32
 8003312:	482a      	ldr	r0, [pc, #168]	; (80033bc <setPage+0x710>)
 8003314:	f007 f9c2 	bl	800a69c <HAL_UART_Transmit>
	   while (count - clicktime < 1000){
 8003318:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <setPage+0x704>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <setPage+0x724>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003326:	d3e8      	bcc.n	80032fa <setPage+0x64e>
	   }

	   if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && count - debounceTime >3000) {
 8003328:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800332c:	4826      	ldr	r0, [pc, #152]	; (80033c8 <setPage+0x71c>)
 800332e:	f003 fb47 	bl	80069c0 <HAL_GPIO_ReadPin>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d113      	bne.n	8003360 <setPage+0x6b4>
 8003338:	4b1d      	ldr	r3, [pc, #116]	; (80033b0 <setPage+0x704>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <setPage+0x720>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003346:	4293      	cmp	r3, r2
 8003348:	d90a      	bls.n	8003360 <setPage+0x6b4>
		   screen--;
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <setPage+0x6f4>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <setPage+0x6f4>)
 8003354:	701a      	strb	r2, [r3, #0]
		   debounceTime = count;
 8003356:	4b16      	ldr	r3, [pc, #88]	; (80033b0 <setPage+0x704>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <setPage+0x720>)
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e01b      	b.n	8003398 <setPage+0x6ec>
	   }
	   else {
		   enterStateFlag = 0;
 8003360:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <setPage+0x730>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
		   screen++;
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <setPage+0x6f4>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	3301      	adds	r3, #1
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <setPage+0x6f4>)
 8003370:	701a      	strb	r2, [r3, #0]
		   if (screen == 4){
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <setPage+0x6f4>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d102      	bne.n	8003380 <setPage+0x6d4>
			   ILI9341_Fill_Screen(BLACK);
 800337a:	2000      	movs	r0, #0
 800337c:	f001 fed6 	bl	800512c <ILI9341_Fill_Screen>
		   }
		   if (screen > 4){
 8003380:	4b07      	ldr	r3, [pc, #28]	; (80033a0 <setPage+0x6f4>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b04      	cmp	r3, #4
 8003386:	d907      	bls.n	8003398 <setPage+0x6ec>
			   DF_Pause();
 8003388:	f7fd f9bb 	bl	8000702 <DF_Pause>
			   screen = 1;
 800338c:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <setPage+0x6f4>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
//		   setHour = param1;
//		   setMin = param2;
//		   setSec = param3;
//	   }
   }
}
 8003392:	e001      	b.n	8003398 <setPage+0x6ec>
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8003394:	bf00      	nop
 8003396:	e7ff      	b.n	8003398 <setPage+0x6ec>
}
 8003398:	bf00      	nop
 800339a:	3738      	adds	r7, #56	; 0x38
 800339c:	46bd      	mov	sp, r7
 800339e:	bdb0      	pop	{r4, r5, r7, pc}
 80033a0:	20000004 	.word	0x20000004
 80033a4:	20000434 	.word	0x20000434
 80033a8:	20000430 	.word	0x20000430
 80033ac:	20000438 	.word	0x20000438
 80033b0:	20000418 	.word	0x20000418
 80033b4:	20000548 	.word	0x20000548
 80033b8:	0800ea80 	.word	0x0800ea80
 80033bc:	200007cc 	.word	0x200007cc
 80033c0:	20000535 	.word	0x20000535
 80033c4:	cccccccd 	.word	0xcccccccd
 80033c8:	40020000 	.word	0x40020000
 80033cc:	2000053c 	.word	0x2000053c
 80033d0:	20000538 	.word	0x20000538
 80033d4:	2000054c 	.word	0x2000054c
 80033d8:	0800e9b0 	.word	0x0800e9b0
 80033dc:	20000544 	.word	0x20000544

080033e0 <RGB565>:


// ฟัง�?์ชันตัวผสมสี
uint16_t RGB565(uint16_t R, uint16_t G, uint16_t B) {
 80033e0:	b480      	push	{r7}
 80033e2:	b08b      	sub	sp, #44	; 0x2c
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	81fb      	strh	r3, [r7, #14]
 80033ea:	460b      	mov	r3, r1
 80033ec:	81bb      	strh	r3, [r7, #12]
 80033ee:	4613      	mov	r3, r2
 80033f0:	817b      	strh	r3, [r7, #10]
    float Rr = (R * 255) / (float)100;
 80033f2:	89fa      	ldrh	r2, [r7, #14]
 80033f4:	4613      	mov	r3, r2
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003402:	eddf 6a42 	vldr	s13, [pc, #264]	; 800350c <RGB565+0x12c>
 8003406:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800340a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float Gg = (G * 255) / (float)100;
 800340e:	89ba      	ldrh	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800341e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800350c <RGB565+0x12c>
 8003422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003426:	edc7 7a08 	vstr	s15, [r7, #32]
    float Bb = (B * 255) / (float)100;
 800342a:	897a      	ldrh	r2, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	ee07 3a90 	vmov	s15, r3
 8003436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800343a:	eddf 6a34 	vldr	s13, [pc, #208]	; 800350c <RGB565+0x12c>
 800343e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003442:	edc7 7a07 	vstr	s15, [r7, #28]

    // ปรับค่าสี R, G, B ให้อยู่ในช่วง 0-255
    uint8_t R8 = (uint8_t)(Rr + 0.5);  // �?ปลงค่าทศนิยมเป็นจำนวนเต็ม
 8003446:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800344a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800344e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003452:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003456:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800345a:	edc7 7a01 	vstr	s15, [r7, #4]
 800345e:	793b      	ldrb	r3, [r7, #4]
 8003460:	76fb      	strb	r3, [r7, #27]
    uint8_t G8 = (uint8_t)(Gg + 0.5);
 8003462:	edd7 7a08 	vldr	s15, [r7, #32]
 8003466:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800346a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800346e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003472:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003476:	edc7 7a01 	vstr	s15, [r7, #4]
 800347a:	793b      	ldrb	r3, [r7, #4]
 800347c:	76bb      	strb	r3, [r7, #26]
    uint8_t B8 = (uint8_t)(Bb + 0.5);
 800347e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003482:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003486:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800348a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800348e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003492:	edc7 7a01 	vstr	s15, [r7, #4]
 8003496:	793b      	ldrb	r3, [r7, #4]
 8003498:	767b      	strb	r3, [r7, #25]

    // ทำ�?ารลดขนาดค่าสี R, G, B เข้าให้เป็นช่วง 0-31
    uint8_t R5 = (R8 * 31) / 255;
 800349a:	7efa      	ldrb	r2, [r7, #27]
 800349c:	4613      	mov	r3, r2
 800349e:	015b      	lsls	r3, r3, #5
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <RGB565+0x130>)
 80034a4:	fb82 1203 	smull	r1, r2, r2, r3
 80034a8:	441a      	add	r2, r3
 80034aa:	11d2      	asrs	r2, r2, #7
 80034ac:	17db      	asrs	r3, r3, #31
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	763b      	strb	r3, [r7, #24]
    uint8_t G6 = (G8 * 63) / 255;
 80034b2:	7eba      	ldrb	r2, [r7, #26]
 80034b4:	4613      	mov	r3, r2
 80034b6:	019b      	lsls	r3, r3, #6
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <RGB565+0x130>)
 80034bc:	fb82 1203 	smull	r1, r2, r2, r3
 80034c0:	441a      	add	r2, r3
 80034c2:	11d2      	asrs	r2, r2, #7
 80034c4:	17db      	asrs	r3, r3, #31
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	75fb      	strb	r3, [r7, #23]
    uint8_t B5 = (B8 * 31) / 255;
 80034ca:	7e7a      	ldrb	r2, [r7, #25]
 80034cc:	4613      	mov	r3, r2
 80034ce:	015b      	lsls	r3, r3, #5
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <RGB565+0x130>)
 80034d4:	fb82 1203 	smull	r1, r2, r2, r3
 80034d8:	441a      	add	r2, r3
 80034da:	11d2      	asrs	r2, r2, #7
 80034dc:	17db      	asrs	r3, r3, #31
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	75bb      	strb	r3, [r7, #22]

    // คำนวณค่า RGB565
    uint16_t RGB565 = ((R5 << 11) | (G6 << 5) | B5);
 80034e2:	7e3b      	ldrb	r3, [r7, #24]
 80034e4:	02db      	lsls	r3, r3, #11
 80034e6:	b21a      	sxth	r2, r3
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	015b      	lsls	r3, r3, #5
 80034ec:	b21b      	sxth	r3, r3
 80034ee:	4313      	orrs	r3, r2
 80034f0:	b21a      	sxth	r2, r3
 80034f2:	7dbb      	ldrb	r3, [r7, #22]
 80034f4:	b21b      	sxth	r3, r3
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b21b      	sxth	r3, r3
 80034fa:	82bb      	strh	r3, [r7, #20]

    return RGB565;
 80034fc:	8abb      	ldrh	r3, [r7, #20]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	372c      	adds	r7, #44	; 0x2c
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	42c80000 	.word	0x42c80000
 8003510:	80808081 	.word	0x80808081

08003514 <mapColorByHourAndMinute>:

uint16_t mapColorByHourAndMinute(uint16_t hour, uint16_t minute) {
 8003514:	b580      	push	{r7, lr}
 8003516:	b088      	sub	sp, #32
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	460a      	mov	r2, r1
 800351e:	80fb      	strh	r3, [r7, #6]
 8003520:	4613      	mov	r3, r2
 8003522:	80bb      	strh	r3, [r7, #4]
    // คำนวณสีที่จะไล่ตามชั่วโมง�?ละนาที
    int R, G, B;

    if (hour >= 0 && hour < 6) {
 8003524:	88fb      	ldrh	r3, [r7, #6]
 8003526:	2b05      	cmp	r3, #5
 8003528:	d806      	bhi.n	8003538 <mapColorByHourAndMinute+0x24>
        // 0.00-6.00: น้ำเงินเข้ม
        R = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
        G = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
        B = 50;
 8003532:	2332      	movs	r3, #50	; 0x32
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e04f      	b.n	80035d8 <mapColorByHourAndMinute+0xc4>
    } else if (hour >= 6 && hour < 12) {
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	2b05      	cmp	r3, #5
 800353c:	d914      	bls.n	8003568 <mapColorByHourAndMinute+0x54>
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b0b      	cmp	r3, #11
 8003542:	d811      	bhi.n	8003568 <mapColorByHourAndMinute+0x54>
        // 6.00-12.00: สีเหลืองเริ่มที่ความสวยของสีเขียวเพิ่มขึ้น
        int intensity = ((hour - 6) * 100) / 6;
 8003544:	88fb      	ldrh	r3, [r7, #6]
 8003546:	3b06      	subs	r3, #6
 8003548:	2264      	movs	r2, #100	; 0x64
 800354a:	fb02 f303 	mul.w	r3, r2, r3
 800354e:	4a2f      	ldr	r2, [pc, #188]	; (800360c <mapColorByHourAndMinute+0xf8>)
 8003550:	fb82 1203 	smull	r1, r2, r2, r3
 8003554:	17db      	asrs	r3, r3, #31
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	613b      	str	r3, [r7, #16]
        R = 100;
 800355a:	2364      	movs	r3, #100	; 0x64
 800355c:	61fb      	str	r3, [r7, #28]
        G = 100;
 800355e:	2364      	movs	r3, #100	; 0x64
 8003560:	61bb      	str	r3, [r7, #24]
        B = intensity;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	617b      	str	r3, [r7, #20]
    } else if (hour >= 6 && hour < 12) {
 8003566:	e037      	b.n	80035d8 <mapColorByHourAndMinute+0xc4>
    } else if (hour >= 12 && hour < 18) {
 8003568:	88fb      	ldrh	r3, [r7, #6]
 800356a:	2b0b      	cmp	r3, #11
 800356c:	d916      	bls.n	800359c <mapColorByHourAndMinute+0x88>
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	2b11      	cmp	r3, #17
 8003572:	d813      	bhi.n	800359c <mapColorByHourAndMinute+0x88>
        // 12.00-18.00: สีส้มเริ่มลดสีเขียว
        int intensity = ((hour - 12) * 100) / 6;
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	3b0c      	subs	r3, #12
 8003578:	2264      	movs	r2, #100	; 0x64
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	4a23      	ldr	r2, [pc, #140]	; (800360c <mapColorByHourAndMinute+0xf8>)
 8003580:	fb82 1203 	smull	r1, r2, r2, r3
 8003584:	17db      	asrs	r3, r3, #31
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	60fb      	str	r3, [r7, #12]
        R = 100;
 800358a:	2364      	movs	r3, #100	; 0x64
 800358c:	61fb      	str	r3, [r7, #28]
        G = 100 - intensity;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003594:	61bb      	str	r3, [r7, #24]
        B = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
    } else if (hour >= 12 && hour < 18) {
 800359a:	e01d      	b.n	80035d8 <mapColorByHourAndMinute+0xc4>
    } else if (hour >= 18 && hour < 24) {
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	2b11      	cmp	r3, #17
 80035a0:	d914      	bls.n	80035cc <mapColorByHourAndMinute+0xb8>
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b17      	cmp	r3, #23
 80035a6:	d811      	bhi.n	80035cc <mapColorByHourAndMinute+0xb8>
        // 18.00-24.00: สีเขียวเริ่มเพิ่มสีเขียว
        int intensity = ((hour - 18) * 100) / 6;
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	3b12      	subs	r3, #18
 80035ac:	2264      	movs	r2, #100	; 0x64
 80035ae:	fb02 f303 	mul.w	r3, r2, r3
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <mapColorByHourAndMinute+0xf8>)
 80035b4:	fb82 1203 	smull	r1, r2, r2, r3
 80035b8:	17db      	asrs	r3, r3, #31
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	60bb      	str	r3, [r7, #8]
        R = intensity;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	61fb      	str	r3, [r7, #28]
        G = 100;
 80035c2:	2364      	movs	r3, #100	; 0x64
 80035c4:	61bb      	str	r3, [r7, #24]
        B = 0;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
    } else if (hour >= 18 && hour < 24) {
 80035ca:	e005      	b.n	80035d8 <mapColorByHourAndMinute+0xc4>
    } else {
        // ไม่ถู�?ต้อง
        R = 0;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61fb      	str	r3, [r7, #28]
        G = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	61bb      	str	r3, [r7, #24]
        B = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
    }

    // �?�?้ไขสีตามนาที
    // เพิ่มความสวยของสีด้วย�?ารเปลี่ยน G (เขียว) ตามนาที
    G = (G * minute) / 60;
 80035d8:	88bb      	ldrh	r3, [r7, #4]
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <mapColorByHourAndMinute+0xfc>)
 80035e2:	fb82 1203 	smull	r1, r2, r2, r3
 80035e6:	441a      	add	r2, r3
 80035e8:	1152      	asrs	r2, r2, #5
 80035ea:	17db      	asrs	r3, r3, #31
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	61bb      	str	r3, [r7, #24]

    return RGB565(R, G, B);
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	b291      	uxth	r1, r2
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	b292      	uxth	r2, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff feef 	bl	80033e0 <RGB565>
 8003602:	4603      	mov	r3, r0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	2aaaaaab 	.word	0x2aaaaaab
 8003610:	88888889 	.word	0x88888889

08003614 <complementaryColor>:

// ฟัง�?์ชันเพื่อคำนวณสีตรงข้าม (complementary color)
uint16_t complementaryColor(uint16_t color) {
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
    // สลับค่า R (�?ดง), G (เขียว), �?ละ B (น้ำเงิน)
    uint8_t R5 = (color >> 11) & 0x1F;
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	0adb      	lsrs	r3, r3, #11
 8003622:	b29b      	uxth	r3, r3
 8003624:	b2db      	uxtb	r3, r3
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	73fb      	strb	r3, [r7, #15]
    uint8_t G6 = (color >> 5) & 0x3F;
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	b29b      	uxth	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003638:	73bb      	strb	r3, [r7, #14]
    uint8_t B5 = color & 0x1F;
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	737b      	strb	r3, [r7, #13]

    // คำนวณสีที่ตัด�?ัน
    uint8_t Rcomplementary = 31 - R5;  // ตัด�?ัน�?ละสลับค่า�?ดง
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	f1c3 031f 	rsb	r3, r3, #31
 800364a:	733b      	strb	r3, [r7, #12]
    uint8_t Gcomplementary = 63 - G6;  // ตัด�?ัน�?ละสลับค่าเขียว
 800364c:	7bbb      	ldrb	r3, [r7, #14]
 800364e:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8003652:	72fb      	strb	r3, [r7, #11]
    uint8_t Bcomplementary = 31 - B5;  // ตัด�?ัน�?ละสลับค่าน้ำเงิน
 8003654:	7b7b      	ldrb	r3, [r7, #13]
 8003656:	f1c3 031f 	rsb	r3, r3, #31
 800365a:	72bb      	strb	r3, [r7, #10]

    // คำนวณสี RGB565 จา�?สีที่ตัด�?ัน
    return ((Rcomplementary << 11) | (Gcomplementary << 5) | Bcomplementary);
 800365c:	7b3b      	ldrb	r3, [r7, #12]
 800365e:	02db      	lsls	r3, r3, #11
 8003660:	b21a      	sxth	r2, r3
 8003662:	7afb      	ldrb	r3, [r7, #11]
 8003664:	015b      	lsls	r3, r3, #5
 8003666:	b21b      	sxth	r3, r3
 8003668:	4313      	orrs	r3, r2
 800366a:	b21a      	sxth	r2, r3
 800366c:	7abb      	ldrb	r3, [r7, #10]
 800366e:	b21b      	sxth	r3, r3
 8003670:	4313      	orrs	r3, r2
 8003672:	b21b      	sxth	r3, r3
 8003674:	b29b      	uxth	r3, r3
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	0000      	movs	r0, r0
 8003684:	0000      	movs	r0, r0
	...

08003688 <ILI9341_Draw_Star>:

void ILI9341_Draw_Star(uint16_t X, uint16_t Y, uint16_t Size, uint16_t Color) {
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	ed2d 8b02 	vpush	{d8}
 800368e:	b08f      	sub	sp, #60	; 0x3c
 8003690:	af02      	add	r7, sp, #8
 8003692:	4604      	mov	r4, r0
 8003694:	4608      	mov	r0, r1
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	4623      	mov	r3, r4
 800369c:	80fb      	strh	r3, [r7, #6]
 800369e:	4603      	mov	r3, r0
 80036a0:	80bb      	strh	r3, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	807b      	strh	r3, [r7, #2]
 80036a6:	4613      	mov	r3, r2
 80036a8:	803b      	strh	r3, [r7, #0]
    // วาดเส้นแรก
    int i;
    for (i = 0; i < 5; i++) {
 80036aa:	2300      	movs	r3, #0
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ae:	e095      	b.n	80037dc <ILI9341_Draw_Star+0x154>
        int x1 = X + (int)(Size * cos(2 * M_PI * i / 5));
 80036b0:	88fc      	ldrh	r4, [r7, #6]
 80036b2:	887b      	ldrh	r3, [r7, #2]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80036bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80036c6:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8003930 <ILI9341_Draw_Star+0x2a8>
 80036ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80036ce:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80036d2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80036d6:	eeb0 0b46 	vmov.f64	d0, d6
 80036da:	f00a fa85 	bl	800dbe8 <cos>
 80036de:	eeb0 7b40 	vmov.f64	d7, d0
 80036e2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80036e6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80036ea:	ee17 3a90 	vmov	r3, s15
 80036ee:	4423      	add	r3, r4
 80036f0:	61bb      	str	r3, [r7, #24]
        int y1 = Y + (int)(Size * sin(2 * M_PI * i / 5));
 80036f2:	88bc      	ldrh	r4, [r7, #4]
 80036f4:	887b      	ldrh	r3, [r7, #2]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80036fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003700:	ee07 3a90 	vmov	s15, r3
 8003704:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003708:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8003930 <ILI9341_Draw_Star+0x2a8>
 800370c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003710:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003714:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003718:	eeb0 0b46 	vmov.f64	d0, d6
 800371c:	f00a fab0 	bl	800dc80 <sin>
 8003720:	eeb0 7b40 	vmov.f64	d7, d0
 8003724:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003728:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800372c:	ee17 3a90 	vmov	r3, s15
 8003730:	4423      	add	r3, r4
 8003732:	617b      	str	r3, [r7, #20]
        int x2 = X + (int)(Size * cos(2 * M_PI * (i + 2) / 5));
 8003734:	88fc      	ldrh	r4, [r7, #6]
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8003740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003742:	3302      	adds	r3, #2
 8003744:	ee07 3a90 	vmov	s15, r3
 8003748:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800374c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8003930 <ILI9341_Draw_Star+0x2a8>
 8003750:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003754:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003758:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800375c:	eeb0 0b46 	vmov.f64	d0, d6
 8003760:	f00a fa42 	bl	800dbe8 <cos>
 8003764:	eeb0 7b40 	vmov.f64	d7, d0
 8003768:	ee28 7b07 	vmul.f64	d7, d8, d7
 800376c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003770:	ee17 3a90 	vmov	r3, s15
 8003774:	4423      	add	r3, r4
 8003776:	613b      	str	r3, [r7, #16]
        int y2 = Y + (int)(Size * sin(2 * M_PI * (i + 2) / 5));
 8003778:	88bc      	ldrh	r4, [r7, #4]
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	ee07 3a90 	vmov	s15, r3
 8003780:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8003784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003786:	3302      	adds	r3, #2
 8003788:	ee07 3a90 	vmov	s15, r3
 800378c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003790:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8003930 <ILI9341_Draw_Star+0x2a8>
 8003794:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003798:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 800379c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80037a0:	eeb0 0b46 	vmov.f64	d0, d6
 80037a4:	f00a fa6c 	bl	800dc80 <sin>
 80037a8:	eeb0 7b40 	vmov.f64	d7, d0
 80037ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 80037b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80037b4:	ee17 3a90 	vmov	r3, s15
 80037b8:	4423      	add	r3, r4
 80037ba:	60fb      	str	r3, [r7, #12]
        ILI9341_Draw_Line(x1, y1, x2, y2, Color);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	b298      	uxth	r0, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	b299      	uxth	r1, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	b29c      	uxth	r4, r3
 80037cc:	883b      	ldrh	r3, [r7, #0]
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	4623      	mov	r3, r4
 80037d2:	f000 f8b1 	bl	8003938 <ILI9341_Draw_Line>
    for (i = 0; i < 5; i++) {
 80037d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d8:	3301      	adds	r3, #1
 80037da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037de:	2b04      	cmp	r3, #4
 80037e0:	f77f af66 	ble.w	80036b0 <ILI9341_Draw_Star+0x28>

    }

    // วาดเส้นที่ตัดกัน
    for (i = 0; i < 5; i++) {
 80037e4:	2300      	movs	r3, #0
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e8:	e095      	b.n	8003916 <ILI9341_Draw_Star+0x28e>
        int x1 = X + (int)(Size * cos(2 * M_PI * i / 5));
 80037ea:	88fc      	ldrh	r4, [r7, #6]
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80037f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f8:	ee07 3a90 	vmov	s15, r3
 80037fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003800:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8003930 <ILI9341_Draw_Star+0x2a8>
 8003804:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003808:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 800380c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003810:	eeb0 0b46 	vmov.f64	d0, d6
 8003814:	f00a f9e8 	bl	800dbe8 <cos>
 8003818:	eeb0 7b40 	vmov.f64	d7, d0
 800381c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003820:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003824:	ee17 3a90 	vmov	r3, s15
 8003828:	4423      	add	r3, r4
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
        int y1 = Y + (int)(Size * sin(2 * M_PI * i / 5));
 800382c:	88bc      	ldrh	r4, [r7, #4]
 800382e:	887b      	ldrh	r3, [r7, #2]
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 8003838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800383a:	ee07 3a90 	vmov	s15, r3
 800383e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003842:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8003930 <ILI9341_Draw_Star+0x2a8>
 8003846:	ee27 7b06 	vmul.f64	d7, d7, d6
 800384a:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 800384e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003852:	eeb0 0b46 	vmov.f64	d0, d6
 8003856:	f00a fa13 	bl	800dc80 <sin>
 800385a:	eeb0 7b40 	vmov.f64	d7, d0
 800385e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003862:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003866:	ee17 3a90 	vmov	r3, s15
 800386a:	4423      	add	r3, r4
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
        int x2 = X + (int)(Size * cos(2 * M_PI * (i + 1) / 5));
 800386e:	88fc      	ldrh	r4, [r7, #6]
 8003870:	887b      	ldrh	r3, [r7, #2]
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	3301      	adds	r3, #1
 800387e:	ee07 3a90 	vmov	s15, r3
 8003882:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003886:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8003930 <ILI9341_Draw_Star+0x2a8>
 800388a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800388e:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8003892:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8003896:	eeb0 0b46 	vmov.f64	d0, d6
 800389a:	f00a f9a5 	bl	800dbe8 <cos>
 800389e:	eeb0 7b40 	vmov.f64	d7, d0
 80038a2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80038a6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80038aa:	ee17 3a90 	vmov	r3, s15
 80038ae:	4423      	add	r3, r4
 80038b0:	623b      	str	r3, [r7, #32]
        int y2 = Y + (int)(Size * sin(2 * M_PI * (i + 1) / 5));
 80038b2:	88bc      	ldrh	r4, [r7, #4]
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eeb8 8be7 	vcvt.f64.s32	d8, s15
 80038be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c0:	3301      	adds	r3, #1
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80038ca:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8003930 <ILI9341_Draw_Star+0x2a8>
 80038ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80038d2:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 80038d6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80038da:	eeb0 0b46 	vmov.f64	d0, d6
 80038de:	f00a f9cf 	bl	800dc80 <sin>
 80038e2:	eeb0 7b40 	vmov.f64	d7, d0
 80038e6:	ee28 7b07 	vmul.f64	d7, d8, d7
 80038ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80038ee:	ee17 3a90 	vmov	r3, s15
 80038f2:	4423      	add	r3, r4
 80038f4:	61fb      	str	r3, [r7, #28]
        ILI9341_Draw_Line(x1, y1, x2, y2, Color);
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	b298      	uxth	r0, r3
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	b299      	uxth	r1, r3
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	b29a      	uxth	r2, r3
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	b29c      	uxth	r4, r3
 8003906:	883b      	ldrh	r3, [r7, #0]
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	4623      	mov	r3, r4
 800390c:	f000 f814 	bl	8003938 <ILI9341_Draw_Line>
    for (i = 0; i < 5; i++) {
 8003910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003912:	3301      	adds	r3, #1
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003918:	2b04      	cmp	r3, #4
 800391a:	f77f af66 	ble.w	80037ea <ILI9341_Draw_Star+0x162>
    }
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	3734      	adds	r7, #52	; 0x34
 8003924:	46bd      	mov	sp, r7
 8003926:	ecbd 8b02 	vpop	{d8}
 800392a:	bd90      	pop	{r4, r7, pc}
 800392c:	f3af 8000 	nop.w
 8003930:	54442d18 	.word	0x54442d18
 8003934:	401921fb 	.word	0x401921fb

08003938 <ILI9341_Draw_Line>:

void ILI9341_Draw_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t Color) {
 8003938:	b590      	push	{r4, r7, lr}
 800393a:	b089      	sub	sp, #36	; 0x24
 800393c:	af00      	add	r7, sp, #0
 800393e:	4604      	mov	r4, r0
 8003940:	4608      	mov	r0, r1
 8003942:	4611      	mov	r1, r2
 8003944:	461a      	mov	r2, r3
 8003946:	4623      	mov	r3, r4
 8003948:	80fb      	strh	r3, [r7, #6]
 800394a:	4603      	mov	r3, r0
 800394c:	80bb      	strh	r3, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	807b      	strh	r3, [r7, #2]
 8003952:	4613      	mov	r3, r2
 8003954:	803b      	strh	r3, [r7, #0]
    int dx = abs(x2 - x1);
 8003956:	887a      	ldrh	r2, [r7, #2]
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	bfb8      	it	lt
 8003960:	425b      	neglt	r3, r3
 8003962:	61bb      	str	r3, [r7, #24]
    int sx = x1 < x2 ? 1 : -1;
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	887b      	ldrh	r3, [r7, #2]
 8003968:	429a      	cmp	r2, r3
 800396a:	d201      	bcs.n	8003970 <ILI9341_Draw_Line+0x38>
 800396c:	2301      	movs	r3, #1
 800396e:	e001      	b.n	8003974 <ILI9341_Draw_Line+0x3c>
 8003970:	f04f 33ff 	mov.w	r3, #4294967295
 8003974:	617b      	str	r3, [r7, #20]
    int dy = -abs(y2 - y1);
 8003976:	883a      	ldrh	r2, [r7, #0]
 8003978:	88bb      	ldrh	r3, [r7, #4]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	bfb8      	it	lt
 8003980:	425b      	neglt	r3, r3
 8003982:	425b      	negs	r3, r3
 8003984:	613b      	str	r3, [r7, #16]
    int sy = y1 < y2 ? 1 : -1;
 8003986:	88ba      	ldrh	r2, [r7, #4]
 8003988:	883b      	ldrh	r3, [r7, #0]
 800398a:	429a      	cmp	r2, r3
 800398c:	d201      	bcs.n	8003992 <ILI9341_Draw_Line+0x5a>
 800398e:	2301      	movs	r3, #1
 8003990:	e001      	b.n	8003996 <ILI9341_Draw_Line+0x5e>
 8003992:	f04f 33ff 	mov.w	r3, #4294967295
 8003996:	60fb      	str	r3, [r7, #12]
    int err = dx + dy;
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4413      	add	r3, r2
 800399e:	61fb      	str	r3, [r7, #28]

    while (1) {
        ILI9341_Draw_Pixel(x1, y1, Color);
 80039a0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80039a2:	88b9      	ldrh	r1, [r7, #4]
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fbe6 	bl	8005178 <ILI9341_Draw_Pixel>
        if (x1 == x2 && y1 == y2) {
 80039ac:	88fa      	ldrh	r2, [r7, #6]
 80039ae:	887b      	ldrh	r3, [r7, #2]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d103      	bne.n	80039bc <ILI9341_Draw_Line+0x84>
 80039b4:	88ba      	ldrh	r2, [r7, #4]
 80039b6:	883b      	ldrh	r3, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d01d      	beq.n	80039f8 <ILI9341_Draw_Line+0xc0>
            break;
        }
        int e2 = 2 * err;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
        if (e2 >= dy) {
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	db08      	blt.n	80039dc <ILI9341_Draw_Line+0xa4>
            err += dy;
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4413      	add	r3, r2
 80039d0:	61fb      	str	r3, [r7, #28]
            x1 += sx;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	88fb      	ldrh	r3, [r7, #6]
 80039d8:	4413      	add	r3, r2
 80039da:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 <= dx) {
 80039dc:	68ba      	ldr	r2, [r7, #8]
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dcdd      	bgt.n	80039a0 <ILI9341_Draw_Line+0x68>
            err += dx;
 80039e4:	69fa      	ldr	r2, [r7, #28]
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	4413      	add	r3, r2
 80039ea:	61fb      	str	r3, [r7, #28]
            y1 += sy;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	88bb      	ldrh	r3, [r7, #4]
 80039f2:	4413      	add	r3, r2
 80039f4:	80bb      	strh	r3, [r7, #4]
    while (1) {
 80039f6:	e7d3      	b.n	80039a0 <ILI9341_Draw_Line+0x68>
            break;
 80039f8:	bf00      	nop
        }
    }
}
 80039fa:	bf00      	nop
 80039fc:	3724      	adds	r7, #36	; 0x24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd90      	pop	{r4, r7, pc}
	...

08003a04 <dayofweek>:




int dayofweek(int d, int m, int y)
{
 8003a04:	b4b0      	push	{r4, r5, r7}
 8003a06:	b091      	sub	sp, #68	; 0x44
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
	int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
 8003a10:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <dayofweek+0x98>)
 8003a12:	f107 0410 	add.w	r4, r7, #16
 8003a16:	461d      	mov	r5, r3
 8003a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// if month is less than 3 reduce year by 1
	if (m < 3)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	dc02      	bgt.n	8003a34 <dayofweek+0x30>
		y -= 1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	607b      	str	r3, [r7, #4]

	return ((y + y / 4 - y / 100 + y / 400 + t[m - 1] + d) % 7);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	da00      	bge.n	8003a3c <dayofweek+0x38>
 8003a3a:	3303      	adds	r3, #3
 8003a3c:	109b      	asrs	r3, r3, #2
 8003a3e:	461a      	mov	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	441a      	add	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4916      	ldr	r1, [pc, #88]	; (8003aa0 <dayofweek+0x9c>)
 8003a48:	fb81 0103 	smull	r0, r1, r1, r3
 8003a4c:	1149      	asrs	r1, r1, #5
 8003a4e:	17db      	asrs	r3, r3, #31
 8003a50:	1a5b      	subs	r3, r3, r1
 8003a52:	441a      	add	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4912      	ldr	r1, [pc, #72]	; (8003aa0 <dayofweek+0x9c>)
 8003a58:	fb81 0103 	smull	r0, r1, r1, r3
 8003a5c:	11c9      	asrs	r1, r1, #7
 8003a5e:	17db      	asrs	r3, r3, #31
 8003a60:	1acb      	subs	r3, r1, r3
 8003a62:	441a      	add	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	3340      	adds	r3, #64	; 0x40
 8003a6c:	443b      	add	r3, r7
 8003a6e:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003a72:	441a      	add	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	441a      	add	r2, r3
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <dayofweek+0xa0>)
 8003a7a:	fb83 1302 	smull	r1, r3, r3, r2
 8003a7e:	4413      	add	r3, r2
 8003a80:	1099      	asrs	r1, r3, #2
 8003a82:	17d3      	asrs	r3, r2, #31
 8003a84:	1ac9      	subs	r1, r1, r3
 8003a86:	460b      	mov	r3, r1
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	1a5b      	subs	r3, r3, r1
 8003a8c:	1ad1      	subs	r1, r2, r3
 8003a8e:	460b      	mov	r3, r1
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3744      	adds	r7, #68	; 0x44
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bcb0      	pop	{r4, r5, r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	0800ea88 	.word	0x0800ea88
 8003aa0:	51eb851f 	.word	0x51eb851f
 8003aa4:	92492493 	.word	0x92492493

08003aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003aac:	e7fe      	b.n	8003aac <Error_Handler+0x4>
	...

08003ab0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003ab4:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <MX_RNG_Init+0x20>)
 8003ab6:	4a07      	ldr	r2, [pc, #28]	; (8003ad4 <MX_RNG_Init+0x24>)
 8003ab8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003aba:	4805      	ldr	r0, [pc, #20]	; (8003ad0 <MX_RNG_Init+0x20>)
 8003abc:	f004 feb0 	bl	8008820 <HAL_RNG_Init>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003ac6:	f7ff ffef 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	2000058c 	.word	0x2000058c
 8003ad4:	50060800 	.word	0x50060800

08003ad8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b0a8      	sub	sp, #160	; 0xa0
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	2290      	movs	r2, #144	; 0x90
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f008 f808 	bl	800bafe <memset>
  if(rngHandle->Instance==RNG)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a11      	ldr	r2, [pc, #68]	; (8003b38 <HAL_RNG_MspInit+0x60>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d11b      	bne.n	8003b30 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003af8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003afc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b04:	f107 0310 	add.w	r3, r7, #16
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f004 fa61 	bl	8007fd0 <HAL_RCCEx_PeriphCLKConfig>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003b14:	f7ff ffc8 	bl	8003aa8 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_RNG_MspInit+0x64>)
 8003b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b1c:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <HAL_RNG_MspInit+0x64>)
 8003b1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b22:	6353      	str	r3, [r2, #52]	; 0x34
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RNG_MspInit+0x64>)
 8003b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003b30:	bf00      	nop
 8003b32:	37a0      	adds	r7, #160	; 0xa0
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	50060800 	.word	0x50060800
 8003b3c:	40023800 	.word	0x40023800

08003b40 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b46:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <MX_SPI5_Init+0x78>)
 8003b48:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003b50:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003b52:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003b58:	4b16      	ldr	r3, [pc, #88]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003b5e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b60:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003b66:	4b13      	ldr	r3, [pc, #76]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003b6c:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b72:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b80:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b86:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b8e:	2207      	movs	r2, #7
 8003b90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8003b9e:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <MX_SPI5_Init+0x74>)
 8003ba0:	f004 fed3 	bl	800894a <HAL_SPI_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8003baa:	f7ff ff7d 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000059c 	.word	0x2000059c
 8003bb8:	40015000 	.word	0x40015000

08003bbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08a      	sub	sp, #40	; 0x28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc4:	f107 0314 	add.w	r3, r7, #20
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	609a      	str	r2, [r3, #8]
 8003bd0:	60da      	str	r2, [r3, #12]
 8003bd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <HAL_SPI_MspInit+0x7c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d128      	bne.n	8003c30 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003bde:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <HAL_SPI_MspInit+0x80>)
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <HAL_SPI_MspInit+0x80>)
 8003be4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003be8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bea:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_SPI_MspInit+0x80>)
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_SPI_MspInit+0x80>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_SPI_MspInit+0x80>)
 8003bfc:	f043 0320 	orr.w	r3, r3, #32
 8003c00:	6313      	str	r3, [r2, #48]	; 0x30
 8003c02:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <HAL_SPI_MspInit+0x80>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003c0e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c14:	2302      	movs	r3, #2
 8003c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003c20:	2305      	movs	r3, #5
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4805      	ldr	r0, [pc, #20]	; (8003c40 <HAL_SPI_MspInit+0x84>)
 8003c2c:	f002 fd1c 	bl	8006668 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003c30:	bf00      	nop
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40015000 	.word	0x40015000
 8003c3c:	40023800 	.word	0x40023800
 8003c40:	40021400 	.word	0x40021400

08003c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <HAL_MspInit+0x44>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	4a0e      	ldr	r2, [pc, #56]	; (8003c88 <HAL_MspInit+0x44>)
 8003c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c54:	6413      	str	r3, [r2, #64]	; 0x40
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <HAL_MspInit+0x44>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_MspInit+0x44>)
 8003c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c66:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <HAL_MspInit+0x44>)
 8003c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c6e:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_MspInit+0x44>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c76:	603b      	str	r3, [r7, #0]
 8003c78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800

08003c8c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c90:	f001 fbee 	bl	8005470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c94:	bf00      	nop
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	4a03      	ldr	r2, [pc, #12]	; (8003cb0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003ca4:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ca6:	4803      	ldr	r0, [pc, #12]	; (8003cb4 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8003ca8:	f005 fc92 	bl	80095d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003cac:	bf00      	nop
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000418 	.word	0x20000418
 8003cb4:	20000604 	.word	0x20000604

08003cb8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(DS3231_IsAlarm1Triggered()){
 8003cbc:	f7fd f931 	bl	8000f22 <DS3231_IsAlarm1Triggered>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d004      	beq.n	8003cd0 <EXTI15_10_IRQHandler+0x18>
			alarmtrigger = 1;
 8003cc6:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <EXTI15_10_IRQHandler+0x24>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
			DS3231_ClearAlarm1Flag();
 8003ccc:	f7fd f825 	bl	8000d1a <DS3231_ClearAlarm1Flag>
		}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003cd0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cd4:	f002 fea6 	bl	8006a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	2000043c 	.word	0x2000043c

08003ce0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <DMA2_Stream0_IRQHandler+0x10>)
 8003ce6:	f002 fa55 	bl	8006194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	2000030c 	.word	0x2000030c

08003cf4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
	return 1;
 8003cf8:	2301      	movs	r3, #1
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <_kill>:

int _kill(int pid, int sig)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d0e:	f007 ff49 	bl	800bba4 <__errno>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2216      	movs	r2, #22
 8003d16:	601a      	str	r2, [r3, #0]
	return -1;
 8003d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <_exit>:

void _exit (int status)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ffe7 	bl	8003d04 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d36:	e7fe      	b.n	8003d36 <_exit+0x12>

08003d38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	e00a      	b.n	8003d60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d4a:	f3af 8000 	nop.w
 8003d4e:	4601      	mov	r1, r0
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	60ba      	str	r2, [r7, #8]
 8003d56:	b2ca      	uxtb	r2, r1
 8003d58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	dbf0      	blt.n	8003d4a <_read+0x12>
	}

return len;
 8003d68:	687b      	ldr	r3, [r7, #4]
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	60f8      	str	r0, [r7, #12]
 8003d7a:	60b9      	str	r1, [r7, #8]
 8003d7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	e009      	b.n	8003d98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	1c5a      	adds	r2, r3, #1
 8003d88:	60ba      	str	r2, [r7, #8]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	3301      	adds	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	dbf1      	blt.n	8003d84 <_write+0x12>
	}
	return len;
 8003da0:	687b      	ldr	r3, [r7, #4]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <_close>:

int _close(int file)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
	return -1;
 8003db2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dd2:	605a      	str	r2, [r3, #4]
	return 0;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <_isatty>:

int _isatty(int file)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
	return 1;
 8003dea:	2301      	movs	r3, #1
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
	return 0;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e1c:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <_sbrk+0x5c>)
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <_sbrk+0x60>)
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e28:	4b13      	ldr	r3, [pc, #76]	; (8003e78 <_sbrk+0x64>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d102      	bne.n	8003e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <_sbrk+0x64>)
 8003e32:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <_sbrk+0x68>)
 8003e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <_sbrk+0x64>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d207      	bcs.n	8003e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e44:	f007 feae 	bl	800bba4 <__errno>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	220c      	movs	r2, #12
 8003e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e52:	e009      	b.n	8003e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e54:	4b08      	ldr	r3, [pc, #32]	; (8003e78 <_sbrk+0x64>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <_sbrk+0x64>)
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <_sbrk+0x64>)
 8003e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e66:	68fb      	ldr	r3, [r7, #12]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20080000 	.word	0x20080000
 8003e74:	00000400 	.word	0x00000400
 8003e78:	20000600 	.word	0x20000600
 8003e7c:	20000a30 	.word	0x20000a30

08003e80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <SystemInit+0x5c>)
 8003e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8a:	4a14      	ldr	r2, [pc, #80]	; (8003edc <SystemInit+0x5c>)
 8003e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <SystemInit+0x60>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <SystemInit+0x60>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <SystemInit+0x60>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <SystemInit+0x60>)
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	490d      	ldr	r1, [pc, #52]	; (8003ee0 <SystemInit+0x60>)
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <SystemInit+0x64>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <SystemInit+0x60>)
 8003eb4:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <SystemInit+0x68>)
 8003eb6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <SystemInit+0x60>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <SystemInit+0x60>)
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003ec4:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <SystemInit+0x60>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003eca:	4b04      	ldr	r3, [pc, #16]	; (8003edc <SystemInit+0x5c>)
 8003ecc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ed0:	609a      	str	r2, [r3, #8]
#endif
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	fef6ffff 	.word	0xfef6ffff
 8003ee8:	24003010 	.word	0x24003010

08003eec <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b09a      	sub	sp, #104	; 0x68
 8003ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ef2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f04:	2200      	movs	r2, #0
 8003f06:	601a      	str	r2, [r3, #0]
 8003f08:	605a      	str	r2, [r3, #4]
 8003f0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	611a      	str	r2, [r3, #16]
 8003f1c:	615a      	str	r2, [r3, #20]
 8003f1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	222c      	movs	r2, #44	; 0x2c
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f007 fde9 	bl	800bafe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f2c:	4b43      	ldr	r3, [pc, #268]	; (800403c <MX_TIM1_Init+0x150>)
 8003f2e:	4a44      	ldr	r2, [pc, #272]	; (8004040 <MX_TIM1_Init+0x154>)
 8003f30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8003f32:	4b42      	ldr	r3, [pc, #264]	; (800403c <MX_TIM1_Init+0x150>)
 8003f34:	22c7      	movs	r2, #199	; 0xc7
 8003f36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f38:	4b40      	ldr	r3, [pc, #256]	; (800403c <MX_TIM1_Init+0x150>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	; (800403c <MX_TIM1_Init+0x150>)
 8003f40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f46:	4b3d      	ldr	r3, [pc, #244]	; (800403c <MX_TIM1_Init+0x150>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f4c:	4b3b      	ldr	r3, [pc, #236]	; (800403c <MX_TIM1_Init+0x150>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f52:	4b3a      	ldr	r3, [pc, #232]	; (800403c <MX_TIM1_Init+0x150>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f58:	4838      	ldr	r0, [pc, #224]	; (800403c <MX_TIM1_Init+0x150>)
 8003f5a:	f005 f897 	bl	800908c <HAL_TIM_Base_Init>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003f64:	f7ff fda0 	bl	8003aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f72:	4619      	mov	r1, r3
 8003f74:	4831      	ldr	r0, [pc, #196]	; (800403c <MX_TIM1_Init+0x150>)
 8003f76:	f005 fd5f 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003f80:	f7ff fd92 	bl	8003aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f84:	482d      	ldr	r0, [pc, #180]	; (800403c <MX_TIM1_Init+0x150>)
 8003f86:	f005 f951 	bl	800922c <HAL_TIM_PWM_Init>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003f90:	f7ff fd8a 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f94:	2300      	movs	r3, #0
 8003f96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fa0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	4825      	ldr	r0, [pc, #148]	; (800403c <MX_TIM1_Init+0x150>)
 8003fa8:	f006 fa00 	bl	800a3ac <HAL_TIMEx_MasterConfigSynchronization>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003fb2:	f7ff fd79 	bl	8003aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fb6:	2360      	movs	r3, #96	; 0x60
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000/4-1;
 8003fba:	23f9      	movs	r3, #249	; 0xf9
 8003fbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4818      	ldr	r0, [pc, #96]	; (800403c <MX_TIM1_Init+0x150>)
 8003fdc:	f005 fc18 	bl	8009810 <HAL_TIM_PWM_ConfigChannel>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003fe6:	f7ff fd5f 	bl	8003aa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004002:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004008:	2300      	movs	r3, #0
 800400a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800400c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004010:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004016:	2300      	movs	r3, #0
 8004018:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	4619      	mov	r1, r3
 800401e:	4807      	ldr	r0, [pc, #28]	; (800403c <MX_TIM1_Init+0x150>)
 8004020:	f006 fa52 	bl	800a4c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d001      	beq.n	800402e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800402a:	f7ff fd3d 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800402e:	4803      	ldr	r0, [pc, #12]	; (800403c <MX_TIM1_Init+0x150>)
 8004030:	f000 fa42 	bl	80044b8 <HAL_TIM_MspPostInit>

}
 8004034:	bf00      	nop
 8004036:	3768      	adds	r7, #104	; 0x68
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000604 	.word	0x20000604
 8004040:	40010000 	.word	0x40010000

08004044 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800404a:	f107 031c 	add.w	r3, r7, #28
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004056:	463b      	mov	r3, r7
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	611a      	str	r2, [r3, #16]
 8004064:	615a      	str	r2, [r3, #20]
 8004066:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004068:	4b22      	ldr	r3, [pc, #136]	; (80040f4 <MX_TIM2_Init+0xb0>)
 800406a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800406e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1250-1;
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <MX_TIM2_Init+0xb0>)
 8004072:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8004076:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004078:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <MX_TIM2_Init+0xb0>)
 800407a:	2200      	movs	r2, #0
 800407c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24-1;
 800407e:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <MX_TIM2_Init+0xb0>)
 8004080:	2217      	movs	r2, #23
 8004082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004084:	4b1b      	ldr	r3, [pc, #108]	; (80040f4 <MX_TIM2_Init+0xb0>)
 8004086:	2200      	movs	r2, #0
 8004088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800408a:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <MX_TIM2_Init+0xb0>)
 800408c:	2200      	movs	r2, #0
 800408e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004090:	4818      	ldr	r0, [pc, #96]	; (80040f4 <MX_TIM2_Init+0xb0>)
 8004092:	f005 f8cb 	bl	800922c <HAL_TIM_PWM_Init>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800409c:	f7ff fd04 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80040a8:	f107 031c 	add.w	r3, r7, #28
 80040ac:	4619      	mov	r1, r3
 80040ae:	4811      	ldr	r0, [pc, #68]	; (80040f4 <MX_TIM2_Init+0xb0>)
 80040b0:	f006 f97c 	bl	800a3ac <HAL_TIMEx_MasterConfigSynchronization>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80040ba:	f7ff fcf5 	bl	8003aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040be:	2360      	movs	r3, #96	; 0x60
 80040c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 24/4-1;
 80040c2:	2305      	movs	r3, #5
 80040c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ca:	2300      	movs	r3, #0
 80040cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80040ce:	463b      	mov	r3, r7
 80040d0:	220c      	movs	r2, #12
 80040d2:	4619      	mov	r1, r3
 80040d4:	4807      	ldr	r0, [pc, #28]	; (80040f4 <MX_TIM2_Init+0xb0>)
 80040d6:	f005 fb9b 	bl	8009810 <HAL_TIM_PWM_ConfigChannel>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80040e0:	f7ff fce2 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80040e4:	4803      	ldr	r0, [pc, #12]	; (80040f4 <MX_TIM2_Init+0xb0>)
 80040e6:	f000 f9e7 	bl	80044b8 <HAL_TIM_MspPostInit>

}
 80040ea:	bf00      	nop
 80040ec:	3728      	adds	r7, #40	; 0x28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000650 	.word	0x20000650

080040f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040fe:	f107 0310 	add.w	r3, r7, #16
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	609a      	str	r2, [r3, #8]
 800410a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
 8004112:	605a      	str	r2, [r3, #4]
 8004114:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004116:	4b1d      	ldr	r3, [pc, #116]	; (800418c <MX_TIM3_Init+0x94>)
 8004118:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <MX_TIM3_Init+0x98>)
 800411a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <MX_TIM3_Init+0x94>)
 800411e:	2263      	movs	r2, #99	; 0x63
 8004120:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004122:	4b1a      	ldr	r3, [pc, #104]	; (800418c <MX_TIM3_Init+0x94>)
 8004124:	2200      	movs	r2, #0
 8004126:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8004128:	4b18      	ldr	r3, [pc, #96]	; (800418c <MX_TIM3_Init+0x94>)
 800412a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800412e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004130:	4b16      	ldr	r3, [pc, #88]	; (800418c <MX_TIM3_Init+0x94>)
 8004132:	2200      	movs	r2, #0
 8004134:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004136:	4b15      	ldr	r3, [pc, #84]	; (800418c <MX_TIM3_Init+0x94>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800413c:	4813      	ldr	r0, [pc, #76]	; (800418c <MX_TIM3_Init+0x94>)
 800413e:	f004 ffa5 	bl	800908c <HAL_TIM_Base_Init>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004148:	f7ff fcae 	bl	8003aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800414c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004150:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004152:	f107 0310 	add.w	r3, r7, #16
 8004156:	4619      	mov	r1, r3
 8004158:	480c      	ldr	r0, [pc, #48]	; (800418c <MX_TIM3_Init+0x94>)
 800415a:	f005 fc6d 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004164:	f7ff fca0 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004168:	2300      	movs	r3, #0
 800416a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	4619      	mov	r1, r3
 8004174:	4805      	ldr	r0, [pc, #20]	; (800418c <MX_TIM3_Init+0x94>)
 8004176:	f006 f919 	bl	800a3ac <HAL_TIMEx_MasterConfigSynchronization>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004180:	f7ff fc92 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004184:	bf00      	nop
 8004186:	3720      	adds	r7, #32
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	2000069c 	.word	0x2000069c
 8004190:	40000400 	.word	0x40000400

08004194 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b088      	sub	sp, #32
 8004198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800419a:	f107 0310 	add.w	r3, r7, #16
 800419e:	2200      	movs	r2, #0
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	605a      	str	r2, [r3, #4]
 80041a4:	609a      	str	r2, [r3, #8]
 80041a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041a8:	1d3b      	adds	r3, r7, #4
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80041b2:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <MX_TIM4_Init+0x94>)
 80041b4:	4a1d      	ldr	r2, [pc, #116]	; (800422c <MX_TIM4_Init+0x98>)
 80041b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80041b8:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <MX_TIM4_Init+0x94>)
 80041ba:	2200      	movs	r2, #0
 80041bc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041be:	4b1a      	ldr	r3, [pc, #104]	; (8004228 <MX_TIM4_Init+0x94>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80041c4:	4b18      	ldr	r3, [pc, #96]	; (8004228 <MX_TIM4_Init+0x94>)
 80041c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041ca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041cc:	4b16      	ldr	r3, [pc, #88]	; (8004228 <MX_TIM4_Init+0x94>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <MX_TIM4_Init+0x94>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80041d8:	4813      	ldr	r0, [pc, #76]	; (8004228 <MX_TIM4_Init+0x94>)
 80041da:	f004 ff57 	bl	800908c <HAL_TIM_Base_Init>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80041e4:	f7ff fc60 	bl	8003aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80041ee:	f107 0310 	add.w	r3, r7, #16
 80041f2:	4619      	mov	r1, r3
 80041f4:	480c      	ldr	r0, [pc, #48]	; (8004228 <MX_TIM4_Init+0x94>)
 80041f6:	f005 fc1f 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8004200:	f7ff fc52 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004204:	2300      	movs	r3, #0
 8004206:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800420c:	1d3b      	adds	r3, r7, #4
 800420e:	4619      	mov	r1, r3
 8004210:	4805      	ldr	r0, [pc, #20]	; (8004228 <MX_TIM4_Init+0x94>)
 8004212:	f006 f8cb 	bl	800a3ac <HAL_TIMEx_MasterConfigSynchronization>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800421c:	f7ff fc44 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004220:	bf00      	nop
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	200006e8 	.word	0x200006e8
 800422c:	40000800 	.word	0x40000800

08004230 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08e      	sub	sp, #56	; 0x38
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
 8004240:	609a      	str	r2, [r3, #8]
 8004242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004244:	f107 031c 	add.w	r3, r7, #28
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004250:	463b      	mov	r3, r7
 8004252:	2200      	movs	r2, #0
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	609a      	str	r2, [r3, #8]
 800425a:	60da      	str	r2, [r3, #12]
 800425c:	611a      	str	r2, [r3, #16]
 800425e:	615a      	str	r2, [r3, #20]
 8004260:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004262:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <MX_TIM5_Init+0xe8>)
 8004264:	4a2d      	ldr	r2, [pc, #180]	; (800431c <MX_TIM5_Init+0xec>)
 8004266:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004268:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <MX_TIM5_Init+0xe8>)
 800426a:	22c7      	movs	r2, #199	; 0xc7
 800426c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800426e:	4b2a      	ldr	r3, [pc, #168]	; (8004318 <MX_TIM5_Init+0xe8>)
 8004270:	2200      	movs	r2, #0
 8004272:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8004274:	4b28      	ldr	r3, [pc, #160]	; (8004318 <MX_TIM5_Init+0xe8>)
 8004276:	f240 32e7 	movw	r2, #999	; 0x3e7
 800427a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800427c:	4b26      	ldr	r3, [pc, #152]	; (8004318 <MX_TIM5_Init+0xe8>)
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <MX_TIM5_Init+0xe8>)
 8004284:	2200      	movs	r2, #0
 8004286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004288:	4823      	ldr	r0, [pc, #140]	; (8004318 <MX_TIM5_Init+0xe8>)
 800428a:	f004 feff 	bl	800908c <HAL_TIM_Base_Init>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8004294:	f7ff fc08 	bl	8003aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800429e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042a2:	4619      	mov	r1, r3
 80042a4:	481c      	ldr	r0, [pc, #112]	; (8004318 <MX_TIM5_Init+0xe8>)
 80042a6:	f005 fbc7 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d001      	beq.n	80042b4 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80042b0:	f7ff fbfa 	bl	8003aa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80042b4:	4818      	ldr	r0, [pc, #96]	; (8004318 <MX_TIM5_Init+0xe8>)
 80042b6:	f004 ffb9 	bl	800922c <HAL_TIM_PWM_Init>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80042c0:	f7ff fbf2 	bl	8003aa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042c4:	2300      	movs	r3, #0
 80042c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80042cc:	f107 031c 	add.w	r3, r7, #28
 80042d0:	4619      	mov	r1, r3
 80042d2:	4811      	ldr	r0, [pc, #68]	; (8004318 <MX_TIM5_Init+0xe8>)
 80042d4:	f006 f86a 	bl	800a3ac <HAL_TIMEx_MasterConfigSynchronization>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80042de:	f7ff fbe3 	bl	8003aa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042e2:	2360      	movs	r3, #96	; 0x60
 80042e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000/4-1;
 80042e6:	23f9      	movs	r3, #249	; 0xf9
 80042e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80042f2:	463b      	mov	r3, r7
 80042f4:	2200      	movs	r2, #0
 80042f6:	4619      	mov	r1, r3
 80042f8:	4807      	ldr	r0, [pc, #28]	; (8004318 <MX_TIM5_Init+0xe8>)
 80042fa:	f005 fa89 	bl	8009810 <HAL_TIM_PWM_ConfigChannel>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8004304:	f7ff fbd0 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8004308:	4803      	ldr	r0, [pc, #12]	; (8004318 <MX_TIM5_Init+0xe8>)
 800430a:	f000 f8d5 	bl	80044b8 <HAL_TIM_MspPostInit>

}
 800430e:	bf00      	nop
 8004310:	3738      	adds	r7, #56	; 0x38
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	20000734 	.word	0x20000734
 800431c:	40000c00 	.word	0x40000c00

08004320 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004326:	463b      	mov	r3, r7
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	605a      	str	r2, [r3, #4]
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8004332:	4b15      	ldr	r3, [pc, #84]	; (8004388 <MX_TIM9_Init+0x68>)
 8004334:	4a15      	ldr	r2, [pc, #84]	; (800438c <MX_TIM9_Init+0x6c>)
 8004336:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8004338:	4b13      	ldr	r3, [pc, #76]	; (8004388 <MX_TIM9_Init+0x68>)
 800433a:	2263      	movs	r2, #99	; 0x63
 800433c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <MX_TIM9_Init+0x68>)
 8004340:	2200      	movs	r2, #0
 8004342:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 24-1;
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <MX_TIM9_Init+0x68>)
 8004346:	2217      	movs	r2, #23
 8004348:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <MX_TIM9_Init+0x68>)
 800434c:	2200      	movs	r2, #0
 800434e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004350:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <MX_TIM9_Init+0x68>)
 8004352:	2200      	movs	r2, #0
 8004354:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004356:	480c      	ldr	r0, [pc, #48]	; (8004388 <MX_TIM9_Init+0x68>)
 8004358:	f004 fe98 	bl	800908c <HAL_TIM_Base_Init>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8004362:	f7ff fba1 	bl	8003aa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800436a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800436c:	463b      	mov	r3, r7
 800436e:	4619      	mov	r1, r3
 8004370:	4805      	ldr	r0, [pc, #20]	; (8004388 <MX_TIM9_Init+0x68>)
 8004372:	f005 fb61 	bl	8009a38 <HAL_TIM_ConfigClockSource>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 800437c:	f7ff fb94 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000780 	.word	0x20000780
 800438c:	40014000 	.word	0x40014000

08004390 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a31      	ldr	r2, [pc, #196]	; (8004464 <HAL_TIM_Base_MspInit+0xd4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d114      	bne.n	80043cc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043a2:	4b31      	ldr	r3, [pc, #196]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	4a30      	ldr	r2, [pc, #192]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6453      	str	r3, [r2, #68]	; 0x44
 80043ae:	4b2e      	ldr	r3, [pc, #184]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80043ba:	2200      	movs	r2, #0
 80043bc:	2100      	movs	r1, #0
 80043be:	2019      	movs	r0, #25
 80043c0:	f001 fda3 	bl	8005f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80043c4:	2019      	movs	r0, #25
 80043c6:	f001 fdbc 	bl	8005f42 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80043ca:	e046      	b.n	800445a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a26      	ldr	r2, [pc, #152]	; (800446c <HAL_TIM_Base_MspInit+0xdc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10c      	bne.n	80043f0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043d6:	4b24      	ldr	r3, [pc, #144]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a23      	ldr	r2, [pc, #140]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b21      	ldr	r3, [pc, #132]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	69bb      	ldr	r3, [r7, #24]
}
 80043ee:	e034      	b.n	800445a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a1e      	ldr	r2, [pc, #120]	; (8004470 <HAL_TIM_Base_MspInit+0xe0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d10c      	bne.n	8004414 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80043fa:	4b1b      	ldr	r3, [pc, #108]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 8004400:	f043 0304 	orr.w	r3, r3, #4
 8004404:	6413      	str	r3, [r2, #64]	; 0x40
 8004406:	4b18      	ldr	r3, [pc, #96]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	697b      	ldr	r3, [r7, #20]
}
 8004412:	e022      	b.n	800445a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM5)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a16      	ldr	r2, [pc, #88]	; (8004474 <HAL_TIM_Base_MspInit+0xe4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10c      	bne.n	8004438 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800441e:	4b12      	ldr	r3, [pc, #72]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	4a11      	ldr	r2, [pc, #68]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 8004424:	f043 0308 	orr.w	r3, r3, #8
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
 800442a:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	693b      	ldr	r3, [r7, #16]
}
 8004436:	e010      	b.n	800445a <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM9)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a0e      	ldr	r2, [pc, #56]	; (8004478 <HAL_TIM_Base_MspInit+0xe8>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d10b      	bne.n	800445a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004442:	4b09      	ldr	r3, [pc, #36]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	6453      	str	r3, [r2, #68]	; 0x44
 800444e:	4b06      	ldr	r3, [pc, #24]	; (8004468 <HAL_TIM_Base_MspInit+0xd8>)
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
}
 800445a:	bf00      	nop
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40010000 	.word	0x40010000
 8004468:	40023800 	.word	0x40023800
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800
 8004474:	40000c00 	.word	0x40000c00
 8004478:	40014000 	.word	0x40014000

0800447c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800448c:	d10b      	bne.n	80044a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800448e:	4b09      	ldr	r3, [pc, #36]	; (80044b4 <HAL_TIM_PWM_MspInit+0x38>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <HAL_TIM_PWM_MspInit+0x38>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	6413      	str	r3, [r2, #64]	; 0x40
 800449a:	4b06      	ldr	r3, [pc, #24]	; (80044b4 <HAL_TIM_PWM_MspInit+0x38>)
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80044a6:	bf00      	nop
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40023800 	.word	0x40023800

080044b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b08a      	sub	sp, #40	; 0x28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044c0:	f107 0314 	add.w	r3, r7, #20
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
 80044c8:	605a      	str	r2, [r3, #4]
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	60da      	str	r2, [r3, #12]
 80044ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a33      	ldr	r2, [pc, #204]	; (80045a4 <HAL_TIM_MspPostInit+0xec>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d11d      	bne.n	8004516 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80044da:	4b33      	ldr	r3, [pc, #204]	; (80045a8 <HAL_TIM_MspPostInit+0xf0>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	4a32      	ldr	r2, [pc, #200]	; (80045a8 <HAL_TIM_MspPostInit+0xf0>)
 80044e0:	f043 0310 	orr.w	r3, r3, #16
 80044e4:	6313      	str	r3, [r2, #48]	; 0x30
 80044e6:	4b30      	ldr	r3, [pc, #192]	; (80045a8 <HAL_TIM_MspPostInit+0xf0>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	f003 0310 	and.w	r3, r3, #16
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80044f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f8:	2302      	movs	r3, #2
 80044fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004500:	2300      	movs	r3, #0
 8004502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004504:	2301      	movs	r3, #1
 8004506:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004508:	f107 0314 	add.w	r3, r7, #20
 800450c:	4619      	mov	r1, r3
 800450e:	4827      	ldr	r0, [pc, #156]	; (80045ac <HAL_TIM_MspPostInit+0xf4>)
 8004510:	f002 f8aa 	bl	8006668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004514:	e042      	b.n	800459c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM2)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800451e:	d11c      	bne.n	800455a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004520:	4b21      	ldr	r3, [pc, #132]	; (80045a8 <HAL_TIM_MspPostInit+0xf0>)
 8004522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004524:	4a20      	ldr	r2, [pc, #128]	; (80045a8 <HAL_TIM_MspPostInit+0xf0>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6313      	str	r3, [r2, #48]	; 0x30
 800452c:	4b1e      	ldr	r3, [pc, #120]	; (80045a8 <HAL_TIM_MspPostInit+0xf0>)
 800452e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004530:	f003 0301 	and.w	r3, r3, #1
 8004534:	60fb      	str	r3, [r7, #12]
 8004536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004538:	2308      	movs	r3, #8
 800453a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453c:	2302      	movs	r3, #2
 800453e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004540:	2300      	movs	r3, #0
 8004542:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004548:	2301      	movs	r3, #1
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800454c:	f107 0314 	add.w	r3, r7, #20
 8004550:	4619      	mov	r1, r3
 8004552:	4817      	ldr	r0, [pc, #92]	; (80045b0 <HAL_TIM_MspPostInit+0xf8>)
 8004554:	f002 f888 	bl	8006668 <HAL_GPIO_Init>
}
 8004558:	e020      	b.n	800459c <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM5)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <HAL_TIM_MspPostInit+0xfc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d11b      	bne.n	800459c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004564:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <HAL_TIM_MspPostInit+0xf0>)
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004568:	4a0f      	ldr	r2, [pc, #60]	; (80045a8 <HAL_TIM_MspPostInit+0xf0>)
 800456a:	f043 0301 	orr.w	r3, r3, #1
 800456e:	6313      	str	r3, [r2, #48]	; 0x30
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <HAL_TIM_MspPostInit+0xf0>)
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	60bb      	str	r3, [r7, #8]
 800457a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800457c:	2301      	movs	r3, #1
 800457e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004580:	2302      	movs	r3, #2
 8004582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004588:	2303      	movs	r3, #3
 800458a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800458c:	2302      	movs	r3, #2
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004590:	f107 0314 	add.w	r3, r7, #20
 8004594:	4619      	mov	r1, r3
 8004596:	4806      	ldr	r0, [pc, #24]	; (80045b0 <HAL_TIM_MspPostInit+0xf8>)
 8004598:	f002 f866 	bl	8006668 <HAL_GPIO_Init>
}
 800459c:	bf00      	nop
 800459e:	3728      	adds	r7, #40	; 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40010000 	.word	0x40010000
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40021000 	.word	0x40021000
 80045b0:	40020000 	.word	0x40020000
 80045b4:	40000c00 	.word	0x40000c00

080045b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80045bc:	4b14      	ldr	r3, [pc, #80]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <MX_USART3_UART_Init+0x5c>)
 80045c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80045ca:	4b11      	ldr	r3, [pc, #68]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045d8:	2200      	movs	r2, #0
 80045da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045de:	220c      	movs	r2, #12
 80045e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e2:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80045ee:	4b08      	ldr	r3, [pc, #32]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80045fa:	4805      	ldr	r0, [pc, #20]	; (8004610 <MX_USART3_UART_Init+0x58>)
 80045fc:	f006 f800 	bl	800a600 <HAL_UART_Init>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004606:	f7ff fa4f 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200007cc 	.word	0x200007cc
 8004614:	40004800 	.word	0x40004800

08004618 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <MX_USART6_UART_Init+0x58>)
 800461e:	4a15      	ldr	r2, [pc, #84]	; (8004674 <MX_USART6_UART_Init+0x5c>)
 8004620:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <MX_USART6_UART_Init+0x58>)
 8004624:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004628:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800462a:	4b11      	ldr	r3, [pc, #68]	; (8004670 <MX_USART6_UART_Init+0x58>)
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <MX_USART6_UART_Init+0x58>)
 8004632:	2200      	movs	r2, #0
 8004634:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004636:	4b0e      	ldr	r3, [pc, #56]	; (8004670 <MX_USART6_UART_Init+0x58>)
 8004638:	2200      	movs	r2, #0
 800463a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800463c:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <MX_USART6_UART_Init+0x58>)
 800463e:	220c      	movs	r2, #12
 8004640:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <MX_USART6_UART_Init+0x58>)
 8004644:	2200      	movs	r2, #0
 8004646:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004648:	4b09      	ldr	r3, [pc, #36]	; (8004670 <MX_USART6_UART_Init+0x58>)
 800464a:	2200      	movs	r2, #0
 800464c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800464e:	4b08      	ldr	r3, [pc, #32]	; (8004670 <MX_USART6_UART_Init+0x58>)
 8004650:	2200      	movs	r2, #0
 8004652:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <MX_USART6_UART_Init+0x58>)
 8004656:	2200      	movs	r2, #0
 8004658:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800465a:	4805      	ldr	r0, [pc, #20]	; (8004670 <MX_USART6_UART_Init+0x58>)
 800465c:	f005 ffd0 	bl	800a600 <HAL_UART_Init>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004666:	f7ff fa1f 	bl	8003aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000854 	.word	0x20000854
 8004674:	40011400 	.word	0x40011400

08004678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b0b0      	sub	sp, #192	; 0xc0
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004690:	f107 031c 	add.w	r3, r7, #28
 8004694:	2290      	movs	r2, #144	; 0x90
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f007 fa30 	bl	800bafe <memset>
  if(uartHandle->Instance==USART3)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a43      	ldr	r2, [pc, #268]	; (80047b0 <HAL_UART_MspInit+0x138>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d13d      	bne.n	8004724 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80046a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80046ae:	2300      	movs	r3, #0
 80046b0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046b2:	f107 031c 	add.w	r3, r7, #28
 80046b6:	4618      	mov	r0, r3
 80046b8:	f003 fc8a 	bl	8007fd0 <HAL_RCCEx_PeriphCLKConfig>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80046c2:	f7ff f9f1 	bl	8003aa8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80046c6:	4b3b      	ldr	r3, [pc, #236]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	4a3a      	ldr	r2, [pc, #232]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 80046cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046d0:	6413      	str	r3, [r2, #64]	; 0x40
 80046d2:	4b38      	ldr	r3, [pc, #224]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046de:	4b35      	ldr	r3, [pc, #212]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4a34      	ldr	r2, [pc, #208]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 80046e4:	f043 0308 	orr.w	r3, r3, #8
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ea:	4b32      	ldr	r3, [pc, #200]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80046f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046fe:	2302      	movs	r3, #2
 8004700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004704:	2300      	movs	r3, #0
 8004706:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470a:	2303      	movs	r3, #3
 800470c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004710:	2307      	movs	r3, #7
 8004712:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004716:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800471a:	4619      	mov	r1, r3
 800471c:	4826      	ldr	r0, [pc, #152]	; (80047b8 <HAL_UART_MspInit+0x140>)
 800471e:	f001 ffa3 	bl	8006668 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004722:	e040      	b.n	80047a6 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART6)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a24      	ldr	r2, [pc, #144]	; (80047bc <HAL_UART_MspInit+0x144>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d13b      	bne.n	80047a6 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800472e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004732:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004734:	2300      	movs	r3, #0
 8004736:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004738:	f107 031c 	add.w	r3, r7, #28
 800473c:	4618      	mov	r0, r3
 800473e:	f003 fc47 	bl	8007fd0 <HAL_RCCEx_PeriphCLKConfig>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8004748:	f7ff f9ae 	bl	8003aa8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800474c:	4b19      	ldr	r3, [pc, #100]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 8004752:	f043 0320 	orr.w	r3, r3, #32
 8004756:	6453      	str	r3, [r2, #68]	; 0x44
 8004758:	4b16      	ldr	r3, [pc, #88]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	f003 0320 	and.w	r3, r3, #32
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004764:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 8004766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004768:	4a12      	ldr	r2, [pc, #72]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 800476a:	f043 0304 	orr.w	r3, r3, #4
 800476e:	6313      	str	r3, [r2, #48]	; 0x30
 8004770:	4b10      	ldr	r3, [pc, #64]	; (80047b4 <HAL_UART_MspInit+0x13c>)
 8004772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800477c:	23c0      	movs	r3, #192	; 0xc0
 800477e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004782:	2302      	movs	r3, #2
 8004784:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004788:	2300      	movs	r3, #0
 800478a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800478e:	2303      	movs	r3, #3
 8004790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004794:	2308      	movs	r3, #8
 8004796:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800479a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800479e:	4619      	mov	r1, r3
 80047a0:	4807      	ldr	r0, [pc, #28]	; (80047c0 <HAL_UART_MspInit+0x148>)
 80047a2:	f001 ff61 	bl	8006668 <HAL_GPIO_Init>
}
 80047a6:	bf00      	nop
 80047a8:	37c0      	adds	r7, #192	; 0xc0
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	40004800 	.word	0x40004800
 80047b4:	40023800 	.word	0x40023800
 80047b8:	40020c00 	.word	0x40020c00
 80047bc:	40011400 	.word	0x40011400
 80047c0:	40020800 	.word	0x40020800

080047c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80047c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80047c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80047ca:	e003      	b.n	80047d4 <LoopCopyDataInit>

080047cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80047cc:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80047ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80047d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80047d2:	3104      	adds	r1, #4

080047d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80047d4:	480b      	ldr	r0, [pc, #44]	; (8004804 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80047d6:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80047d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80047da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80047dc:	d3f6      	bcc.n	80047cc <CopyDataInit>
  ldr  r2, =_sbss
 80047de:	4a0b      	ldr	r2, [pc, #44]	; (800480c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80047e0:	e002      	b.n	80047e8 <LoopFillZerobss>

080047e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80047e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80047e4:	f842 3b04 	str.w	r3, [r2], #4

080047e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80047e8:	4b09      	ldr	r3, [pc, #36]	; (8004810 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80047ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80047ec:	d3f9      	bcc.n	80047e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80047ee:	f7ff fb47 	bl	8003e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047f2:	f007 f9dd 	bl	800bbb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047f6:	f7fd f91d 	bl	8001a34 <main>
  bx  lr    
 80047fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047fc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004800:	0800f278 	.word	0x0800f278
  ldr  r0, =_sdata
 8004804:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004808:	200002a0 	.word	0x200002a0
  ldr  r2, =_sbss
 800480c:	200002a0 	.word	0x200002a0
  ldr  r3, = _ebss
 8004810:	20000a2c 	.word	0x20000a2c

08004814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004814:	e7fe      	b.n	8004814 <ADC_IRQHandler>

08004816 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8004816:	b590      	push	{r4, r7, lr}
 8004818:	b08b      	sub	sp, #44	; 0x2c
 800481a:	af00      	add	r7, sp, #0
 800481c:	4604      	mov	r4, r0
 800481e:	4608      	mov	r0, r1
 8004820:	4611      	mov	r1, r2
 8004822:	461a      	mov	r2, r3
 8004824:	4623      	mov	r3, r4
 8004826:	80fb      	strh	r3, [r7, #6]
 8004828:	4603      	mov	r3, r0
 800482a:	80bb      	strh	r3, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]
 8004830:	4613      	mov	r3, r2
 8004832:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8004834:	887b      	ldrh	r3, [r7, #2]
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800483c:	887b      	ldrh	r3, [r7, #2]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	f1c3 0301 	rsb	r3, r3, #1
 8004844:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800484e:	e061      	b.n	8004914 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	613b      	str	r3, [r7, #16]
 8004858:	e018      	b.n	800488c <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	b298      	uxth	r0, r3
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	b29a      	uxth	r2, r3
 8004862:	88bb      	ldrh	r3, [r7, #4]
 8004864:	4413      	add	r3, r2
 8004866:	b29b      	uxth	r3, r3
 8004868:	883a      	ldrh	r2, [r7, #0]
 800486a:	4619      	mov	r1, r3
 800486c:	f000 fc84 	bl	8005178 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	b298      	uxth	r0, r3
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	b29b      	uxth	r3, r3
 8004878:	88ba      	ldrh	r2, [r7, #4]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	b29b      	uxth	r3, r3
 800487e:	883a      	ldrh	r2, [r7, #0]
 8004880:	4619      	mov	r1, r3
 8004882:	f000 fc79 	bl	8005178 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	3301      	adds	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004890:	4413      	add	r3, r2
 8004892:	693a      	ldr	r2, [r7, #16]
 8004894:	429a      	cmp	r2, r3
 8004896:	dde0      	ble.n	800485a <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8004898:	88fa      	ldrh	r2, [r7, #6]
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	60fb      	str	r3, [r7, #12]
 80048a0:	e018      	b.n	80048d4 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	b298      	uxth	r0, r3
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	88bb      	ldrh	r3, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	883a      	ldrh	r2, [r7, #0]
 80048b2:	4619      	mov	r1, r3
 80048b4:	f000 fc60 	bl	8005178 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	b298      	uxth	r0, r3
 80048bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048be:	b29b      	uxth	r3, r3
 80048c0:	88ba      	ldrh	r2, [r7, #4]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	883a      	ldrh	r2, [r7, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	f000 fc55 	bl	8005178 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3301      	adds	r3, #1
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	88fa      	ldrh	r2, [r7, #6]
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	4413      	add	r3, r2
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	429a      	cmp	r2, r3
 80048de:	dde0      	ble.n	80048a2 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	3301      	adds	r3, #1
 80048e4:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	4413      	add	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]
        yChange += 2;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	3302      	adds	r3, #2
 80048f2:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	005a      	lsls	r2, r3, #1
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	4413      	add	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	dd09      	ble.n	8004914 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	3b01      	subs	r3, #1
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	4413      	add	r3, r2
 800490c:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	3302      	adds	r3, #2
 8004912:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8004914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004916:	6a3b      	ldr	r3, [r7, #32]
 8004918:	429a      	cmp	r2, r3
 800491a:	da99      	bge.n	8004850 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800491c:	bf00      	nop
 800491e:	bf00      	nop
 8004920:	372c      	adds	r7, #44	; 0x2c
 8004922:	46bd      	mov	sp, r7
 8004924:	bd90      	pop	{r4, r7, pc}

08004926 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8004926:	b590      	push	{r4, r7, lr}
 8004928:	b089      	sub	sp, #36	; 0x24
 800492a:	af02      	add	r7, sp, #8
 800492c:	4604      	mov	r4, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	461a      	mov	r2, r3
 8004934:	4623      	mov	r3, r4
 8004936:	80fb      	strh	r3, [r7, #6]
 8004938:	4603      	mov	r3, r0
 800493a:	80bb      	strh	r3, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	807b      	strh	r3, [r7, #2]
 8004940:	4613      	mov	r3, r2
 8004942:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8004960:	887a      	ldrh	r2, [r7, #2]
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	da01      	bge.n	8004972 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800496e:	2301      	movs	r3, #1
 8004970:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004972:	2300      	movs	r3, #0
 8004974:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8004976:	883a      	ldrh	r2, [r7, #0]
 8004978:	88bb      	ldrh	r3, [r7, #4]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	da01      	bge.n	8004988 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8004984:	2301      	movs	r3, #1
 8004986:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8004988:	7cfb      	ldrb	r3, [r7, #19]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 800498e:	887a      	ldrh	r2, [r7, #2]
 8004990:	88fb      	ldrh	r3, [r7, #6]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	823b      	strh	r3, [r7, #16]
 800499a:	e005      	b.n	80049a8 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 800499c:	88fa      	ldrh	r2, [r7, #6]
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80049a4:	887b      	ldrh	r3, [r7, #2]
 80049a6:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80049a8:	7cbb      	ldrb	r3, [r7, #18]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80049ae:	883a      	ldrh	r2, [r7, #0]
 80049b0:	88bb      	ldrh	r3, [r7, #4]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80049b6:	88bb      	ldrh	r3, [r7, #4]
 80049b8:	81fb      	strh	r3, [r7, #14]
 80049ba:	e005      	b.n	80049c8 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80049bc:	88ba      	ldrh	r2, [r7, #4]
 80049be:	883b      	ldrh	r3, [r7, #0]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80049c4:	883b      	ldrh	r3, [r7, #0]
 80049c6:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80049c8:	8abc      	ldrh	r4, [r7, #20]
 80049ca:	8afa      	ldrh	r2, [r7, #22]
 80049cc:	89f9      	ldrh	r1, [r7, #14]
 80049ce:	8a38      	ldrh	r0, [r7, #16]
 80049d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	4623      	mov	r3, r4
 80049d6:	f000 fca9 	bl	800532c <ILI9341_Draw_Rectangle>
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd90      	pop	{r4, r7, pc}
	...

080049e4 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80049e4:	b590      	push	{r4, r7, lr}
 80049e6:	b089      	sub	sp, #36	; 0x24
 80049e8:	af02      	add	r7, sp, #8
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	4611      	mov	r1, r2
 80049f0:	461a      	mov	r2, r3
 80049f2:	4623      	mov	r3, r4
 80049f4:	71fb      	strb	r3, [r7, #7]
 80049f6:	4603      	mov	r3, r0
 80049f8:	71bb      	strb	r3, [r7, #6]
 80049fa:	460b      	mov	r3, r1
 80049fc:	717b      	strb	r3, [r7, #5]
 80049fe:	4613      	mov	r3, r2
 8004a00:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8004a02:	79fb      	ldrb	r3, [r7, #7]
 8004a04:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
 8004a08:	2b1f      	cmp	r3, #31
 8004a0a:	d802      	bhi.n	8004a12 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	71fb      	strb	r3, [r7, #7]
 8004a10:	e002      	b.n	8004a18 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8004a12:	7dfb      	ldrb	r3, [r7, #23]
 8004a14:	3b20      	subs	r3, #32
 8004a16:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004a18:	2300      	movs	r3, #0
 8004a1a:	753b      	strb	r3, [r7, #20]
 8004a1c:	e012      	b.n	8004a44 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8004a1e:	7dfa      	ldrb	r2, [r7, #23]
 8004a20:	7d38      	ldrb	r0, [r7, #20]
 8004a22:	7d39      	ldrb	r1, [r7, #20]
 8004a24:	4c3b      	ldr	r4, [pc, #236]	; (8004b14 <ILI9341_Draw_Char+0x130>)
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	4423      	add	r3, r4
 8004a30:	4403      	add	r3, r0
 8004a32:	781a      	ldrb	r2, [r3, #0]
 8004a34:	f101 0318 	add.w	r3, r1, #24
 8004a38:	443b      	add	r3, r7
 8004a3a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004a3e:	7d3b      	ldrb	r3, [r7, #20]
 8004a40:	3301      	adds	r3, #1
 8004a42:	753b      	strb	r3, [r7, #20]
 8004a44:	7d3b      	ldrb	r3, [r7, #20]
 8004a46:	2b05      	cmp	r3, #5
 8004a48:	d9e9      	bls.n	8004a1e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8004a4a:	79bb      	ldrb	r3, [r7, #6]
 8004a4c:	b298      	uxth	r0, r3
 8004a4e:	797b      	ldrb	r3, [r7, #5]
 8004a50:	b299      	uxth	r1, r3
 8004a52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a54:	461a      	mov	r2, r3
 8004a56:	0052      	lsls	r2, r2, #1
 8004a58:	4413      	add	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a60:	00db      	lsls	r3, r3, #3
 8004a62:	b29c      	uxth	r4, r3
 8004a64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	4623      	mov	r3, r4
 8004a6a:	f000 fc5f 	bl	800532c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004a6e:	2300      	movs	r3, #0
 8004a70:	757b      	strb	r3, [r7, #21]
 8004a72:	e047      	b.n	8004b04 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004a74:	2300      	movs	r3, #0
 8004a76:	75bb      	strb	r3, [r7, #22]
 8004a78:	e03e      	b.n	8004af8 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8004a7a:	7d7b      	ldrb	r3, [r7, #21]
 8004a7c:	3318      	adds	r3, #24
 8004a7e:	443b      	add	r3, r7
 8004a80:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004a84:	461a      	mov	r2, r3
 8004a86:	7dbb      	ldrb	r3, [r7, #22]
 8004a88:	fa42 f303 	asr.w	r3, r2, r3
 8004a8c:	f003 0301 	and.w	r3, r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02e      	beq.n	8004af2 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8004a94:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d110      	bne.n	8004abc <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8004a9a:	79bb      	ldrb	r3, [r7, #6]
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	7d7b      	ldrb	r3, [r7, #21]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	b298      	uxth	r0, r3
 8004aa6:	797b      	ldrb	r3, [r7, #5]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	7dbb      	ldrb	r3, [r7, #22]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	4413      	add	r3, r2
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f000 fb5f 	bl	8005178 <ILI9341_Draw_Pixel>
 8004aba:	e01a      	b.n	8004af2 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8004abc:	79bb      	ldrb	r3, [r7, #6]
 8004abe:	b29a      	uxth	r2, r3
 8004ac0:	7d7b      	ldrb	r3, [r7, #21]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004ac6:	fb11 f303 	smulbb	r3, r1, r3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	b298      	uxth	r0, r3
 8004ad0:	797b      	ldrb	r3, [r7, #5]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	7dbb      	ldrb	r3, [r7, #22]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8004ada:	fb11 f303 	smulbb	r3, r1, r3
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	b299      	uxth	r1, r3
 8004ae4:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8004ae6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004ae8:	887b      	ldrh	r3, [r7, #2]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	4623      	mov	r3, r4
 8004aee:	f000 fc1d 	bl	800532c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004af2:	7dbb      	ldrb	r3, [r7, #22]
 8004af4:	3301      	adds	r3, #1
 8004af6:	75bb      	strb	r3, [r7, #22]
 8004af8:	7dbb      	ldrb	r3, [r7, #22]
 8004afa:	2b07      	cmp	r3, #7
 8004afc:	d9bd      	bls.n	8004a7a <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004afe:	7d7b      	ldrb	r3, [r7, #21]
 8004b00:	3301      	adds	r3, #1
 8004b02:	757b      	strb	r3, [r7, #21]
 8004b04:	7d7b      	ldrb	r3, [r7, #21]
 8004b06:	2b05      	cmp	r3, #5
 8004b08:	d9b4      	bls.n	8004a74 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8004b0a:	bf00      	nop
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd90      	pop	{r4, r7, pc}
 8004b14:	0800ead0 	.word	0x0800ead0

08004b18 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8004b18:	b590      	push	{r4, r7, lr}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	70fb      	strb	r3, [r7, #3]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	70bb      	strb	r3, [r7, #2]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8004b32:	e017      	b.n	8004b64 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1c5a      	adds	r2, r3, #1
 8004b38:	607a      	str	r2, [r7, #4]
 8004b3a:	7818      	ldrb	r0, [r3, #0]
 8004b3c:	883c      	ldrh	r4, [r7, #0]
 8004b3e:	78ba      	ldrb	r2, [r7, #2]
 8004b40:	78f9      	ldrb	r1, [r7, #3]
 8004b42:	8bbb      	ldrh	r3, [r7, #28]
 8004b44:	9301      	str	r3, [sp, #4]
 8004b46:	8b3b      	ldrh	r3, [r7, #24]
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	4623      	mov	r3, r4
 8004b4c:	f7ff ff4a 	bl	80049e4 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8004b50:	8b3b      	ldrh	r3, [r7, #24]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	0052      	lsls	r2, r2, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	4413      	add	r3, r2
 8004b62:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1e3      	bne.n	8004b34 <ILI9341_Draw_Text+0x1c>
    }
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd90      	pop	{r4, r7, pc}
	...

08004b78 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8004b7c:	f7fe ffe0 	bl	8003b40 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8004b80:	f7fc fb84 	bl	800128c <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8004b84:	2200      	movs	r2, #0
 8004b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b8a:	4802      	ldr	r0, [pc, #8]	; (8004b94 <ILI9341_SPI_Init+0x1c>)
 8004b8c:	f001 ff30 	bl	80069f0 <HAL_GPIO_WritePin>
}
 8004b90:	bf00      	nop
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	40020800 	.word	0x40020800

08004b98 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8004ba2:	1df9      	adds	r1, r7, #7
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	4803      	ldr	r0, [pc, #12]	; (8004bb8 <ILI9341_SPI_Send+0x20>)
 8004baa:	f003 ff79 	bl	8008aa0 <HAL_SPI_Transmit>
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	2000059c 	.word	0x2000059c

08004bbc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bcc:	480b      	ldr	r0, [pc, #44]	; (8004bfc <ILI9341_Write_Command+0x40>)
 8004bce:	f001 ff0f 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd8:	4808      	ldr	r0, [pc, #32]	; (8004bfc <ILI9341_Write_Command+0x40>)
 8004bda:	f001 ff09 	bl	80069f0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8004bde:	79fb      	ldrb	r3, [r7, #7]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7ff ffd9 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8004be6:	2201      	movs	r2, #1
 8004be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bec:	4803      	ldr	r0, [pc, #12]	; (8004bfc <ILI9341_Write_Command+0x40>)
 8004bee:	f001 feff 	bl	80069f0 <HAL_GPIO_WritePin>
}
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40020800 	.word	0x40020800

08004c00 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c10:	480b      	ldr	r0, [pc, #44]	; (8004c40 <ILI9341_Write_Data+0x40>)
 8004c12:	f001 feed 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004c16:	2200      	movs	r2, #0
 8004c18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c1c:	4808      	ldr	r0, [pc, #32]	; (8004c40 <ILI9341_Write_Data+0x40>)
 8004c1e:	f001 fee7 	bl	80069f0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ffb7 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c30:	4803      	ldr	r0, [pc, #12]	; (8004c40 <ILI9341_Write_Data+0x40>)
 8004c32:	f001 fedd 	bl	80069f0 <HAL_GPIO_WritePin>
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40020800 	.word	0x40020800

08004c44 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4611      	mov	r1, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	80fb      	strh	r3, [r7, #6]
 8004c56:	4603      	mov	r3, r0
 8004c58:	80bb      	strh	r3, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8004c62:	202a      	movs	r0, #42	; 0x2a
 8004c64:	f7ff ffaa 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8004c68:	88fb      	ldrh	r3, [r7, #6]
 8004c6a:	0a1b      	lsrs	r3, r3, #8
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ffc5 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff ffc0 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8004c80:	887b      	ldrh	r3, [r7, #2]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff ffb9 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8004c8e:	887b      	ldrh	r3, [r7, #2]
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ffb4 	bl	8004c00 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8004c98:	202b      	movs	r0, #43	; 0x2b
 8004c9a:	f7ff ff8f 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8004c9e:	88bb      	ldrh	r3, [r7, #4]
 8004ca0:	0a1b      	lsrs	r3, r3, #8
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ffaa 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8004cac:	88bb      	ldrh	r3, [r7, #4]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7ff ffa5 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8004cb6:	883b      	ldrh	r3, [r7, #0]
 8004cb8:	0a1b      	lsrs	r3, r3, #8
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ff9e 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8004cc4:	883b      	ldrh	r3, [r7, #0]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff ff99 	bl	8004c00 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8004cce:	202c      	movs	r0, #44	; 0x2c
 8004cd0:	f7ff ff74 	bl	8004bbc <ILI9341_Write_Command>
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd90      	pop	{r4, r7, pc}

08004cdc <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ce6:	480b      	ldr	r0, [pc, #44]	; (8004d14 <ILI9341_Reset+0x38>)
 8004ce8:	f001 fe82 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8004cec:	20c8      	movs	r0, #200	; 0xc8
 8004cee:	f000 fbdf 	bl	80054b0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cf8:	4806      	ldr	r0, [pc, #24]	; (8004d14 <ILI9341_Reset+0x38>)
 8004cfa:	f001 fe79 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8004cfe:	20c8      	movs	r0, #200	; 0xc8
 8004d00:	f000 fbd6 	bl	80054b0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8004d04:	2201      	movs	r2, #1
 8004d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d0a:	4802      	ldr	r0, [pc, #8]	; (8004d14 <ILI9341_Reset+0x38>)
 8004d0c:	f001 fe70 	bl	80069f0 <HAL_GPIO_WritePin>
}
 8004d10:	bf00      	nop
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	40020800 	.word	0x40020800

08004d18 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8004d26:	2036      	movs	r0, #54	; 0x36
 8004d28:	f7ff ff48 	bl	8004bbc <ILI9341_Write_Command>
HAL_Delay(1);
 8004d2c:	2001      	movs	r0, #1
 8004d2e:	f000 fbbf 	bl	80054b0 <HAL_Delay>
	
switch(screen_rotation) 
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d837      	bhi.n	8004da8 <ILI9341_Set_Rotation+0x90>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <ILI9341_Set_Rotation+0x28>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d67 	.word	0x08004d67
 8004d48:	08004d7d 	.word	0x08004d7d
 8004d4c:	08004d93 	.word	0x08004d93
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8004d50:	2048      	movs	r0, #72	; 0x48
 8004d52:	f7ff ff55 	bl	8004c00 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8004d56:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <ILI9341_Set_Rotation+0x9c>)
 8004d58:	22f0      	movs	r2, #240	; 0xf0
 8004d5a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004d5c:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <ILI9341_Set_Rotation+0xa0>)
 8004d5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d62:	801a      	strh	r2, [r3, #0]
			break;
 8004d64:	e021      	b.n	8004daa <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8004d66:	2028      	movs	r0, #40	; 0x28
 8004d68:	f7ff ff4a 	bl	8004c00 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <ILI9341_Set_Rotation+0x9c>)
 8004d6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d72:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004d74:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <ILI9341_Set_Rotation+0xa0>)
 8004d76:	22f0      	movs	r2, #240	; 0xf0
 8004d78:	801a      	strh	r2, [r3, #0]
			break;
 8004d7a:	e016      	b.n	8004daa <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8004d7c:	2088      	movs	r0, #136	; 0x88
 8004d7e:	f7ff ff3f 	bl	8004c00 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8004d82:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <ILI9341_Set_Rotation+0x9c>)
 8004d84:	22f0      	movs	r2, #240	; 0xf0
 8004d86:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <ILI9341_Set_Rotation+0xa0>)
 8004d8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d8e:	801a      	strh	r2, [r3, #0]
			break;
 8004d90:	e00b      	b.n	8004daa <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8004d92:	20e8      	movs	r0, #232	; 0xe8
 8004d94:	f7ff ff34 	bl	8004c00 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <ILI9341_Set_Rotation+0x9c>)
 8004d9a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004d9e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <ILI9341_Set_Rotation+0xa0>)
 8004da2:	22f0      	movs	r2, #240	; 0xf0
 8004da4:	801a      	strh	r2, [r3, #0]
			break;
 8004da6:	e000      	b.n	8004daa <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8004da8:	bf00      	nop
	}
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	200000ce 	.word	0x200000ce
 8004db8:	200000cc 	.word	0x200000cc

08004dbc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dc6:	4802      	ldr	r0, [pc, #8]	; (8004dd0 <ILI9341_Enable+0x14>)
 8004dc8:	f001 fe12 	bl	80069f0 <HAL_GPIO_WritePin>
}
 8004dcc:	bf00      	nop
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40020800 	.word	0x40020800

08004dd4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8004dd8:	f7ff fff0 	bl	8004dbc <ILI9341_Enable>
ILI9341_SPI_Init();
 8004ddc:	f7ff fecc 	bl	8004b78 <ILI9341_SPI_Init>
ILI9341_Reset();
 8004de0:	f7ff ff7c 	bl	8004cdc <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8004de4:	2001      	movs	r0, #1
 8004de6:	f7ff fee9 	bl	8004bbc <ILI9341_Write_Command>
HAL_Delay(1000);
 8004dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dee:	f000 fb5f 	bl	80054b0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8004df2:	20cb      	movs	r0, #203	; 0xcb
 8004df4:	f7ff fee2 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8004df8:	2039      	movs	r0, #57	; 0x39
 8004dfa:	f7ff ff01 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8004dfe:	202c      	movs	r0, #44	; 0x2c
 8004e00:	f7ff fefe 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004e04:	2000      	movs	r0, #0
 8004e06:	f7ff fefb 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8004e0a:	2034      	movs	r0, #52	; 0x34
 8004e0c:	f7ff fef8 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8004e10:	2002      	movs	r0, #2
 8004e12:	f7ff fef5 	bl	8004c00 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8004e16:	20cf      	movs	r0, #207	; 0xcf
 8004e18:	f7ff fed0 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	f7ff feef 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004e22:	20c1      	movs	r0, #193	; 0xc1
 8004e24:	f7ff feec 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8004e28:	2030      	movs	r0, #48	; 0x30
 8004e2a:	f7ff fee9 	bl	8004c00 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8004e2e:	20e8      	movs	r0, #232	; 0xe8
 8004e30:	f7ff fec4 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8004e34:	2085      	movs	r0, #133	; 0x85
 8004e36:	f7ff fee3 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f7ff fee0 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8004e40:	2078      	movs	r0, #120	; 0x78
 8004e42:	f7ff fedd 	bl	8004c00 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8004e46:	20ea      	movs	r0, #234	; 0xea
 8004e48:	f7ff feb8 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f7ff fed7 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004e52:	2000      	movs	r0, #0
 8004e54:	f7ff fed4 	bl	8004c00 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8004e58:	20ed      	movs	r0, #237	; 0xed
 8004e5a:	f7ff feaf 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8004e5e:	2064      	movs	r0, #100	; 0x64
 8004e60:	f7ff fece 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004e64:	2003      	movs	r0, #3
 8004e66:	f7ff fecb 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8004e6a:	2012      	movs	r0, #18
 8004e6c:	f7ff fec8 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8004e70:	2081      	movs	r0, #129	; 0x81
 8004e72:	f7ff fec5 	bl	8004c00 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8004e76:	20f7      	movs	r0, #247	; 0xf7
 8004e78:	f7ff fea0 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8004e7c:	2020      	movs	r0, #32
 8004e7e:	f7ff febf 	bl	8004c00 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8004e82:	20c0      	movs	r0, #192	; 0xc0
 8004e84:	f7ff fe9a 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8004e88:	2023      	movs	r0, #35	; 0x23
 8004e8a:	f7ff feb9 	bl	8004c00 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8004e8e:	20c1      	movs	r0, #193	; 0xc1
 8004e90:	f7ff fe94 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8004e94:	2010      	movs	r0, #16
 8004e96:	f7ff feb3 	bl	8004c00 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8004e9a:	20c5      	movs	r0, #197	; 0xc5
 8004e9c:	f7ff fe8e 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8004ea0:	203e      	movs	r0, #62	; 0x3e
 8004ea2:	f7ff fead 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8004ea6:	2028      	movs	r0, #40	; 0x28
 8004ea8:	f7ff feaa 	bl	8004c00 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8004eac:	20c7      	movs	r0, #199	; 0xc7
 8004eae:	f7ff fe85 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8004eb2:	2086      	movs	r0, #134	; 0x86
 8004eb4:	f7ff fea4 	bl	8004c00 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8004eb8:	2036      	movs	r0, #54	; 0x36
 8004eba:	f7ff fe7f 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8004ebe:	2048      	movs	r0, #72	; 0x48
 8004ec0:	f7ff fe9e 	bl	8004c00 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8004ec4:	203a      	movs	r0, #58	; 0x3a
 8004ec6:	f7ff fe79 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8004eca:	2055      	movs	r0, #85	; 0x55
 8004ecc:	f7ff fe98 	bl	8004c00 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8004ed0:	20b1      	movs	r0, #177	; 0xb1
 8004ed2:	f7ff fe73 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f7ff fe92 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8004edc:	2018      	movs	r0, #24
 8004ede:	f7ff fe8f 	bl	8004c00 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8004ee2:	20b6      	movs	r0, #182	; 0xb6
 8004ee4:	f7ff fe6a 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8004ee8:	2008      	movs	r0, #8
 8004eea:	f7ff fe89 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8004eee:	2082      	movs	r0, #130	; 0x82
 8004ef0:	f7ff fe86 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8004ef4:	2027      	movs	r0, #39	; 0x27
 8004ef6:	f7ff fe83 	bl	8004c00 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8004efa:	20f2      	movs	r0, #242	; 0xf2
 8004efc:	f7ff fe5e 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004f00:	2000      	movs	r0, #0
 8004f02:	f7ff fe7d 	bl	8004c00 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8004f06:	2026      	movs	r0, #38	; 0x26
 8004f08:	f7ff fe58 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8004f0c:	2001      	movs	r0, #1
 8004f0e:	f7ff fe77 	bl	8004c00 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8004f12:	20e0      	movs	r0, #224	; 0xe0
 8004f14:	f7ff fe52 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8004f18:	200f      	movs	r0, #15
 8004f1a:	f7ff fe71 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004f1e:	2031      	movs	r0, #49	; 0x31
 8004f20:	f7ff fe6e 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8004f24:	202b      	movs	r0, #43	; 0x2b
 8004f26:	f7ff fe6b 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004f2a:	200c      	movs	r0, #12
 8004f2c:	f7ff fe68 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004f30:	200e      	movs	r0, #14
 8004f32:	f7ff fe65 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8004f36:	2008      	movs	r0, #8
 8004f38:	f7ff fe62 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8004f3c:	204e      	movs	r0, #78	; 0x4e
 8004f3e:	f7ff fe5f 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8004f42:	20f1      	movs	r0, #241	; 0xf1
 8004f44:	f7ff fe5c 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8004f48:	2037      	movs	r0, #55	; 0x37
 8004f4a:	f7ff fe59 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8004f4e:	2007      	movs	r0, #7
 8004f50:	f7ff fe56 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8004f54:	2010      	movs	r0, #16
 8004f56:	f7ff fe53 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004f5a:	2003      	movs	r0, #3
 8004f5c:	f7ff fe50 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004f60:	200e      	movs	r0, #14
 8004f62:	f7ff fe4d 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8004f66:	2009      	movs	r0, #9
 8004f68:	f7ff fe4a 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f7ff fe47 	bl	8004c00 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8004f72:	20e1      	movs	r0, #225	; 0xe1
 8004f74:	f7ff fe22 	bl	8004bbc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f7ff fe41 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004f7e:	200e      	movs	r0, #14
 8004f80:	f7ff fe3e 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8004f84:	2014      	movs	r0, #20
 8004f86:	f7ff fe3b 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004f8a:	2003      	movs	r0, #3
 8004f8c:	f7ff fe38 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8004f90:	2011      	movs	r0, #17
 8004f92:	f7ff fe35 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8004f96:	2007      	movs	r0, #7
 8004f98:	f7ff fe32 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004f9c:	2031      	movs	r0, #49	; 0x31
 8004f9e:	f7ff fe2f 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004fa2:	20c1      	movs	r0, #193	; 0xc1
 8004fa4:	f7ff fe2c 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8004fa8:	2048      	movs	r0, #72	; 0x48
 8004faa:	f7ff fe29 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8004fae:	2008      	movs	r0, #8
 8004fb0:	f7ff fe26 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004fb4:	200f      	movs	r0, #15
 8004fb6:	f7ff fe23 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004fba:	200c      	movs	r0, #12
 8004fbc:	f7ff fe20 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004fc0:	2031      	movs	r0, #49	; 0x31
 8004fc2:	f7ff fe1d 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8004fc6:	2036      	movs	r0, #54	; 0x36
 8004fc8:	f7ff fe1a 	bl	8004c00 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004fcc:	200f      	movs	r0, #15
 8004fce:	f7ff fe17 	bl	8004c00 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8004fd2:	2011      	movs	r0, #17
 8004fd4:	f7ff fdf2 	bl	8004bbc <ILI9341_Write_Command>
HAL_Delay(120);
 8004fd8:	2078      	movs	r0, #120	; 0x78
 8004fda:	f000 fa69 	bl	80054b0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8004fde:	2029      	movs	r0, #41	; 0x29
 8004fe0:	f7ff fdec 	bl	8004bbc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f7ff fe97 	bl	8004d18 <ILI9341_Set_Rotation>
}
 8004fea:	bf00      	nop
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8004ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ff4:	b08d      	sub	sp, #52	; 0x34
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	6039      	str	r1, [r7, #0]
 8004ffc:	80fb      	strh	r3, [r7, #6]
 8004ffe:	466b      	mov	r3, sp
 8005000:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800500e:	d202      	bcs.n	8005016 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005014:	e002      	b.n	800501c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8005016:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800501a:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800501c:	2201      	movs	r2, #1
 800501e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005022:	4840      	ldr	r0, [pc, #256]	; (8005124 <ILI9341_Draw_Colour_Burst+0x134>)
 8005024:	f001 fce4 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005028:	2200      	movs	r2, #0
 800502a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800502e:	483d      	ldr	r0, [pc, #244]	; (8005124 <ILI9341_Draw_Colour_Burst+0x134>)
 8005030:	f001 fcde 	bl	80069f0 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8005034:	88fb      	ldrh	r3, [r7, #6]
 8005036:	0a1b      	lsrs	r3, r3, #8
 8005038:	b29b      	uxth	r3, r3
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 800503e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005040:	460b      	mov	r3, r1
 8005042:	3b01      	subs	r3, #1
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	2300      	movs	r3, #0
 8005048:	4688      	mov	r8, r1
 800504a:	4699      	mov	r9, r3
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005058:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800505c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005060:	2300      	movs	r3, #0
 8005062:	460c      	mov	r4, r1
 8005064:	461d      	mov	r5, r3
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	00eb      	lsls	r3, r5, #3
 8005070:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005074:	00e2      	lsls	r2, r4, #3
 8005076:	1dcb      	adds	r3, r1, #7
 8005078:	08db      	lsrs	r3, r3, #3
 800507a:	00db      	lsls	r3, r3, #3
 800507c:	ebad 0d03 	sub.w	sp, sp, r3
 8005080:	466b      	mov	r3, sp
 8005082:	3300      	adds	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005086:	2300      	movs	r3, #0
 8005088:	62bb      	str	r3, [r7, #40]	; 0x28
 800508a:	e00e      	b.n	80050aa <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 800508c:	69ba      	ldr	r2, [r7, #24]
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	4413      	add	r3, r2
 8005092:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005096:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	3301      	adds	r3, #1
 800509c:	88fa      	ldrh	r2, [r7, #6]
 800509e:	b2d1      	uxtb	r1, r2
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	3302      	adds	r3, #2
 80050a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d3ec      	bcc.n	800508c <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c0:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80050ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050cc:	fb01 f202 	mul.w	r2, r1, r2
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d010      	beq.n	80050fc <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80050da:	2300      	movs	r3, #0
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
 80050de:	e009      	b.n	80050f4 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80050e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	230a      	movs	r3, #10
 80050e6:	69b9      	ldr	r1, [r7, #24]
 80050e8:	480f      	ldr	r0, [pc, #60]	; (8005128 <ILI9341_Draw_Colour_Burst+0x138>)
 80050ea:	f003 fcd9 	bl	8008aa0 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	3301      	adds	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
 80050f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d3f1      	bcc.n	80050e0 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	b29a      	uxth	r2, r3
 8005100:	230a      	movs	r3, #10
 8005102:	69b9      	ldr	r1, [r7, #24]
 8005104:	4808      	ldr	r0, [pc, #32]	; (8005128 <ILI9341_Draw_Colour_Burst+0x138>)
 8005106:	f003 fccb 	bl	8008aa0 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800510a:	2201      	movs	r2, #1
 800510c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005110:	4804      	ldr	r0, [pc, #16]	; (8005124 <ILI9341_Draw_Colour_Burst+0x134>)
 8005112:	f001 fc6d 	bl	80069f0 <HAL_GPIO_WritePin>
 8005116:	46b5      	mov	sp, r6
}
 8005118:	bf00      	nop
 800511a:	3734      	adds	r7, #52	; 0x34
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005122:	bf00      	nop
 8005124:	40020800 	.word	0x40020800
 8005128:	2000059c 	.word	0x2000059c

0800512c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8005136:	4b0e      	ldr	r3, [pc, #56]	; (8005170 <ILI9341_Fill_Screen+0x44>)
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	b29a      	uxth	r2, r3
 800513c:	4b0d      	ldr	r3, [pc, #52]	; (8005174 <ILI9341_Fill_Screen+0x48>)
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	2100      	movs	r1, #0
 8005144:	2000      	movs	r0, #0
 8005146:	f7ff fd7d 	bl	8004c44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800514a:	4b09      	ldr	r3, [pc, #36]	; (8005170 <ILI9341_Fill_Screen+0x44>)
 800514c:	881b      	ldrh	r3, [r3, #0]
 800514e:	b29b      	uxth	r3, r3
 8005150:	461a      	mov	r2, r3
 8005152:	4b08      	ldr	r3, [pc, #32]	; (8005174 <ILI9341_Fill_Screen+0x48>)
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	b29b      	uxth	r3, r3
 8005158:	fb02 f303 	mul.w	r3, r2, r3
 800515c:	461a      	mov	r2, r3
 800515e:	88fb      	ldrh	r3, [r7, #6]
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff ff44 	bl	8004ff0 <ILI9341_Draw_Colour_Burst>
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	200000ce 	.word	0x200000ce
 8005174:	200000cc 	.word	0x200000cc

08005178 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	4603      	mov	r3, r0
 8005180:	80fb      	strh	r3, [r7, #6]
 8005182:	460b      	mov	r3, r1
 8005184:	80bb      	strh	r3, [r7, #4]
 8005186:	4613      	mov	r3, r2
 8005188:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800518a:	4b64      	ldr	r3, [pc, #400]	; (800531c <ILI9341_Draw_Pixel+0x1a4>)
 800518c:	881b      	ldrh	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	429a      	cmp	r2, r3
 8005194:	f080 80be 	bcs.w	8005314 <ILI9341_Draw_Pixel+0x19c>
 8005198:	4b61      	ldr	r3, [pc, #388]	; (8005320 <ILI9341_Draw_Pixel+0x1a8>)
 800519a:	881b      	ldrh	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	88ba      	ldrh	r2, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	f080 80b7 	bcs.w	8005314 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80051a6:	2200      	movs	r2, #0
 80051a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051ac:	485d      	ldr	r0, [pc, #372]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80051ae:	f001 fc1f 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80051b2:	2200      	movs	r2, #0
 80051b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051b8:	485a      	ldr	r0, [pc, #360]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80051ba:	f001 fc19 	bl	80069f0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80051be:	202a      	movs	r0, #42	; 0x2a
 80051c0:	f7ff fcea 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80051c4:	2201      	movs	r2, #1
 80051c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051ca:	4856      	ldr	r0, [pc, #344]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80051cc:	f001 fc10 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80051d0:	2201      	movs	r2, #1
 80051d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051d6:	4853      	ldr	r0, [pc, #332]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80051d8:	f001 fc0a 	bl	80069f0 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80051dc:	2200      	movs	r2, #0
 80051de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051e2:	4850      	ldr	r0, [pc, #320]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80051e4:	f001 fc04 	bl	80069f0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80051e8:	88fb      	ldrh	r3, [r7, #6]
 80051ea:	0a1b      	lsrs	r3, r3, #8
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	753b      	strb	r3, [r7, #20]
 80051f2:	88fb      	ldrh	r3, [r7, #6]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	757b      	strb	r3, [r7, #21]
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	3301      	adds	r3, #1
 80051fc:	121b      	asrs	r3, r3, #8
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	75bb      	strb	r3, [r7, #22]
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	b2db      	uxtb	r3, r3
 8005206:	3301      	adds	r3, #1
 8005208:	b2db      	uxtb	r3, r3
 800520a:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800520c:	f107 0114 	add.w	r1, r7, #20
 8005210:	2301      	movs	r3, #1
 8005212:	2204      	movs	r2, #4
 8005214:	4844      	ldr	r0, [pc, #272]	; (8005328 <ILI9341_Draw_Pixel+0x1b0>)
 8005216:	f003 fc43 	bl	8008aa0 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800521a:	2201      	movs	r2, #1
 800521c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005220:	4840      	ldr	r0, [pc, #256]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 8005222:	f001 fbe5 	bl	80069f0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005226:	2200      	movs	r2, #0
 8005228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800522c:	483d      	ldr	r0, [pc, #244]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 800522e:	f001 fbdf 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005232:	2200      	movs	r2, #0
 8005234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005238:	483a      	ldr	r0, [pc, #232]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 800523a:	f001 fbd9 	bl	80069f0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800523e:	202b      	movs	r0, #43	; 0x2b
 8005240:	f7ff fcaa 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8005244:	2201      	movs	r2, #1
 8005246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800524a:	4836      	ldr	r0, [pc, #216]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 800524c:	f001 fbd0 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8005250:	2201      	movs	r2, #1
 8005252:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005256:	4833      	ldr	r0, [pc, #204]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 8005258:	f001 fbca 	bl	80069f0 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800525c:	2200      	movs	r2, #0
 800525e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005262:	4830      	ldr	r0, [pc, #192]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 8005264:	f001 fbc4 	bl	80069f0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8005268:	88bb      	ldrh	r3, [r7, #4]
 800526a:	0a1b      	lsrs	r3, r3, #8
 800526c:	b29b      	uxth	r3, r3
 800526e:	b2db      	uxtb	r3, r3
 8005270:	743b      	strb	r3, [r7, #16]
 8005272:	88bb      	ldrh	r3, [r7, #4]
 8005274:	b2db      	uxtb	r3, r3
 8005276:	747b      	strb	r3, [r7, #17]
 8005278:	88bb      	ldrh	r3, [r7, #4]
 800527a:	3301      	adds	r3, #1
 800527c:	121b      	asrs	r3, r3, #8
 800527e:	b2db      	uxtb	r3, r3
 8005280:	74bb      	strb	r3, [r7, #18]
 8005282:	88bb      	ldrh	r3, [r7, #4]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	3301      	adds	r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800528c:	f107 0110 	add.w	r1, r7, #16
 8005290:	2301      	movs	r3, #1
 8005292:	2204      	movs	r2, #4
 8005294:	4824      	ldr	r0, [pc, #144]	; (8005328 <ILI9341_Draw_Pixel+0x1b0>)
 8005296:	f003 fc03 	bl	8008aa0 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800529a:	2201      	movs	r2, #1
 800529c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052a0:	4820      	ldr	r0, [pc, #128]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80052a2:	f001 fba5 	bl	80069f0 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80052a6:	2200      	movs	r2, #0
 80052a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052ac:	481d      	ldr	r0, [pc, #116]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80052ae:	f001 fb9f 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80052b2:	2200      	movs	r2, #0
 80052b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052b8:	481a      	ldr	r0, [pc, #104]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80052ba:	f001 fb99 	bl	80069f0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80052be:	202c      	movs	r0, #44	; 0x2c
 80052c0:	f7ff fc6a 	bl	8004b98 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80052c4:	2201      	movs	r2, #1
 80052c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052ca:	4816      	ldr	r0, [pc, #88]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80052cc:	f001 fb90 	bl	80069f0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80052d0:	2201      	movs	r2, #1
 80052d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052d6:	4813      	ldr	r0, [pc, #76]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80052d8:	f001 fb8a 	bl	80069f0 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80052dc:	2200      	movs	r2, #0
 80052de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052e2:	4810      	ldr	r0, [pc, #64]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 80052e4:	f001 fb84 	bl	80069f0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 80052e8:	887b      	ldrh	r3, [r7, #2]
 80052ea:	0a1b      	lsrs	r3, r3, #8
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	733b      	strb	r3, [r7, #12]
 80052f2:	887b      	ldrh	r3, [r7, #2]
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 80052f8:	f107 010c 	add.w	r1, r7, #12
 80052fc:	2301      	movs	r3, #1
 80052fe:	2202      	movs	r2, #2
 8005300:	4809      	ldr	r0, [pc, #36]	; (8005328 <ILI9341_Draw_Pixel+0x1b0>)
 8005302:	f003 fbcd 	bl	8008aa0 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005306:	2201      	movs	r2, #1
 8005308:	f44f 7180 	mov.w	r1, #256	; 0x100
 800530c:	4805      	ldr	r0, [pc, #20]	; (8005324 <ILI9341_Draw_Pixel+0x1ac>)
 800530e:	f001 fb6f 	bl	80069f0 <HAL_GPIO_WritePin>
 8005312:	e000      	b.n	8005316 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005314:	bf00      	nop
	
}
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	200000ce 	.word	0x200000ce
 8005320:	200000cc 	.word	0x200000cc
 8005324:	40020800 	.word	0x40020800
 8005328:	2000059c 	.word	0x2000059c

0800532c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800532c:	b590      	push	{r4, r7, lr}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	4604      	mov	r4, r0
 8005334:	4608      	mov	r0, r1
 8005336:	4611      	mov	r1, r2
 8005338:	461a      	mov	r2, r3
 800533a:	4623      	mov	r3, r4
 800533c:	80fb      	strh	r3, [r7, #6]
 800533e:	4603      	mov	r3, r0
 8005340:	80bb      	strh	r3, [r7, #4]
 8005342:	460b      	mov	r3, r1
 8005344:	807b      	strh	r3, [r7, #2]
 8005346:	4613      	mov	r3, r2
 8005348:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800534a:	4b24      	ldr	r3, [pc, #144]	; (80053dc <ILI9341_Draw_Rectangle+0xb0>)
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	429a      	cmp	r2, r3
 8005354:	d23d      	bcs.n	80053d2 <ILI9341_Draw_Rectangle+0xa6>
 8005356:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <ILI9341_Draw_Rectangle+0xb4>)
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b29b      	uxth	r3, r3
 800535c:	88ba      	ldrh	r2, [r7, #4]
 800535e:	429a      	cmp	r2, r3
 8005360:	d237      	bcs.n	80053d2 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	887b      	ldrh	r3, [r7, #2]
 8005366:	4413      	add	r3, r2
 8005368:	4a1c      	ldr	r2, [pc, #112]	; (80053dc <ILI9341_Draw_Rectangle+0xb0>)
 800536a:	8812      	ldrh	r2, [r2, #0]
 800536c:	b292      	uxth	r2, r2
 800536e:	4293      	cmp	r3, r2
 8005370:	dd05      	ble.n	800537e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8005372:	4b1a      	ldr	r3, [pc, #104]	; (80053dc <ILI9341_Draw_Rectangle+0xb0>)
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	b29a      	uxth	r2, r3
 8005378:	88fb      	ldrh	r3, [r7, #6]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800537e:	88ba      	ldrh	r2, [r7, #4]
 8005380:	883b      	ldrh	r3, [r7, #0]
 8005382:	4413      	add	r3, r2
 8005384:	4a16      	ldr	r2, [pc, #88]	; (80053e0 <ILI9341_Draw_Rectangle+0xb4>)
 8005386:	8812      	ldrh	r2, [r2, #0]
 8005388:	b292      	uxth	r2, r2
 800538a:	4293      	cmp	r3, r2
 800538c:	dd05      	ble.n	800539a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800538e:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <ILI9341_Draw_Rectangle+0xb4>)
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	b29a      	uxth	r2, r3
 8005394:	88bb      	ldrh	r3, [r7, #4]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800539a:	88fa      	ldrh	r2, [r7, #6]
 800539c:	887b      	ldrh	r3, [r7, #2]
 800539e:	4413      	add	r3, r2
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29c      	uxth	r4, r3
 80053a6:	88ba      	ldrh	r2, [r7, #4]
 80053a8:	883b      	ldrh	r3, [r7, #0]
 80053aa:	4413      	add	r3, r2
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	88b9      	ldrh	r1, [r7, #4]
 80053b4:	88f8      	ldrh	r0, [r7, #6]
 80053b6:	4622      	mov	r2, r4
 80053b8:	f7ff fc44 	bl	8004c44 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80053bc:	883b      	ldrh	r3, [r7, #0]
 80053be:	887a      	ldrh	r2, [r7, #2]
 80053c0:	fb02 f303 	mul.w	r3, r2, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	8b3b      	ldrh	r3, [r7, #24]
 80053c8:	4611      	mov	r1, r2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fe10 	bl	8004ff0 <ILI9341_Draw_Colour_Burst>
 80053d0:	e000      	b.n	80053d4 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80053d2:	bf00      	nop
}
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd90      	pop	{r4, r7, pc}
 80053da:	bf00      	nop
 80053dc:	200000ce 	.word	0x200000ce
 80053e0:	200000cc 	.word	0x200000cc

080053e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80053e8:	4b08      	ldr	r3, [pc, #32]	; (800540c <HAL_Init+0x28>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a07      	ldr	r2, [pc, #28]	; (800540c <HAL_Init+0x28>)
 80053ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80053f4:	2003      	movs	r0, #3
 80053f6:	f000 fd7d 	bl	8005ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053fa:	2000      	movs	r0, #0
 80053fc:	f000 f808 	bl	8005410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005400:	f7fe fc20 	bl	8003c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40023c00 	.word	0x40023c00

08005410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005418:	4b12      	ldr	r3, [pc, #72]	; (8005464 <HAL_InitTick+0x54>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	4b12      	ldr	r3, [pc, #72]	; (8005468 <HAL_InitTick+0x58>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	4619      	mov	r1, r3
 8005422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005426:	fbb3 f3f1 	udiv	r3, r3, r1
 800542a:	fbb2 f3f3 	udiv	r3, r2, r3
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fd95 	bl	8005f5e <HAL_SYSTICK_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e00e      	b.n	800545c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b0f      	cmp	r3, #15
 8005442:	d80a      	bhi.n	800545a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005444:	2200      	movs	r2, #0
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	f000 fd5d 	bl	8005f0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005450:	4a06      	ldr	r2, [pc, #24]	; (800546c <HAL_InitTick+0x5c>)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	200000c8 	.word	0x200000c8
 8005468:	200000d4 	.word	0x200000d4
 800546c:	200000d0 	.word	0x200000d0

08005470 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <HAL_IncTick+0x20>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <HAL_IncTick+0x24>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4413      	add	r3, r2
 8005480:	4a04      	ldr	r2, [pc, #16]	; (8005494 <HAL_IncTick+0x24>)
 8005482:	6013      	str	r3, [r2, #0]
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	200000d4 	.word	0x200000d4
 8005494:	200008dc 	.word	0x200008dc

08005498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return uwTick;
 800549c:	4b03      	ldr	r3, [pc, #12]	; (80054ac <HAL_GetTick+0x14>)
 800549e:	681b      	ldr	r3, [r3, #0]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	200008dc 	.word	0x200008dc

080054b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054b8:	f7ff ffee 	bl	8005498 <HAL_GetTick>
 80054bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c8:	d005      	beq.n	80054d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80054ca:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <HAL_Delay+0x44>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80054d6:	bf00      	nop
 80054d8:	f7ff ffde 	bl	8005498 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d8f7      	bhi.n	80054d8 <HAL_Delay+0x28>
  {
  }
}
 80054e8:	bf00      	nop
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	200000d4 	.word	0x200000d4

080054f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d101      	bne.n	800550e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e031      	b.n	8005572 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d109      	bne.n	800552a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fb fa7a 	bl	8000a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552e:	f003 0310 	and.w	r3, r3, #16
 8005532:	2b00      	cmp	r3, #0
 8005534:	d116      	bne.n	8005564 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800553a:	4b10      	ldr	r3, [pc, #64]	; (800557c <HAL_ADC_Init+0x84>)
 800553c:	4013      	ands	r3, r2
 800553e:	f043 0202 	orr.w	r2, r3, #2
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa88 	bl	8005a5c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	f023 0303 	bic.w	r3, r3, #3
 800555a:	f043 0201 	orr.w	r2, r3, #1
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
 8005562:	e001      	b.n	8005568 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005570:	7bfb      	ldrb	r3, [r7, #15]
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	ffffeefd 	.word	0xffffeefd

08005580 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800558c:	2300      	movs	r3, #0
 800558e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_ADC_Start_DMA+0x1e>
 800559a:	2302      	movs	r3, #2
 800559c:	e0d4      	b.n	8005748 <HAL_ADC_Start_DMA+0x1c8>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d018      	beq.n	80055e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0201 	orr.w	r2, r2, #1
 80055c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80055c4:	4b62      	ldr	r3, [pc, #392]	; (8005750 <HAL_ADC_Start_DMA+0x1d0>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a62      	ldr	r2, [pc, #392]	; (8005754 <HAL_ADC_Start_DMA+0x1d4>)
 80055ca:	fba2 2303 	umull	r2, r3, r2, r3
 80055ce:	0c9a      	lsrs	r2, r3, #18
 80055d0:	4613      	mov	r3, r2
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	4413      	add	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80055d8:	e002      	b.n	80055e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	3b01      	subs	r3, #1
 80055de:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f9      	bne.n	80055da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	f040 809c 	bne.w	800572e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055fa:	4b57      	ldr	r3, [pc, #348]	; (8005758 <HAL_ADC_Start_DMA+0x1d8>)
 80055fc:	4013      	ands	r3, r2
 80055fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005610:	2b00      	cmp	r3, #0
 8005612:	d007      	beq.n	8005624 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800561c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800562c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005630:	d106      	bne.n	8005640 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005636:	f023 0206 	bic.w	r2, r3, #6
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	645a      	str	r2, [r3, #68]	; 0x44
 800563e:	e002      	b.n	8005646 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	4a42      	ldr	r2, [pc, #264]	; (800575c <HAL_ADC_Start_DMA+0x1dc>)
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	4a41      	ldr	r2, [pc, #260]	; (8005760 <HAL_ADC_Start_DMA+0x1e0>)
 800565c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	4a40      	ldr	r2, [pc, #256]	; (8005764 <HAL_ADC_Start_DMA+0x1e4>)
 8005664:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800566e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800567e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	334c      	adds	r3, #76	; 0x4c
 800569a:	4619      	mov	r1, r3
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f000 fd18 	bl	80060d4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80056a4:	4b30      	ldr	r3, [pc, #192]	; (8005768 <HAL_ADC_Start_DMA+0x1e8>)
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10f      	bne.n	80056d0 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d143      	bne.n	8005746 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056cc:	609a      	str	r2, [r3, #8]
 80056ce:	e03a      	b.n	8005746 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <HAL_ADC_Start_DMA+0x1ec>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d10e      	bne.n	80056f8 <HAL_ADC_Start_DMA+0x178>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d107      	bne.n	80056f8 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056f6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80056f8:	4b1b      	ldr	r3, [pc, #108]	; (8005768 <HAL_ADC_Start_DMA+0x1e8>)
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f003 0310 	and.w	r3, r3, #16
 8005700:	2b00      	cmp	r3, #0
 8005702:	d120      	bne.n	8005746 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a19      	ldr	r2, [pc, #100]	; (8005770 <HAL_ADC_Start_DMA+0x1f0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d11b      	bne.n	8005746 <HAL_ADC_Start_DMA+0x1c6>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d114      	bne.n	8005746 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800572a:	609a      	str	r2, [r3, #8]
 800572c:	e00b      	b.n	8005746 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f043 0210 	orr.w	r2, r3, #16
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573e:	f043 0201 	orr.w	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	200000c8 	.word	0x200000c8
 8005754:	431bde83 	.word	0x431bde83
 8005758:	fffff8fe 	.word	0xfffff8fe
 800575c:	08005c51 	.word	0x08005c51
 8005760:	08005d0b 	.word	0x08005d0b
 8005764:	08005d27 	.word	0x08005d27
 8005768:	40012300 	.word	0x40012300
 800576c:	40012000 	.word	0x40012000
 8005770:	40012200 	.word	0x40012200

08005774 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800577c:	bf00      	nop
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d101      	bne.n	80057cc <HAL_ADC_ConfigChannel+0x1c>
 80057c8:	2302      	movs	r3, #2
 80057ca:	e136      	b.n	8005a3a <HAL_ADC_ConfigChannel+0x28a>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b09      	cmp	r3, #9
 80057da:	d93a      	bls.n	8005852 <HAL_ADC_ConfigChannel+0xa2>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e4:	d035      	beq.n	8005852 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68d9      	ldr	r1, [r3, #12]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	4613      	mov	r3, r2
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	4413      	add	r3, r2
 80057fa:	3b1e      	subs	r3, #30
 80057fc:	2207      	movs	r2, #7
 80057fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005802:	43da      	mvns	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	400a      	ands	r2, r1
 800580a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a8d      	ldr	r2, [pc, #564]	; (8005a48 <HAL_ADC_ConfigChannel+0x298>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10a      	bne.n	800582c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68d9      	ldr	r1, [r3, #12]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	061a      	lsls	r2, r3, #24
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800582a:	e035      	b.n	8005898 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68d9      	ldr	r1, [r3, #12]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	689a      	ldr	r2, [r3, #8]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	4618      	mov	r0, r3
 800583e:	4603      	mov	r3, r0
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	4403      	add	r3, r0
 8005844:	3b1e      	subs	r3, #30
 8005846:	409a      	lsls	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	430a      	orrs	r2, r1
 800584e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005850:	e022      	b.n	8005898 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6919      	ldr	r1, [r3, #16]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	461a      	mov	r2, r3
 8005860:	4613      	mov	r3, r2
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	4413      	add	r3, r2
 8005866:	2207      	movs	r2, #7
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	43da      	mvns	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	400a      	ands	r2, r1
 8005874:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6919      	ldr	r1, [r3, #16]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	b29b      	uxth	r3, r3
 8005886:	4618      	mov	r0, r3
 8005888:	4603      	mov	r3, r0
 800588a:	005b      	lsls	r3, r3, #1
 800588c:	4403      	add	r3, r0
 800588e:	409a      	lsls	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b06      	cmp	r3, #6
 800589e:	d824      	bhi.n	80058ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	3b05      	subs	r3, #5
 80058b2:	221f      	movs	r2, #31
 80058b4:	fa02 f303 	lsl.w	r3, r2, r3
 80058b8:	43da      	mvns	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	400a      	ands	r2, r1
 80058c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	4618      	mov	r0, r3
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	4613      	mov	r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	3b05      	subs	r3, #5
 80058dc:	fa00 f203 	lsl.w	r2, r0, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	635a      	str	r2, [r3, #52]	; 0x34
 80058e8:	e04c      	b.n	8005984 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	2b0c      	cmp	r3, #12
 80058f0:	d824      	bhi.n	800593c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	3b23      	subs	r3, #35	; 0x23
 8005904:	221f      	movs	r2, #31
 8005906:	fa02 f303 	lsl.w	r3, r2, r3
 800590a:	43da      	mvns	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	400a      	ands	r2, r1
 8005912:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	b29b      	uxth	r3, r3
 8005920:	4618      	mov	r0, r3
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	3b23      	subs	r3, #35	; 0x23
 800592e:	fa00 f203 	lsl.w	r2, r0, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
 800593a:	e023      	b.n	8005984 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	3b41      	subs	r3, #65	; 0x41
 800594e:	221f      	movs	r2, #31
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	43da      	mvns	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	400a      	ands	r2, r1
 800595c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	b29b      	uxth	r3, r3
 800596a:	4618      	mov	r0, r3
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	3b41      	subs	r3, #65	; 0x41
 8005978:	fa00 f203 	lsl.w	r2, r0, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a30      	ldr	r2, [pc, #192]	; (8005a4c <HAL_ADC_ConfigChannel+0x29c>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d10a      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0x1f4>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005996:	d105      	bne.n	80059a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005998:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	4a2c      	ldr	r2, [pc, #176]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 800599e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80059a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <HAL_ADC_ConfigChannel+0x29c>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d10f      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x21e>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b12      	cmp	r3, #18
 80059b4:	d10b      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80059b6:	4b26      	ldr	r3, [pc, #152]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4a25      	ldr	r2, [pc, #148]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80059bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80059c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80059c2:	4b23      	ldr	r3, [pc, #140]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80059c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a1e      	ldr	r2, [pc, #120]	; (8005a4c <HAL_ADC_ConfigChannel+0x29c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d12b      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x280>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a1a      	ldr	r2, [pc, #104]	; (8005a48 <HAL_ADC_ConfigChannel+0x298>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <HAL_ADC_ConfigChannel+0x23a>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b11      	cmp	r3, #17
 80059e8:	d122      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80059ea:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4a18      	ldr	r2, [pc, #96]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80059f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80059f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80059f6:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	4a15      	ldr	r2, [pc, #84]	; (8005a50 <HAL_ADC_ConfigChannel+0x2a0>)
 80059fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a00:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a10      	ldr	r2, [pc, #64]	; (8005a48 <HAL_ADC_ConfigChannel+0x298>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d111      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005a0c:	4b11      	ldr	r3, [pc, #68]	; (8005a54 <HAL_ADC_ConfigChannel+0x2a4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a11      	ldr	r2, [pc, #68]	; (8005a58 <HAL_ADC_ConfigChannel+0x2a8>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	0c9a      	lsrs	r2, r3, #18
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005a22:	e002      	b.n	8005a2a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1f9      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	10000012 	.word	0x10000012
 8005a4c:	40012000 	.word	0x40012000
 8005a50:	40012300 	.word	0x40012300
 8005a54:	200000c8 	.word	0x200000c8
 8005a58:	431bde83 	.word	0x431bde83

08005a5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005a64:	4b78      	ldr	r3, [pc, #480]	; (8005c48 <ADC_Init+0x1ec>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4a77      	ldr	r2, [pc, #476]	; (8005c48 <ADC_Init+0x1ec>)
 8005a6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005a6e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005a70:	4b75      	ldr	r3, [pc, #468]	; (8005c48 <ADC_Init+0x1ec>)
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	4973      	ldr	r1, [pc, #460]	; (8005c48 <ADC_Init+0x1ec>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6859      	ldr	r1, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	021a      	lsls	r2, r3, #8
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6859      	ldr	r1, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	430a      	orrs	r2, r1
 8005ac2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6899      	ldr	r1, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	4a58      	ldr	r2, [pc, #352]	; (8005c4c <ADC_Init+0x1f0>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6899      	ldr	r1, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6899      	ldr	r1, [r3, #8]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	609a      	str	r2, [r3, #8]
 8005b34:	e00f      	b.n	8005b56 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005b54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	689a      	ldr	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0202 	bic.w	r2, r2, #2
 8005b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	6899      	ldr	r1, [r3, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	005a      	lsls	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	430a      	orrs	r2, r1
 8005b78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01b      	beq.n	8005bbc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005ba2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6859      	ldr	r1, [r3, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	035a      	lsls	r2, r3, #13
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	e007      	b.n	8005bcc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	685a      	ldr	r2, [r3, #4]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	051a      	lsls	r2, r3, #20
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	6899      	ldr	r1, [r3, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c0e:	025a      	lsls	r2, r3, #9
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689a      	ldr	r2, [r3, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6899      	ldr	r1, [r3, #8]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	029a      	lsls	r2, r3, #10
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	609a      	str	r2, [r3, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	40012300 	.word	0x40012300
 8005c4c:	0f000001 	.word	0x0f000001

08005c50 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d13c      	bne.n	8005ce4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d12b      	bne.n	8005cdc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d127      	bne.n	8005cdc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c92:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d006      	beq.n	8005ca8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d119      	bne.n	8005cdc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f022 0220 	bic.w	r2, r2, #32
 8005cb6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd4:	f043 0201 	orr.w	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff fd49 	bl	8005774 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005ce2:	e00e      	b.n	8005d02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f7ff fd53 	bl	800579c <HAL_ADC_ErrorCallback>
}
 8005cf6:	e004      	b.n	8005d02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	4798      	blx	r3
}
 8005d02:	bf00      	nop
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f7ff fd35 	bl	8005788 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d1e:	bf00      	nop
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2240      	movs	r2, #64	; 0x40
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3e:	f043 0204 	orr.w	r2, r3, #4
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff fd28 	bl	800579c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d4c:	bf00      	nop
 8005d4e:	3710      	adds	r7, #16
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <__NVIC_SetPriorityGrouping>:
{
 8005d54:	b480      	push	{r7}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d64:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <__NVIC_SetPriorityGrouping+0x40>)
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d70:	4013      	ands	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <__NVIC_SetPriorityGrouping+0x44>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d82:	4a04      	ldr	r2, [pc, #16]	; (8005d94 <__NVIC_SetPriorityGrouping+0x40>)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	60d3      	str	r3, [r2, #12]
}
 8005d88:	bf00      	nop
 8005d8a:	3714      	adds	r7, #20
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	e000ed00 	.word	0xe000ed00
 8005d98:	05fa0000 	.word	0x05fa0000

08005d9c <__NVIC_GetPriorityGrouping>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005da0:	4b04      	ldr	r3, [pc, #16]	; (8005db4 <__NVIC_GetPriorityGrouping+0x18>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	f003 0307 	and.w	r3, r3, #7
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	e000ed00 	.word	0xe000ed00

08005db8 <__NVIC_EnableIRQ>:
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	db0b      	blt.n	8005de2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	f003 021f 	and.w	r2, r3, #31
 8005dd0:	4907      	ldr	r1, [pc, #28]	; (8005df0 <__NVIC_EnableIRQ+0x38>)
 8005dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	2001      	movs	r0, #1
 8005dda:	fa00 f202 	lsl.w	r2, r0, r2
 8005dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	e000e100 	.word	0xe000e100

08005df4 <__NVIC_SetPriority>:
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	db0a      	blt.n	8005e1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	b2da      	uxtb	r2, r3
 8005e0c:	490c      	ldr	r1, [pc, #48]	; (8005e40 <__NVIC_SetPriority+0x4c>)
 8005e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e12:	0112      	lsls	r2, r2, #4
 8005e14:	b2d2      	uxtb	r2, r2
 8005e16:	440b      	add	r3, r1
 8005e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e1c:	e00a      	b.n	8005e34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	4908      	ldr	r1, [pc, #32]	; (8005e44 <__NVIC_SetPriority+0x50>)
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	3b04      	subs	r3, #4
 8005e2c:	0112      	lsls	r2, r2, #4
 8005e2e:	b2d2      	uxtb	r2, r2
 8005e30:	440b      	add	r3, r1
 8005e32:	761a      	strb	r2, [r3, #24]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	e000e100 	.word	0xe000e100
 8005e44:	e000ed00 	.word	0xe000ed00

08005e48 <NVIC_EncodePriority>:
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b089      	sub	sp, #36	; 0x24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	f1c3 0307 	rsb	r3, r3, #7
 8005e62:	2b04      	cmp	r3, #4
 8005e64:	bf28      	it	cs
 8005e66:	2304      	movcs	r3, #4
 8005e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	2b06      	cmp	r3, #6
 8005e70:	d902      	bls.n	8005e78 <NVIC_EncodePriority+0x30>
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	3b03      	subs	r3, #3
 8005e76:	e000      	b.n	8005e7a <NVIC_EncodePriority+0x32>
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	fa02 f303 	lsl.w	r3, r2, r3
 8005e86:	43da      	mvns	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	401a      	ands	r2, r3
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e90:	f04f 31ff 	mov.w	r1, #4294967295
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9a:	43d9      	mvns	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ea0:	4313      	orrs	r3, r2
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3724      	adds	r7, #36	; 0x24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005ec0:	d301      	bcc.n	8005ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e00f      	b.n	8005ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ec6:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <SysTick_Config+0x40>)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ece:	210f      	movs	r1, #15
 8005ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed4:	f7ff ff8e 	bl	8005df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ed8:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <SysTick_Config+0x40>)
 8005eda:	2200      	movs	r2, #0
 8005edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ede:	4b04      	ldr	r3, [pc, #16]	; (8005ef0 <SysTick_Config+0x40>)
 8005ee0:	2207      	movs	r2, #7
 8005ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	e000e010 	.word	0xe000e010

08005ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7ff ff29 	bl	8005d54 <__NVIC_SetPriorityGrouping>
}
 8005f02:	bf00      	nop
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b086      	sub	sp, #24
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	4603      	mov	r3, r0
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	607a      	str	r2, [r7, #4]
 8005f16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005f1c:	f7ff ff3e 	bl	8005d9c <__NVIC_GetPriorityGrouping>
 8005f20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	6978      	ldr	r0, [r7, #20]
 8005f28:	f7ff ff8e 	bl	8005e48 <NVIC_EncodePriority>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f32:	4611      	mov	r1, r2
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff ff5d 	bl	8005df4 <__NVIC_SetPriority>
}
 8005f3a:	bf00      	nop
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	4603      	mov	r3, r0
 8005f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff ff31 	bl	8005db8 <__NVIC_EnableIRQ>
}
 8005f56:	bf00      	nop
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b082      	sub	sp, #8
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f7ff ffa2 	bl	8005eb0 <SysTick_Config>
 8005f6c:	4603      	mov	r3, r0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f84:	f7ff fa88 	bl	8005498 <HAL_GetTick>
 8005f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d101      	bne.n	8005f94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e099      	b.n	80060c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2202      	movs	r2, #2
 8005f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 0201 	bic.w	r2, r2, #1
 8005fb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fb4:	e00f      	b.n	8005fd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005fb6:	f7ff fa6f 	bl	8005498 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	d908      	bls.n	8005fd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2203      	movs	r2, #3
 8005fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e078      	b.n	80060c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e8      	bne.n	8005fb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4b38      	ldr	r3, [pc, #224]	; (80060d0 <HAL_DMA_Init+0x158>)
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006002:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800600e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	699b      	ldr	r3, [r3, #24]
 8006014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800601a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	2b04      	cmp	r3, #4
 800602e:	d107      	bne.n	8006040 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006038:	4313      	orrs	r3, r2
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f023 0307 	bic.w	r3, r3, #7
 8006056:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	4313      	orrs	r3, r2
 8006060:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	2b04      	cmp	r3, #4
 8006068:	d117      	bne.n	800609a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006078:	2b00      	cmp	r3, #0
 800607a:	d00e      	beq.n	800609a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fa77 	bl	8006570 <DMA_CheckFifoParam>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2240      	movs	r2, #64	; 0x40
 800608c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006096:	2301      	movs	r3, #1
 8006098:	e016      	b.n	80060c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fa2e 	bl	8006504 <DMA_CalcBaseAndBitshift>
 80060a8:	4603      	mov	r3, r0
 80060aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b0:	223f      	movs	r2, #63	; 0x3f
 80060b2:	409a      	lsls	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3718      	adds	r7, #24
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	e010803f 	.word	0xe010803f

080060d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_DMA_Start_IT+0x26>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e048      	b.n	800618c <HAL_DMA_Start_IT+0xb8>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b01      	cmp	r3, #1
 800610c:	d137      	bne.n	800617e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2202      	movs	r2, #2
 8006112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	68b9      	ldr	r1, [r7, #8]
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 f9c0 	bl	80064a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612c:	223f      	movs	r2, #63	; 0x3f
 800612e:	409a      	lsls	r2, r3
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0216 	orr.w	r2, r2, #22
 8006142:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695a      	ldr	r2, [r3, #20]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006152:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0208 	orr.w	r2, r2, #8
 800616a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f042 0201 	orr.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	e005      	b.n	800618a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006186:	2302      	movs	r3, #2
 8006188:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80061a0:	4b8e      	ldr	r3, [pc, #568]	; (80063dc <HAL_DMA_IRQHandler+0x248>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a8e      	ldr	r2, [pc, #568]	; (80063e0 <HAL_DMA_IRQHandler+0x24c>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	0a9b      	lsrs	r3, r3, #10
 80061ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061be:	2208      	movs	r2, #8
 80061c0:	409a      	lsls	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4013      	ands	r3, r2
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d01a      	beq.n	8006200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d013      	beq.n	8006200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0204 	bic.w	r2, r2, #4
 80061e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ec:	2208      	movs	r2, #8
 80061ee:	409a      	lsls	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f8:	f043 0201 	orr.w	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006204:	2201      	movs	r2, #1
 8006206:	409a      	lsls	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d012      	beq.n	8006236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00b      	beq.n	8006236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006222:	2201      	movs	r2, #1
 8006224:	409a      	lsls	r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	f043 0202 	orr.w	r2, r3, #2
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800623a:	2204      	movs	r2, #4
 800623c:	409a      	lsls	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	4013      	ands	r3, r2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d012      	beq.n	800626c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006258:	2204      	movs	r2, #4
 800625a:	409a      	lsls	r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006264:	f043 0204 	orr.w	r2, r3, #4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006270:	2210      	movs	r2, #16
 8006272:	409a      	lsls	r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d043      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	d03c      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628e:	2210      	movs	r2, #16
 8006290:	409a      	lsls	r2, r3
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d018      	beq.n	80062d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d108      	bne.n	80062c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d024      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	4798      	blx	r3
 80062c2:	e01f      	b.n	8006304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01b      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
 80062d4:	e016      	b.n	8006304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d107      	bne.n	80062f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 0208 	bic.w	r2, r2, #8
 80062f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	2220      	movs	r2, #32
 800630a:	409a      	lsls	r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	4013      	ands	r3, r2
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 808f 	beq.w	8006434 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0310 	and.w	r3, r3, #16
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 8087 	beq.w	8006434 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800632a:	2220      	movs	r2, #32
 800632c:	409a      	lsls	r2, r3
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b05      	cmp	r3, #5
 800633c:	d136      	bne.n	80063ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0216 	bic.w	r2, r2, #22
 800634c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695a      	ldr	r2, [r3, #20]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800635c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <HAL_DMA_IRQHandler+0x1da>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636a:	2b00      	cmp	r3, #0
 800636c:	d007      	beq.n	800637e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681a      	ldr	r2, [r3, #0]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f022 0208 	bic.w	r2, r2, #8
 800637c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006382:	223f      	movs	r2, #63	; 0x3f
 8006384:	409a      	lsls	r2, r3
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d07e      	beq.n	80064a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
        }
        return;
 80063aa:	e079      	b.n	80064a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01d      	beq.n	80063f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10d      	bne.n	80063e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d031      	beq.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	4798      	blx	r3
 80063d8:	e02c      	b.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
 80063da:	bf00      	nop
 80063dc:	200000c8 	.word	0x200000c8
 80063e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d023      	beq.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	4798      	blx	r3
 80063f4:	e01e      	b.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10f      	bne.n	8006424 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0210 	bic.w	r2, r2, #16
 8006412:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006438:	2b00      	cmp	r3, #0
 800643a:	d032      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d022      	beq.n	800648e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2205      	movs	r2, #5
 800644c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	3301      	adds	r3, #1
 8006464:	60bb      	str	r3, [r7, #8]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	429a      	cmp	r2, r3
 800646a:	d307      	bcc.n	800647c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1f2      	bne.n	8006460 <HAL_DMA_IRQHandler+0x2cc>
 800647a:	e000      	b.n	800647e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800647c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2201      	movs	r2, #1
 8006482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	4798      	blx	r3
 800649e:	e000      	b.n	80064a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80064a0:	bf00      	nop
    }
  }
}
 80064a2:	3718      	adds	r7, #24
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80064c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b40      	cmp	r3, #64	; 0x40
 80064d4:	d108      	bne.n	80064e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80064e6:	e007      	b.n	80064f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	60da      	str	r2, [r3, #12]
}
 80064f8:	bf00      	nop
 80064fa:	3714      	adds	r7, #20
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	b2db      	uxtb	r3, r3
 8006512:	3b10      	subs	r3, #16
 8006514:	4a13      	ldr	r2, [pc, #76]	; (8006564 <DMA_CalcBaseAndBitshift+0x60>)
 8006516:	fba2 2303 	umull	r2, r3, r2, r3
 800651a:	091b      	lsrs	r3, r3, #4
 800651c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800651e:	4a12      	ldr	r2, [pc, #72]	; (8006568 <DMA_CalcBaseAndBitshift+0x64>)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d908      	bls.n	8006544 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	4b0c      	ldr	r3, [pc, #48]	; (800656c <DMA_CalcBaseAndBitshift+0x68>)
 800653a:	4013      	ands	r3, r2
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	659a      	str	r2, [r3, #88]	; 0x58
 8006542:	e006      	b.n	8006552 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	461a      	mov	r2, r3
 800654a:	4b08      	ldr	r3, [pc, #32]	; (800656c <DMA_CalcBaseAndBitshift+0x68>)
 800654c:	4013      	ands	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	aaaaaaab 	.word	0xaaaaaaab
 8006568:	0800ed10 	.word	0x0800ed10
 800656c:	fffffc00 	.word	0xfffffc00

08006570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d11f      	bne.n	80065ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b03      	cmp	r3, #3
 800658e:	d856      	bhi.n	800663e <DMA_CheckFifoParam+0xce>
 8006590:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <DMA_CheckFifoParam+0x28>)
 8006592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006596:	bf00      	nop
 8006598:	080065a9 	.word	0x080065a9
 800659c:	080065bb 	.word	0x080065bb
 80065a0:	080065a9 	.word	0x080065a9
 80065a4:	0800663f 	.word	0x0800663f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d046      	beq.n	8006642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065b8:	e043      	b.n	8006642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065c2:	d140      	bne.n	8006646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065c8:	e03d      	b.n	8006646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d2:	d121      	bne.n	8006618 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d837      	bhi.n	800664a <DMA_CheckFifoParam+0xda>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <DMA_CheckFifoParam+0x70>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	080065f1 	.word	0x080065f1
 80065e4:	080065f7 	.word	0x080065f7
 80065e8:	080065f1 	.word	0x080065f1
 80065ec:	08006609 	.word	0x08006609
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
      break;
 80065f4:	e030      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d025      	beq.n	800664e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006606:	e022      	b.n	800664e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006610:	d11f      	bne.n	8006652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006616:	e01c      	b.n	8006652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d903      	bls.n	8006626 <DMA_CheckFifoParam+0xb6>
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	2b03      	cmp	r3, #3
 8006622:	d003      	beq.n	800662c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006624:	e018      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
      break;
 800662a:	e015      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006634:	2b00      	cmp	r3, #0
 8006636:	d00e      	beq.n	8006656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
      break;
 800663c:	e00b      	b.n	8006656 <DMA_CheckFifoParam+0xe6>
      break;
 800663e:	bf00      	nop
 8006640:	e00a      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 8006642:	bf00      	nop
 8006644:	e008      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 8006646:	bf00      	nop
 8006648:	e006      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 800664a:	bf00      	nop
 800664c:	e004      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 800664e:	bf00      	nop
 8006650:	e002      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;   
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <DMA_CheckFifoParam+0xe8>
      break;
 8006656:	bf00      	nop
    }
  } 
  
  return status; 
 8006658:	7bfb      	ldrb	r3, [r7, #15]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop

08006668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006668:	b480      	push	{r7}
 800666a:	b089      	sub	sp, #36	; 0x24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006672:	2300      	movs	r3, #0
 8006674:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006676:	2300      	movs	r3, #0
 8006678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800667e:	2300      	movs	r3, #0
 8006680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006682:	2300      	movs	r3, #0
 8006684:	61fb      	str	r3, [r7, #28]
 8006686:	e175      	b.n	8006974 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006688:	2201      	movs	r2, #1
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	fa02 f303 	lsl.w	r3, r2, r3
 8006690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4013      	ands	r3, r2
 800669a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	f040 8164 	bne.w	800696e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d005      	beq.n	80066be <HAL_GPIO_Init+0x56>
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d130      	bne.n	8006720 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	2203      	movs	r2, #3
 80066ca:	fa02 f303 	lsl.w	r3, r2, r3
 80066ce:	43db      	mvns	r3, r3
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	4013      	ands	r3, r2
 80066d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	69ba      	ldr	r2, [r7, #24]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80066f4:	2201      	movs	r2, #1
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	43db      	mvns	r3, r3
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	4013      	ands	r3, r2
 8006702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	091b      	lsrs	r3, r3, #4
 800670a:	f003 0201 	and.w	r2, r3, #1
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	fa02 f303 	lsl.w	r3, r2, r3
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	4313      	orrs	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	2b03      	cmp	r3, #3
 800672a:	d017      	beq.n	800675c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	2203      	movs	r2, #3
 8006738:	fa02 f303 	lsl.w	r3, r2, r3
 800673c:	43db      	mvns	r3, r3
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	4013      	ands	r3, r2
 8006742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	fa02 f303 	lsl.w	r3, r2, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	4313      	orrs	r3, r2
 8006754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f003 0303 	and.w	r3, r3, #3
 8006764:	2b02      	cmp	r3, #2
 8006766:	d123      	bne.n	80067b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	08da      	lsrs	r2, r3, #3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3208      	adds	r2, #8
 8006770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	f003 0307 	and.w	r3, r3, #7
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	220f      	movs	r2, #15
 8006780:	fa02 f303 	lsl.w	r3, r2, r3
 8006784:	43db      	mvns	r3, r3
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	4013      	ands	r3, r2
 800678a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4313      	orrs	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	08da      	lsrs	r2, r3, #3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3208      	adds	r2, #8
 80067aa:	69b9      	ldr	r1, [r7, #24]
 80067ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80067b6:	69fb      	ldr	r3, [r7, #28]
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	2203      	movs	r2, #3
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	43db      	mvns	r3, r3
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	4013      	ands	r3, r2
 80067c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f003 0203 	and.w	r2, r3, #3
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	005b      	lsls	r3, r3, #1
 80067d4:	fa02 f303 	lsl.w	r3, r2, r3
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	4313      	orrs	r3, r2
 80067dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69ba      	ldr	r2, [r7, #24]
 80067e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80be 	beq.w	800696e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067f2:	4b66      	ldr	r3, [pc, #408]	; (800698c <HAL_GPIO_Init+0x324>)
 80067f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f6:	4a65      	ldr	r2, [pc, #404]	; (800698c <HAL_GPIO_Init+0x324>)
 80067f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80067fc:	6453      	str	r3, [r2, #68]	; 0x44
 80067fe:	4b63      	ldr	r3, [pc, #396]	; (800698c <HAL_GPIO_Init+0x324>)
 8006800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800680a:	4a61      	ldr	r2, [pc, #388]	; (8006990 <HAL_GPIO_Init+0x328>)
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	3302      	adds	r3, #2
 8006812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006816:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	f003 0303 	and.w	r3, r3, #3
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	220f      	movs	r2, #15
 8006822:	fa02 f303 	lsl.w	r3, r2, r3
 8006826:	43db      	mvns	r3, r3
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	4013      	ands	r3, r2
 800682c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a58      	ldr	r2, [pc, #352]	; (8006994 <HAL_GPIO_Init+0x32c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d037      	beq.n	80068a6 <HAL_GPIO_Init+0x23e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a57      	ldr	r2, [pc, #348]	; (8006998 <HAL_GPIO_Init+0x330>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d031      	beq.n	80068a2 <HAL_GPIO_Init+0x23a>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a56      	ldr	r2, [pc, #344]	; (800699c <HAL_GPIO_Init+0x334>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d02b      	beq.n	800689e <HAL_GPIO_Init+0x236>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a55      	ldr	r2, [pc, #340]	; (80069a0 <HAL_GPIO_Init+0x338>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d025      	beq.n	800689a <HAL_GPIO_Init+0x232>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a54      	ldr	r2, [pc, #336]	; (80069a4 <HAL_GPIO_Init+0x33c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d01f      	beq.n	8006896 <HAL_GPIO_Init+0x22e>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a53      	ldr	r2, [pc, #332]	; (80069a8 <HAL_GPIO_Init+0x340>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d019      	beq.n	8006892 <HAL_GPIO_Init+0x22a>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a52      	ldr	r2, [pc, #328]	; (80069ac <HAL_GPIO_Init+0x344>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d013      	beq.n	800688e <HAL_GPIO_Init+0x226>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a51      	ldr	r2, [pc, #324]	; (80069b0 <HAL_GPIO_Init+0x348>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00d      	beq.n	800688a <HAL_GPIO_Init+0x222>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a50      	ldr	r2, [pc, #320]	; (80069b4 <HAL_GPIO_Init+0x34c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d007      	beq.n	8006886 <HAL_GPIO_Init+0x21e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a4f      	ldr	r2, [pc, #316]	; (80069b8 <HAL_GPIO_Init+0x350>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d101      	bne.n	8006882 <HAL_GPIO_Init+0x21a>
 800687e:	2309      	movs	r3, #9
 8006880:	e012      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 8006882:	230a      	movs	r3, #10
 8006884:	e010      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 8006886:	2308      	movs	r3, #8
 8006888:	e00e      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 800688a:	2307      	movs	r3, #7
 800688c:	e00c      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 800688e:	2306      	movs	r3, #6
 8006890:	e00a      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 8006892:	2305      	movs	r3, #5
 8006894:	e008      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 8006896:	2304      	movs	r3, #4
 8006898:	e006      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 800689a:	2303      	movs	r3, #3
 800689c:	e004      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 800689e:	2302      	movs	r3, #2
 80068a0:	e002      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <HAL_GPIO_Init+0x240>
 80068a6:	2300      	movs	r3, #0
 80068a8:	69fa      	ldr	r2, [r7, #28]
 80068aa:	f002 0203 	and.w	r2, r2, #3
 80068ae:	0092      	lsls	r2, r2, #2
 80068b0:	4093      	lsls	r3, r2
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80068b8:	4935      	ldr	r1, [pc, #212]	; (8006990 <HAL_GPIO_Init+0x328>)
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	089b      	lsrs	r3, r3, #2
 80068be:	3302      	adds	r3, #2
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80068c6:	4b3d      	ldr	r3, [pc, #244]	; (80069bc <HAL_GPIO_Init+0x354>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	43db      	mvns	r3, r3
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4013      	ands	r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80068ea:	4a34      	ldr	r2, [pc, #208]	; (80069bc <HAL_GPIO_Init+0x354>)
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80068f0:	4b32      	ldr	r3, [pc, #200]	; (80069bc <HAL_GPIO_Init+0x354>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4013      	ands	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d003      	beq.n	8006914 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4313      	orrs	r3, r2
 8006912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006914:	4a29      	ldr	r2, [pc, #164]	; (80069bc <HAL_GPIO_Init+0x354>)
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800691a:	4b28      	ldr	r3, [pc, #160]	; (80069bc <HAL_GPIO_Init+0x354>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	43db      	mvns	r3, r3
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	4013      	ands	r3, r2
 8006928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800693e:	4a1f      	ldr	r2, [pc, #124]	; (80069bc <HAL_GPIO_Init+0x354>)
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006944:	4b1d      	ldr	r3, [pc, #116]	; (80069bc <HAL_GPIO_Init+0x354>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	43db      	mvns	r3, r3
 800694e:	69ba      	ldr	r2, [r7, #24]
 8006950:	4013      	ands	r3, r2
 8006952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006960:	69ba      	ldr	r2, [r7, #24]
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006968:	4a14      	ldr	r2, [pc, #80]	; (80069bc <HAL_GPIO_Init+0x354>)
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	3301      	adds	r3, #1
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	2b0f      	cmp	r3, #15
 8006978:	f67f ae86 	bls.w	8006688 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800697c:	bf00      	nop
 800697e:	bf00      	nop
 8006980:	3724      	adds	r7, #36	; 0x24
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	40023800 	.word	0x40023800
 8006990:	40013800 	.word	0x40013800
 8006994:	40020000 	.word	0x40020000
 8006998:	40020400 	.word	0x40020400
 800699c:	40020800 	.word	0x40020800
 80069a0:	40020c00 	.word	0x40020c00
 80069a4:	40021000 	.word	0x40021000
 80069a8:	40021400 	.word	0x40021400
 80069ac:	40021800 	.word	0x40021800
 80069b0:	40021c00 	.word	0x40021c00
 80069b4:	40022000 	.word	0x40022000
 80069b8:	40022400 	.word	0x40022400
 80069bc:	40013c00 	.word	0x40013c00

080069c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	887b      	ldrh	r3, [r7, #2]
 80069d2:	4013      	ands	r3, r2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d002      	beq.n	80069de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80069d8:	2301      	movs	r3, #1
 80069da:	73fb      	strb	r3, [r7, #15]
 80069dc:	e001      	b.n	80069e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80069de:	2300      	movs	r3, #0
 80069e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80069e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3714      	adds	r7, #20
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	807b      	strh	r3, [r7, #2]
 80069fc:	4613      	mov	r3, r2
 80069fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a00:	787b      	ldrb	r3, [r7, #1]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d003      	beq.n	8006a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a06:	887a      	ldrh	r2, [r7, #2]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006a0c:	e003      	b.n	8006a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006a0e:	887b      	ldrh	r3, [r7, #2]
 8006a10:	041a      	lsls	r2, r3, #16
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	619a      	str	r2, [r3, #24]
}
 8006a16:	bf00      	nop
 8006a18:	370c      	adds	r7, #12
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006a2e:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a30:	695a      	ldr	r2, [r3, #20]
 8006a32:	88fb      	ldrh	r3, [r7, #6]
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d006      	beq.n	8006a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006a3a:	4a05      	ldr	r2, [pc, #20]	; (8006a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006a40:	88fb      	ldrh	r3, [r7, #6]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 f806 	bl	8006a54 <HAL_GPIO_EXTI_Callback>
  }
}
 8006a48:	bf00      	nop
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	40013c00 	.word	0x40013c00

08006a54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e07f      	b.n	8006b7e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d106      	bne.n	8006a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7fa fdca 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2224      	movs	r2, #36	; 0x24
 8006a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0201 	bic.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006abc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006acc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d107      	bne.n	8006ae6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ae2:	609a      	str	r2, [r3, #8]
 8006ae4:	e006      	b.n	8006af4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689a      	ldr	r2, [r3, #8]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006af2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d104      	bne.n	8006b06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6859      	ldr	r1, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	4b1d      	ldr	r3, [pc, #116]	; (8006b88 <HAL_I2C_Init+0x11c>)
 8006b12:	430b      	orrs	r3, r1
 8006b14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68da      	ldr	r2, [r3, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	69d9      	ldr	r1, [r3, #28]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a1a      	ldr	r2, [r3, #32]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	430a      	orrs	r2, r1
 8006b4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	02008000 	.word	0x02008000

08006b8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af02      	add	r7, sp, #8
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	607a      	str	r2, [r7, #4]
 8006b96:	461a      	mov	r2, r3
 8006b98:	460b      	mov	r3, r1
 8006b9a:	817b      	strh	r3, [r7, #10]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	f040 80da 	bne.w	8006d62 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d101      	bne.n	8006bbc <HAL_I2C_Master_Transmit+0x30>
 8006bb8:	2302      	movs	r3, #2
 8006bba:	e0d3      	b.n	8006d64 <HAL_I2C_Master_Transmit+0x1d8>
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006bc4:	f7fe fc68 	bl	8005498 <HAL_GetTick>
 8006bc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	2319      	movs	r3, #25
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f9e6 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e0be      	b.n	8006d64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2221      	movs	r2, #33	; 0x21
 8006bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2210      	movs	r2, #16
 8006bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	893a      	ldrh	r2, [r7, #8]
 8006c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2bff      	cmp	r3, #255	; 0xff
 8006c16:	d90e      	bls.n	8006c36 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	22ff      	movs	r2, #255	; 0xff
 8006c1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c22:	b2da      	uxtb	r2, r3
 8006c24:	8979      	ldrh	r1, [r7, #10]
 8006c26:	4b51      	ldr	r3, [pc, #324]	; (8006d6c <HAL_I2C_Master_Transmit+0x1e0>)
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 fbd0 	bl	80073d4 <I2C_TransferConfig>
 8006c34:	e06c      	b.n	8006d10 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c44:	b2da      	uxtb	r2, r3
 8006c46:	8979      	ldrh	r1, [r7, #10]
 8006c48:	4b48      	ldr	r3, [pc, #288]	; (8006d6c <HAL_I2C_Master_Transmit+0x1e0>)
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 fbbf 	bl	80073d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006c56:	e05b      	b.n	8006d10 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	6a39      	ldr	r1, [r7, #32]
 8006c5c:	68f8      	ldr	r0, [r7, #12]
 8006c5e:	f000 f9e3 	bl	8007028 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d001      	beq.n	8006c6c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e07b      	b.n	8006d64 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7c:	1c5a      	adds	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c94:	3b01      	subs	r3, #1
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d034      	beq.n	8006d10 <HAL_I2C_Master_Transmit+0x184>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d130      	bne.n	8006d10 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2180      	movs	r1, #128	; 0x80
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f975 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e04d      	b.n	8006d64 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2bff      	cmp	r3, #255	; 0xff
 8006cd0:	d90e      	bls.n	8006cf0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	22ff      	movs	r2, #255	; 0xff
 8006cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	8979      	ldrh	r1, [r7, #10]
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 fb73 	bl	80073d4 <I2C_TransferConfig>
 8006cee:	e00f      	b.n	8006d10 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	8979      	ldrh	r1, [r7, #10]
 8006d02:	2300      	movs	r3, #0
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 fb62 	bl	80073d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d19e      	bne.n	8006c58 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	6a39      	ldr	r1, [r7, #32]
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 f9c2 	bl	80070a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e01a      	b.n	8006d64 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2220      	movs	r2, #32
 8006d34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6859      	ldr	r1, [r3, #4]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681a      	ldr	r2, [r3, #0]
 8006d40:	4b0b      	ldr	r3, [pc, #44]	; (8006d70 <HAL_I2C_Master_Transmit+0x1e4>)
 8006d42:	400b      	ands	r3, r1
 8006d44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e000      	b.n	8006d64 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006d62:	2302      	movs	r3, #2
  }
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3718      	adds	r7, #24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	80002000 	.word	0x80002000
 8006d70:	fe00e800 	.word	0xfe00e800

08006d74 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af02      	add	r7, sp, #8
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	607a      	str	r2, [r7, #4]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	460b      	mov	r3, r1
 8006d82:	817b      	strh	r3, [r7, #10]
 8006d84:	4613      	mov	r3, r2
 8006d86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b20      	cmp	r3, #32
 8006d92:	f040 80db 	bne.w	8006f4c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d101      	bne.n	8006da4 <HAL_I2C_Master_Receive+0x30>
 8006da0:	2302      	movs	r3, #2
 8006da2:	e0d4      	b.n	8006f4e <HAL_I2C_Master_Receive+0x1da>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2201      	movs	r2, #1
 8006da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006dac:	f7fe fb74 	bl	8005498 <HAL_GetTick>
 8006db0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	9300      	str	r3, [sp, #0]
 8006db6:	2319      	movs	r3, #25
 8006db8:	2201      	movs	r2, #1
 8006dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 f8f2 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e0bf      	b.n	8006f4e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2222      	movs	r2, #34	; 0x22
 8006dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2210      	movs	r2, #16
 8006dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	893a      	ldrh	r2, [r7, #8]
 8006dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2bff      	cmp	r3, #255	; 0xff
 8006dfe:	d90e      	bls.n	8006e1e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	22ff      	movs	r2, #255	; 0xff
 8006e04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	8979      	ldrh	r1, [r7, #10]
 8006e0e:	4b52      	ldr	r3, [pc, #328]	; (8006f58 <HAL_I2C_Master_Receive+0x1e4>)
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 fadc 	bl	80073d4 <I2C_TransferConfig>
 8006e1c:	e06d      	b.n	8006efa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	8979      	ldrh	r1, [r7, #10]
 8006e30:	4b49      	ldr	r3, [pc, #292]	; (8006f58 <HAL_I2C_Master_Receive+0x1e4>)
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f000 facb 	bl	80073d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006e3e:	e05c      	b.n	8006efa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	6a39      	ldr	r1, [r7, #32]
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f000 f96b 	bl	8007120 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d001      	beq.n	8006e54 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e07c      	b.n	8006f4e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	b2d2      	uxtb	r2, r2
 8006e60:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e70:	3b01      	subs	r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	b29a      	uxth	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d034      	beq.n	8006efa <HAL_I2C_Master_Receive+0x186>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d130      	bne.n	8006efa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2180      	movs	r1, #128	; 0x80
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 f880 	bl	8006fa8 <I2C_WaitOnFlagUntilTimeout>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	e04d      	b.n	8006f4e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2bff      	cmp	r3, #255	; 0xff
 8006eba:	d90e      	bls.n	8006eda <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	22ff      	movs	r2, #255	; 0xff
 8006ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ec6:	b2da      	uxtb	r2, r3
 8006ec8:	8979      	ldrh	r1, [r7, #10]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 fa7e 	bl	80073d4 <I2C_TransferConfig>
 8006ed8:	e00f      	b.n	8006efa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee8:	b2da      	uxtb	r2, r3
 8006eea:	8979      	ldrh	r1, [r7, #10]
 8006eec:	2300      	movs	r3, #0
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fa6d 	bl	80073d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d19d      	bne.n	8006e40 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	6a39      	ldr	r1, [r7, #32]
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f000 f8cd 	bl	80070a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d001      	beq.n	8006f18 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e01a      	b.n	8006f4e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6859      	ldr	r1, [r3, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <HAL_I2C_Master_Receive+0x1e8>)
 8006f2c:	400b      	ands	r3, r1
 8006f2e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	80002400 	.word	0x80002400
 8006f5c:	fe00e800 	.word	0xfe00e800

08006f60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d103      	bne.n	8006f7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d007      	beq.n	8006f9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0201 	orr.w	r2, r2, #1
 8006f9a:	619a      	str	r2, [r3, #24]
  }
}
 8006f9c:	bf00      	nop
 8006f9e:	370c      	adds	r7, #12
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	60f8      	str	r0, [r7, #12]
 8006fb0:	60b9      	str	r1, [r7, #8]
 8006fb2:	603b      	str	r3, [r7, #0]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fb8:	e022      	b.n	8007000 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d01e      	beq.n	8007000 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc2:	f7fe fa69 	bl	8005498 <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d302      	bcc.n	8006fd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d113      	bne.n	8007000 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fdc:	f043 0220 	orr.w	r2, r3, #32
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e00f      	b.n	8007020 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	4013      	ands	r3, r2
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	429a      	cmp	r2, r3
 800700e:	bf0c      	ite	eq
 8007010:	2301      	moveq	r3, #1
 8007012:	2300      	movne	r3, #0
 8007014:	b2db      	uxtb	r3, r3
 8007016:	461a      	mov	r2, r3
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	429a      	cmp	r2, r3
 800701c:	d0cd      	beq.n	8006fba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007034:	e02c      	b.n	8007090 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	68b9      	ldr	r1, [r7, #8]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f8ea 	bl	8007214 <I2C_IsErrorOccurred>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	e02a      	b.n	80070a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007050:	d01e      	beq.n	8007090 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007052:	f7fe fa21 	bl	8005498 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	429a      	cmp	r2, r3
 8007060:	d302      	bcc.n	8007068 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d113      	bne.n	8007090 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706c:	f043 0220 	orr.w	r2, r3, #32
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e007      	b.n	80070a0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	f003 0302 	and.w	r3, r3, #2
 800709a:	2b02      	cmp	r3, #2
 800709c:	d1cb      	bne.n	8007036 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070b4:	e028      	b.n	8007108 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f000 f8aa 	bl	8007214 <I2C_IsErrorOccurred>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070c6:	2301      	movs	r3, #1
 80070c8:	e026      	b.n	8007118 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070ca:	f7fe f9e5 	bl	8005498 <HAL_GetTick>
 80070ce:	4602      	mov	r2, r0
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d302      	bcc.n	80070e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d113      	bne.n	8007108 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e4:	f043 0220 	orr.w	r2, r3, #32
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2220      	movs	r2, #32
 80070f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e007      	b.n	8007118 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	f003 0320 	and.w	r3, r3, #32
 8007112:	2b20      	cmp	r3, #32
 8007114:	d1cf      	bne.n	80070b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800712c:	e064      	b.n	80071f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 f86e 	bl	8007214 <I2C_IsErrorOccurred>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e062      	b.n	8007208 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b20      	cmp	r3, #32
 800714e:	d138      	bne.n	80071c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f003 0304 	and.w	r3, r3, #4
 800715a:	2b04      	cmp	r3, #4
 800715c:	d105      	bne.n	800716a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	e04e      	b.n	8007208 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	699b      	ldr	r3, [r3, #24]
 8007170:	f003 0310 	and.w	r3, r3, #16
 8007174:	2b10      	cmp	r3, #16
 8007176:	d107      	bne.n	8007188 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2210      	movs	r2, #16
 800717e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2204      	movs	r2, #4
 8007184:	645a      	str	r2, [r3, #68]	; 0x44
 8007186:	e002      	b.n	800718e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2200      	movs	r2, #0
 800718c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2220      	movs	r2, #32
 8007194:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6859      	ldr	r1, [r3, #4]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	4b1b      	ldr	r3, [pc, #108]	; (8007210 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80071a2:	400b      	ands	r3, r1
 80071a4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2220      	movs	r2, #32
 80071aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e022      	b.n	8007208 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c2:	f7fe f969 	bl	8005498 <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d302      	bcc.n	80071d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10f      	bne.n	80071f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071dc:	f043 0220 	orr.w	r2, r3, #32
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2220      	movs	r2, #32
 80071e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e007      	b.n	8007208 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b04      	cmp	r3, #4
 8007204:	d193      	bne.n	800712e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	fe00e800 	.word	0xfe00e800

08007214 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b08a      	sub	sp, #40	; 0x28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	f003 0310 	and.w	r3, r3, #16
 800723c:	2b00      	cmp	r3, #0
 800723e:	d068      	beq.n	8007312 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2210      	movs	r2, #16
 8007246:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007248:	e049      	b.n	80072de <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007250:	d045      	beq.n	80072de <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007252:	f7fe f921 	bl	8005498 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	429a      	cmp	r2, r3
 8007260:	d302      	bcc.n	8007268 <I2C_IsErrorOccurred+0x54>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d13a      	bne.n	80072de <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007272:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800727a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800728a:	d121      	bne.n	80072d0 <I2C_IsErrorOccurred+0xbc>
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007292:	d01d      	beq.n	80072d0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007294:	7cfb      	ldrb	r3, [r7, #19]
 8007296:	2b20      	cmp	r3, #32
 8007298:	d01a      	beq.n	80072d0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	685a      	ldr	r2, [r3, #4]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072a8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80072aa:	f7fe f8f5 	bl	8005498 <HAL_GetTick>
 80072ae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072b0:	e00e      	b.n	80072d0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80072b2:	f7fe f8f1 	bl	8005498 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b19      	cmp	r3, #25
 80072be:	d907      	bls.n	80072d0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	f043 0320 	orr.w	r3, r3, #32
 80072c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80072ce:	e006      	b.n	80072de <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f003 0320 	and.w	r3, r3, #32
 80072da:	2b20      	cmp	r3, #32
 80072dc:	d1e9      	bne.n	80072b2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f003 0320 	and.w	r3, r3, #32
 80072e8:	2b20      	cmp	r3, #32
 80072ea:	d003      	beq.n	80072f4 <I2C_IsErrorOccurred+0xe0>
 80072ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0aa      	beq.n	800724a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80072f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d103      	bne.n	8007304 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2220      	movs	r2, #32
 8007302:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	f043 0304 	orr.w	r3, r3, #4
 800730a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699b      	ldr	r3, [r3, #24]
 8007318:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00b      	beq.n	800733c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	f043 0301 	orr.w	r3, r3, #1
 800732a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007334:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00b      	beq.n	800735e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	f043 0308 	orr.w	r3, r3, #8
 800734c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007356:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007368:	6a3b      	ldr	r3, [r7, #32]
 800736a:	f043 0302 	orr.w	r3, r3, #2
 800736e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007378:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007380:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01c      	beq.n	80073c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff fde9 	bl	8006f60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6859      	ldr	r1, [r3, #4]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	4b0d      	ldr	r3, [pc, #52]	; (80073d0 <I2C_IsErrorOccurred+0x1bc>)
 800739a:	400b      	ands	r3, r1
 800739c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2220      	movs	r2, #32
 80073ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80073c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3728      	adds	r7, #40	; 0x28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	fe00e800 	.word	0xfe00e800

080073d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b087      	sub	sp, #28
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	607b      	str	r3, [r7, #4]
 80073de:	460b      	mov	r3, r1
 80073e0:	817b      	strh	r3, [r7, #10]
 80073e2:	4613      	mov	r3, r2
 80073e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073e6:	897b      	ldrh	r3, [r7, #10]
 80073e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073ec:	7a7b      	ldrb	r3, [r7, #9]
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80073fa:	6a3b      	ldr	r3, [r7, #32]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007402:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	0d5b      	lsrs	r3, r3, #21
 800740e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007412:	4b08      	ldr	r3, [pc, #32]	; (8007434 <I2C_TransferConfig+0x60>)
 8007414:	430b      	orrs	r3, r1
 8007416:	43db      	mvns	r3, r3
 8007418:	ea02 0103 	and.w	r1, r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	697a      	ldr	r2, [r7, #20]
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007426:	bf00      	nop
 8007428:	371c      	adds	r7, #28
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	03ff63ff 	.word	0x03ff63ff

08007438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b20      	cmp	r3, #32
 800744c:	d138      	bne.n	80074c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007454:	2b01      	cmp	r3, #1
 8007456:	d101      	bne.n	800745c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007458:	2302      	movs	r3, #2
 800745a:	e032      	b.n	80074c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2224      	movs	r2, #36	; 0x24
 8007468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f022 0201 	bic.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800748a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6819      	ldr	r1, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	430a      	orrs	r2, r1
 800749a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0201 	orr.w	r2, r2, #1
 80074aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074bc:	2300      	movs	r3, #0
 80074be:	e000      	b.n	80074c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074c0:	2302      	movs	r3, #2
  }
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	370c      	adds	r7, #12
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b085      	sub	sp, #20
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d139      	bne.n	8007558 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e033      	b.n	800755a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2224      	movs	r2, #36	; 0x24
 80074fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007520:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	021b      	lsls	r3, r3, #8
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f042 0201 	orr.w	r2, r2, #1
 8007542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	e000      	b.n	800755a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007558:	2302      	movs	r3, #2
  }
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
	...

08007568 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a04      	ldr	r2, [pc, #16]	; (8007584 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007576:	6013      	str	r3, [r2, #0]
}
 8007578:	bf00      	nop
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	40007000 	.word	0x40007000

08007588 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007592:	4b23      	ldr	r3, [pc, #140]	; (8007620 <HAL_PWREx_EnableOverDrive+0x98>)
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	4a22      	ldr	r2, [pc, #136]	; (8007620 <HAL_PWREx_EnableOverDrive+0x98>)
 8007598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800759c:	6413      	str	r3, [r2, #64]	; 0x40
 800759e:	4b20      	ldr	r3, [pc, #128]	; (8007620 <HAL_PWREx_EnableOverDrive+0x98>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80075aa:	4b1e      	ldr	r3, [pc, #120]	; (8007624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a1d      	ldr	r2, [pc, #116]	; (8007624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075b6:	f7fd ff6f 	bl	8005498 <HAL_GetTick>
 80075ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075bc:	e009      	b.n	80075d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075be:	f7fd ff6b 	bl	8005498 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075cc:	d901      	bls.n	80075d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80075ce:	2303      	movs	r3, #3
 80075d0:	e022      	b.n	8007618 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075d2:	4b14      	ldr	r3, [pc, #80]	; (8007624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075de:	d1ee      	bne.n	80075be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80075e0:	4b10      	ldr	r3, [pc, #64]	; (8007624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a0f      	ldr	r2, [pc, #60]	; (8007624 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075ec:	f7fd ff54 	bl	8005498 <HAL_GetTick>
 80075f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075f2:	e009      	b.n	8007608 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075f4:	f7fd ff50 	bl	8005498 <HAL_GetTick>
 80075f8:	4602      	mov	r2, r0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007602:	d901      	bls.n	8007608 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e007      	b.n	8007618 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007608:	4b06      	ldr	r3, [pc, #24]	; (8007624 <HAL_PWREx_EnableOverDrive+0x9c>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007614:	d1ee      	bne.n	80075f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	40023800 	.word	0x40023800
 8007624:	40007000 	.word	0x40007000

08007628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b086      	sub	sp, #24
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007630:	2300      	movs	r3, #0
 8007632:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d101      	bne.n	800763e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800763a:	2301      	movs	r3, #1
 800763c:	e29b      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 8087 	beq.w	800775a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800764c:	4b96      	ldr	r3, [pc, #600]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 030c 	and.w	r3, r3, #12
 8007654:	2b04      	cmp	r3, #4
 8007656:	d00c      	beq.n	8007672 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007658:	4b93      	ldr	r3, [pc, #588]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f003 030c 	and.w	r3, r3, #12
 8007660:	2b08      	cmp	r3, #8
 8007662:	d112      	bne.n	800768a <HAL_RCC_OscConfig+0x62>
 8007664:	4b90      	ldr	r3, [pc, #576]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800766c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007670:	d10b      	bne.n	800768a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007672:	4b8d      	ldr	r3, [pc, #564]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d06c      	beq.n	8007758 <HAL_RCC_OscConfig+0x130>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d168      	bne.n	8007758 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e275      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007692:	d106      	bne.n	80076a2 <HAL_RCC_OscConfig+0x7a>
 8007694:	4b84      	ldr	r3, [pc, #528]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a83      	ldr	r2, [pc, #524]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 800769a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	e02e      	b.n	8007700 <HAL_RCC_OscConfig+0xd8>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10c      	bne.n	80076c4 <HAL_RCC_OscConfig+0x9c>
 80076aa:	4b7f      	ldr	r3, [pc, #508]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a7e      	ldr	r2, [pc, #504]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	4b7c      	ldr	r3, [pc, #496]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	4a7b      	ldr	r2, [pc, #492]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	e01d      	b.n	8007700 <HAL_RCC_OscConfig+0xd8>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076cc:	d10c      	bne.n	80076e8 <HAL_RCC_OscConfig+0xc0>
 80076ce:	4b76      	ldr	r3, [pc, #472]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a75      	ldr	r2, [pc, #468]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	4b73      	ldr	r3, [pc, #460]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a72      	ldr	r2, [pc, #456]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	e00b      	b.n	8007700 <HAL_RCC_OscConfig+0xd8>
 80076e8:	4b6f      	ldr	r3, [pc, #444]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a6e      	ldr	r2, [pc, #440]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076f2:	6013      	str	r3, [r2, #0]
 80076f4:	4b6c      	ldr	r3, [pc, #432]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a6b      	ldr	r2, [pc, #428]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80076fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d013      	beq.n	8007730 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007708:	f7fd fec6 	bl	8005498 <HAL_GetTick>
 800770c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800770e:	e008      	b.n	8007722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007710:	f7fd fec2 	bl	8005498 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	2b64      	cmp	r3, #100	; 0x64
 800771c:	d901      	bls.n	8007722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e229      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007722:	4b61      	ldr	r3, [pc, #388]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772a:	2b00      	cmp	r3, #0
 800772c:	d0f0      	beq.n	8007710 <HAL_RCC_OscConfig+0xe8>
 800772e:	e014      	b.n	800775a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007730:	f7fd feb2 	bl	8005498 <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007738:	f7fd feae 	bl	8005498 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b64      	cmp	r3, #100	; 0x64
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e215      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800774a:	4b57      	ldr	r3, [pc, #348]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f0      	bne.n	8007738 <HAL_RCC_OscConfig+0x110>
 8007756:	e000      	b.n	800775a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0302 	and.w	r3, r3, #2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d069      	beq.n	800783a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007766:	4b50      	ldr	r3, [pc, #320]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 030c 	and.w	r3, r3, #12
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00b      	beq.n	800778a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007772:	4b4d      	ldr	r3, [pc, #308]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 030c 	and.w	r3, r3, #12
 800777a:	2b08      	cmp	r3, #8
 800777c:	d11c      	bne.n	80077b8 <HAL_RCC_OscConfig+0x190>
 800777e:	4b4a      	ldr	r3, [pc, #296]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d116      	bne.n	80077b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800778a:	4b47      	ldr	r3, [pc, #284]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f003 0302 	and.w	r3, r3, #2
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <HAL_RCC_OscConfig+0x17a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d001      	beq.n	80077a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e1e9      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077a2:	4b41      	ldr	r3, [pc, #260]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	00db      	lsls	r3, r3, #3
 80077b0:	493d      	ldr	r1, [pc, #244]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077b6:	e040      	b.n	800783a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d023      	beq.n	8007808 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077c0:	4b39      	ldr	r3, [pc, #228]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a38      	ldr	r2, [pc, #224]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80077c6:	f043 0301 	orr.w	r3, r3, #1
 80077ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077cc:	f7fd fe64 	bl	8005498 <HAL_GetTick>
 80077d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077d4:	f7fd fe60 	bl	8005498 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e1c7      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077e6:	4b30      	ldr	r3, [pc, #192]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0302 	and.w	r3, r3, #2
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d0f0      	beq.n	80077d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077f2:	4b2d      	ldr	r3, [pc, #180]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	4929      	ldr	r1, [pc, #164]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007802:	4313      	orrs	r3, r2
 8007804:	600b      	str	r3, [r1, #0]
 8007806:	e018      	b.n	800783a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007808:	4b27      	ldr	r3, [pc, #156]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a26      	ldr	r2, [pc, #152]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007814:	f7fd fe40 	bl	8005498 <HAL_GetTick>
 8007818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800781a:	e008      	b.n	800782e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800781c:	f7fd fe3c 	bl	8005498 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d901      	bls.n	800782e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e1a3      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800782e:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1f0      	bne.n	800781c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f003 0308 	and.w	r3, r3, #8
 8007842:	2b00      	cmp	r3, #0
 8007844:	d038      	beq.n	80078b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d019      	beq.n	8007882 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800784e:	4b16      	ldr	r3, [pc, #88]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007852:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007854:	f043 0301 	orr.w	r3, r3, #1
 8007858:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800785a:	f7fd fe1d 	bl	8005498 <HAL_GetTick>
 800785e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007860:	e008      	b.n	8007874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007862:	f7fd fe19 	bl	8005498 <HAL_GetTick>
 8007866:	4602      	mov	r2, r0
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	1ad3      	subs	r3, r2, r3
 800786c:	2b02      	cmp	r3, #2
 800786e:	d901      	bls.n	8007874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e180      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007878:	f003 0302 	and.w	r3, r3, #2
 800787c:	2b00      	cmp	r3, #0
 800787e:	d0f0      	beq.n	8007862 <HAL_RCC_OscConfig+0x23a>
 8007880:	e01a      	b.n	80078b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007882:	4b09      	ldr	r3, [pc, #36]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007886:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <HAL_RCC_OscConfig+0x280>)
 8007888:	f023 0301 	bic.w	r3, r3, #1
 800788c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788e:	f7fd fe03 	bl	8005498 <HAL_GetTick>
 8007892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007894:	e00a      	b.n	80078ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007896:	f7fd fdff 	bl	8005498 <HAL_GetTick>
 800789a:	4602      	mov	r2, r0
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	1ad3      	subs	r3, r2, r3
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d903      	bls.n	80078ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e166      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
 80078a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078ac:	4b92      	ldr	r3, [pc, #584]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 80078ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1ee      	bne.n	8007896 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 80a4 	beq.w	8007a0e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078c6:	4b8c      	ldr	r3, [pc, #560]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10d      	bne.n	80078ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80078d2:	4b89      	ldr	r3, [pc, #548]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	4a88      	ldr	r2, [pc, #544]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 80078d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078dc:	6413      	str	r3, [r2, #64]	; 0x40
 80078de:	4b86      	ldr	r3, [pc, #536]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 80078e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078e6:	60bb      	str	r3, [r7, #8]
 80078e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078ea:	2301      	movs	r3, #1
 80078ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80078ee:	4b83      	ldr	r3, [pc, #524]	; (8007afc <HAL_RCC_OscConfig+0x4d4>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d118      	bne.n	800792c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80078fa:	4b80      	ldr	r3, [pc, #512]	; (8007afc <HAL_RCC_OscConfig+0x4d4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a7f      	ldr	r2, [pc, #508]	; (8007afc <HAL_RCC_OscConfig+0x4d4>)
 8007900:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007904:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007906:	f7fd fdc7 	bl	8005498 <HAL_GetTick>
 800790a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800790c:	e008      	b.n	8007920 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800790e:	f7fd fdc3 	bl	8005498 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	2b64      	cmp	r3, #100	; 0x64
 800791a:	d901      	bls.n	8007920 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e12a      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007920:	4b76      	ldr	r3, [pc, #472]	; (8007afc <HAL_RCC_OscConfig+0x4d4>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0f0      	beq.n	800790e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d106      	bne.n	8007942 <HAL_RCC_OscConfig+0x31a>
 8007934:	4b70      	ldr	r3, [pc, #448]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007938:	4a6f      	ldr	r2, [pc, #444]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 800793a:	f043 0301 	orr.w	r3, r3, #1
 800793e:	6713      	str	r3, [r2, #112]	; 0x70
 8007940:	e02d      	b.n	800799e <HAL_RCC_OscConfig+0x376>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10c      	bne.n	8007964 <HAL_RCC_OscConfig+0x33c>
 800794a:	4b6b      	ldr	r3, [pc, #428]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	4a6a      	ldr	r2, [pc, #424]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007950:	f023 0301 	bic.w	r3, r3, #1
 8007954:	6713      	str	r3, [r2, #112]	; 0x70
 8007956:	4b68      	ldr	r3, [pc, #416]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795a:	4a67      	ldr	r2, [pc, #412]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 800795c:	f023 0304 	bic.w	r3, r3, #4
 8007960:	6713      	str	r3, [r2, #112]	; 0x70
 8007962:	e01c      	b.n	800799e <HAL_RCC_OscConfig+0x376>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	2b05      	cmp	r3, #5
 800796a:	d10c      	bne.n	8007986 <HAL_RCC_OscConfig+0x35e>
 800796c:	4b62      	ldr	r3, [pc, #392]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 800796e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007970:	4a61      	ldr	r2, [pc, #388]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007972:	f043 0304 	orr.w	r3, r3, #4
 8007976:	6713      	str	r3, [r2, #112]	; 0x70
 8007978:	4b5f      	ldr	r3, [pc, #380]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 800797a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797c:	4a5e      	ldr	r2, [pc, #376]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 800797e:	f043 0301 	orr.w	r3, r3, #1
 8007982:	6713      	str	r3, [r2, #112]	; 0x70
 8007984:	e00b      	b.n	800799e <HAL_RCC_OscConfig+0x376>
 8007986:	4b5c      	ldr	r3, [pc, #368]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798a:	4a5b      	ldr	r2, [pc, #364]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 800798c:	f023 0301 	bic.w	r3, r3, #1
 8007990:	6713      	str	r3, [r2, #112]	; 0x70
 8007992:	4b59      	ldr	r3, [pc, #356]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007996:	4a58      	ldr	r2, [pc, #352]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007998:	f023 0304 	bic.w	r3, r3, #4
 800799c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d015      	beq.n	80079d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079a6:	f7fd fd77 	bl	8005498 <HAL_GetTick>
 80079aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ac:	e00a      	b.n	80079c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ae:	f7fd fd73 	bl	8005498 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079bc:	4293      	cmp	r3, r2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e0d8      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079c4:	4b4c      	ldr	r3, [pc, #304]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 80079c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0ee      	beq.n	80079ae <HAL_RCC_OscConfig+0x386>
 80079d0:	e014      	b.n	80079fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d2:	f7fd fd61 	bl	8005498 <HAL_GetTick>
 80079d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079d8:	e00a      	b.n	80079f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079da:	f7fd fd5d 	bl	8005498 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d901      	bls.n	80079f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e0c2      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079f0:	4b41      	ldr	r3, [pc, #260]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 80079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f4:	f003 0302 	and.w	r3, r3, #2
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1ee      	bne.n	80079da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80079fc:	7dfb      	ldrb	r3, [r7, #23]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d105      	bne.n	8007a0e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a02:	4b3d      	ldr	r3, [pc, #244]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a06:	4a3c      	ldr	r2, [pc, #240]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a0c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	f000 80ae 	beq.w	8007b74 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a18:	4b37      	ldr	r3, [pc, #220]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 030c 	and.w	r3, r3, #12
 8007a20:	2b08      	cmp	r3, #8
 8007a22:	d06d      	beq.n	8007b00 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d14b      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a2c:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a31      	ldr	r2, [pc, #196]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a38:	f7fd fd2e 	bl	8005498 <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a40:	f7fd fd2a 	bl	8005498 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e091      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a52:	4b29      	ldr	r3, [pc, #164]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1f0      	bne.n	8007a40 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69da      	ldr	r2, [r3, #28]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a1b      	ldr	r3, [r3, #32]
 8007a66:	431a      	orrs	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	019b      	lsls	r3, r3, #6
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a74:	085b      	lsrs	r3, r3, #1
 8007a76:	3b01      	subs	r3, #1
 8007a78:	041b      	lsls	r3, r3, #16
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	061b      	lsls	r3, r3, #24
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a88:	071b      	lsls	r3, r3, #28
 8007a8a:	491b      	ldr	r1, [pc, #108]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a90:	4b19      	ldr	r3, [pc, #100]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a18      	ldr	r2, [pc, #96]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a9c:	f7fd fcfc 	bl	8005498 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007aa4:	f7fd fcf8 	bl	8005498 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e05f      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ab6:	4b10      	ldr	r3, [pc, #64]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d0f0      	beq.n	8007aa4 <HAL_RCC_OscConfig+0x47c>
 8007ac2:	e057      	b.n	8007b74 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a0b      	ldr	r2, [pc, #44]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad0:	f7fd fce2 	bl	8005498 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ad8:	f7fd fcde 	bl	8005498 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e045      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aea:	4b03      	ldr	r3, [pc, #12]	; (8007af8 <HAL_RCC_OscConfig+0x4d0>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1f0      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x4b0>
 8007af6:	e03d      	b.n	8007b74 <HAL_RCC_OscConfig+0x54c>
 8007af8:	40023800 	.word	0x40023800
 8007afc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007b00:	4b1f      	ldr	r3, [pc, #124]	; (8007b80 <HAL_RCC_OscConfig+0x558>)
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	699b      	ldr	r3, [r3, #24]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d030      	beq.n	8007b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d129      	bne.n	8007b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d122      	bne.n	8007b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b30:	4013      	ands	r3, r2
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d119      	bne.n	8007b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b46:	085b      	lsrs	r3, r3, #1
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b4c:	429a      	cmp	r2, r3
 8007b4e:	d10f      	bne.n	8007b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d107      	bne.n	8007b70 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d001      	beq.n	8007b74 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e000      	b.n	8007b76 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40023800 	.word	0x40023800

08007b84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0d0      	b.n	8007d3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b9c:	4b6a      	ldr	r3, [pc, #424]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d910      	bls.n	8007bcc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007baa:	4b67      	ldr	r3, [pc, #412]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f023 020f 	bic.w	r2, r3, #15
 8007bb2:	4965      	ldr	r1, [pc, #404]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bba:	4b63      	ldr	r3, [pc, #396]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	683a      	ldr	r2, [r7, #0]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d001      	beq.n	8007bcc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e0b8      	b.n	8007d3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d020      	beq.n	8007c1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f003 0304 	and.w	r3, r3, #4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d005      	beq.n	8007bf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007be4:	4b59      	ldr	r3, [pc, #356]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	4a58      	ldr	r2, [pc, #352]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007bea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0308 	and.w	r3, r3, #8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bfc:	4b53      	ldr	r3, [pc, #332]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	4a52      	ldr	r2, [pc, #328]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007c02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c08:	4b50      	ldr	r3, [pc, #320]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	494d      	ldr	r1, [pc, #308]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f003 0301 	and.w	r3, r3, #1
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d040      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	685b      	ldr	r3, [r3, #4]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d107      	bne.n	8007c3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c2e:	4b47      	ldr	r3, [pc, #284]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d115      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e07f      	b.n	8007d3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d107      	bne.n	8007c56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c46:	4b41      	ldr	r3, [pc, #260]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e073      	b.n	8007d3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c56:	4b3d      	ldr	r3, [pc, #244]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e06b      	b.n	8007d3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c66:	4b39      	ldr	r3, [pc, #228]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f023 0203 	bic.w	r2, r3, #3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	4936      	ldr	r1, [pc, #216]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c78:	f7fd fc0e 	bl	8005498 <HAL_GetTick>
 8007c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c7e:	e00a      	b.n	8007c96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c80:	f7fd fc0a 	bl	8005498 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e053      	b.n	8007d3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c96:	4b2d      	ldr	r3, [pc, #180]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 020c 	and.w	r2, r3, #12
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d1eb      	bne.n	8007c80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ca8:	4b27      	ldr	r3, [pc, #156]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 030f 	and.w	r3, r3, #15
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d210      	bcs.n	8007cd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cb6:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f023 020f 	bic.w	r2, r3, #15
 8007cbe:	4922      	ldr	r1, [pc, #136]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cc6:	4b20      	ldr	r3, [pc, #128]	; (8007d48 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 030f 	and.w	r3, r3, #15
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d001      	beq.n	8007cd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e032      	b.n	8007d3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0304 	and.w	r3, r3, #4
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d008      	beq.n	8007cf6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ce4:	4b19      	ldr	r3, [pc, #100]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	4916      	ldr	r1, [pc, #88]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d009      	beq.n	8007d16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	691b      	ldr	r3, [r3, #16]
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	490e      	ldr	r1, [pc, #56]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d16:	f000 f821 	bl	8007d5c <HAL_RCC_GetSysClockFreq>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <HAL_RCC_ClockConfig+0x1c8>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	091b      	lsrs	r3, r3, #4
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	490a      	ldr	r1, [pc, #40]	; (8007d50 <HAL_RCC_ClockConfig+0x1cc>)
 8007d28:	5ccb      	ldrb	r3, [r1, r3]
 8007d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d2e:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <HAL_RCC_ClockConfig+0x1d0>)
 8007d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d32:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <HAL_RCC_ClockConfig+0x1d4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fd fb6a 	bl	8005410 <HAL_InitTick>

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	40023c00 	.word	0x40023c00
 8007d4c:	40023800 	.word	0x40023800
 8007d50:	0800eab8 	.word	0x0800eab8
 8007d54:	200000c8 	.word	0x200000c8
 8007d58:	200000d0 	.word	0x200000d0

08007d5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d60:	b094      	sub	sp, #80	; 0x50
 8007d62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007d64:	2300      	movs	r3, #0
 8007d66:	647b      	str	r3, [r7, #68]	; 0x44
 8007d68:	2300      	movs	r3, #0
 8007d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007d70:	2300      	movs	r3, #0
 8007d72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d74:	4b79      	ldr	r3, [pc, #484]	; (8007f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 030c 	and.w	r3, r3, #12
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d00d      	beq.n	8007d9c <HAL_RCC_GetSysClockFreq+0x40>
 8007d80:	2b08      	cmp	r3, #8
 8007d82:	f200 80e1 	bhi.w	8007f48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d002      	beq.n	8007d90 <HAL_RCC_GetSysClockFreq+0x34>
 8007d8a:	2b04      	cmp	r3, #4
 8007d8c:	d003      	beq.n	8007d96 <HAL_RCC_GetSysClockFreq+0x3a>
 8007d8e:	e0db      	b.n	8007f48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d90:	4b73      	ldr	r3, [pc, #460]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d94:	e0db      	b.n	8007f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d96:	4b73      	ldr	r3, [pc, #460]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x208>)
 8007d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d9a:	e0d8      	b.n	8007f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d9c:	4b6f      	ldr	r3, [pc, #444]	; (8007f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007da4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007da6:	4b6d      	ldr	r3, [pc, #436]	; (8007f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d063      	beq.n	8007e7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007db2:	4b6a      	ldr	r3, [pc, #424]	; (8007f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	099b      	lsrs	r3, r3, #6
 8007db8:	2200      	movs	r2, #0
 8007dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8007dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007dce:	4622      	mov	r2, r4
 8007dd0:	462b      	mov	r3, r5
 8007dd2:	f04f 0000 	mov.w	r0, #0
 8007dd6:	f04f 0100 	mov.w	r1, #0
 8007dda:	0159      	lsls	r1, r3, #5
 8007ddc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007de0:	0150      	lsls	r0, r2, #5
 8007de2:	4602      	mov	r2, r0
 8007de4:	460b      	mov	r3, r1
 8007de6:	4621      	mov	r1, r4
 8007de8:	1a51      	subs	r1, r2, r1
 8007dea:	6139      	str	r1, [r7, #16]
 8007dec:	4629      	mov	r1, r5
 8007dee:	eb63 0301 	sbc.w	r3, r3, r1
 8007df2:	617b      	str	r3, [r7, #20]
 8007df4:	f04f 0200 	mov.w	r2, #0
 8007df8:	f04f 0300 	mov.w	r3, #0
 8007dfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e00:	4659      	mov	r1, fp
 8007e02:	018b      	lsls	r3, r1, #6
 8007e04:	4651      	mov	r1, sl
 8007e06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e0a:	4651      	mov	r1, sl
 8007e0c:	018a      	lsls	r2, r1, #6
 8007e0e:	4651      	mov	r1, sl
 8007e10:	ebb2 0801 	subs.w	r8, r2, r1
 8007e14:	4659      	mov	r1, fp
 8007e16:	eb63 0901 	sbc.w	r9, r3, r1
 8007e1a:	f04f 0200 	mov.w	r2, #0
 8007e1e:	f04f 0300 	mov.w	r3, #0
 8007e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e2e:	4690      	mov	r8, r2
 8007e30:	4699      	mov	r9, r3
 8007e32:	4623      	mov	r3, r4
 8007e34:	eb18 0303 	adds.w	r3, r8, r3
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	462b      	mov	r3, r5
 8007e3c:	eb49 0303 	adc.w	r3, r9, r3
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	f04f 0200 	mov.w	r2, #0
 8007e46:	f04f 0300 	mov.w	r3, #0
 8007e4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e4e:	4629      	mov	r1, r5
 8007e50:	024b      	lsls	r3, r1, #9
 8007e52:	4621      	mov	r1, r4
 8007e54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e58:	4621      	mov	r1, r4
 8007e5a:	024a      	lsls	r2, r1, #9
 8007e5c:	4610      	mov	r0, r2
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e62:	2200      	movs	r2, #0
 8007e64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e6c:	f7f8 fa40 	bl	80002f0 <__aeabi_uldivmod>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4613      	mov	r3, r2
 8007e76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e78:	e058      	b.n	8007f2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e7a:	4b38      	ldr	r3, [pc, #224]	; (8007f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	099b      	lsrs	r3, r3, #6
 8007e80:	2200      	movs	r2, #0
 8007e82:	4618      	mov	r0, r3
 8007e84:	4611      	mov	r1, r2
 8007e86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e8a:	623b      	str	r3, [r7, #32]
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	f04f 0000 	mov.w	r0, #0
 8007e9c:	f04f 0100 	mov.w	r1, #0
 8007ea0:	0159      	lsls	r1, r3, #5
 8007ea2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ea6:	0150      	lsls	r0, r2, #5
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	4641      	mov	r1, r8
 8007eae:	ebb2 0a01 	subs.w	sl, r2, r1
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ec4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ec8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ecc:	ebb2 040a 	subs.w	r4, r2, sl
 8007ed0:	eb63 050b 	sbc.w	r5, r3, fp
 8007ed4:	f04f 0200 	mov.w	r2, #0
 8007ed8:	f04f 0300 	mov.w	r3, #0
 8007edc:	00eb      	lsls	r3, r5, #3
 8007ede:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ee2:	00e2      	lsls	r2, r4, #3
 8007ee4:	4614      	mov	r4, r2
 8007ee6:	461d      	mov	r5, r3
 8007ee8:	4643      	mov	r3, r8
 8007eea:	18e3      	adds	r3, r4, r3
 8007eec:	603b      	str	r3, [r7, #0]
 8007eee:	464b      	mov	r3, r9
 8007ef0:	eb45 0303 	adc.w	r3, r5, r3
 8007ef4:	607b      	str	r3, [r7, #4]
 8007ef6:	f04f 0200 	mov.w	r2, #0
 8007efa:	f04f 0300 	mov.w	r3, #0
 8007efe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f02:	4629      	mov	r1, r5
 8007f04:	028b      	lsls	r3, r1, #10
 8007f06:	4621      	mov	r1, r4
 8007f08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	028a      	lsls	r2, r1, #10
 8007f10:	4610      	mov	r0, r2
 8007f12:	4619      	mov	r1, r3
 8007f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f16:	2200      	movs	r2, #0
 8007f18:	61bb      	str	r3, [r7, #24]
 8007f1a:	61fa      	str	r2, [r7, #28]
 8007f1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f20:	f7f8 f9e6 	bl	80002f0 <__aeabi_uldivmod>
 8007f24:	4602      	mov	r2, r0
 8007f26:	460b      	mov	r3, r1
 8007f28:	4613      	mov	r3, r2
 8007f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007f2c:	4b0b      	ldr	r3, [pc, #44]	; (8007f5c <HAL_RCC_GetSysClockFreq+0x200>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	0c1b      	lsrs	r3, r3, #16
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	3301      	adds	r3, #1
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007f3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f46:	e002      	b.n	8007f4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f48:	4b05      	ldr	r3, [pc, #20]	; (8007f60 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f4a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3750      	adds	r7, #80	; 0x50
 8007f54:	46bd      	mov	sp, r7
 8007f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f5a:	bf00      	nop
 8007f5c:	40023800 	.word	0x40023800
 8007f60:	00f42400 	.word	0x00f42400
 8007f64:	007a1200 	.word	0x007a1200

08007f68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f6c:	4b03      	ldr	r3, [pc, #12]	; (8007f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	200000c8 	.word	0x200000c8

08007f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f84:	f7ff fff0 	bl	8007f68 <HAL_RCC_GetHCLKFreq>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	0a9b      	lsrs	r3, r3, #10
 8007f90:	f003 0307 	and.w	r3, r3, #7
 8007f94:	4903      	ldr	r1, [pc, #12]	; (8007fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f96:	5ccb      	ldrb	r3, [r1, r3]
 8007f98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	40023800 	.word	0x40023800
 8007fa4:	0800eac8 	.word	0x0800eac8

08007fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fac:	f7ff ffdc 	bl	8007f68 <HAL_RCC_GetHCLKFreq>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	0b5b      	lsrs	r3, r3, #13
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	4903      	ldr	r1, [pc, #12]	; (8007fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fbe:	5ccb      	ldrb	r3, [r1, r3]
 8007fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	40023800 	.word	0x40023800
 8007fcc:	0800eac8 	.word	0x0800eac8

08007fd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d012      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ff8:	4b69      	ldr	r3, [pc, #420]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	4a68      	ldr	r2, [pc, #416]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008002:	6093      	str	r3, [r2, #8]
 8008004:	4b66      	ldr	r3, [pc, #408]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800800c:	4964      	ldr	r1, [pc, #400]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800800e:	4313      	orrs	r3, r2
 8008010:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800801a:	2301      	movs	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d017      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800802a:	4b5d      	ldr	r3, [pc, #372]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800802c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008030:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008038:	4959      	ldr	r1, [pc, #356]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800803a:	4313      	orrs	r3, r2
 800803c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008048:	d101      	bne.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800804a:	2301      	movs	r3, #1
 800804c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008056:	2301      	movs	r3, #1
 8008058:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d017      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008066:	4b4e      	ldr	r3, [pc, #312]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800806c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	494a      	ldr	r1, [pc, #296]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008084:	d101      	bne.n	800808a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008086:	2301      	movs	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008092:	2301      	movs	r3, #1
 8008094:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d001      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80080a2:	2301      	movs	r3, #1
 80080a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 808b 	beq.w	80081ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80080b4:	4b3a      	ldr	r3, [pc, #232]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b8:	4a39      	ldr	r2, [pc, #228]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080be:	6413      	str	r3, [r2, #64]	; 0x40
 80080c0:	4b37      	ldr	r3, [pc, #220]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80080cc:	4b35      	ldr	r3, [pc, #212]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a34      	ldr	r2, [pc, #208]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080d8:	f7fd f9de 	bl	8005498 <HAL_GetTick>
 80080dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80080de:	e008      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080e0:	f7fd f9da 	bl	8005498 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	2b64      	cmp	r3, #100	; 0x64
 80080ec:	d901      	bls.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80080ee:	2303      	movs	r3, #3
 80080f0:	e38f      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80080f2:	4b2c      	ldr	r3, [pc, #176]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d0f0      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80080fe:	4b28      	ldr	r3, [pc, #160]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008106:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d035      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	429a      	cmp	r2, r3
 800811a:	d02e      	beq.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800811c:	4b20      	ldr	r3, [pc, #128]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800811e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008124:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008126:	4b1e      	ldr	r3, [pc, #120]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800812a:	4a1d      	ldr	r2, [pc, #116]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800812c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008130:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008132:	4b1b      	ldr	r3, [pc, #108]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	4a1a      	ldr	r2, [pc, #104]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008138:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800813c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800813e:	4a18      	ldr	r2, [pc, #96]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008144:	4b16      	ldr	r3, [pc, #88]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b01      	cmp	r3, #1
 800814e:	d114      	bne.n	800817a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008150:	f7fd f9a2 	bl	8005498 <HAL_GetTick>
 8008154:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008156:	e00a      	b.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008158:	f7fd f99e 	bl	8005498 <HAL_GetTick>
 800815c:	4602      	mov	r2, r0
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	1ad3      	subs	r3, r2, r3
 8008162:	f241 3288 	movw	r2, #5000	; 0x1388
 8008166:	4293      	cmp	r3, r2
 8008168:	d901      	bls.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	e351      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800816e:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008172:	f003 0302 	and.w	r3, r3, #2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d0ee      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008186:	d111      	bne.n	80081ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008194:	4b04      	ldr	r3, [pc, #16]	; (80081a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008196:	400b      	ands	r3, r1
 8008198:	4901      	ldr	r1, [pc, #4]	; (80081a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800819a:	4313      	orrs	r3, r2
 800819c:	608b      	str	r3, [r1, #8]
 800819e:	e00b      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80081a0:	40023800 	.word	0x40023800
 80081a4:	40007000 	.word	0x40007000
 80081a8:	0ffffcff 	.word	0x0ffffcff
 80081ac:	4bac      	ldr	r3, [pc, #688]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	4aab      	ldr	r2, [pc, #684]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80081b6:	6093      	str	r3, [r2, #8]
 80081b8:	4ba9      	ldr	r3, [pc, #676]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80081c4:	49a6      	ldr	r1, [pc, #664]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0310 	and.w	r3, r3, #16
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d010      	beq.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081d6:	4ba2      	ldr	r3, [pc, #648]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081dc:	4aa0      	ldr	r2, [pc, #640]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80081e6:	4b9e      	ldr	r3, [pc, #632]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	499b      	ldr	r1, [pc, #620]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d00a      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008204:	4b96      	ldr	r3, [pc, #600]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008212:	4993      	ldr	r1, [pc, #588]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008214:	4313      	orrs	r3, r2
 8008216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00a      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008226:	4b8e      	ldr	r3, [pc, #568]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008234:	498a      	ldr	r1, [pc, #552]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008236:	4313      	orrs	r3, r2
 8008238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00a      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008248:	4b85      	ldr	r3, [pc, #532]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800824a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008256:	4982      	ldr	r1, [pc, #520]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008258:	4313      	orrs	r3, r2
 800825a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00a      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800826a:	4b7d      	ldr	r3, [pc, #500]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800826c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008278:	4979      	ldr	r1, [pc, #484]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800827a:	4313      	orrs	r3, r2
 800827c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00a      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800828c:	4b74      	ldr	r3, [pc, #464]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800828e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008292:	f023 0203 	bic.w	r2, r3, #3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800829a:	4971      	ldr	r1, [pc, #452]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800829c:	4313      	orrs	r3, r2
 800829e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d00a      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80082ae:	4b6c      	ldr	r3, [pc, #432]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b4:	f023 020c 	bic.w	r2, r3, #12
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082bc:	4968      	ldr	r1, [pc, #416]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00a      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80082d0:	4b63      	ldr	r3, [pc, #396]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	4960      	ldr	r1, [pc, #384]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082e0:	4313      	orrs	r3, r2
 80082e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00a      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80082f2:	4b5b      	ldr	r3, [pc, #364]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008300:	4957      	ldr	r1, [pc, #348]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008302:	4313      	orrs	r3, r2
 8008304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008310:	2b00      	cmp	r3, #0
 8008312:	d00a      	beq.n	800832a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008314:	4b52      	ldr	r3, [pc, #328]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008322:	494f      	ldr	r1, [pc, #316]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008324:	4313      	orrs	r3, r2
 8008326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00a      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008336:	4b4a      	ldr	r3, [pc, #296]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800833c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008344:	4946      	ldr	r1, [pc, #280]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008346:	4313      	orrs	r3, r2
 8008348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008358:	4b41      	ldr	r3, [pc, #260]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800835a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008366:	493e      	ldr	r1, [pc, #248]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008368:	4313      	orrs	r3, r2
 800836a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800837a:	4b39      	ldr	r3, [pc, #228]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800837c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008380:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008388:	4935      	ldr	r1, [pc, #212]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800838a:	4313      	orrs	r3, r2
 800838c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800839c:	4b30      	ldr	r3, [pc, #192]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800839e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083aa:	492d      	ldr	r1, [pc, #180]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80083ac:	4313      	orrs	r3, r2
 80083ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d011      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80083be:	4b28      	ldr	r3, [pc, #160]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083cc:	4924      	ldr	r1, [pc, #144]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083dc:	d101      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80083de:	2301      	movs	r3, #1
 80083e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f003 0308 	and.w	r3, r3, #8
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80083ee:	2301      	movs	r3, #1
 80083f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00a      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083fe:	4b18      	ldr	r3, [pc, #96]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008404:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800840c:	4914      	ldr	r1, [pc, #80]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800840e:	4313      	orrs	r3, r2
 8008410:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008420:	4b0f      	ldr	r3, [pc, #60]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008426:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008430:	490b      	ldr	r1, [pc, #44]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008432:	4313      	orrs	r3, r2
 8008434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00f      	beq.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008444:	4b06      	ldr	r3, [pc, #24]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008454:	4902      	ldr	r1, [pc, #8]	; (8008460 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008456:	4313      	orrs	r3, r2
 8008458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800845c:	e002      	b.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800845e:	bf00      	nop
 8008460:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00b      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008470:	4b8a      	ldr	r3, [pc, #552]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008476:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008480:	4986      	ldr	r1, [pc, #536]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00b      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008494:	4b81      	ldr	r3, [pc, #516]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800849a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084a4:	497d      	ldr	r1, [pc, #500]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80084ac:	69fb      	ldr	r3, [r7, #28]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d006      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80d6 	beq.w	800866c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80084c0:	4b76      	ldr	r3, [pc, #472]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a75      	ldr	r2, [pc, #468]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084cc:	f7fc ffe4 	bl	8005498 <HAL_GetTick>
 80084d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084d2:	e008      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084d4:	f7fc ffe0 	bl	8005498 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b64      	cmp	r3, #100	; 0x64
 80084e0:	d901      	bls.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e195      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084e6:	4b6d      	ldr	r3, [pc, #436]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1f0      	bne.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0301 	and.w	r3, r3, #1
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d021      	beq.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008502:	2b00      	cmp	r3, #0
 8008504:	d11d      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008506:	4b65      	ldr	r3, [pc, #404]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850c:	0c1b      	lsrs	r3, r3, #16
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008514:	4b61      	ldr	r3, [pc, #388]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008516:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800851a:	0e1b      	lsrs	r3, r3, #24
 800851c:	f003 030f 	and.w	r3, r3, #15
 8008520:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	019a      	lsls	r2, r3, #6
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	041b      	lsls	r3, r3, #16
 800852c:	431a      	orrs	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	061b      	lsls	r3, r3, #24
 8008532:	431a      	orrs	r2, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	071b      	lsls	r3, r3, #28
 800853a:	4958      	ldr	r1, [pc, #352]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800853c:	4313      	orrs	r3, r2
 800853e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800854a:	2b00      	cmp	r3, #0
 800854c:	d004      	beq.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008556:	d00a      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008560:	2b00      	cmp	r3, #0
 8008562:	d02e      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008568:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800856c:	d129      	bne.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800856e:	4b4b      	ldr	r3, [pc, #300]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008570:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008574:	0c1b      	lsrs	r3, r3, #16
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800857c:	4b47      	ldr	r3, [pc, #284]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800857e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008582:	0f1b      	lsrs	r3, r3, #28
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	019a      	lsls	r2, r3, #6
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	041b      	lsls	r3, r3, #16
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	061b      	lsls	r3, r3, #24
 800859c:	431a      	orrs	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	071b      	lsls	r3, r3, #28
 80085a2:	493e      	ldr	r1, [pc, #248]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80085aa:	4b3c      	ldr	r3, [pc, #240]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80085ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b0:	f023 021f 	bic.w	r2, r3, #31
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b8:	3b01      	subs	r3, #1
 80085ba:	4938      	ldr	r1, [pc, #224]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80085bc:	4313      	orrs	r3, r2
 80085be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d01d      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80085ce:	4b33      	ldr	r3, [pc, #204]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80085d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d4:	0e1b      	lsrs	r3, r3, #24
 80085d6:	f003 030f 	and.w	r3, r3, #15
 80085da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80085dc:	4b2f      	ldr	r3, [pc, #188]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80085de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e2:	0f1b      	lsrs	r3, r3, #28
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	019a      	lsls	r2, r3, #6
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	041b      	lsls	r3, r3, #16
 80085f6:	431a      	orrs	r2, r3
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	061b      	lsls	r3, r3, #24
 80085fc:	431a      	orrs	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	071b      	lsls	r3, r3, #28
 8008602:	4926      	ldr	r1, [pc, #152]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008604:	4313      	orrs	r3, r2
 8008606:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d011      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	019a      	lsls	r2, r3, #6
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	691b      	ldr	r3, [r3, #16]
 8008620:	041b      	lsls	r3, r3, #16
 8008622:	431a      	orrs	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	061b      	lsls	r3, r3, #24
 800862a:	431a      	orrs	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	071b      	lsls	r3, r3, #28
 8008632:	491a      	ldr	r1, [pc, #104]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008634:	4313      	orrs	r3, r2
 8008636:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800863a:	4b18      	ldr	r3, [pc, #96]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a17      	ldr	r2, [pc, #92]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008640:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008646:	f7fc ff27 	bl	8005498 <HAL_GetTick>
 800864a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800864c:	e008      	b.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800864e:	f7fc ff23 	bl	8005498 <HAL_GetTick>
 8008652:	4602      	mov	r2, r0
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	2b64      	cmp	r3, #100	; 0x64
 800865a:	d901      	bls.n	8008660 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800865c:	2303      	movs	r3, #3
 800865e:	e0d8      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008660:	4b0e      	ldr	r3, [pc, #56]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008668:	2b00      	cmp	r3, #0
 800866a:	d0f0      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	2b01      	cmp	r3, #1
 8008670:	f040 80ce 	bne.w	8008810 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008674:	4b09      	ldr	r3, [pc, #36]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a08      	ldr	r2, [pc, #32]	; (800869c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800867a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800867e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008680:	f7fc ff0a 	bl	8005498 <HAL_GetTick>
 8008684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008686:	e00b      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008688:	f7fc ff06 	bl	8005498 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b64      	cmp	r3, #100	; 0x64
 8008694:	d904      	bls.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e0bb      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800869a:	bf00      	nop
 800869c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086a0:	4b5e      	ldr	r3, [pc, #376]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086ac:	d0ec      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d009      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d02e      	beq.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d12a      	bne.n	800872c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80086d6:	4b51      	ldr	r3, [pc, #324]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086dc:	0c1b      	lsrs	r3, r3, #16
 80086de:	f003 0303 	and.w	r3, r3, #3
 80086e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80086e4:	4b4d      	ldr	r3, [pc, #308]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ea:	0f1b      	lsrs	r3, r3, #28
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	019a      	lsls	r2, r3, #6
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	041b      	lsls	r3, r3, #16
 80086fc:	431a      	orrs	r2, r3
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	061b      	lsls	r3, r3, #24
 8008704:	431a      	orrs	r2, r3
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	071b      	lsls	r3, r3, #28
 800870a:	4944      	ldr	r1, [pc, #272]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800870c:	4313      	orrs	r3, r2
 800870e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008712:	4b42      	ldr	r3, [pc, #264]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008718:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008720:	3b01      	subs	r3, #1
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	493d      	ldr	r1, [pc, #244]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008726:	4313      	orrs	r3, r2
 8008728:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d022      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800873c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008740:	d11d      	bne.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008742:	4b36      	ldr	r3, [pc, #216]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008748:	0e1b      	lsrs	r3, r3, #24
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008750:	4b32      	ldr	r3, [pc, #200]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008756:	0f1b      	lsrs	r3, r3, #28
 8008758:	f003 0307 	and.w	r3, r3, #7
 800875c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	019a      	lsls	r2, r3, #6
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a1b      	ldr	r3, [r3, #32]
 8008768:	041b      	lsls	r3, r3, #16
 800876a:	431a      	orrs	r2, r3
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	061b      	lsls	r3, r3, #24
 8008770:	431a      	orrs	r2, r3
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	071b      	lsls	r3, r3, #28
 8008776:	4929      	ldr	r1, [pc, #164]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d028      	beq.n	80087dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800878a:	4b24      	ldr	r3, [pc, #144]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800878c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008790:	0e1b      	lsrs	r3, r3, #24
 8008792:	f003 030f 	and.w	r3, r3, #15
 8008796:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008798:	4b20      	ldr	r3, [pc, #128]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800879a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800879e:	0c1b      	lsrs	r3, r3, #16
 80087a0:	f003 0303 	and.w	r3, r3, #3
 80087a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	019a      	lsls	r2, r3, #6
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	041b      	lsls	r3, r3, #16
 80087b0:	431a      	orrs	r2, r3
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	061b      	lsls	r3, r3, #24
 80087b6:	431a      	orrs	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	071b      	lsls	r3, r3, #28
 80087be:	4917      	ldr	r1, [pc, #92]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80087c0:	4313      	orrs	r3, r2
 80087c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80087c6:	4b15      	ldr	r3, [pc, #84]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80087c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	4911      	ldr	r1, [pc, #68]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80087dc:	4b0f      	ldr	r3, [pc, #60]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a0e      	ldr	r2, [pc, #56]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80087e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e8:	f7fc fe56 	bl	8005498 <HAL_GetTick>
 80087ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087ee:	e008      	b.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087f0:	f7fc fe52 	bl	8005498 <HAL_GetTick>
 80087f4:	4602      	mov	r2, r0
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	1ad3      	subs	r3, r2, r3
 80087fa:	2b64      	cmp	r3, #100	; 0x64
 80087fc:	d901      	bls.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087fe:	2303      	movs	r3, #3
 8008800:	e007      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008802:	4b06      	ldr	r3, [pc, #24]	; (800881c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800880a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880e:	d1ef      	bne.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3720      	adds	r7, #32
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	40023800 	.word	0x40023800

08008820 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e01c      	b.n	800886c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	795b      	ldrb	r3, [r3, #5]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	d105      	bne.n	8008848 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fb f948 	bl	8003ad8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2202      	movs	r2, #2
 800884c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f042 0204 	orr.w	r2, r2, #4
 800885c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	791b      	ldrb	r3, [r3, #4]
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <HAL_RNG_GenerateRandomNumber+0x1a>
 800888a:	2302      	movs	r3, #2
 800888c:	e044      	b.n	8008918 <HAL_RNG_GenerateRandomNumber+0xa4>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	795b      	ldrb	r3, [r3, #5]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	2b01      	cmp	r3, #1
 800889c:	d133      	bne.n	8008906 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2202      	movs	r2, #2
 80088a2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088a4:	f7fc fdf8 	bl	8005498 <HAL_GetTick>
 80088a8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80088aa:	e018      	b.n	80088de <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80088ac:	f7fc fdf4 	bl	8005498 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d911      	bls.n	80088de <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f003 0301 	and.w	r3, r3, #1
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d00a      	beq.n	80088de <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2202      	movs	r2, #2
 80088d2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e01c      	b.n	8008918 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d1df      	bne.n	80088ac <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	715a      	strb	r2, [r3, #5]
 8008904:	e004      	b.n	8008910 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2204      	movs	r2, #4
 800890a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2200      	movs	r2, #0
 8008914:	711a      	strb	r2, [r3, #4]

  return status;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	330c      	adds	r3, #12
 800892c:	4619      	mov	r1, r3
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f7ff ffa0 	bl	8008874 <HAL_RNG_GenerateRandomNumber>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	e000      	b.n	8008942 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8008940:	2300      	movs	r3, #0
  }
}
 8008942:	4618      	mov	r0, r3
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e09d      	b.n	8008a98 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2b00      	cmp	r3, #0
 8008962:	d108      	bne.n	8008976 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800896c:	d009      	beq.n	8008982 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	61da      	str	r2, [r3, #28]
 8008974:	e005      	b.n	8008982 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d106      	bne.n	80089a2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f7fb f90d 	bl	8003bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2202      	movs	r2, #2
 80089a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089b8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089c2:	d902      	bls.n	80089ca <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	e002      	b.n	80089d0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80089ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089ce:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80089d8:	d007      	beq.n	80089ea <HAL_SPI_Init+0xa0>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089e2:	d002      	beq.n	80089ea <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80089fa:	431a      	orrs	r2, r3
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	f003 0302 	and.w	r3, r3, #2
 8008a04:	431a      	orrs	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f003 0301 	and.w	r3, r3, #1
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a22:	431a      	orrs	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a2c:	ea42 0103 	orr.w	r1, r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	0c1b      	lsrs	r3, r3, #16
 8008a46:	f003 0204 	and.w	r2, r3, #4
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	f003 0310 	and.w	r3, r3, #16
 8008a52:	431a      	orrs	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	431a      	orrs	r2, r3
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a66:	ea42 0103 	orr.w	r1, r2, r3
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	430a      	orrs	r2, r1
 8008a76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	69da      	ldr	r2, [r3, #28]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	603b      	str	r3, [r7, #0]
 8008aac:	4613      	mov	r3, r2
 8008aae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d101      	bne.n	8008ac2 <HAL_SPI_Transmit+0x22>
 8008abe:	2302      	movs	r3, #2
 8008ac0:	e158      	b.n	8008d74 <HAL_SPI_Transmit+0x2d4>
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008aca:	f7fc fce5 	bl	8005498 <HAL_GetTick>
 8008ace:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008ad0:	88fb      	ldrh	r3, [r7, #6]
 8008ad2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d002      	beq.n	8008ae6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008ae4:	e13d      	b.n	8008d62 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d002      	beq.n	8008af2 <HAL_SPI_Transmit+0x52>
 8008aec:	88fb      	ldrh	r3, [r7, #6]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d102      	bne.n	8008af8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008af6:	e134      	b.n	8008d62 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2203      	movs	r2, #3
 8008afc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2200      	movs	r2, #0
 8008b04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	88fa      	ldrh	r2, [r7, #6]
 8008b10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	88fa      	ldrh	r2, [r7, #6]
 8008b16:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2200      	movs	r2, #0
 8008b22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b42:	d10f      	bne.n	8008b64 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b62:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6e:	2b40      	cmp	r3, #64	; 0x40
 8008b70:	d007      	beq.n	8008b82 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b80:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008b8a:	d94b      	bls.n	8008c24 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <HAL_SPI_Transmit+0xfa>
 8008b94:	8afb      	ldrh	r3, [r7, #22]
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d13e      	bne.n	8008c18 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9e:	881a      	ldrh	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008baa:	1c9a      	adds	r2, r3, #2
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008bbe:	e02b      	b.n	8008c18 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d112      	bne.n	8008bf4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	881a      	ldrh	r2, [r3, #0]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	1c9a      	adds	r2, r3, #2
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008be8:	b29b      	uxth	r3, r3
 8008bea:	3b01      	subs	r3, #1
 8008bec:	b29a      	uxth	r2, r3
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bf2:	e011      	b.n	8008c18 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008bf4:	f7fc fc50 	bl	8005498 <HAL_GetTick>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	1ad3      	subs	r3, r2, r3
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d803      	bhi.n	8008c0c <HAL_SPI_Transmit+0x16c>
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d102      	bne.n	8008c12 <HAL_SPI_Transmit+0x172>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d102      	bne.n	8008c18 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008c16:	e0a4      	b.n	8008d62 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1ce      	bne.n	8008bc0 <HAL_SPI_Transmit+0x120>
 8008c22:	e07c      	b.n	8008d1e <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d002      	beq.n	8008c32 <HAL_SPI_Transmit+0x192>
 8008c2c:	8afb      	ldrh	r3, [r7, #22]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d170      	bne.n	8008d14 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c36:	b29b      	uxth	r3, r3
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d912      	bls.n	8008c62 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c40:	881a      	ldrh	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4c:	1c9a      	adds	r2, r3, #2
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	3b02      	subs	r3, #2
 8008c5a:	b29a      	uxth	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008c60:	e058      	b.n	8008d14 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	330c      	adds	r3, #12
 8008c6c:	7812      	ldrb	r2, [r2, #0]
 8008c6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c74:	1c5a      	adds	r2, r3, #1
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	3b01      	subs	r3, #1
 8008c82:	b29a      	uxth	r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008c88:	e044      	b.n	8008d14 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b02      	cmp	r3, #2
 8008c96:	d12b      	bne.n	8008cf0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d912      	bls.n	8008cc8 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca6:	881a      	ldrh	r2, [r3, #0]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb2:	1c9a      	adds	r2, r3, #2
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	3b02      	subs	r3, #2
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cc6:	e025      	b.n	8008d14 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	330c      	adds	r3, #12
 8008cd2:	7812      	ldrb	r2, [r2, #0]
 8008cd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cda:	1c5a      	adds	r2, r3, #1
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ce4:	b29b      	uxth	r3, r3
 8008ce6:	3b01      	subs	r3, #1
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008cee:	e011      	b.n	8008d14 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cf0:	f7fc fbd2 	bl	8005498 <HAL_GetTick>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d803      	bhi.n	8008d08 <HAL_SPI_Transmit+0x268>
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d06:	d102      	bne.n	8008d0e <HAL_SPI_Transmit+0x26e>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008d12:	e026      	b.n	8008d62 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1b5      	bne.n	8008c8a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f000 f948 	bl	8008fb8 <SPI_EndRxTxTransaction>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2220      	movs	r2, #32
 8008d32:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d10a      	bne.n	8008d52 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	613b      	str	r3, [r7, #16]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68db      	ldr	r3, [r3, #12]
 8008d46:	613b      	str	r3, [r7, #16]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	613b      	str	r3, [r7, #16]
 8008d50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	77fb      	strb	r3, [r7, #31]
 8008d5e:	e000      	b.n	8008d62 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008d60:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d72:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3720      	adds	r7, #32
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b088      	sub	sp, #32
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	603b      	str	r3, [r7, #0]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008d8c:	f7fc fb84 	bl	8005498 <HAL_GetTick>
 8008d90:	4602      	mov	r2, r0
 8008d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d94:	1a9b      	subs	r3, r3, r2
 8008d96:	683a      	ldr	r2, [r7, #0]
 8008d98:	4413      	add	r3, r2
 8008d9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008d9c:	f7fc fb7c 	bl	8005498 <HAL_GetTick>
 8008da0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008da2:	4b39      	ldr	r3, [pc, #228]	; (8008e88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	015b      	lsls	r3, r3, #5
 8008da8:	0d1b      	lsrs	r3, r3, #20
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	fb02 f303 	mul.w	r3, r2, r3
 8008db0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008db2:	e054      	b.n	8008e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dba:	d050      	beq.n	8008e5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008dbc:	f7fc fb6c 	bl	8005498 <HAL_GetTick>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	1ad3      	subs	r3, r2, r3
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d902      	bls.n	8008dd2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d13d      	bne.n	8008e4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	685a      	ldr	r2, [r3, #4]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008de0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008dea:	d111      	bne.n	8008e10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008df4:	d004      	beq.n	8008e00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dfe:	d107      	bne.n	8008e10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e18:	d10f      	bne.n	8008e3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e28:	601a      	str	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2200      	movs	r2, #0
 8008e46:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e017      	b.n	8008e7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	4013      	ands	r3, r2
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	bf0c      	ite	eq
 8008e6e:	2301      	moveq	r3, #1
 8008e70:	2300      	movne	r3, #0
 8008e72:	b2db      	uxtb	r3, r3
 8008e74:	461a      	mov	r2, r3
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d19b      	bne.n	8008db4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	200000c8 	.word	0x200000c8

08008e8c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08a      	sub	sp, #40	; 0x28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008e9e:	f7fc fafb 	bl	8005498 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	683a      	ldr	r2, [r7, #0]
 8008eaa:	4413      	add	r3, r2
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008eae:	f7fc faf3 	bl	8005498 <HAL_GetTick>
 8008eb2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	330c      	adds	r3, #12
 8008eba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008ebc:	4b3d      	ldr	r3, [pc, #244]	; (8008fb4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	00da      	lsls	r2, r3, #3
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	0d1b      	lsrs	r3, r3, #20
 8008ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ece:	fb02 f303 	mul.w	r3, r2, r3
 8008ed2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008ed4:	e060      	b.n	8008f98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008edc:	d107      	bne.n	8008eee <SPI_WaitFifoStateUntilTimeout+0x62>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d104      	bne.n	8008eee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008eec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef4:	d050      	beq.n	8008f98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008ef6:	f7fc facf 	bl	8005498 <HAL_GetTick>
 8008efa:	4602      	mov	r2, r0
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	1ad3      	subs	r3, r2, r3
 8008f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d902      	bls.n	8008f0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d13d      	bne.n	8008f88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008f24:	d111      	bne.n	8008f4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f2e:	d004      	beq.n	8008f3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f38:	d107      	bne.n	8008f4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f52:	d10f      	bne.n	8008f74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008f84:	2303      	movs	r3, #3
 8008f86:	e010      	b.n	8008faa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008f88:	69bb      	ldr	r3, [r7, #24]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d196      	bne.n	8008ed6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3728      	adds	r7, #40	; 0x28
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	200000c8 	.word	0x200000c8

08008fb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b088      	sub	sp, #32
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	f7ff ff5b 	bl	8008e8c <SPI_WaitFifoStateUntilTimeout>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d007      	beq.n	8008fec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe0:	f043 0220 	orr.w	r2, r3, #32
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e046      	b.n	800907a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008fec:	4b25      	ldr	r3, [pc, #148]	; (8009084 <SPI_EndRxTxTransaction+0xcc>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	4a25      	ldr	r2, [pc, #148]	; (8009088 <SPI_EndRxTxTransaction+0xd0>)
 8008ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ff6:	0d5b      	lsrs	r3, r3, #21
 8008ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008ffc:	fb02 f303 	mul.w	r3, r2, r3
 8009000:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800900a:	d112      	bne.n	8009032 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	2200      	movs	r2, #0
 8009014:	2180      	movs	r1, #128	; 0x80
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f7ff feb0 	bl	8008d7c <SPI_WaitFlagStateUntilTimeout>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d016      	beq.n	8009050 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009026:	f043 0220 	orr.w	r2, r3, #32
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e023      	b.n	800907a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00a      	beq.n	800904e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	3b01      	subs	r3, #1
 800903c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009048:	2b80      	cmp	r3, #128	; 0x80
 800904a:	d0f2      	beq.n	8009032 <SPI_EndRxTxTransaction+0x7a>
 800904c:	e000      	b.n	8009050 <SPI_EndRxTxTransaction+0x98>
        break;
 800904e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2200      	movs	r2, #0
 8009058:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800905c:	68f8      	ldr	r0, [r7, #12]
 800905e:	f7ff ff15 	bl	8008e8c <SPI_WaitFifoStateUntilTimeout>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d007      	beq.n	8009078 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800906c:	f043 0220 	orr.w	r2, r3, #32
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e000      	b.n	800907a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3718      	adds	r7, #24
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	200000c8 	.word	0x200000c8
 8009088:	165e9f81 	.word	0x165e9f81

0800908c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b082      	sub	sp, #8
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e049      	b.n	8009132 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d106      	bne.n	80090b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fb f96c 	bl	8004390 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2202      	movs	r2, #2
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3304      	adds	r3, #4
 80090c8:	4619      	mov	r1, r3
 80090ca:	4610      	mov	r0, r2
 80090cc:	f000 fdb0 	bl	8009c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2201      	movs	r2, #1
 80090d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2201      	movs	r2, #1
 800910c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2201      	movs	r2, #1
 8009124:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b01      	cmp	r3, #1
 800914e:	d001      	beq.n	8009154 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e054      	b.n	80091fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68da      	ldr	r2, [r3, #12]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0201 	orr.w	r2, r2, #1
 800916a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a26      	ldr	r2, [pc, #152]	; (800920c <HAL_TIM_Base_Start_IT+0xd0>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d022      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800917e:	d01d      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a22      	ldr	r2, [pc, #136]	; (8009210 <HAL_TIM_Base_Start_IT+0xd4>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d018      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a21      	ldr	r2, [pc, #132]	; (8009214 <HAL_TIM_Base_Start_IT+0xd8>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d013      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a1f      	ldr	r2, [pc, #124]	; (8009218 <HAL_TIM_Base_Start_IT+0xdc>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d00e      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a1e      	ldr	r2, [pc, #120]	; (800921c <HAL_TIM_Base_Start_IT+0xe0>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d009      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a1c      	ldr	r2, [pc, #112]	; (8009220 <HAL_TIM_Base_Start_IT+0xe4>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d004      	beq.n	80091bc <HAL_TIM_Base_Start_IT+0x80>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a1b      	ldr	r2, [pc, #108]	; (8009224 <HAL_TIM_Base_Start_IT+0xe8>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d115      	bne.n	80091e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	689a      	ldr	r2, [r3, #8]
 80091c2:	4b19      	ldr	r3, [pc, #100]	; (8009228 <HAL_TIM_Base_Start_IT+0xec>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2b06      	cmp	r3, #6
 80091cc:	d015      	beq.n	80091fa <HAL_TIM_Base_Start_IT+0xbe>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091d4:	d011      	beq.n	80091fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f042 0201 	orr.w	r2, r2, #1
 80091e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091e6:	e008      	b.n	80091fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f042 0201 	orr.w	r2, r2, #1
 80091f6:	601a      	str	r2, [r3, #0]
 80091f8:	e000      	b.n	80091fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	40010000 	.word	0x40010000
 8009210:	40000400 	.word	0x40000400
 8009214:	40000800 	.word	0x40000800
 8009218:	40000c00 	.word	0x40000c00
 800921c:	40010400 	.word	0x40010400
 8009220:	40014000 	.word	0x40014000
 8009224:	40001800 	.word	0x40001800
 8009228:	00010007 	.word	0x00010007

0800922c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e049      	b.n	80092d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d106      	bne.n	8009258 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7fb f912 	bl	800447c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2202      	movs	r2, #2
 800925c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3304      	adds	r3, #4
 8009268:	4619      	mov	r1, r3
 800926a:	4610      	mov	r0, r2
 800926c:	f000 fce0 	bl	8009c30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2201      	movs	r2, #1
 800927c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3708      	adds	r7, #8
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d109      	bne.n	8009300 <HAL_TIM_PWM_Start+0x24>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	bf14      	ite	ne
 80092f8:	2301      	movne	r3, #1
 80092fa:	2300      	moveq	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	e03c      	b.n	800937a <HAL_TIM_PWM_Start+0x9e>
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2b04      	cmp	r3, #4
 8009304:	d109      	bne.n	800931a <HAL_TIM_PWM_Start+0x3e>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b01      	cmp	r3, #1
 8009310:	bf14      	ite	ne
 8009312:	2301      	movne	r3, #1
 8009314:	2300      	moveq	r3, #0
 8009316:	b2db      	uxtb	r3, r3
 8009318:	e02f      	b.n	800937a <HAL_TIM_PWM_Start+0x9e>
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	2b08      	cmp	r3, #8
 800931e:	d109      	bne.n	8009334 <HAL_TIM_PWM_Start+0x58>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009326:	b2db      	uxtb	r3, r3
 8009328:	2b01      	cmp	r3, #1
 800932a:	bf14      	ite	ne
 800932c:	2301      	movne	r3, #1
 800932e:	2300      	moveq	r3, #0
 8009330:	b2db      	uxtb	r3, r3
 8009332:	e022      	b.n	800937a <HAL_TIM_PWM_Start+0x9e>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b0c      	cmp	r3, #12
 8009338:	d109      	bne.n	800934e <HAL_TIM_PWM_Start+0x72>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b01      	cmp	r3, #1
 8009344:	bf14      	ite	ne
 8009346:	2301      	movne	r3, #1
 8009348:	2300      	moveq	r3, #0
 800934a:	b2db      	uxtb	r3, r3
 800934c:	e015      	b.n	800937a <HAL_TIM_PWM_Start+0x9e>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b10      	cmp	r3, #16
 8009352:	d109      	bne.n	8009368 <HAL_TIM_PWM_Start+0x8c>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800935a:	b2db      	uxtb	r3, r3
 800935c:	2b01      	cmp	r3, #1
 800935e:	bf14      	ite	ne
 8009360:	2301      	movne	r3, #1
 8009362:	2300      	moveq	r3, #0
 8009364:	b2db      	uxtb	r3, r3
 8009366:	e008      	b.n	800937a <HAL_TIM_PWM_Start+0x9e>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b01      	cmp	r3, #1
 8009372:	bf14      	ite	ne
 8009374:	2301      	movne	r3, #1
 8009376:	2300      	moveq	r3, #0
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d001      	beq.n	8009382 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e092      	b.n	80094a8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d104      	bne.n	8009392 <HAL_TIM_PWM_Start+0xb6>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2202      	movs	r2, #2
 800938c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009390:	e023      	b.n	80093da <HAL_TIM_PWM_Start+0xfe>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b04      	cmp	r3, #4
 8009396:	d104      	bne.n	80093a2 <HAL_TIM_PWM_Start+0xc6>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2202      	movs	r2, #2
 800939c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093a0:	e01b      	b.n	80093da <HAL_TIM_PWM_Start+0xfe>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b08      	cmp	r3, #8
 80093a6:	d104      	bne.n	80093b2 <HAL_TIM_PWM_Start+0xd6>
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2202      	movs	r2, #2
 80093ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093b0:	e013      	b.n	80093da <HAL_TIM_PWM_Start+0xfe>
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	2b0c      	cmp	r3, #12
 80093b6:	d104      	bne.n	80093c2 <HAL_TIM_PWM_Start+0xe6>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2202      	movs	r2, #2
 80093bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093c0:	e00b      	b.n	80093da <HAL_TIM_PWM_Start+0xfe>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b10      	cmp	r3, #16
 80093c6:	d104      	bne.n	80093d2 <HAL_TIM_PWM_Start+0xf6>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093d0:	e003      	b.n	80093da <HAL_TIM_PWM_Start+0xfe>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2201      	movs	r2, #1
 80093e0:	6839      	ldr	r1, [r7, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f000 ffbc 	bl	800a360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4a30      	ldr	r2, [pc, #192]	; (80094b0 <HAL_TIM_PWM_Start+0x1d4>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d004      	beq.n	80093fc <HAL_TIM_PWM_Start+0x120>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a2f      	ldr	r2, [pc, #188]	; (80094b4 <HAL_TIM_PWM_Start+0x1d8>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d101      	bne.n	8009400 <HAL_TIM_PWM_Start+0x124>
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <HAL_TIM_PWM_Start+0x126>
 8009400:	2300      	movs	r3, #0
 8009402:	2b00      	cmp	r3, #0
 8009404:	d007      	beq.n	8009416 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009414:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a25      	ldr	r2, [pc, #148]	; (80094b0 <HAL_TIM_PWM_Start+0x1d4>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d022      	beq.n	8009466 <HAL_TIM_PWM_Start+0x18a>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009428:	d01d      	beq.n	8009466 <HAL_TIM_PWM_Start+0x18a>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a22      	ldr	r2, [pc, #136]	; (80094b8 <HAL_TIM_PWM_Start+0x1dc>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d018      	beq.n	8009466 <HAL_TIM_PWM_Start+0x18a>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a20      	ldr	r2, [pc, #128]	; (80094bc <HAL_TIM_PWM_Start+0x1e0>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d013      	beq.n	8009466 <HAL_TIM_PWM_Start+0x18a>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a1f      	ldr	r2, [pc, #124]	; (80094c0 <HAL_TIM_PWM_Start+0x1e4>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d00e      	beq.n	8009466 <HAL_TIM_PWM_Start+0x18a>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <HAL_TIM_PWM_Start+0x1d8>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d009      	beq.n	8009466 <HAL_TIM_PWM_Start+0x18a>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1b      	ldr	r2, [pc, #108]	; (80094c4 <HAL_TIM_PWM_Start+0x1e8>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d004      	beq.n	8009466 <HAL_TIM_PWM_Start+0x18a>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a19      	ldr	r2, [pc, #100]	; (80094c8 <HAL_TIM_PWM_Start+0x1ec>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d115      	bne.n	8009492 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689a      	ldr	r2, [r3, #8]
 800946c:	4b17      	ldr	r3, [pc, #92]	; (80094cc <HAL_TIM_PWM_Start+0x1f0>)
 800946e:	4013      	ands	r3, r2
 8009470:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b06      	cmp	r3, #6
 8009476:	d015      	beq.n	80094a4 <HAL_TIM_PWM_Start+0x1c8>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800947e:	d011      	beq.n	80094a4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f042 0201 	orr.w	r2, r2, #1
 800948e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009490:	e008      	b.n	80094a4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f042 0201 	orr.w	r2, r2, #1
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	e000      	b.n	80094a6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40010000 	.word	0x40010000
 80094b4:	40010400 	.word	0x40010400
 80094b8:	40000400 	.word	0x40000400
 80094bc:	40000800 	.word	0x40000800
 80094c0:	40000c00 	.word	0x40000c00
 80094c4:	40014000 	.word	0x40014000
 80094c8:	40001800 	.word	0x40001800
 80094cc:	00010007 	.word	0x00010007

080094d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2200      	movs	r2, #0
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 ff3c 	bl	800a360 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a36      	ldr	r2, [pc, #216]	; (80095c8 <HAL_TIM_PWM_Stop+0xf8>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d004      	beq.n	80094fc <HAL_TIM_PWM_Stop+0x2c>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a35      	ldr	r2, [pc, #212]	; (80095cc <HAL_TIM_PWM_Stop+0xfc>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d101      	bne.n	8009500 <HAL_TIM_PWM_Stop+0x30>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e000      	b.n	8009502 <HAL_TIM_PWM_Stop+0x32>
 8009500:	2300      	movs	r3, #0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d017      	beq.n	8009536 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6a1a      	ldr	r2, [r3, #32]
 800950c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009510:	4013      	ands	r3, r2
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10f      	bne.n	8009536 <HAL_TIM_PWM_Stop+0x66>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6a1a      	ldr	r2, [r3, #32]
 800951c:	f240 4344 	movw	r3, #1092	; 0x444
 8009520:	4013      	ands	r3, r2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d107      	bne.n	8009536 <HAL_TIM_PWM_Stop+0x66>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009534:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	6a1a      	ldr	r2, [r3, #32]
 800953c:	f241 1311 	movw	r3, #4369	; 0x1111
 8009540:	4013      	ands	r3, r2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10f      	bne.n	8009566 <HAL_TIM_PWM_Stop+0x96>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	6a1a      	ldr	r2, [r3, #32]
 800954c:	f240 4344 	movw	r3, #1092	; 0x444
 8009550:	4013      	ands	r3, r2
 8009552:	2b00      	cmp	r3, #0
 8009554:	d107      	bne.n	8009566 <HAL_TIM_PWM_Stop+0x96>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f022 0201 	bic.w	r2, r2, #1
 8009564:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d104      	bne.n	8009576 <HAL_TIM_PWM_Stop+0xa6>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009574:	e023      	b.n	80095be <HAL_TIM_PWM_Stop+0xee>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	2b04      	cmp	r3, #4
 800957a:	d104      	bne.n	8009586 <HAL_TIM_PWM_Stop+0xb6>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009584:	e01b      	b.n	80095be <HAL_TIM_PWM_Stop+0xee>
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b08      	cmp	r3, #8
 800958a:	d104      	bne.n	8009596 <HAL_TIM_PWM_Stop+0xc6>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009594:	e013      	b.n	80095be <HAL_TIM_PWM_Stop+0xee>
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	2b0c      	cmp	r3, #12
 800959a:	d104      	bne.n	80095a6 <HAL_TIM_PWM_Stop+0xd6>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80095a4:	e00b      	b.n	80095be <HAL_TIM_PWM_Stop+0xee>
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b10      	cmp	r3, #16
 80095aa:	d104      	bne.n	80095b6 <HAL_TIM_PWM_Stop+0xe6>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80095b4:	e003      	b.n	80095be <HAL_TIM_PWM_Stop+0xee>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40010000 	.word	0x40010000
 80095cc:	40010400 	.word	0x40010400

080095d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b082      	sub	sp, #8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0302 	and.w	r3, r3, #2
 80095e2:	2b02      	cmp	r3, #2
 80095e4:	d122      	bne.n	800962c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f003 0302 	and.w	r3, r3, #2
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d11b      	bne.n	800962c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0202 	mvn.w	r2, #2
 80095fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2201      	movs	r2, #1
 8009602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f003 0303 	and.w	r3, r3, #3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 faee 	bl	8009bf4 <HAL_TIM_IC_CaptureCallback>
 8009618:	e005      	b.n	8009626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fae0 	bl	8009be0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 faf1 	bl	8009c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	f003 0304 	and.w	r3, r3, #4
 8009636:	2b04      	cmp	r3, #4
 8009638:	d122      	bne.n	8009680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f003 0304 	and.w	r3, r3, #4
 8009644:	2b04      	cmp	r3, #4
 8009646:	d11b      	bne.n	8009680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f06f 0204 	mvn.w	r2, #4
 8009650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2202      	movs	r2, #2
 8009656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	699b      	ldr	r3, [r3, #24]
 800965e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fac4 	bl	8009bf4 <HAL_TIM_IC_CaptureCallback>
 800966c:	e005      	b.n	800967a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 fab6 	bl	8009be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fac7 	bl	8009c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	f003 0308 	and.w	r3, r3, #8
 800968a:	2b08      	cmp	r3, #8
 800968c:	d122      	bne.n	80096d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	f003 0308 	and.w	r3, r3, #8
 8009698:	2b08      	cmp	r3, #8
 800969a:	d11b      	bne.n	80096d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f06f 0208 	mvn.w	r2, #8
 80096a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2204      	movs	r2, #4
 80096aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f003 0303 	and.w	r3, r3, #3
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d003      	beq.n	80096c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fa9a 	bl	8009bf4 <HAL_TIM_IC_CaptureCallback>
 80096c0:	e005      	b.n	80096ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 fa8c 	bl	8009be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fa9d 	bl	8009c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	f003 0310 	and.w	r3, r3, #16
 80096de:	2b10      	cmp	r3, #16
 80096e0:	d122      	bne.n	8009728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f003 0310 	and.w	r3, r3, #16
 80096ec:	2b10      	cmp	r3, #16
 80096ee:	d11b      	bne.n	8009728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f06f 0210 	mvn.w	r2, #16
 80096f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2208      	movs	r2, #8
 80096fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800970a:	2b00      	cmp	r3, #0
 800970c:	d003      	beq.n	8009716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f000 fa70 	bl	8009bf4 <HAL_TIM_IC_CaptureCallback>
 8009714:	e005      	b.n	8009722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fa62 	bl	8009be0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fa73 	bl	8009c08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b01      	cmp	r3, #1
 8009734:	d10e      	bne.n	8009754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b01      	cmp	r3, #1
 8009742:	d107      	bne.n	8009754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f06f 0201 	mvn.w	r2, #1
 800974c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f000 fa3c 	bl	8009bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	691b      	ldr	r3, [r3, #16]
 800975a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800975e:	2b80      	cmp	r3, #128	; 0x80
 8009760:	d10e      	bne.n	8009780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976c:	2b80      	cmp	r3, #128	; 0x80
 800976e:	d107      	bne.n	8009780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 ff2c 	bl	800a5d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800978e:	d10e      	bne.n	80097ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800979a:	2b80      	cmp	r3, #128	; 0x80
 800979c:	d107      	bne.n	80097ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80097a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 ff1f 	bl	800a5ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	691b      	ldr	r3, [r3, #16]
 80097b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b8:	2b40      	cmp	r3, #64	; 0x40
 80097ba:	d10e      	bne.n	80097da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097c6:	2b40      	cmp	r3, #64	; 0x40
 80097c8:	d107      	bne.n	80097da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fa21 	bl	8009c1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	691b      	ldr	r3, [r3, #16]
 80097e0:	f003 0320 	and.w	r3, r3, #32
 80097e4:	2b20      	cmp	r3, #32
 80097e6:	d10e      	bne.n	8009806 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68db      	ldr	r3, [r3, #12]
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b20      	cmp	r3, #32
 80097f4:	d107      	bne.n	8009806 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f06f 0220 	mvn.w	r2, #32
 80097fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fedf 	bl	800a5c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009826:	2b01      	cmp	r3, #1
 8009828:	d101      	bne.n	800982e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800982a:	2302      	movs	r3, #2
 800982c:	e0ff      	b.n	8009a2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2b14      	cmp	r3, #20
 800983a:	f200 80f0 	bhi.w	8009a1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800983e:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009844:	08009899 	.word	0x08009899
 8009848:	08009a1f 	.word	0x08009a1f
 800984c:	08009a1f 	.word	0x08009a1f
 8009850:	08009a1f 	.word	0x08009a1f
 8009854:	080098d9 	.word	0x080098d9
 8009858:	08009a1f 	.word	0x08009a1f
 800985c:	08009a1f 	.word	0x08009a1f
 8009860:	08009a1f 	.word	0x08009a1f
 8009864:	0800991b 	.word	0x0800991b
 8009868:	08009a1f 	.word	0x08009a1f
 800986c:	08009a1f 	.word	0x08009a1f
 8009870:	08009a1f 	.word	0x08009a1f
 8009874:	0800995b 	.word	0x0800995b
 8009878:	08009a1f 	.word	0x08009a1f
 800987c:	08009a1f 	.word	0x08009a1f
 8009880:	08009a1f 	.word	0x08009a1f
 8009884:	0800999d 	.word	0x0800999d
 8009888:	08009a1f 	.word	0x08009a1f
 800988c:	08009a1f 	.word	0x08009a1f
 8009890:	08009a1f 	.word	0x08009a1f
 8009894:	080099dd 	.word	0x080099dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68b9      	ldr	r1, [r7, #8]
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fa66 	bl	8009d70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	699a      	ldr	r2, [r3, #24]
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f042 0208 	orr.w	r2, r2, #8
 80098b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	699a      	ldr	r2, [r3, #24]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0204 	bic.w	r2, r2, #4
 80098c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6999      	ldr	r1, [r3, #24]
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	691a      	ldr	r2, [r3, #16]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	619a      	str	r2, [r3, #24]
      break;
 80098d6:	e0a5      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	68b9      	ldr	r1, [r7, #8]
 80098de:	4618      	mov	r0, r3
 80098e0:	f000 fab8 	bl	8009e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	699a      	ldr	r2, [r3, #24]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	699a      	ldr	r2, [r3, #24]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	6999      	ldr	r1, [r3, #24]
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	021a      	lsls	r2, r3, #8
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	619a      	str	r2, [r3, #24]
      break;
 8009918:	e084      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 fb0f 	bl	8009f44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	69da      	ldr	r2, [r3, #28]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f042 0208 	orr.w	r2, r2, #8
 8009934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	69da      	ldr	r2, [r3, #28]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 0204 	bic.w	r2, r2, #4
 8009944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	69d9      	ldr	r1, [r3, #28]
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	691a      	ldr	r2, [r3, #16]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	430a      	orrs	r2, r1
 8009956:	61da      	str	r2, [r3, #28]
      break;
 8009958:	e064      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	68b9      	ldr	r1, [r7, #8]
 8009960:	4618      	mov	r0, r3
 8009962:	f000 fb65 	bl	800a030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	69da      	ldr	r2, [r3, #28]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	69da      	ldr	r2, [r3, #28]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	69d9      	ldr	r1, [r3, #28]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	021a      	lsls	r2, r3, #8
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	430a      	orrs	r2, r1
 8009998:	61da      	str	r2, [r3, #28]
      break;
 800999a:	e043      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 fb9c 	bl	800a0e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f042 0208 	orr.w	r2, r2, #8
 80099b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f022 0204 	bic.w	r2, r2, #4
 80099c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	691a      	ldr	r2, [r3, #16]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	430a      	orrs	r2, r1
 80099d8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80099da:	e023      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68b9      	ldr	r1, [r7, #8]
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 fbce 	bl	800a184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	021a      	lsls	r2, r3, #8
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	430a      	orrs	r2, r1
 8009a1a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009a1c:	e002      	b.n	8009a24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	75fb      	strb	r3, [r7, #23]
      break;
 8009a22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop

08009a38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a42:	2300      	movs	r3, #0
 8009a44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d101      	bne.n	8009a54 <HAL_TIM_ConfigClockSource+0x1c>
 8009a50:	2302      	movs	r3, #2
 8009a52:	e0b4      	b.n	8009bbe <HAL_TIM_ConfigClockSource+0x186>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2201      	movs	r2, #1
 8009a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	4b56      	ldr	r3, [pc, #344]	; (8009bc8 <HAL_TIM_ConfigClockSource+0x190>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a8c:	d03e      	beq.n	8009b0c <HAL_TIM_ConfigClockSource+0xd4>
 8009a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a92:	f200 8087 	bhi.w	8009ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8009a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a9a:	f000 8086 	beq.w	8009baa <HAL_TIM_ConfigClockSource+0x172>
 8009a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa2:	d87f      	bhi.n	8009ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8009aa4:	2b70      	cmp	r3, #112	; 0x70
 8009aa6:	d01a      	beq.n	8009ade <HAL_TIM_ConfigClockSource+0xa6>
 8009aa8:	2b70      	cmp	r3, #112	; 0x70
 8009aaa:	d87b      	bhi.n	8009ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8009aac:	2b60      	cmp	r3, #96	; 0x60
 8009aae:	d050      	beq.n	8009b52 <HAL_TIM_ConfigClockSource+0x11a>
 8009ab0:	2b60      	cmp	r3, #96	; 0x60
 8009ab2:	d877      	bhi.n	8009ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ab4:	2b50      	cmp	r3, #80	; 0x50
 8009ab6:	d03c      	beq.n	8009b32 <HAL_TIM_ConfigClockSource+0xfa>
 8009ab8:	2b50      	cmp	r3, #80	; 0x50
 8009aba:	d873      	bhi.n	8009ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8009abc:	2b40      	cmp	r3, #64	; 0x40
 8009abe:	d058      	beq.n	8009b72 <HAL_TIM_ConfigClockSource+0x13a>
 8009ac0:	2b40      	cmp	r3, #64	; 0x40
 8009ac2:	d86f      	bhi.n	8009ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ac4:	2b30      	cmp	r3, #48	; 0x30
 8009ac6:	d064      	beq.n	8009b92 <HAL_TIM_ConfigClockSource+0x15a>
 8009ac8:	2b30      	cmp	r3, #48	; 0x30
 8009aca:	d86b      	bhi.n	8009ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8009acc:	2b20      	cmp	r3, #32
 8009ace:	d060      	beq.n	8009b92 <HAL_TIM_ConfigClockSource+0x15a>
 8009ad0:	2b20      	cmp	r3, #32
 8009ad2:	d867      	bhi.n	8009ba4 <HAL_TIM_ConfigClockSource+0x16c>
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d05c      	beq.n	8009b92 <HAL_TIM_ConfigClockSource+0x15a>
 8009ad8:	2b10      	cmp	r3, #16
 8009ada:	d05a      	beq.n	8009b92 <HAL_TIM_ConfigClockSource+0x15a>
 8009adc:	e062      	b.n	8009ba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009aee:	f000 fc17 	bl	800a320 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689b      	ldr	r3, [r3, #8]
 8009af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68ba      	ldr	r2, [r7, #8]
 8009b08:	609a      	str	r2, [r3, #8]
      break;
 8009b0a:	e04f      	b.n	8009bac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009b1c:	f000 fc00 	bl	800a320 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689a      	ldr	r2, [r3, #8]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b2e:	609a      	str	r2, [r3, #8]
      break;
 8009b30:	e03c      	b.n	8009bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f000 fb74 	bl	800a22c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2150      	movs	r1, #80	; 0x50
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f000 fbcd 	bl	800a2ea <TIM_ITRx_SetConfig>
      break;
 8009b50:	e02c      	b.n	8009bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f000 fb93 	bl	800a28a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2160      	movs	r1, #96	; 0x60
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 fbbd 	bl	800a2ea <TIM_ITRx_SetConfig>
      break;
 8009b70:	e01c      	b.n	8009bac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b7e:	461a      	mov	r2, r3
 8009b80:	f000 fb54 	bl	800a22c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2140      	movs	r1, #64	; 0x40
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 fbad 	bl	800a2ea <TIM_ITRx_SetConfig>
      break;
 8009b90:	e00c      	b.n	8009bac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	4610      	mov	r0, r2
 8009b9e:	f000 fba4 	bl	800a2ea <TIM_ITRx_SetConfig>
      break;
 8009ba2:	e003      	b.n	8009bac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8009ba8:	e000      	b.n	8009bac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	fffeff88 	.word	0xfffeff88

08009bcc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009be8:	bf00      	nop
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr

08009bf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b083      	sub	sp, #12
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bfc:	bf00      	nop
 8009bfe:	370c      	adds	r7, #12
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b083      	sub	sp, #12
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a40      	ldr	r2, [pc, #256]	; (8009d44 <TIM_Base_SetConfig+0x114>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d013      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c4e:	d00f      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a3d      	ldr	r2, [pc, #244]	; (8009d48 <TIM_Base_SetConfig+0x118>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00b      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3c      	ldr	r2, [pc, #240]	; (8009d4c <TIM_Base_SetConfig+0x11c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d007      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3b      	ldr	r2, [pc, #236]	; (8009d50 <TIM_Base_SetConfig+0x120>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d003      	beq.n	8009c70 <TIM_Base_SetConfig+0x40>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a3a      	ldr	r2, [pc, #232]	; (8009d54 <TIM_Base_SetConfig+0x124>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d108      	bne.n	8009c82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4a2f      	ldr	r2, [pc, #188]	; (8009d44 <TIM_Base_SetConfig+0x114>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d02b      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c90:	d027      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a2c      	ldr	r2, [pc, #176]	; (8009d48 <TIM_Base_SetConfig+0x118>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d023      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2b      	ldr	r2, [pc, #172]	; (8009d4c <TIM_Base_SetConfig+0x11c>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d01f      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a2a      	ldr	r2, [pc, #168]	; (8009d50 <TIM_Base_SetConfig+0x120>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d01b      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a29      	ldr	r2, [pc, #164]	; (8009d54 <TIM_Base_SetConfig+0x124>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d017      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a28      	ldr	r2, [pc, #160]	; (8009d58 <TIM_Base_SetConfig+0x128>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d013      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a27      	ldr	r2, [pc, #156]	; (8009d5c <TIM_Base_SetConfig+0x12c>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d00f      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a26      	ldr	r2, [pc, #152]	; (8009d60 <TIM_Base_SetConfig+0x130>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d00b      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a25      	ldr	r2, [pc, #148]	; (8009d64 <TIM_Base_SetConfig+0x134>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d007      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a24      	ldr	r2, [pc, #144]	; (8009d68 <TIM_Base_SetConfig+0x138>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d003      	beq.n	8009ce2 <TIM_Base_SetConfig+0xb2>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a23      	ldr	r2, [pc, #140]	; (8009d6c <TIM_Base_SetConfig+0x13c>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d108      	bne.n	8009cf4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	695b      	ldr	r3, [r3, #20]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	689a      	ldr	r2, [r3, #8]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a0a      	ldr	r2, [pc, #40]	; (8009d44 <TIM_Base_SetConfig+0x114>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d003      	beq.n	8009d28 <TIM_Base_SetConfig+0xf8>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a0c      	ldr	r2, [pc, #48]	; (8009d54 <TIM_Base_SetConfig+0x124>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d103      	bne.n	8009d30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	691a      	ldr	r2, [r3, #16]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	615a      	str	r2, [r3, #20]
}
 8009d36:	bf00      	nop
 8009d38:	3714      	adds	r7, #20
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	40010000 	.word	0x40010000
 8009d48:	40000400 	.word	0x40000400
 8009d4c:	40000800 	.word	0x40000800
 8009d50:	40000c00 	.word	0x40000c00
 8009d54:	40010400 	.word	0x40010400
 8009d58:	40014000 	.word	0x40014000
 8009d5c:	40014400 	.word	0x40014400
 8009d60:	40014800 	.word	0x40014800
 8009d64:	40001800 	.word	0x40001800
 8009d68:	40001c00 	.word	0x40001c00
 8009d6c:	40002000 	.word	0x40002000

08009d70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d70:	b480      	push	{r7}
 8009d72:	b087      	sub	sp, #28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	f023 0201 	bic.w	r2, r3, #1
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6a1b      	ldr	r3, [r3, #32]
 8009d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	685b      	ldr	r3, [r3, #4]
 8009d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	699b      	ldr	r3, [r3, #24]
 8009d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4b2b      	ldr	r3, [pc, #172]	; (8009e48 <TIM_OC1_SetConfig+0xd8>)
 8009d9c:	4013      	ands	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f023 0302 	bic.w	r3, r3, #2
 8009db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	689b      	ldr	r3, [r3, #8]
 8009dbe:	697a      	ldr	r2, [r7, #20]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	4a21      	ldr	r2, [pc, #132]	; (8009e4c <TIM_OC1_SetConfig+0xdc>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d003      	beq.n	8009dd4 <TIM_OC1_SetConfig+0x64>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	4a20      	ldr	r2, [pc, #128]	; (8009e50 <TIM_OC1_SetConfig+0xe0>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d10c      	bne.n	8009dee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f023 0308 	bic.w	r3, r3, #8
 8009dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	697a      	ldr	r2, [r7, #20]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	f023 0304 	bic.w	r3, r3, #4
 8009dec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a16      	ldr	r2, [pc, #88]	; (8009e4c <TIM_OC1_SetConfig+0xdc>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <TIM_OC1_SetConfig+0x8e>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a15      	ldr	r2, [pc, #84]	; (8009e50 <TIM_OC1_SetConfig+0xe0>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d111      	bne.n	8009e22 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	693a      	ldr	r2, [r7, #16]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	621a      	str	r2, [r3, #32]
}
 8009e3c:	bf00      	nop
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	fffeff8f 	.word	0xfffeff8f
 8009e4c:	40010000 	.word	0x40010000
 8009e50:	40010400 	.word	0x40010400

08009e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f023 0210 	bic.w	r2, r3, #16
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4b2e      	ldr	r3, [pc, #184]	; (8009f38 <TIM_OC2_SetConfig+0xe4>)
 8009e80:	4013      	ands	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	021b      	lsls	r3, r3, #8
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	4313      	orrs	r3, r2
 8009e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009e98:	697b      	ldr	r3, [r7, #20]
 8009e9a:	f023 0320 	bic.w	r3, r3, #32
 8009e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	011b      	lsls	r3, r3, #4
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a23      	ldr	r2, [pc, #140]	; (8009f3c <TIM_OC2_SetConfig+0xe8>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d003      	beq.n	8009ebc <TIM_OC2_SetConfig+0x68>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a22      	ldr	r2, [pc, #136]	; (8009f40 <TIM_OC2_SetConfig+0xec>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d10d      	bne.n	8009ed8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	011b      	lsls	r3, r3, #4
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ed6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a18      	ldr	r2, [pc, #96]	; (8009f3c <TIM_OC2_SetConfig+0xe8>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d003      	beq.n	8009ee8 <TIM_OC2_SetConfig+0x94>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a17      	ldr	r2, [pc, #92]	; (8009f40 <TIM_OC2_SetConfig+0xec>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d113      	bne.n	8009f10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	695b      	ldr	r3, [r3, #20]
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4313      	orrs	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	685a      	ldr	r2, [r3, #4]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	697a      	ldr	r2, [r7, #20]
 8009f28:	621a      	str	r2, [r3, #32]
}
 8009f2a:	bf00      	nop
 8009f2c:	371c      	adds	r7, #28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	feff8fff 	.word	0xfeff8fff
 8009f3c:	40010000 	.word	0x40010000
 8009f40:	40010400 	.word	0x40010400

08009f44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a1b      	ldr	r3, [r3, #32]
 8009f52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6a1b      	ldr	r3, [r3, #32]
 8009f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	69db      	ldr	r3, [r3, #28]
 8009f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	4b2d      	ldr	r3, [pc, #180]	; (800a024 <TIM_OC3_SetConfig+0xe0>)
 8009f70:	4013      	ands	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0303 	bic.w	r3, r3, #3
 8009f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	021b      	lsls	r3, r3, #8
 8009f94:	697a      	ldr	r2, [r7, #20]
 8009f96:	4313      	orrs	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4a22      	ldr	r2, [pc, #136]	; (800a028 <TIM_OC3_SetConfig+0xe4>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d003      	beq.n	8009faa <TIM_OC3_SetConfig+0x66>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a21      	ldr	r2, [pc, #132]	; (800a02c <TIM_OC3_SetConfig+0xe8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d10d      	bne.n	8009fc6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a17      	ldr	r2, [pc, #92]	; (800a028 <TIM_OC3_SetConfig+0xe4>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d003      	beq.n	8009fd6 <TIM_OC3_SetConfig+0x92>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a16      	ldr	r2, [pc, #88]	; (800a02c <TIM_OC3_SetConfig+0xe8>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d113      	bne.n	8009ffe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	695b      	ldr	r3, [r3, #20]
 8009fea:	011b      	lsls	r3, r3, #4
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	621a      	str	r2, [r3, #32]
}
 800a018:	bf00      	nop
 800a01a:	371c      	adds	r7, #28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	fffeff8f 	.word	0xfffeff8f
 800a028:	40010000 	.word	0x40010000
 800a02c:	40010400 	.word	0x40010400

0800a030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a030:	b480      	push	{r7}
 800a032:	b087      	sub	sp, #28
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6a1b      	ldr	r3, [r3, #32]
 800a03e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	4b1e      	ldr	r3, [pc, #120]	; (800a0d4 <TIM_OC4_SetConfig+0xa4>)
 800a05c:	4013      	ands	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	021b      	lsls	r3, r3, #8
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	4313      	orrs	r3, r2
 800a072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a07a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	031b      	lsls	r3, r3, #12
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	4313      	orrs	r3, r2
 800a086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a13      	ldr	r2, [pc, #76]	; (800a0d8 <TIM_OC4_SetConfig+0xa8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d003      	beq.n	800a098 <TIM_OC4_SetConfig+0x68>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a12      	ldr	r2, [pc, #72]	; (800a0dc <TIM_OC4_SetConfig+0xac>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d109      	bne.n	800a0ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a09e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	019b      	lsls	r3, r3, #6
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	4313      	orrs	r3, r2
 800a0aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	697a      	ldr	r2, [r7, #20]
 800a0b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	693a      	ldr	r2, [r7, #16]
 800a0c4:	621a      	str	r2, [r3, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	371c      	adds	r7, #28
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	feff8fff 	.word	0xfeff8fff
 800a0d8:	40010000 	.word	0x40010000
 800a0dc:	40010400 	.word	0x40010400

0800a0e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b087      	sub	sp, #28
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a1b      	ldr	r3, [r3, #32]
 800a0ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	4b1b      	ldr	r3, [pc, #108]	; (800a178 <TIM_OC5_SetConfig+0x98>)
 800a10c:	4013      	ands	r3, r2
 800a10e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	4313      	orrs	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	041b      	lsls	r3, r3, #16
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a12      	ldr	r2, [pc, #72]	; (800a17c <TIM_OC5_SetConfig+0x9c>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d003      	beq.n	800a13e <TIM_OC5_SetConfig+0x5e>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a11      	ldr	r2, [pc, #68]	; (800a180 <TIM_OC5_SetConfig+0xa0>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d109      	bne.n	800a152 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a144:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	021b      	lsls	r3, r3, #8
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	4313      	orrs	r3, r2
 800a150:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	68fa      	ldr	r2, [r7, #12]
 800a15c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	685a      	ldr	r2, [r3, #4]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	621a      	str	r2, [r3, #32]
}
 800a16c:	bf00      	nop
 800a16e:	371c      	adds	r7, #28
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr
 800a178:	fffeff8f 	.word	0xfffeff8f
 800a17c:	40010000 	.word	0x40010000
 800a180:	40010400 	.word	0x40010400

0800a184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4b1c      	ldr	r3, [pc, #112]	; (800a220 <TIM_OC6_SetConfig+0x9c>)
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	021b      	lsls	r3, r3, #8
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a1c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	051b      	lsls	r3, r3, #20
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4a13      	ldr	r2, [pc, #76]	; (800a224 <TIM_OC6_SetConfig+0xa0>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d003      	beq.n	800a1e4 <TIM_OC6_SetConfig+0x60>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	4a12      	ldr	r2, [pc, #72]	; (800a228 <TIM_OC6_SetConfig+0xa4>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d109      	bne.n	800a1f8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	029b      	lsls	r3, r3, #10
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	685a      	ldr	r2, [r3, #4]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	693a      	ldr	r2, [r7, #16]
 800a210:	621a      	str	r2, [r3, #32]
}
 800a212:	bf00      	nop
 800a214:	371c      	adds	r7, #28
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	feff8fff 	.word	0xfeff8fff
 800a224:	40010000 	.word	0x40010000
 800a228:	40010400 	.word	0x40010400

0800a22c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b087      	sub	sp, #28
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6a1b      	ldr	r3, [r3, #32]
 800a242:	f023 0201 	bic.w	r2, r3, #1
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	699b      	ldr	r3, [r3, #24]
 800a24e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	693a      	ldr	r2, [r7, #16]
 800a25e:	4313      	orrs	r3, r2
 800a260:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f023 030a 	bic.w	r3, r3, #10
 800a268:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a26a:	697a      	ldr	r2, [r7, #20]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	4313      	orrs	r3, r2
 800a270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	697a      	ldr	r2, [r7, #20]
 800a27c:	621a      	str	r2, [r3, #32]
}
 800a27e:	bf00      	nop
 800a280:	371c      	adds	r7, #28
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b087      	sub	sp, #28
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	60b9      	str	r1, [r7, #8]
 800a294:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	f023 0210 	bic.w	r2, r3, #16
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a2b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	031b      	lsls	r3, r3, #12
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a2c0:	693b      	ldr	r3, [r7, #16]
 800a2c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a2c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	011b      	lsls	r3, r3, #4
 800a2cc:	693a      	ldr	r2, [r7, #16]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	693a      	ldr	r2, [r7, #16]
 800a2dc:	621a      	str	r2, [r3, #32]
}
 800a2de:	bf00      	nop
 800a2e0:	371c      	adds	r7, #28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b085      	sub	sp, #20
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a302:	683a      	ldr	r2, [r7, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4313      	orrs	r3, r2
 800a308:	f043 0307 	orr.w	r3, r3, #7
 800a30c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68fa      	ldr	r2, [r7, #12]
 800a312:	609a      	str	r2, [r3, #8]
}
 800a314:	bf00      	nop
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a320:	b480      	push	{r7}
 800a322:	b087      	sub	sp, #28
 800a324:	af00      	add	r7, sp, #0
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
 800a32c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	689b      	ldr	r3, [r3, #8]
 800a332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a33a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	021a      	lsls	r2, r3, #8
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	431a      	orrs	r2, r3
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	4313      	orrs	r3, r2
 800a348:	697a      	ldr	r2, [r7, #20]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	697a      	ldr	r2, [r7, #20]
 800a352:	609a      	str	r2, [r3, #8]
}
 800a354:	bf00      	nop
 800a356:	371c      	adds	r7, #28
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	f003 031f 	and.w	r3, r3, #31
 800a372:	2201      	movs	r2, #1
 800a374:	fa02 f303 	lsl.w	r3, r2, r3
 800a378:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a1a      	ldr	r2, [r3, #32]
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	43db      	mvns	r3, r3
 800a382:	401a      	ands	r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6a1a      	ldr	r2, [r3, #32]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	f003 031f 	and.w	r3, r3, #31
 800a392:	6879      	ldr	r1, [r7, #4]
 800a394:	fa01 f303 	lsl.w	r3, r1, r3
 800a398:	431a      	orrs	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	621a      	str	r2, [r3, #32]
}
 800a39e:	bf00      	nop
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
	...

0800a3ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b085      	sub	sp, #20
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d101      	bne.n	800a3c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	e06d      	b.n	800a4a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	685b      	ldr	r3, [r3, #4]
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a30      	ldr	r2, [pc, #192]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d004      	beq.n	800a3f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a2f      	ldr	r2, [pc, #188]	; (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d108      	bne.n	800a40a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a3fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	68fa      	ldr	r2, [r7, #12]
 800a406:	4313      	orrs	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a410:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	4313      	orrs	r3, r2
 800a41a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68fa      	ldr	r2, [r7, #12]
 800a422:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a20      	ldr	r2, [pc, #128]	; (800a4ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d022      	beq.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a436:	d01d      	beq.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a1d      	ldr	r2, [pc, #116]	; (800a4b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d018      	beq.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a1c      	ldr	r2, [pc, #112]	; (800a4b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d013      	beq.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a1a      	ldr	r2, [pc, #104]	; (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d00e      	beq.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a15      	ldr	r2, [pc, #84]	; (800a4b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d009      	beq.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a16      	ldr	r2, [pc, #88]	; (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d004      	beq.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a15      	ldr	r2, [pc, #84]	; (800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d10c      	bne.n	800a48e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a47a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	68ba      	ldr	r2, [r7, #8]
 800a482:	4313      	orrs	r3, r2
 800a484:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a49e:	2300      	movs	r3, #0
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr
 800a4ac:	40010000 	.word	0x40010000
 800a4b0:	40010400 	.word	0x40010400
 800a4b4:	40000400 	.word	0x40000400
 800a4b8:	40000800 	.word	0x40000800
 800a4bc:	40000c00 	.word	0x40000c00
 800a4c0:	40014000 	.word	0x40014000
 800a4c4:	40001800 	.word	0x40001800

0800a4c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d101      	bne.n	800a4e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	e065      	b.n	800a5b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	689b      	ldr	r3, [r3, #8]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	4313      	orrs	r3, r2
 800a514:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4313      	orrs	r3, r2
 800a522:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	041b      	lsls	r3, r3, #16
 800a55a:	4313      	orrs	r3, r2
 800a55c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a16      	ldr	r2, [pc, #88]	; (800a5bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d004      	beq.n	800a572 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a14      	ldr	r2, [pc, #80]	; (800a5c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d115      	bne.n	800a59e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a57c:	051b      	lsls	r3, r3, #20
 800a57e:	4313      	orrs	r3, r2
 800a580:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	69db      	ldr	r3, [r3, #28]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	4313      	orrs	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40010400 	.word	0x40010400

0800a5c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a5e0:	bf00      	nop
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e040      	b.n	800a694 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a616:	2b00      	cmp	r3, #0
 800a618:	d106      	bne.n	800a628 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2200      	movs	r2, #0
 800a61e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7fa f828 	bl	8004678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2224      	movs	r2, #36	; 0x24
 800a62c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f022 0201 	bic.w	r2, r2, #1
 800a63c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f8b0 	bl	800a7a4 <UART_SetConfig>
 800a644:	4603      	mov	r3, r0
 800a646:	2b01      	cmp	r3, #1
 800a648:	d101      	bne.n	800a64e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e022      	b.n	800a694 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a652:	2b00      	cmp	r3, #0
 800a654:	d002      	beq.n	800a65c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb08 	bl	800ac6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a66a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	689a      	ldr	r2, [r3, #8]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a67a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	681a      	ldr	r2, [r3, #0]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fb8f 	bl	800adb0 <UART_CheckIdleState>
 800a692:	4603      	mov	r3, r0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b08a      	sub	sp, #40	; 0x28
 800a6a0:	af02      	add	r7, sp, #8
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	603b      	str	r3, [r7, #0]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6b0:	2b20      	cmp	r3, #32
 800a6b2:	d171      	bne.n	800a798 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <HAL_UART_Transmit+0x24>
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e06a      	b.n	800a79a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2221      	movs	r2, #33	; 0x21
 800a6d0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6d2:	f7fa fee1 	bl	8005498 <HAL_GetTick>
 800a6d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	88fa      	ldrh	r2, [r7, #6]
 800a6dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	88fa      	ldrh	r2, [r7, #6]
 800a6e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	689b      	ldr	r3, [r3, #8]
 800a6ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6f0:	d108      	bne.n	800a704 <HAL_UART_Transmit+0x68>
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d104      	bne.n	800a704 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	61bb      	str	r3, [r7, #24]
 800a702:	e003      	b.n	800a70c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a708:	2300      	movs	r3, #0
 800a70a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a70c:	e02c      	b.n	800a768 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2200      	movs	r2, #0
 800a716:	2180      	movs	r1, #128	; 0x80
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 fb96 	bl	800ae4a <UART_WaitOnFlagUntilTimeout>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e038      	b.n	800a79a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10b      	bne.n	800a746 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a73c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	3302      	adds	r3, #2
 800a742:	61bb      	str	r3, [r7, #24]
 800a744:	e007      	b.n	800a756 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	781a      	ldrb	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	3301      	adds	r3, #1
 800a754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	3b01      	subs	r3, #1
 800a760:	b29a      	uxth	r2, r3
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a76e:	b29b      	uxth	r3, r3
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1cc      	bne.n	800a70e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	9300      	str	r3, [sp, #0]
 800a778:	697b      	ldr	r3, [r7, #20]
 800a77a:	2200      	movs	r2, #0
 800a77c:	2140      	movs	r1, #64	; 0x40
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fb63 	bl	800ae4a <UART_WaitOnFlagUntilTimeout>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e005      	b.n	800a79a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2220      	movs	r2, #32
 800a792:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	e000      	b.n	800a79a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a798:	2302      	movs	r3, #2
  }
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3720      	adds	r7, #32
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689a      	ldr	r2, [r3, #8]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	431a      	orrs	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	695b      	ldr	r3, [r3, #20]
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	69db      	ldr	r3, [r3, #28]
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	4ba6      	ldr	r3, [pc, #664]	; (800aa68 <UART_SetConfig+0x2c4>)
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	6812      	ldr	r2, [r2, #0]
 800a7d6:	6979      	ldr	r1, [r7, #20]
 800a7d8:	430b      	orrs	r3, r1
 800a7da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685b      	ldr	r3, [r3, #4]
 800a7e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68da      	ldr	r2, [r3, #12]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	699b      	ldr	r3, [r3, #24]
 800a7f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	697a      	ldr	r2, [r7, #20]
 800a812:	430a      	orrs	r2, r1
 800a814:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4a94      	ldr	r2, [pc, #592]	; (800aa6c <UART_SetConfig+0x2c8>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d120      	bne.n	800a862 <UART_SetConfig+0xbe>
 800a820:	4b93      	ldr	r3, [pc, #588]	; (800aa70 <UART_SetConfig+0x2cc>)
 800a822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a826:	f003 0303 	and.w	r3, r3, #3
 800a82a:	2b03      	cmp	r3, #3
 800a82c:	d816      	bhi.n	800a85c <UART_SetConfig+0xb8>
 800a82e:	a201      	add	r2, pc, #4	; (adr r2, 800a834 <UART_SetConfig+0x90>)
 800a830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a834:	0800a845 	.word	0x0800a845
 800a838:	0800a851 	.word	0x0800a851
 800a83c:	0800a84b 	.word	0x0800a84b
 800a840:	0800a857 	.word	0x0800a857
 800a844:	2301      	movs	r3, #1
 800a846:	77fb      	strb	r3, [r7, #31]
 800a848:	e150      	b.n	800aaec <UART_SetConfig+0x348>
 800a84a:	2302      	movs	r3, #2
 800a84c:	77fb      	strb	r3, [r7, #31]
 800a84e:	e14d      	b.n	800aaec <UART_SetConfig+0x348>
 800a850:	2304      	movs	r3, #4
 800a852:	77fb      	strb	r3, [r7, #31]
 800a854:	e14a      	b.n	800aaec <UART_SetConfig+0x348>
 800a856:	2308      	movs	r3, #8
 800a858:	77fb      	strb	r3, [r7, #31]
 800a85a:	e147      	b.n	800aaec <UART_SetConfig+0x348>
 800a85c:	2310      	movs	r3, #16
 800a85e:	77fb      	strb	r3, [r7, #31]
 800a860:	e144      	b.n	800aaec <UART_SetConfig+0x348>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a83      	ldr	r2, [pc, #524]	; (800aa74 <UART_SetConfig+0x2d0>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d132      	bne.n	800a8d2 <UART_SetConfig+0x12e>
 800a86c:	4b80      	ldr	r3, [pc, #512]	; (800aa70 <UART_SetConfig+0x2cc>)
 800a86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a872:	f003 030c 	and.w	r3, r3, #12
 800a876:	2b0c      	cmp	r3, #12
 800a878:	d828      	bhi.n	800a8cc <UART_SetConfig+0x128>
 800a87a:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <UART_SetConfig+0xdc>)
 800a87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a880:	0800a8b5 	.word	0x0800a8b5
 800a884:	0800a8cd 	.word	0x0800a8cd
 800a888:	0800a8cd 	.word	0x0800a8cd
 800a88c:	0800a8cd 	.word	0x0800a8cd
 800a890:	0800a8c1 	.word	0x0800a8c1
 800a894:	0800a8cd 	.word	0x0800a8cd
 800a898:	0800a8cd 	.word	0x0800a8cd
 800a89c:	0800a8cd 	.word	0x0800a8cd
 800a8a0:	0800a8bb 	.word	0x0800a8bb
 800a8a4:	0800a8cd 	.word	0x0800a8cd
 800a8a8:	0800a8cd 	.word	0x0800a8cd
 800a8ac:	0800a8cd 	.word	0x0800a8cd
 800a8b0:	0800a8c7 	.word	0x0800a8c7
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	77fb      	strb	r3, [r7, #31]
 800a8b8:	e118      	b.n	800aaec <UART_SetConfig+0x348>
 800a8ba:	2302      	movs	r3, #2
 800a8bc:	77fb      	strb	r3, [r7, #31]
 800a8be:	e115      	b.n	800aaec <UART_SetConfig+0x348>
 800a8c0:	2304      	movs	r3, #4
 800a8c2:	77fb      	strb	r3, [r7, #31]
 800a8c4:	e112      	b.n	800aaec <UART_SetConfig+0x348>
 800a8c6:	2308      	movs	r3, #8
 800a8c8:	77fb      	strb	r3, [r7, #31]
 800a8ca:	e10f      	b.n	800aaec <UART_SetConfig+0x348>
 800a8cc:	2310      	movs	r3, #16
 800a8ce:	77fb      	strb	r3, [r7, #31]
 800a8d0:	e10c      	b.n	800aaec <UART_SetConfig+0x348>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a68      	ldr	r2, [pc, #416]	; (800aa78 <UART_SetConfig+0x2d4>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d120      	bne.n	800a91e <UART_SetConfig+0x17a>
 800a8dc:	4b64      	ldr	r3, [pc, #400]	; (800aa70 <UART_SetConfig+0x2cc>)
 800a8de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a8e6:	2b30      	cmp	r3, #48	; 0x30
 800a8e8:	d013      	beq.n	800a912 <UART_SetConfig+0x16e>
 800a8ea:	2b30      	cmp	r3, #48	; 0x30
 800a8ec:	d814      	bhi.n	800a918 <UART_SetConfig+0x174>
 800a8ee:	2b20      	cmp	r3, #32
 800a8f0:	d009      	beq.n	800a906 <UART_SetConfig+0x162>
 800a8f2:	2b20      	cmp	r3, #32
 800a8f4:	d810      	bhi.n	800a918 <UART_SetConfig+0x174>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d002      	beq.n	800a900 <UART_SetConfig+0x15c>
 800a8fa:	2b10      	cmp	r3, #16
 800a8fc:	d006      	beq.n	800a90c <UART_SetConfig+0x168>
 800a8fe:	e00b      	b.n	800a918 <UART_SetConfig+0x174>
 800a900:	2300      	movs	r3, #0
 800a902:	77fb      	strb	r3, [r7, #31]
 800a904:	e0f2      	b.n	800aaec <UART_SetConfig+0x348>
 800a906:	2302      	movs	r3, #2
 800a908:	77fb      	strb	r3, [r7, #31]
 800a90a:	e0ef      	b.n	800aaec <UART_SetConfig+0x348>
 800a90c:	2304      	movs	r3, #4
 800a90e:	77fb      	strb	r3, [r7, #31]
 800a910:	e0ec      	b.n	800aaec <UART_SetConfig+0x348>
 800a912:	2308      	movs	r3, #8
 800a914:	77fb      	strb	r3, [r7, #31]
 800a916:	e0e9      	b.n	800aaec <UART_SetConfig+0x348>
 800a918:	2310      	movs	r3, #16
 800a91a:	77fb      	strb	r3, [r7, #31]
 800a91c:	e0e6      	b.n	800aaec <UART_SetConfig+0x348>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a56      	ldr	r2, [pc, #344]	; (800aa7c <UART_SetConfig+0x2d8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d120      	bne.n	800a96a <UART_SetConfig+0x1c6>
 800a928:	4b51      	ldr	r3, [pc, #324]	; (800aa70 <UART_SetConfig+0x2cc>)
 800a92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a92e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a932:	2bc0      	cmp	r3, #192	; 0xc0
 800a934:	d013      	beq.n	800a95e <UART_SetConfig+0x1ba>
 800a936:	2bc0      	cmp	r3, #192	; 0xc0
 800a938:	d814      	bhi.n	800a964 <UART_SetConfig+0x1c0>
 800a93a:	2b80      	cmp	r3, #128	; 0x80
 800a93c:	d009      	beq.n	800a952 <UART_SetConfig+0x1ae>
 800a93e:	2b80      	cmp	r3, #128	; 0x80
 800a940:	d810      	bhi.n	800a964 <UART_SetConfig+0x1c0>
 800a942:	2b00      	cmp	r3, #0
 800a944:	d002      	beq.n	800a94c <UART_SetConfig+0x1a8>
 800a946:	2b40      	cmp	r3, #64	; 0x40
 800a948:	d006      	beq.n	800a958 <UART_SetConfig+0x1b4>
 800a94a:	e00b      	b.n	800a964 <UART_SetConfig+0x1c0>
 800a94c:	2300      	movs	r3, #0
 800a94e:	77fb      	strb	r3, [r7, #31]
 800a950:	e0cc      	b.n	800aaec <UART_SetConfig+0x348>
 800a952:	2302      	movs	r3, #2
 800a954:	77fb      	strb	r3, [r7, #31]
 800a956:	e0c9      	b.n	800aaec <UART_SetConfig+0x348>
 800a958:	2304      	movs	r3, #4
 800a95a:	77fb      	strb	r3, [r7, #31]
 800a95c:	e0c6      	b.n	800aaec <UART_SetConfig+0x348>
 800a95e:	2308      	movs	r3, #8
 800a960:	77fb      	strb	r3, [r7, #31]
 800a962:	e0c3      	b.n	800aaec <UART_SetConfig+0x348>
 800a964:	2310      	movs	r3, #16
 800a966:	77fb      	strb	r3, [r7, #31]
 800a968:	e0c0      	b.n	800aaec <UART_SetConfig+0x348>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a44      	ldr	r2, [pc, #272]	; (800aa80 <UART_SetConfig+0x2dc>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d125      	bne.n	800a9c0 <UART_SetConfig+0x21c>
 800a974:	4b3e      	ldr	r3, [pc, #248]	; (800aa70 <UART_SetConfig+0x2cc>)
 800a976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a97a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a97e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a982:	d017      	beq.n	800a9b4 <UART_SetConfig+0x210>
 800a984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a988:	d817      	bhi.n	800a9ba <UART_SetConfig+0x216>
 800a98a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a98e:	d00b      	beq.n	800a9a8 <UART_SetConfig+0x204>
 800a990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a994:	d811      	bhi.n	800a9ba <UART_SetConfig+0x216>
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <UART_SetConfig+0x1fe>
 800a99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a99e:	d006      	beq.n	800a9ae <UART_SetConfig+0x20a>
 800a9a0:	e00b      	b.n	800a9ba <UART_SetConfig+0x216>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	77fb      	strb	r3, [r7, #31]
 800a9a6:	e0a1      	b.n	800aaec <UART_SetConfig+0x348>
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	77fb      	strb	r3, [r7, #31]
 800a9ac:	e09e      	b.n	800aaec <UART_SetConfig+0x348>
 800a9ae:	2304      	movs	r3, #4
 800a9b0:	77fb      	strb	r3, [r7, #31]
 800a9b2:	e09b      	b.n	800aaec <UART_SetConfig+0x348>
 800a9b4:	2308      	movs	r3, #8
 800a9b6:	77fb      	strb	r3, [r7, #31]
 800a9b8:	e098      	b.n	800aaec <UART_SetConfig+0x348>
 800a9ba:	2310      	movs	r3, #16
 800a9bc:	77fb      	strb	r3, [r7, #31]
 800a9be:	e095      	b.n	800aaec <UART_SetConfig+0x348>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a2f      	ldr	r2, [pc, #188]	; (800aa84 <UART_SetConfig+0x2e0>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d125      	bne.n	800aa16 <UART_SetConfig+0x272>
 800a9ca:	4b29      	ldr	r3, [pc, #164]	; (800aa70 <UART_SetConfig+0x2cc>)
 800a9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a9d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9d8:	d017      	beq.n	800aa0a <UART_SetConfig+0x266>
 800a9da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9de:	d817      	bhi.n	800aa10 <UART_SetConfig+0x26c>
 800a9e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9e4:	d00b      	beq.n	800a9fe <UART_SetConfig+0x25a>
 800a9e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9ea:	d811      	bhi.n	800aa10 <UART_SetConfig+0x26c>
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d003      	beq.n	800a9f8 <UART_SetConfig+0x254>
 800a9f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9f4:	d006      	beq.n	800aa04 <UART_SetConfig+0x260>
 800a9f6:	e00b      	b.n	800aa10 <UART_SetConfig+0x26c>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	e076      	b.n	800aaec <UART_SetConfig+0x348>
 800a9fe:	2302      	movs	r3, #2
 800aa00:	77fb      	strb	r3, [r7, #31]
 800aa02:	e073      	b.n	800aaec <UART_SetConfig+0x348>
 800aa04:	2304      	movs	r3, #4
 800aa06:	77fb      	strb	r3, [r7, #31]
 800aa08:	e070      	b.n	800aaec <UART_SetConfig+0x348>
 800aa0a:	2308      	movs	r3, #8
 800aa0c:	77fb      	strb	r3, [r7, #31]
 800aa0e:	e06d      	b.n	800aaec <UART_SetConfig+0x348>
 800aa10:	2310      	movs	r3, #16
 800aa12:	77fb      	strb	r3, [r7, #31]
 800aa14:	e06a      	b.n	800aaec <UART_SetConfig+0x348>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a1b      	ldr	r2, [pc, #108]	; (800aa88 <UART_SetConfig+0x2e4>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d138      	bne.n	800aa92 <UART_SetConfig+0x2ee>
 800aa20:	4b13      	ldr	r3, [pc, #76]	; (800aa70 <UART_SetConfig+0x2cc>)
 800aa22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aa2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa2e:	d017      	beq.n	800aa60 <UART_SetConfig+0x2bc>
 800aa30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aa34:	d82a      	bhi.n	800aa8c <UART_SetConfig+0x2e8>
 800aa36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa3a:	d00b      	beq.n	800aa54 <UART_SetConfig+0x2b0>
 800aa3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa40:	d824      	bhi.n	800aa8c <UART_SetConfig+0x2e8>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d003      	beq.n	800aa4e <UART_SetConfig+0x2aa>
 800aa46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa4a:	d006      	beq.n	800aa5a <UART_SetConfig+0x2b6>
 800aa4c:	e01e      	b.n	800aa8c <UART_SetConfig+0x2e8>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	77fb      	strb	r3, [r7, #31]
 800aa52:	e04b      	b.n	800aaec <UART_SetConfig+0x348>
 800aa54:	2302      	movs	r3, #2
 800aa56:	77fb      	strb	r3, [r7, #31]
 800aa58:	e048      	b.n	800aaec <UART_SetConfig+0x348>
 800aa5a:	2304      	movs	r3, #4
 800aa5c:	77fb      	strb	r3, [r7, #31]
 800aa5e:	e045      	b.n	800aaec <UART_SetConfig+0x348>
 800aa60:	2308      	movs	r3, #8
 800aa62:	77fb      	strb	r3, [r7, #31]
 800aa64:	e042      	b.n	800aaec <UART_SetConfig+0x348>
 800aa66:	bf00      	nop
 800aa68:	efff69f3 	.word	0xefff69f3
 800aa6c:	40011000 	.word	0x40011000
 800aa70:	40023800 	.word	0x40023800
 800aa74:	40004400 	.word	0x40004400
 800aa78:	40004800 	.word	0x40004800
 800aa7c:	40004c00 	.word	0x40004c00
 800aa80:	40005000 	.word	0x40005000
 800aa84:	40011400 	.word	0x40011400
 800aa88:	40007800 	.word	0x40007800
 800aa8c:	2310      	movs	r3, #16
 800aa8e:	77fb      	strb	r3, [r7, #31]
 800aa90:	e02c      	b.n	800aaec <UART_SetConfig+0x348>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a72      	ldr	r2, [pc, #456]	; (800ac60 <UART_SetConfig+0x4bc>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d125      	bne.n	800aae8 <UART_SetConfig+0x344>
 800aa9c:	4b71      	ldr	r3, [pc, #452]	; (800ac64 <UART_SetConfig+0x4c0>)
 800aa9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aaa6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aaaa:	d017      	beq.n	800aadc <UART_SetConfig+0x338>
 800aaac:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aab0:	d817      	bhi.n	800aae2 <UART_SetConfig+0x33e>
 800aab2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aab6:	d00b      	beq.n	800aad0 <UART_SetConfig+0x32c>
 800aab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aabc:	d811      	bhi.n	800aae2 <UART_SetConfig+0x33e>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <UART_SetConfig+0x326>
 800aac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aac6:	d006      	beq.n	800aad6 <UART_SetConfig+0x332>
 800aac8:	e00b      	b.n	800aae2 <UART_SetConfig+0x33e>
 800aaca:	2300      	movs	r3, #0
 800aacc:	77fb      	strb	r3, [r7, #31]
 800aace:	e00d      	b.n	800aaec <UART_SetConfig+0x348>
 800aad0:	2302      	movs	r3, #2
 800aad2:	77fb      	strb	r3, [r7, #31]
 800aad4:	e00a      	b.n	800aaec <UART_SetConfig+0x348>
 800aad6:	2304      	movs	r3, #4
 800aad8:	77fb      	strb	r3, [r7, #31]
 800aada:	e007      	b.n	800aaec <UART_SetConfig+0x348>
 800aadc:	2308      	movs	r3, #8
 800aade:	77fb      	strb	r3, [r7, #31]
 800aae0:	e004      	b.n	800aaec <UART_SetConfig+0x348>
 800aae2:	2310      	movs	r3, #16
 800aae4:	77fb      	strb	r3, [r7, #31]
 800aae6:	e001      	b.n	800aaec <UART_SetConfig+0x348>
 800aae8:	2310      	movs	r3, #16
 800aaea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aaf4:	d15b      	bne.n	800abae <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800aaf6:	7ffb      	ldrb	r3, [r7, #31]
 800aaf8:	2b08      	cmp	r3, #8
 800aafa:	d828      	bhi.n	800ab4e <UART_SetConfig+0x3aa>
 800aafc:	a201      	add	r2, pc, #4	; (adr r2, 800ab04 <UART_SetConfig+0x360>)
 800aafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab02:	bf00      	nop
 800ab04:	0800ab29 	.word	0x0800ab29
 800ab08:	0800ab31 	.word	0x0800ab31
 800ab0c:	0800ab39 	.word	0x0800ab39
 800ab10:	0800ab4f 	.word	0x0800ab4f
 800ab14:	0800ab3f 	.word	0x0800ab3f
 800ab18:	0800ab4f 	.word	0x0800ab4f
 800ab1c:	0800ab4f 	.word	0x0800ab4f
 800ab20:	0800ab4f 	.word	0x0800ab4f
 800ab24:	0800ab47 	.word	0x0800ab47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab28:	f7fd fa2a 	bl	8007f80 <HAL_RCC_GetPCLK1Freq>
 800ab2c:	61b8      	str	r0, [r7, #24]
        break;
 800ab2e:	e013      	b.n	800ab58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab30:	f7fd fa3a 	bl	8007fa8 <HAL_RCC_GetPCLK2Freq>
 800ab34:	61b8      	str	r0, [r7, #24]
        break;
 800ab36:	e00f      	b.n	800ab58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab38:	4b4b      	ldr	r3, [pc, #300]	; (800ac68 <UART_SetConfig+0x4c4>)
 800ab3a:	61bb      	str	r3, [r7, #24]
        break;
 800ab3c:	e00c      	b.n	800ab58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab3e:	f7fd f90d 	bl	8007d5c <HAL_RCC_GetSysClockFreq>
 800ab42:	61b8      	str	r0, [r7, #24]
        break;
 800ab44:	e008      	b.n	800ab58 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab4a:	61bb      	str	r3, [r7, #24]
        break;
 800ab4c:	e004      	b.n	800ab58 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	77bb      	strb	r3, [r7, #30]
        break;
 800ab56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d074      	beq.n	800ac48 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ab5e:	69bb      	ldr	r3, [r7, #24]
 800ab60:	005a      	lsls	r2, r3, #1
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	085b      	lsrs	r3, r3, #1
 800ab68:	441a      	add	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	2b0f      	cmp	r3, #15
 800ab78:	d916      	bls.n	800aba8 <UART_SetConfig+0x404>
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab80:	d212      	bcs.n	800aba8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	f023 030f 	bic.w	r3, r3, #15
 800ab8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	085b      	lsrs	r3, r3, #1
 800ab90:	b29b      	uxth	r3, r3
 800ab92:	f003 0307 	and.w	r3, r3, #7
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	89fb      	ldrh	r3, [r7, #14]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	89fa      	ldrh	r2, [r7, #14]
 800aba4:	60da      	str	r2, [r3, #12]
 800aba6:	e04f      	b.n	800ac48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	77bb      	strb	r3, [r7, #30]
 800abac:	e04c      	b.n	800ac48 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800abae:	7ffb      	ldrb	r3, [r7, #31]
 800abb0:	2b08      	cmp	r3, #8
 800abb2:	d828      	bhi.n	800ac06 <UART_SetConfig+0x462>
 800abb4:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <UART_SetConfig+0x418>)
 800abb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abba:	bf00      	nop
 800abbc:	0800abe1 	.word	0x0800abe1
 800abc0:	0800abe9 	.word	0x0800abe9
 800abc4:	0800abf1 	.word	0x0800abf1
 800abc8:	0800ac07 	.word	0x0800ac07
 800abcc:	0800abf7 	.word	0x0800abf7
 800abd0:	0800ac07 	.word	0x0800ac07
 800abd4:	0800ac07 	.word	0x0800ac07
 800abd8:	0800ac07 	.word	0x0800ac07
 800abdc:	0800abff 	.word	0x0800abff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800abe0:	f7fd f9ce 	bl	8007f80 <HAL_RCC_GetPCLK1Freq>
 800abe4:	61b8      	str	r0, [r7, #24]
        break;
 800abe6:	e013      	b.n	800ac10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abe8:	f7fd f9de 	bl	8007fa8 <HAL_RCC_GetPCLK2Freq>
 800abec:	61b8      	str	r0, [r7, #24]
        break;
 800abee:	e00f      	b.n	800ac10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abf0:	4b1d      	ldr	r3, [pc, #116]	; (800ac68 <UART_SetConfig+0x4c4>)
 800abf2:	61bb      	str	r3, [r7, #24]
        break;
 800abf4:	e00c      	b.n	800ac10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abf6:	f7fd f8b1 	bl	8007d5c <HAL_RCC_GetSysClockFreq>
 800abfa:	61b8      	str	r0, [r7, #24]
        break;
 800abfc:	e008      	b.n	800ac10 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac02:	61bb      	str	r3, [r7, #24]
        break;
 800ac04:	e004      	b.n	800ac10 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ac06:	2300      	movs	r3, #0
 800ac08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	77bb      	strb	r3, [r7, #30]
        break;
 800ac0e:	bf00      	nop
    }

    if (pclk != 0U)
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d018      	beq.n	800ac48 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	085a      	lsrs	r2, r3, #1
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	441a      	add	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac2a:	693b      	ldr	r3, [r7, #16]
 800ac2c:	2b0f      	cmp	r3, #15
 800ac2e:	d909      	bls.n	800ac44 <UART_SetConfig+0x4a0>
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac36:	d205      	bcs.n	800ac44 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	60da      	str	r2, [r3, #12]
 800ac42:	e001      	b.n	800ac48 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800ac54:	7fbb      	ldrb	r3, [r7, #30]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3720      	adds	r7, #32
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	40007c00 	.word	0x40007c00
 800ac64:	40023800 	.word	0x40023800
 800ac68:	00f42400 	.word	0x00f42400

0800ac6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	430a      	orrs	r2, r1
 800ac94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9a:	f003 0302 	and.w	r3, r3, #2
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00a      	beq.n	800acb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	430a      	orrs	r2, r1
 800acb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acbc:	f003 0304 	and.w	r3, r3, #4
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	685b      	ldr	r3, [r3, #4]
 800acca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	430a      	orrs	r2, r1
 800acd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	f003 0308 	and.w	r3, r3, #8
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d00a      	beq.n	800acfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	685b      	ldr	r3, [r3, #4]
 800acec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad00:	f003 0310 	and.w	r3, r3, #16
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00a      	beq.n	800ad1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	689b      	ldr	r3, [r3, #8]
 800ad0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	430a      	orrs	r2, r1
 800ad1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	f003 0320 	and.w	r3, r3, #32
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d00a      	beq.n	800ad40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d01a      	beq.n	800ad82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	430a      	orrs	r2, r1
 800ad60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad6a:	d10a      	bne.n	800ad82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	430a      	orrs	r2, r1
 800ad80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00a      	beq.n	800ada4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	430a      	orrs	r2, r1
 800ada2:	605a      	str	r2, [r3, #4]
  }
}
 800ada4:	bf00      	nop
 800ada6:	370c      	adds	r7, #12
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af02      	add	r7, sp, #8
 800adb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2200      	movs	r2, #0
 800adbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800adc0:	f7fa fb6a 	bl	8005498 <HAL_GetTick>
 800adc4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f003 0308 	and.w	r3, r3, #8
 800add0:	2b08      	cmp	r3, #8
 800add2:	d10e      	bne.n	800adf2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800add4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2200      	movs	r2, #0
 800adde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f831 	bl	800ae4a <UART_WaitOnFlagUntilTimeout>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	d001      	beq.n	800adf2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adee:	2303      	movs	r3, #3
 800adf0:	e027      	b.n	800ae42 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f003 0304 	and.w	r3, r3, #4
 800adfc:	2b04      	cmp	r3, #4
 800adfe:	d10e      	bne.n	800ae1e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae04:	9300      	str	r3, [sp, #0]
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f81b 	bl	800ae4a <UART_WaitOnFlagUntilTimeout>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e011      	b.n	800ae42 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2220      	movs	r2, #32
 800ae22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2220      	movs	r2, #32
 800ae28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b09c      	sub	sp, #112	; 0x70
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	60f8      	str	r0, [r7, #12]
 800ae52:	60b9      	str	r1, [r7, #8]
 800ae54:	603b      	str	r3, [r7, #0]
 800ae56:	4613      	mov	r3, r2
 800ae58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae5a:	e0a7      	b.n	800afac <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae62:	f000 80a3 	beq.w	800afac <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae66:	f7fa fb17 	bl	8005498 <HAL_GetTick>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d302      	bcc.n	800ae7c <UART_WaitOnFlagUntilTimeout+0x32>
 800ae76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d13f      	bne.n	800aefc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae84:	e853 3f00 	ldrex	r3, [r3]
 800ae88:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae8c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae90:	667b      	str	r3, [r7, #100]	; 0x64
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae9c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aea0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aea2:	e841 2300 	strex	r3, r2, [r1]
 800aea6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e6      	bne.n	800ae7c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	3308      	adds	r3, #8
 800aeb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb8:	e853 3f00 	ldrex	r3, [r3]
 800aebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	f023 0301 	bic.w	r3, r3, #1
 800aec4:	663b      	str	r3, [r7, #96]	; 0x60
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3308      	adds	r3, #8
 800aecc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aece:	64ba      	str	r2, [r7, #72]	; 0x48
 800aed0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aed4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aed6:	e841 2300 	strex	r3, r2, [r1]
 800aeda:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aedc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1e5      	bne.n	800aeae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	2220      	movs	r2, #32
 800aee6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2220      	movs	r2, #32
 800aeec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2200      	movs	r2, #0
 800aef4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e068      	b.n	800afce <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 0304 	and.w	r3, r3, #4
 800af06:	2b00      	cmp	r3, #0
 800af08:	d050      	beq.n	800afac <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	69db      	ldr	r3, [r3, #28]
 800af10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af18:	d148      	bne.n	800afac <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af22:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af2c:	e853 3f00 	ldrex	r3, [r3]
 800af30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af38:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	461a      	mov	r2, r3
 800af40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af42:	637b      	str	r3, [r7, #52]	; 0x34
 800af44:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af4a:	e841 2300 	strex	r3, r2, [r1]
 800af4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af52:	2b00      	cmp	r3, #0
 800af54:	d1e6      	bne.n	800af24 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	3308      	adds	r3, #8
 800af5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	e853 3f00 	ldrex	r3, [r3]
 800af64:	613b      	str	r3, [r7, #16]
   return(result);
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	f023 0301 	bic.w	r3, r3, #1
 800af6c:	66bb      	str	r3, [r7, #104]	; 0x68
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3308      	adds	r3, #8
 800af74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af76:	623a      	str	r2, [r7, #32]
 800af78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af7a:	69f9      	ldr	r1, [r7, #28]
 800af7c:	6a3a      	ldr	r2, [r7, #32]
 800af7e:	e841 2300 	strex	r3, r2, [r1]
 800af82:	61bb      	str	r3, [r7, #24]
   return(result);
 800af84:	69bb      	ldr	r3, [r7, #24]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1e5      	bne.n	800af56 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2220      	movs	r2, #32
 800af8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	2220      	movs	r2, #32
 800af94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2220      	movs	r2, #32
 800af9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e010      	b.n	800afce <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	69da      	ldr	r2, [r3, #28]
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	4013      	ands	r3, r2
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	429a      	cmp	r2, r3
 800afba:	bf0c      	ite	eq
 800afbc:	2301      	moveq	r3, #1
 800afbe:	2300      	movne	r3, #0
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	461a      	mov	r2, r3
 800afc4:	79fb      	ldrb	r3, [r7, #7]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	f43f af48 	beq.w	800ae5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afcc:	2300      	movs	r3, #0
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3770      	adds	r7, #112	; 0x70
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <__cvt>:
 800afd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afd8:	ed2d 8b02 	vpush	{d8}
 800afdc:	eeb0 8b40 	vmov.f64	d8, d0
 800afe0:	b085      	sub	sp, #20
 800afe2:	4617      	mov	r7, r2
 800afe4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800afe6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800afe8:	ee18 2a90 	vmov	r2, s17
 800afec:	f025 0520 	bic.w	r5, r5, #32
 800aff0:	2a00      	cmp	r2, #0
 800aff2:	bfb6      	itet	lt
 800aff4:	222d      	movlt	r2, #45	; 0x2d
 800aff6:	2200      	movge	r2, #0
 800aff8:	eeb1 8b40 	vneglt.f64	d8, d0
 800affc:	2d46      	cmp	r5, #70	; 0x46
 800affe:	460c      	mov	r4, r1
 800b000:	701a      	strb	r2, [r3, #0]
 800b002:	d004      	beq.n	800b00e <__cvt+0x38>
 800b004:	2d45      	cmp	r5, #69	; 0x45
 800b006:	d100      	bne.n	800b00a <__cvt+0x34>
 800b008:	3401      	adds	r4, #1
 800b00a:	2102      	movs	r1, #2
 800b00c:	e000      	b.n	800b010 <__cvt+0x3a>
 800b00e:	2103      	movs	r1, #3
 800b010:	ab03      	add	r3, sp, #12
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	ab02      	add	r3, sp, #8
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	4622      	mov	r2, r4
 800b01a:	4633      	mov	r3, r6
 800b01c:	eeb0 0b48 	vmov.f64	d0, d8
 800b020:	f000 fe76 	bl	800bd10 <_dtoa_r>
 800b024:	2d47      	cmp	r5, #71	; 0x47
 800b026:	d101      	bne.n	800b02c <__cvt+0x56>
 800b028:	07fb      	lsls	r3, r7, #31
 800b02a:	d51a      	bpl.n	800b062 <__cvt+0x8c>
 800b02c:	2d46      	cmp	r5, #70	; 0x46
 800b02e:	eb00 0204 	add.w	r2, r0, r4
 800b032:	d10c      	bne.n	800b04e <__cvt+0x78>
 800b034:	7803      	ldrb	r3, [r0, #0]
 800b036:	2b30      	cmp	r3, #48	; 0x30
 800b038:	d107      	bne.n	800b04a <__cvt+0x74>
 800b03a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b042:	bf1c      	itt	ne
 800b044:	f1c4 0401 	rsbne	r4, r4, #1
 800b048:	6034      	strne	r4, [r6, #0]
 800b04a:	6833      	ldr	r3, [r6, #0]
 800b04c:	441a      	add	r2, r3
 800b04e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b056:	bf08      	it	eq
 800b058:	9203      	streq	r2, [sp, #12]
 800b05a:	2130      	movs	r1, #48	; 0x30
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	4293      	cmp	r3, r2
 800b060:	d307      	bcc.n	800b072 <__cvt+0x9c>
 800b062:	9b03      	ldr	r3, [sp, #12]
 800b064:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b066:	1a1b      	subs	r3, r3, r0
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	b005      	add	sp, #20
 800b06c:	ecbd 8b02 	vpop	{d8}
 800b070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b072:	1c5c      	adds	r4, r3, #1
 800b074:	9403      	str	r4, [sp, #12]
 800b076:	7019      	strb	r1, [r3, #0]
 800b078:	e7f0      	b.n	800b05c <__cvt+0x86>

0800b07a <__exponent>:
 800b07a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b07c:	4603      	mov	r3, r0
 800b07e:	2900      	cmp	r1, #0
 800b080:	bfb8      	it	lt
 800b082:	4249      	neglt	r1, r1
 800b084:	f803 2b02 	strb.w	r2, [r3], #2
 800b088:	bfb4      	ite	lt
 800b08a:	222d      	movlt	r2, #45	; 0x2d
 800b08c:	222b      	movge	r2, #43	; 0x2b
 800b08e:	2909      	cmp	r1, #9
 800b090:	7042      	strb	r2, [r0, #1]
 800b092:	dd2a      	ble.n	800b0ea <__exponent+0x70>
 800b094:	f10d 0207 	add.w	r2, sp, #7
 800b098:	4617      	mov	r7, r2
 800b09a:	260a      	movs	r6, #10
 800b09c:	4694      	mov	ip, r2
 800b09e:	fb91 f5f6 	sdiv	r5, r1, r6
 800b0a2:	fb06 1415 	mls	r4, r6, r5, r1
 800b0a6:	3430      	adds	r4, #48	; 0x30
 800b0a8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	2c63      	cmp	r4, #99	; 0x63
 800b0b0:	f102 32ff 	add.w	r2, r2, #4294967295
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	dcf1      	bgt.n	800b09c <__exponent+0x22>
 800b0b8:	3130      	adds	r1, #48	; 0x30
 800b0ba:	f1ac 0402 	sub.w	r4, ip, #2
 800b0be:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b0c2:	1c41      	adds	r1, r0, #1
 800b0c4:	4622      	mov	r2, r4
 800b0c6:	42ba      	cmp	r2, r7
 800b0c8:	d30a      	bcc.n	800b0e0 <__exponent+0x66>
 800b0ca:	f10d 0209 	add.w	r2, sp, #9
 800b0ce:	eba2 020c 	sub.w	r2, r2, ip
 800b0d2:	42bc      	cmp	r4, r7
 800b0d4:	bf88      	it	hi
 800b0d6:	2200      	movhi	r2, #0
 800b0d8:	4413      	add	r3, r2
 800b0da:	1a18      	subs	r0, r3, r0
 800b0dc:	b003      	add	sp, #12
 800b0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0e0:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b0e4:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b0e8:	e7ed      	b.n	800b0c6 <__exponent+0x4c>
 800b0ea:	2330      	movs	r3, #48	; 0x30
 800b0ec:	3130      	adds	r1, #48	; 0x30
 800b0ee:	7083      	strb	r3, [r0, #2]
 800b0f0:	70c1      	strb	r1, [r0, #3]
 800b0f2:	1d03      	adds	r3, r0, #4
 800b0f4:	e7f1      	b.n	800b0da <__exponent+0x60>
	...

0800b0f8 <_printf_float>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	b08b      	sub	sp, #44	; 0x2c
 800b0fe:	460c      	mov	r4, r1
 800b100:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b104:	4616      	mov	r6, r2
 800b106:	461f      	mov	r7, r3
 800b108:	4605      	mov	r5, r0
 800b10a:	f000 fd01 	bl	800bb10 <_localeconv_r>
 800b10e:	f8d0 b000 	ldr.w	fp, [r0]
 800b112:	4658      	mov	r0, fp
 800b114:	f7f5 f8e4 	bl	80002e0 <strlen>
 800b118:	2300      	movs	r3, #0
 800b11a:	9308      	str	r3, [sp, #32]
 800b11c:	f8d8 3000 	ldr.w	r3, [r8]
 800b120:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b124:	6822      	ldr	r2, [r4, #0]
 800b126:	3307      	adds	r3, #7
 800b128:	f023 0307 	bic.w	r3, r3, #7
 800b12c:	f103 0108 	add.w	r1, r3, #8
 800b130:	f8c8 1000 	str.w	r1, [r8]
 800b134:	ed93 0b00 	vldr	d0, [r3]
 800b138:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800b398 <_printf_float+0x2a0>
 800b13c:	eeb0 7bc0 	vabs.f64	d7, d0
 800b140:	eeb4 7b46 	vcmp.f64	d7, d6
 800b144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b148:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800b14c:	4682      	mov	sl, r0
 800b14e:	dd24      	ble.n	800b19a <_printf_float+0xa2>
 800b150:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b158:	d502      	bpl.n	800b160 <_printf_float+0x68>
 800b15a:	232d      	movs	r3, #45	; 0x2d
 800b15c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b160:	498f      	ldr	r1, [pc, #572]	; (800b3a0 <_printf_float+0x2a8>)
 800b162:	4b90      	ldr	r3, [pc, #576]	; (800b3a4 <_printf_float+0x2ac>)
 800b164:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b168:	bf94      	ite	ls
 800b16a:	4688      	movls	r8, r1
 800b16c:	4698      	movhi	r8, r3
 800b16e:	2303      	movs	r3, #3
 800b170:	6123      	str	r3, [r4, #16]
 800b172:	f022 0204 	bic.w	r2, r2, #4
 800b176:	2300      	movs	r3, #0
 800b178:	6022      	str	r2, [r4, #0]
 800b17a:	9304      	str	r3, [sp, #16]
 800b17c:	9700      	str	r7, [sp, #0]
 800b17e:	4633      	mov	r3, r6
 800b180:	aa09      	add	r2, sp, #36	; 0x24
 800b182:	4621      	mov	r1, r4
 800b184:	4628      	mov	r0, r5
 800b186:	f000 f9d1 	bl	800b52c <_printf_common>
 800b18a:	3001      	adds	r0, #1
 800b18c:	f040 808a 	bne.w	800b2a4 <_printf_float+0x1ac>
 800b190:	f04f 30ff 	mov.w	r0, #4294967295
 800b194:	b00b      	add	sp, #44	; 0x2c
 800b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19a:	eeb4 0b40 	vcmp.f64	d0, d0
 800b19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1a2:	d709      	bvc.n	800b1b8 <_printf_float+0xc0>
 800b1a4:	ee10 3a90 	vmov	r3, s1
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	bfbc      	itt	lt
 800b1ac:	232d      	movlt	r3, #45	; 0x2d
 800b1ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b1b2:	497d      	ldr	r1, [pc, #500]	; (800b3a8 <_printf_float+0x2b0>)
 800b1b4:	4b7d      	ldr	r3, [pc, #500]	; (800b3ac <_printf_float+0x2b4>)
 800b1b6:	e7d5      	b.n	800b164 <_printf_float+0x6c>
 800b1b8:	6863      	ldr	r3, [r4, #4]
 800b1ba:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b1be:	9104      	str	r1, [sp, #16]
 800b1c0:	1c59      	adds	r1, r3, #1
 800b1c2:	d13c      	bne.n	800b23e <_printf_float+0x146>
 800b1c4:	2306      	movs	r3, #6
 800b1c6:	6063      	str	r3, [r4, #4]
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	9303      	str	r3, [sp, #12]
 800b1cc:	ab08      	add	r3, sp, #32
 800b1ce:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b1d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b1d6:	ab07      	add	r3, sp, #28
 800b1d8:	6861      	ldr	r1, [r4, #4]
 800b1da:	9300      	str	r3, [sp, #0]
 800b1dc:	6022      	str	r2, [r4, #0]
 800b1de:	f10d 031b 	add.w	r3, sp, #27
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	f7ff fef7 	bl	800afd6 <__cvt>
 800b1e8:	9b04      	ldr	r3, [sp, #16]
 800b1ea:	9907      	ldr	r1, [sp, #28]
 800b1ec:	2b47      	cmp	r3, #71	; 0x47
 800b1ee:	4680      	mov	r8, r0
 800b1f0:	d108      	bne.n	800b204 <_printf_float+0x10c>
 800b1f2:	1cc8      	adds	r0, r1, #3
 800b1f4:	db02      	blt.n	800b1fc <_printf_float+0x104>
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	4299      	cmp	r1, r3
 800b1fa:	dd41      	ble.n	800b280 <_printf_float+0x188>
 800b1fc:	f1a9 0902 	sub.w	r9, r9, #2
 800b200:	fa5f f989 	uxtb.w	r9, r9
 800b204:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b208:	d820      	bhi.n	800b24c <_printf_float+0x154>
 800b20a:	3901      	subs	r1, #1
 800b20c:	464a      	mov	r2, r9
 800b20e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b212:	9107      	str	r1, [sp, #28]
 800b214:	f7ff ff31 	bl	800b07a <__exponent>
 800b218:	9a08      	ldr	r2, [sp, #32]
 800b21a:	9004      	str	r0, [sp, #16]
 800b21c:	1813      	adds	r3, r2, r0
 800b21e:	2a01      	cmp	r2, #1
 800b220:	6123      	str	r3, [r4, #16]
 800b222:	dc02      	bgt.n	800b22a <_printf_float+0x132>
 800b224:	6822      	ldr	r2, [r4, #0]
 800b226:	07d2      	lsls	r2, r2, #31
 800b228:	d501      	bpl.n	800b22e <_printf_float+0x136>
 800b22a:	3301      	adds	r3, #1
 800b22c:	6123      	str	r3, [r4, #16]
 800b22e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0a2      	beq.n	800b17c <_printf_float+0x84>
 800b236:	232d      	movs	r3, #45	; 0x2d
 800b238:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b23c:	e79e      	b.n	800b17c <_printf_float+0x84>
 800b23e:	9904      	ldr	r1, [sp, #16]
 800b240:	2947      	cmp	r1, #71	; 0x47
 800b242:	d1c1      	bne.n	800b1c8 <_printf_float+0xd0>
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1bf      	bne.n	800b1c8 <_printf_float+0xd0>
 800b248:	2301      	movs	r3, #1
 800b24a:	e7bc      	b.n	800b1c6 <_printf_float+0xce>
 800b24c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b250:	d118      	bne.n	800b284 <_printf_float+0x18c>
 800b252:	2900      	cmp	r1, #0
 800b254:	6863      	ldr	r3, [r4, #4]
 800b256:	dd0b      	ble.n	800b270 <_printf_float+0x178>
 800b258:	6121      	str	r1, [r4, #16]
 800b25a:	b913      	cbnz	r3, 800b262 <_printf_float+0x16a>
 800b25c:	6822      	ldr	r2, [r4, #0]
 800b25e:	07d0      	lsls	r0, r2, #31
 800b260:	d502      	bpl.n	800b268 <_printf_float+0x170>
 800b262:	3301      	adds	r3, #1
 800b264:	440b      	add	r3, r1
 800b266:	6123      	str	r3, [r4, #16]
 800b268:	2300      	movs	r3, #0
 800b26a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b26c:	9304      	str	r3, [sp, #16]
 800b26e:	e7de      	b.n	800b22e <_printf_float+0x136>
 800b270:	b913      	cbnz	r3, 800b278 <_printf_float+0x180>
 800b272:	6822      	ldr	r2, [r4, #0]
 800b274:	07d2      	lsls	r2, r2, #31
 800b276:	d501      	bpl.n	800b27c <_printf_float+0x184>
 800b278:	3302      	adds	r3, #2
 800b27a:	e7f4      	b.n	800b266 <_printf_float+0x16e>
 800b27c:	2301      	movs	r3, #1
 800b27e:	e7f2      	b.n	800b266 <_printf_float+0x16e>
 800b280:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b284:	9b08      	ldr	r3, [sp, #32]
 800b286:	4299      	cmp	r1, r3
 800b288:	db05      	blt.n	800b296 <_printf_float+0x19e>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	6121      	str	r1, [r4, #16]
 800b28e:	07d8      	lsls	r0, r3, #31
 800b290:	d5ea      	bpl.n	800b268 <_printf_float+0x170>
 800b292:	1c4b      	adds	r3, r1, #1
 800b294:	e7e7      	b.n	800b266 <_printf_float+0x16e>
 800b296:	2900      	cmp	r1, #0
 800b298:	bfd4      	ite	le
 800b29a:	f1c1 0202 	rsble	r2, r1, #2
 800b29e:	2201      	movgt	r2, #1
 800b2a0:	4413      	add	r3, r2
 800b2a2:	e7e0      	b.n	800b266 <_printf_float+0x16e>
 800b2a4:	6823      	ldr	r3, [r4, #0]
 800b2a6:	055a      	lsls	r2, r3, #21
 800b2a8:	d407      	bmi.n	800b2ba <_printf_float+0x1c2>
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	4642      	mov	r2, r8
 800b2ae:	4631      	mov	r1, r6
 800b2b0:	4628      	mov	r0, r5
 800b2b2:	47b8      	blx	r7
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d12a      	bne.n	800b30e <_printf_float+0x216>
 800b2b8:	e76a      	b.n	800b190 <_printf_float+0x98>
 800b2ba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b2be:	f240 80e0 	bls.w	800b482 <_printf_float+0x38a>
 800b2c2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b2c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ce:	d133      	bne.n	800b338 <_printf_float+0x240>
 800b2d0:	4a37      	ldr	r2, [pc, #220]	; (800b3b0 <_printf_float+0x2b8>)
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	4631      	mov	r1, r6
 800b2d6:	4628      	mov	r0, r5
 800b2d8:	47b8      	blx	r7
 800b2da:	3001      	adds	r0, #1
 800b2dc:	f43f af58 	beq.w	800b190 <_printf_float+0x98>
 800b2e0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	db02      	blt.n	800b2ee <_printf_float+0x1f6>
 800b2e8:	6823      	ldr	r3, [r4, #0]
 800b2ea:	07d8      	lsls	r0, r3, #31
 800b2ec:	d50f      	bpl.n	800b30e <_printf_float+0x216>
 800b2ee:	4653      	mov	r3, sl
 800b2f0:	465a      	mov	r2, fp
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	47b8      	blx	r7
 800b2f8:	3001      	adds	r0, #1
 800b2fa:	f43f af49 	beq.w	800b190 <_printf_float+0x98>
 800b2fe:	f04f 0800 	mov.w	r8, #0
 800b302:	f104 091a 	add.w	r9, r4, #26
 800b306:	9b08      	ldr	r3, [sp, #32]
 800b308:	3b01      	subs	r3, #1
 800b30a:	4543      	cmp	r3, r8
 800b30c:	dc09      	bgt.n	800b322 <_printf_float+0x22a>
 800b30e:	6823      	ldr	r3, [r4, #0]
 800b310:	079b      	lsls	r3, r3, #30
 800b312:	f100 8106 	bmi.w	800b522 <_printf_float+0x42a>
 800b316:	68e0      	ldr	r0, [r4, #12]
 800b318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b31a:	4298      	cmp	r0, r3
 800b31c:	bfb8      	it	lt
 800b31e:	4618      	movlt	r0, r3
 800b320:	e738      	b.n	800b194 <_printf_float+0x9c>
 800b322:	2301      	movs	r3, #1
 800b324:	464a      	mov	r2, r9
 800b326:	4631      	mov	r1, r6
 800b328:	4628      	mov	r0, r5
 800b32a:	47b8      	blx	r7
 800b32c:	3001      	adds	r0, #1
 800b32e:	f43f af2f 	beq.w	800b190 <_printf_float+0x98>
 800b332:	f108 0801 	add.w	r8, r8, #1
 800b336:	e7e6      	b.n	800b306 <_printf_float+0x20e>
 800b338:	9b07      	ldr	r3, [sp, #28]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	dc3a      	bgt.n	800b3b4 <_printf_float+0x2bc>
 800b33e:	4a1c      	ldr	r2, [pc, #112]	; (800b3b0 <_printf_float+0x2b8>)
 800b340:	2301      	movs	r3, #1
 800b342:	4631      	mov	r1, r6
 800b344:	4628      	mov	r0, r5
 800b346:	47b8      	blx	r7
 800b348:	3001      	adds	r0, #1
 800b34a:	f43f af21 	beq.w	800b190 <_printf_float+0x98>
 800b34e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800b352:	4313      	orrs	r3, r2
 800b354:	d102      	bne.n	800b35c <_printf_float+0x264>
 800b356:	6823      	ldr	r3, [r4, #0]
 800b358:	07d9      	lsls	r1, r3, #31
 800b35a:	d5d8      	bpl.n	800b30e <_printf_float+0x216>
 800b35c:	4653      	mov	r3, sl
 800b35e:	465a      	mov	r2, fp
 800b360:	4631      	mov	r1, r6
 800b362:	4628      	mov	r0, r5
 800b364:	47b8      	blx	r7
 800b366:	3001      	adds	r0, #1
 800b368:	f43f af12 	beq.w	800b190 <_printf_float+0x98>
 800b36c:	f04f 0900 	mov.w	r9, #0
 800b370:	f104 0a1a 	add.w	sl, r4, #26
 800b374:	9b07      	ldr	r3, [sp, #28]
 800b376:	425b      	negs	r3, r3
 800b378:	454b      	cmp	r3, r9
 800b37a:	dc01      	bgt.n	800b380 <_printf_float+0x288>
 800b37c:	9b08      	ldr	r3, [sp, #32]
 800b37e:	e795      	b.n	800b2ac <_printf_float+0x1b4>
 800b380:	2301      	movs	r3, #1
 800b382:	4652      	mov	r2, sl
 800b384:	4631      	mov	r1, r6
 800b386:	4628      	mov	r0, r5
 800b388:	47b8      	blx	r7
 800b38a:	3001      	adds	r0, #1
 800b38c:	f43f af00 	beq.w	800b190 <_printf_float+0x98>
 800b390:	f109 0901 	add.w	r9, r9, #1
 800b394:	e7ee      	b.n	800b374 <_printf_float+0x27c>
 800b396:	bf00      	nop
 800b398:	ffffffff 	.word	0xffffffff
 800b39c:	7fefffff 	.word	0x7fefffff
 800b3a0:	0800ed18 	.word	0x0800ed18
 800b3a4:	0800ed1c 	.word	0x0800ed1c
 800b3a8:	0800ed20 	.word	0x0800ed20
 800b3ac:	0800ed24 	.word	0x0800ed24
 800b3b0:	0800ed28 	.word	0x0800ed28
 800b3b4:	9a08      	ldr	r2, [sp, #32]
 800b3b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3b8:	429a      	cmp	r2, r3
 800b3ba:	bfa8      	it	ge
 800b3bc:	461a      	movge	r2, r3
 800b3be:	2a00      	cmp	r2, #0
 800b3c0:	4691      	mov	r9, r2
 800b3c2:	dc38      	bgt.n	800b436 <_printf_float+0x33e>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	9305      	str	r3, [sp, #20]
 800b3c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b3cc:	f104 021a 	add.w	r2, r4, #26
 800b3d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b3d2:	9905      	ldr	r1, [sp, #20]
 800b3d4:	9304      	str	r3, [sp, #16]
 800b3d6:	eba3 0309 	sub.w	r3, r3, r9
 800b3da:	428b      	cmp	r3, r1
 800b3dc:	dc33      	bgt.n	800b446 <_printf_float+0x34e>
 800b3de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	db3c      	blt.n	800b460 <_printf_float+0x368>
 800b3e6:	6823      	ldr	r3, [r4, #0]
 800b3e8:	07da      	lsls	r2, r3, #31
 800b3ea:	d439      	bmi.n	800b460 <_printf_float+0x368>
 800b3ec:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800b3f0:	eba2 0903 	sub.w	r9, r2, r3
 800b3f4:	9b04      	ldr	r3, [sp, #16]
 800b3f6:	1ad2      	subs	r2, r2, r3
 800b3f8:	4591      	cmp	r9, r2
 800b3fa:	bfa8      	it	ge
 800b3fc:	4691      	movge	r9, r2
 800b3fe:	f1b9 0f00 	cmp.w	r9, #0
 800b402:	dc35      	bgt.n	800b470 <_printf_float+0x378>
 800b404:	f04f 0800 	mov.w	r8, #0
 800b408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b40c:	f104 0a1a 	add.w	sl, r4, #26
 800b410:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b414:	1a9b      	subs	r3, r3, r2
 800b416:	eba3 0309 	sub.w	r3, r3, r9
 800b41a:	4543      	cmp	r3, r8
 800b41c:	f77f af77 	ble.w	800b30e <_printf_float+0x216>
 800b420:	2301      	movs	r3, #1
 800b422:	4652      	mov	r2, sl
 800b424:	4631      	mov	r1, r6
 800b426:	4628      	mov	r0, r5
 800b428:	47b8      	blx	r7
 800b42a:	3001      	adds	r0, #1
 800b42c:	f43f aeb0 	beq.w	800b190 <_printf_float+0x98>
 800b430:	f108 0801 	add.w	r8, r8, #1
 800b434:	e7ec      	b.n	800b410 <_printf_float+0x318>
 800b436:	4613      	mov	r3, r2
 800b438:	4631      	mov	r1, r6
 800b43a:	4642      	mov	r2, r8
 800b43c:	4628      	mov	r0, r5
 800b43e:	47b8      	blx	r7
 800b440:	3001      	adds	r0, #1
 800b442:	d1bf      	bne.n	800b3c4 <_printf_float+0x2cc>
 800b444:	e6a4      	b.n	800b190 <_printf_float+0x98>
 800b446:	2301      	movs	r3, #1
 800b448:	4631      	mov	r1, r6
 800b44a:	4628      	mov	r0, r5
 800b44c:	9204      	str	r2, [sp, #16]
 800b44e:	47b8      	blx	r7
 800b450:	3001      	adds	r0, #1
 800b452:	f43f ae9d 	beq.w	800b190 <_printf_float+0x98>
 800b456:	9b05      	ldr	r3, [sp, #20]
 800b458:	9a04      	ldr	r2, [sp, #16]
 800b45a:	3301      	adds	r3, #1
 800b45c:	9305      	str	r3, [sp, #20]
 800b45e:	e7b7      	b.n	800b3d0 <_printf_float+0x2d8>
 800b460:	4653      	mov	r3, sl
 800b462:	465a      	mov	r2, fp
 800b464:	4631      	mov	r1, r6
 800b466:	4628      	mov	r0, r5
 800b468:	47b8      	blx	r7
 800b46a:	3001      	adds	r0, #1
 800b46c:	d1be      	bne.n	800b3ec <_printf_float+0x2f4>
 800b46e:	e68f      	b.n	800b190 <_printf_float+0x98>
 800b470:	9a04      	ldr	r2, [sp, #16]
 800b472:	464b      	mov	r3, r9
 800b474:	4442      	add	r2, r8
 800b476:	4631      	mov	r1, r6
 800b478:	4628      	mov	r0, r5
 800b47a:	47b8      	blx	r7
 800b47c:	3001      	adds	r0, #1
 800b47e:	d1c1      	bne.n	800b404 <_printf_float+0x30c>
 800b480:	e686      	b.n	800b190 <_printf_float+0x98>
 800b482:	9a08      	ldr	r2, [sp, #32]
 800b484:	2a01      	cmp	r2, #1
 800b486:	dc01      	bgt.n	800b48c <_printf_float+0x394>
 800b488:	07db      	lsls	r3, r3, #31
 800b48a:	d537      	bpl.n	800b4fc <_printf_float+0x404>
 800b48c:	2301      	movs	r3, #1
 800b48e:	4642      	mov	r2, r8
 800b490:	4631      	mov	r1, r6
 800b492:	4628      	mov	r0, r5
 800b494:	47b8      	blx	r7
 800b496:	3001      	adds	r0, #1
 800b498:	f43f ae7a 	beq.w	800b190 <_printf_float+0x98>
 800b49c:	4653      	mov	r3, sl
 800b49e:	465a      	mov	r2, fp
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b8      	blx	r7
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f43f ae72 	beq.w	800b190 <_printf_float+0x98>
 800b4ac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b4b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b8:	9b08      	ldr	r3, [sp, #32]
 800b4ba:	d01a      	beq.n	800b4f2 <_printf_float+0x3fa>
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	f108 0201 	add.w	r2, r8, #1
 800b4c2:	4631      	mov	r1, r6
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	47b8      	blx	r7
 800b4c8:	3001      	adds	r0, #1
 800b4ca:	d10e      	bne.n	800b4ea <_printf_float+0x3f2>
 800b4cc:	e660      	b.n	800b190 <_printf_float+0x98>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	464a      	mov	r2, r9
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b8      	blx	r7
 800b4d8:	3001      	adds	r0, #1
 800b4da:	f43f ae59 	beq.w	800b190 <_printf_float+0x98>
 800b4de:	f108 0801 	add.w	r8, r8, #1
 800b4e2:	9b08      	ldr	r3, [sp, #32]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	4543      	cmp	r3, r8
 800b4e8:	dcf1      	bgt.n	800b4ce <_printf_float+0x3d6>
 800b4ea:	9b04      	ldr	r3, [sp, #16]
 800b4ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b4f0:	e6dd      	b.n	800b2ae <_printf_float+0x1b6>
 800b4f2:	f04f 0800 	mov.w	r8, #0
 800b4f6:	f104 091a 	add.w	r9, r4, #26
 800b4fa:	e7f2      	b.n	800b4e2 <_printf_float+0x3ea>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	4642      	mov	r2, r8
 800b500:	e7df      	b.n	800b4c2 <_printf_float+0x3ca>
 800b502:	2301      	movs	r3, #1
 800b504:	464a      	mov	r2, r9
 800b506:	4631      	mov	r1, r6
 800b508:	4628      	mov	r0, r5
 800b50a:	47b8      	blx	r7
 800b50c:	3001      	adds	r0, #1
 800b50e:	f43f ae3f 	beq.w	800b190 <_printf_float+0x98>
 800b512:	f108 0801 	add.w	r8, r8, #1
 800b516:	68e3      	ldr	r3, [r4, #12]
 800b518:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b51a:	1a5b      	subs	r3, r3, r1
 800b51c:	4543      	cmp	r3, r8
 800b51e:	dcf0      	bgt.n	800b502 <_printf_float+0x40a>
 800b520:	e6f9      	b.n	800b316 <_printf_float+0x21e>
 800b522:	f04f 0800 	mov.w	r8, #0
 800b526:	f104 0919 	add.w	r9, r4, #25
 800b52a:	e7f4      	b.n	800b516 <_printf_float+0x41e>

0800b52c <_printf_common>:
 800b52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b530:	4616      	mov	r6, r2
 800b532:	4699      	mov	r9, r3
 800b534:	688a      	ldr	r2, [r1, #8]
 800b536:	690b      	ldr	r3, [r1, #16]
 800b538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b53c:	4293      	cmp	r3, r2
 800b53e:	bfb8      	it	lt
 800b540:	4613      	movlt	r3, r2
 800b542:	6033      	str	r3, [r6, #0]
 800b544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b548:	4607      	mov	r7, r0
 800b54a:	460c      	mov	r4, r1
 800b54c:	b10a      	cbz	r2, 800b552 <_printf_common+0x26>
 800b54e:	3301      	adds	r3, #1
 800b550:	6033      	str	r3, [r6, #0]
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	0699      	lsls	r1, r3, #26
 800b556:	bf42      	ittt	mi
 800b558:	6833      	ldrmi	r3, [r6, #0]
 800b55a:	3302      	addmi	r3, #2
 800b55c:	6033      	strmi	r3, [r6, #0]
 800b55e:	6825      	ldr	r5, [r4, #0]
 800b560:	f015 0506 	ands.w	r5, r5, #6
 800b564:	d106      	bne.n	800b574 <_printf_common+0x48>
 800b566:	f104 0a19 	add.w	sl, r4, #25
 800b56a:	68e3      	ldr	r3, [r4, #12]
 800b56c:	6832      	ldr	r2, [r6, #0]
 800b56e:	1a9b      	subs	r3, r3, r2
 800b570:	42ab      	cmp	r3, r5
 800b572:	dc26      	bgt.n	800b5c2 <_printf_common+0x96>
 800b574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b578:	1e13      	subs	r3, r2, #0
 800b57a:	6822      	ldr	r2, [r4, #0]
 800b57c:	bf18      	it	ne
 800b57e:	2301      	movne	r3, #1
 800b580:	0692      	lsls	r2, r2, #26
 800b582:	d42b      	bmi.n	800b5dc <_printf_common+0xb0>
 800b584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b588:	4649      	mov	r1, r9
 800b58a:	4638      	mov	r0, r7
 800b58c:	47c0      	blx	r8
 800b58e:	3001      	adds	r0, #1
 800b590:	d01e      	beq.n	800b5d0 <_printf_common+0xa4>
 800b592:	6823      	ldr	r3, [r4, #0]
 800b594:	6922      	ldr	r2, [r4, #16]
 800b596:	f003 0306 	and.w	r3, r3, #6
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	bf02      	ittt	eq
 800b59e:	68e5      	ldreq	r5, [r4, #12]
 800b5a0:	6833      	ldreq	r3, [r6, #0]
 800b5a2:	1aed      	subeq	r5, r5, r3
 800b5a4:	68a3      	ldr	r3, [r4, #8]
 800b5a6:	bf0c      	ite	eq
 800b5a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5ac:	2500      	movne	r5, #0
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	bfc4      	itt	gt
 800b5b2:	1a9b      	subgt	r3, r3, r2
 800b5b4:	18ed      	addgt	r5, r5, r3
 800b5b6:	2600      	movs	r6, #0
 800b5b8:	341a      	adds	r4, #26
 800b5ba:	42b5      	cmp	r5, r6
 800b5bc:	d11a      	bne.n	800b5f4 <_printf_common+0xc8>
 800b5be:	2000      	movs	r0, #0
 800b5c0:	e008      	b.n	800b5d4 <_printf_common+0xa8>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	4652      	mov	r2, sl
 800b5c6:	4649      	mov	r1, r9
 800b5c8:	4638      	mov	r0, r7
 800b5ca:	47c0      	blx	r8
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d103      	bne.n	800b5d8 <_printf_common+0xac>
 800b5d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d8:	3501      	adds	r5, #1
 800b5da:	e7c6      	b.n	800b56a <_printf_common+0x3e>
 800b5dc:	18e1      	adds	r1, r4, r3
 800b5de:	1c5a      	adds	r2, r3, #1
 800b5e0:	2030      	movs	r0, #48	; 0x30
 800b5e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5e6:	4422      	add	r2, r4
 800b5e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5f0:	3302      	adds	r3, #2
 800b5f2:	e7c7      	b.n	800b584 <_printf_common+0x58>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	4649      	mov	r1, r9
 800b5fa:	4638      	mov	r0, r7
 800b5fc:	47c0      	blx	r8
 800b5fe:	3001      	adds	r0, #1
 800b600:	d0e6      	beq.n	800b5d0 <_printf_common+0xa4>
 800b602:	3601      	adds	r6, #1
 800b604:	e7d9      	b.n	800b5ba <_printf_common+0x8e>
	...

0800b608 <_printf_i>:
 800b608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b60c:	7e0f      	ldrb	r7, [r1, #24]
 800b60e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b610:	2f78      	cmp	r7, #120	; 0x78
 800b612:	4691      	mov	r9, r2
 800b614:	4680      	mov	r8, r0
 800b616:	460c      	mov	r4, r1
 800b618:	469a      	mov	sl, r3
 800b61a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b61e:	d807      	bhi.n	800b630 <_printf_i+0x28>
 800b620:	2f62      	cmp	r7, #98	; 0x62
 800b622:	d80a      	bhi.n	800b63a <_printf_i+0x32>
 800b624:	2f00      	cmp	r7, #0
 800b626:	f000 80d4 	beq.w	800b7d2 <_printf_i+0x1ca>
 800b62a:	2f58      	cmp	r7, #88	; 0x58
 800b62c:	f000 80c0 	beq.w	800b7b0 <_printf_i+0x1a8>
 800b630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b638:	e03a      	b.n	800b6b0 <_printf_i+0xa8>
 800b63a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b63e:	2b15      	cmp	r3, #21
 800b640:	d8f6      	bhi.n	800b630 <_printf_i+0x28>
 800b642:	a101      	add	r1, pc, #4	; (adr r1, 800b648 <_printf_i+0x40>)
 800b644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b648:	0800b6a1 	.word	0x0800b6a1
 800b64c:	0800b6b5 	.word	0x0800b6b5
 800b650:	0800b631 	.word	0x0800b631
 800b654:	0800b631 	.word	0x0800b631
 800b658:	0800b631 	.word	0x0800b631
 800b65c:	0800b631 	.word	0x0800b631
 800b660:	0800b6b5 	.word	0x0800b6b5
 800b664:	0800b631 	.word	0x0800b631
 800b668:	0800b631 	.word	0x0800b631
 800b66c:	0800b631 	.word	0x0800b631
 800b670:	0800b631 	.word	0x0800b631
 800b674:	0800b7b9 	.word	0x0800b7b9
 800b678:	0800b6e1 	.word	0x0800b6e1
 800b67c:	0800b773 	.word	0x0800b773
 800b680:	0800b631 	.word	0x0800b631
 800b684:	0800b631 	.word	0x0800b631
 800b688:	0800b7db 	.word	0x0800b7db
 800b68c:	0800b631 	.word	0x0800b631
 800b690:	0800b6e1 	.word	0x0800b6e1
 800b694:	0800b631 	.word	0x0800b631
 800b698:	0800b631 	.word	0x0800b631
 800b69c:	0800b77b 	.word	0x0800b77b
 800b6a0:	682b      	ldr	r3, [r5, #0]
 800b6a2:	1d1a      	adds	r2, r3, #4
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	602a      	str	r2, [r5, #0]
 800b6a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	e09f      	b.n	800b7f4 <_printf_i+0x1ec>
 800b6b4:	6820      	ldr	r0, [r4, #0]
 800b6b6:	682b      	ldr	r3, [r5, #0]
 800b6b8:	0607      	lsls	r7, r0, #24
 800b6ba:	f103 0104 	add.w	r1, r3, #4
 800b6be:	6029      	str	r1, [r5, #0]
 800b6c0:	d501      	bpl.n	800b6c6 <_printf_i+0xbe>
 800b6c2:	681e      	ldr	r6, [r3, #0]
 800b6c4:	e003      	b.n	800b6ce <_printf_i+0xc6>
 800b6c6:	0646      	lsls	r6, r0, #25
 800b6c8:	d5fb      	bpl.n	800b6c2 <_printf_i+0xba>
 800b6ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b6ce:	2e00      	cmp	r6, #0
 800b6d0:	da03      	bge.n	800b6da <_printf_i+0xd2>
 800b6d2:	232d      	movs	r3, #45	; 0x2d
 800b6d4:	4276      	negs	r6, r6
 800b6d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6da:	485a      	ldr	r0, [pc, #360]	; (800b844 <_printf_i+0x23c>)
 800b6dc:	230a      	movs	r3, #10
 800b6de:	e012      	b.n	800b706 <_printf_i+0xfe>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	6820      	ldr	r0, [r4, #0]
 800b6e4:	1d19      	adds	r1, r3, #4
 800b6e6:	6029      	str	r1, [r5, #0]
 800b6e8:	0605      	lsls	r5, r0, #24
 800b6ea:	d501      	bpl.n	800b6f0 <_printf_i+0xe8>
 800b6ec:	681e      	ldr	r6, [r3, #0]
 800b6ee:	e002      	b.n	800b6f6 <_printf_i+0xee>
 800b6f0:	0641      	lsls	r1, r0, #25
 800b6f2:	d5fb      	bpl.n	800b6ec <_printf_i+0xe4>
 800b6f4:	881e      	ldrh	r6, [r3, #0]
 800b6f6:	4853      	ldr	r0, [pc, #332]	; (800b844 <_printf_i+0x23c>)
 800b6f8:	2f6f      	cmp	r7, #111	; 0x6f
 800b6fa:	bf0c      	ite	eq
 800b6fc:	2308      	moveq	r3, #8
 800b6fe:	230a      	movne	r3, #10
 800b700:	2100      	movs	r1, #0
 800b702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b706:	6865      	ldr	r5, [r4, #4]
 800b708:	60a5      	str	r5, [r4, #8]
 800b70a:	2d00      	cmp	r5, #0
 800b70c:	bfa2      	ittt	ge
 800b70e:	6821      	ldrge	r1, [r4, #0]
 800b710:	f021 0104 	bicge.w	r1, r1, #4
 800b714:	6021      	strge	r1, [r4, #0]
 800b716:	b90e      	cbnz	r6, 800b71c <_printf_i+0x114>
 800b718:	2d00      	cmp	r5, #0
 800b71a:	d04b      	beq.n	800b7b4 <_printf_i+0x1ac>
 800b71c:	4615      	mov	r5, r2
 800b71e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b722:	fb03 6711 	mls	r7, r3, r1, r6
 800b726:	5dc7      	ldrb	r7, [r0, r7]
 800b728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b72c:	4637      	mov	r7, r6
 800b72e:	42bb      	cmp	r3, r7
 800b730:	460e      	mov	r6, r1
 800b732:	d9f4      	bls.n	800b71e <_printf_i+0x116>
 800b734:	2b08      	cmp	r3, #8
 800b736:	d10b      	bne.n	800b750 <_printf_i+0x148>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	07de      	lsls	r6, r3, #31
 800b73c:	d508      	bpl.n	800b750 <_printf_i+0x148>
 800b73e:	6923      	ldr	r3, [r4, #16]
 800b740:	6861      	ldr	r1, [r4, #4]
 800b742:	4299      	cmp	r1, r3
 800b744:	bfde      	ittt	le
 800b746:	2330      	movle	r3, #48	; 0x30
 800b748:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b74c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b750:	1b52      	subs	r2, r2, r5
 800b752:	6122      	str	r2, [r4, #16]
 800b754:	f8cd a000 	str.w	sl, [sp]
 800b758:	464b      	mov	r3, r9
 800b75a:	aa03      	add	r2, sp, #12
 800b75c:	4621      	mov	r1, r4
 800b75e:	4640      	mov	r0, r8
 800b760:	f7ff fee4 	bl	800b52c <_printf_common>
 800b764:	3001      	adds	r0, #1
 800b766:	d14a      	bne.n	800b7fe <_printf_i+0x1f6>
 800b768:	f04f 30ff 	mov.w	r0, #4294967295
 800b76c:	b004      	add	sp, #16
 800b76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b772:	6823      	ldr	r3, [r4, #0]
 800b774:	f043 0320 	orr.w	r3, r3, #32
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	4833      	ldr	r0, [pc, #204]	; (800b848 <_printf_i+0x240>)
 800b77c:	2778      	movs	r7, #120	; 0x78
 800b77e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	6829      	ldr	r1, [r5, #0]
 800b786:	061f      	lsls	r7, r3, #24
 800b788:	f851 6b04 	ldr.w	r6, [r1], #4
 800b78c:	d402      	bmi.n	800b794 <_printf_i+0x18c>
 800b78e:	065f      	lsls	r7, r3, #25
 800b790:	bf48      	it	mi
 800b792:	b2b6      	uxthmi	r6, r6
 800b794:	07df      	lsls	r7, r3, #31
 800b796:	bf48      	it	mi
 800b798:	f043 0320 	orrmi.w	r3, r3, #32
 800b79c:	6029      	str	r1, [r5, #0]
 800b79e:	bf48      	it	mi
 800b7a0:	6023      	strmi	r3, [r4, #0]
 800b7a2:	b91e      	cbnz	r6, 800b7ac <_printf_i+0x1a4>
 800b7a4:	6823      	ldr	r3, [r4, #0]
 800b7a6:	f023 0320 	bic.w	r3, r3, #32
 800b7aa:	6023      	str	r3, [r4, #0]
 800b7ac:	2310      	movs	r3, #16
 800b7ae:	e7a7      	b.n	800b700 <_printf_i+0xf8>
 800b7b0:	4824      	ldr	r0, [pc, #144]	; (800b844 <_printf_i+0x23c>)
 800b7b2:	e7e4      	b.n	800b77e <_printf_i+0x176>
 800b7b4:	4615      	mov	r5, r2
 800b7b6:	e7bd      	b.n	800b734 <_printf_i+0x12c>
 800b7b8:	682b      	ldr	r3, [r5, #0]
 800b7ba:	6826      	ldr	r6, [r4, #0]
 800b7bc:	6961      	ldr	r1, [r4, #20]
 800b7be:	1d18      	adds	r0, r3, #4
 800b7c0:	6028      	str	r0, [r5, #0]
 800b7c2:	0635      	lsls	r5, r6, #24
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	d501      	bpl.n	800b7cc <_printf_i+0x1c4>
 800b7c8:	6019      	str	r1, [r3, #0]
 800b7ca:	e002      	b.n	800b7d2 <_printf_i+0x1ca>
 800b7cc:	0670      	lsls	r0, r6, #25
 800b7ce:	d5fb      	bpl.n	800b7c8 <_printf_i+0x1c0>
 800b7d0:	8019      	strh	r1, [r3, #0]
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	6123      	str	r3, [r4, #16]
 800b7d6:	4615      	mov	r5, r2
 800b7d8:	e7bc      	b.n	800b754 <_printf_i+0x14c>
 800b7da:	682b      	ldr	r3, [r5, #0]
 800b7dc:	1d1a      	adds	r2, r3, #4
 800b7de:	602a      	str	r2, [r5, #0]
 800b7e0:	681d      	ldr	r5, [r3, #0]
 800b7e2:	6862      	ldr	r2, [r4, #4]
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	f7f4 fd2a 	bl	8000240 <memchr>
 800b7ec:	b108      	cbz	r0, 800b7f2 <_printf_i+0x1ea>
 800b7ee:	1b40      	subs	r0, r0, r5
 800b7f0:	6060      	str	r0, [r4, #4]
 800b7f2:	6863      	ldr	r3, [r4, #4]
 800b7f4:	6123      	str	r3, [r4, #16]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7fc:	e7aa      	b.n	800b754 <_printf_i+0x14c>
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	462a      	mov	r2, r5
 800b802:	4649      	mov	r1, r9
 800b804:	4640      	mov	r0, r8
 800b806:	47d0      	blx	sl
 800b808:	3001      	adds	r0, #1
 800b80a:	d0ad      	beq.n	800b768 <_printf_i+0x160>
 800b80c:	6823      	ldr	r3, [r4, #0]
 800b80e:	079b      	lsls	r3, r3, #30
 800b810:	d413      	bmi.n	800b83a <_printf_i+0x232>
 800b812:	68e0      	ldr	r0, [r4, #12]
 800b814:	9b03      	ldr	r3, [sp, #12]
 800b816:	4298      	cmp	r0, r3
 800b818:	bfb8      	it	lt
 800b81a:	4618      	movlt	r0, r3
 800b81c:	e7a6      	b.n	800b76c <_printf_i+0x164>
 800b81e:	2301      	movs	r3, #1
 800b820:	4632      	mov	r2, r6
 800b822:	4649      	mov	r1, r9
 800b824:	4640      	mov	r0, r8
 800b826:	47d0      	blx	sl
 800b828:	3001      	adds	r0, #1
 800b82a:	d09d      	beq.n	800b768 <_printf_i+0x160>
 800b82c:	3501      	adds	r5, #1
 800b82e:	68e3      	ldr	r3, [r4, #12]
 800b830:	9903      	ldr	r1, [sp, #12]
 800b832:	1a5b      	subs	r3, r3, r1
 800b834:	42ab      	cmp	r3, r5
 800b836:	dcf2      	bgt.n	800b81e <_printf_i+0x216>
 800b838:	e7eb      	b.n	800b812 <_printf_i+0x20a>
 800b83a:	2500      	movs	r5, #0
 800b83c:	f104 0619 	add.w	r6, r4, #25
 800b840:	e7f5      	b.n	800b82e <_printf_i+0x226>
 800b842:	bf00      	nop
 800b844:	0800ed2a 	.word	0x0800ed2a
 800b848:	0800ed3b 	.word	0x0800ed3b

0800b84c <std>:
 800b84c:	2300      	movs	r3, #0
 800b84e:	b510      	push	{r4, lr}
 800b850:	4604      	mov	r4, r0
 800b852:	e9c0 3300 	strd	r3, r3, [r0]
 800b856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b85a:	6083      	str	r3, [r0, #8]
 800b85c:	8181      	strh	r1, [r0, #12]
 800b85e:	6643      	str	r3, [r0, #100]	; 0x64
 800b860:	81c2      	strh	r2, [r0, #14]
 800b862:	6183      	str	r3, [r0, #24]
 800b864:	4619      	mov	r1, r3
 800b866:	2208      	movs	r2, #8
 800b868:	305c      	adds	r0, #92	; 0x5c
 800b86a:	f000 f948 	bl	800bafe <memset>
 800b86e:	4b0d      	ldr	r3, [pc, #52]	; (800b8a4 <std+0x58>)
 800b870:	6263      	str	r3, [r4, #36]	; 0x24
 800b872:	4b0d      	ldr	r3, [pc, #52]	; (800b8a8 <std+0x5c>)
 800b874:	62a3      	str	r3, [r4, #40]	; 0x28
 800b876:	4b0d      	ldr	r3, [pc, #52]	; (800b8ac <std+0x60>)
 800b878:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b87a:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <std+0x64>)
 800b87c:	6323      	str	r3, [r4, #48]	; 0x30
 800b87e:	4b0d      	ldr	r3, [pc, #52]	; (800b8b4 <std+0x68>)
 800b880:	6224      	str	r4, [r4, #32]
 800b882:	429c      	cmp	r4, r3
 800b884:	d006      	beq.n	800b894 <std+0x48>
 800b886:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b88a:	4294      	cmp	r4, r2
 800b88c:	d002      	beq.n	800b894 <std+0x48>
 800b88e:	33d0      	adds	r3, #208	; 0xd0
 800b890:	429c      	cmp	r4, r3
 800b892:	d105      	bne.n	800b8a0 <std+0x54>
 800b894:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b89c:	f000 b9ac 	b.w	800bbf8 <__retarget_lock_init_recursive>
 800b8a0:	bd10      	pop	{r4, pc}
 800b8a2:	bf00      	nop
 800b8a4:	0800ba79 	.word	0x0800ba79
 800b8a8:	0800ba9b 	.word	0x0800ba9b
 800b8ac:	0800bad3 	.word	0x0800bad3
 800b8b0:	0800baf7 	.word	0x0800baf7
 800b8b4:	200008e0 	.word	0x200008e0

0800b8b8 <stdio_exit_handler>:
 800b8b8:	4a02      	ldr	r2, [pc, #8]	; (800b8c4 <stdio_exit_handler+0xc>)
 800b8ba:	4903      	ldr	r1, [pc, #12]	; (800b8c8 <stdio_exit_handler+0x10>)
 800b8bc:	4803      	ldr	r0, [pc, #12]	; (800b8cc <stdio_exit_handler+0x14>)
 800b8be:	f000 b869 	b.w	800b994 <_fwalk_sglue>
 800b8c2:	bf00      	nop
 800b8c4:	200000d8 	.word	0x200000d8
 800b8c8:	0800d49d 	.word	0x0800d49d
 800b8cc:	200000e4 	.word	0x200000e4

0800b8d0 <cleanup_stdio>:
 800b8d0:	6841      	ldr	r1, [r0, #4]
 800b8d2:	4b0c      	ldr	r3, [pc, #48]	; (800b904 <cleanup_stdio+0x34>)
 800b8d4:	4299      	cmp	r1, r3
 800b8d6:	b510      	push	{r4, lr}
 800b8d8:	4604      	mov	r4, r0
 800b8da:	d001      	beq.n	800b8e0 <cleanup_stdio+0x10>
 800b8dc:	f001 fdde 	bl	800d49c <_fflush_r>
 800b8e0:	68a1      	ldr	r1, [r4, #8]
 800b8e2:	4b09      	ldr	r3, [pc, #36]	; (800b908 <cleanup_stdio+0x38>)
 800b8e4:	4299      	cmp	r1, r3
 800b8e6:	d002      	beq.n	800b8ee <cleanup_stdio+0x1e>
 800b8e8:	4620      	mov	r0, r4
 800b8ea:	f001 fdd7 	bl	800d49c <_fflush_r>
 800b8ee:	68e1      	ldr	r1, [r4, #12]
 800b8f0:	4b06      	ldr	r3, [pc, #24]	; (800b90c <cleanup_stdio+0x3c>)
 800b8f2:	4299      	cmp	r1, r3
 800b8f4:	d004      	beq.n	800b900 <cleanup_stdio+0x30>
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8fc:	f001 bdce 	b.w	800d49c <_fflush_r>
 800b900:	bd10      	pop	{r4, pc}
 800b902:	bf00      	nop
 800b904:	200008e0 	.word	0x200008e0
 800b908:	20000948 	.word	0x20000948
 800b90c:	200009b0 	.word	0x200009b0

0800b910 <global_stdio_init.part.0>:
 800b910:	b510      	push	{r4, lr}
 800b912:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <global_stdio_init.part.0+0x30>)
 800b914:	4c0b      	ldr	r4, [pc, #44]	; (800b944 <global_stdio_init.part.0+0x34>)
 800b916:	4a0c      	ldr	r2, [pc, #48]	; (800b948 <global_stdio_init.part.0+0x38>)
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	4620      	mov	r0, r4
 800b91c:	2200      	movs	r2, #0
 800b91e:	2104      	movs	r1, #4
 800b920:	f7ff ff94 	bl	800b84c <std>
 800b924:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b928:	2201      	movs	r2, #1
 800b92a:	2109      	movs	r1, #9
 800b92c:	f7ff ff8e 	bl	800b84c <std>
 800b930:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b934:	2202      	movs	r2, #2
 800b936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b93a:	2112      	movs	r1, #18
 800b93c:	f7ff bf86 	b.w	800b84c <std>
 800b940:	20000a18 	.word	0x20000a18
 800b944:	200008e0 	.word	0x200008e0
 800b948:	0800b8b9 	.word	0x0800b8b9

0800b94c <__sfp_lock_acquire>:
 800b94c:	4801      	ldr	r0, [pc, #4]	; (800b954 <__sfp_lock_acquire+0x8>)
 800b94e:	f000 b954 	b.w	800bbfa <__retarget_lock_acquire_recursive>
 800b952:	bf00      	nop
 800b954:	20000a21 	.word	0x20000a21

0800b958 <__sfp_lock_release>:
 800b958:	4801      	ldr	r0, [pc, #4]	; (800b960 <__sfp_lock_release+0x8>)
 800b95a:	f000 b94f 	b.w	800bbfc <__retarget_lock_release_recursive>
 800b95e:	bf00      	nop
 800b960:	20000a21 	.word	0x20000a21

0800b964 <__sinit>:
 800b964:	b510      	push	{r4, lr}
 800b966:	4604      	mov	r4, r0
 800b968:	f7ff fff0 	bl	800b94c <__sfp_lock_acquire>
 800b96c:	6a23      	ldr	r3, [r4, #32]
 800b96e:	b11b      	cbz	r3, 800b978 <__sinit+0x14>
 800b970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b974:	f7ff bff0 	b.w	800b958 <__sfp_lock_release>
 800b978:	4b04      	ldr	r3, [pc, #16]	; (800b98c <__sinit+0x28>)
 800b97a:	6223      	str	r3, [r4, #32]
 800b97c:	4b04      	ldr	r3, [pc, #16]	; (800b990 <__sinit+0x2c>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d1f5      	bne.n	800b970 <__sinit+0xc>
 800b984:	f7ff ffc4 	bl	800b910 <global_stdio_init.part.0>
 800b988:	e7f2      	b.n	800b970 <__sinit+0xc>
 800b98a:	bf00      	nop
 800b98c:	0800b8d1 	.word	0x0800b8d1
 800b990:	20000a18 	.word	0x20000a18

0800b994 <_fwalk_sglue>:
 800b994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b998:	4607      	mov	r7, r0
 800b99a:	4688      	mov	r8, r1
 800b99c:	4614      	mov	r4, r2
 800b99e:	2600      	movs	r6, #0
 800b9a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9a4:	f1b9 0901 	subs.w	r9, r9, #1
 800b9a8:	d505      	bpl.n	800b9b6 <_fwalk_sglue+0x22>
 800b9aa:	6824      	ldr	r4, [r4, #0]
 800b9ac:	2c00      	cmp	r4, #0
 800b9ae:	d1f7      	bne.n	800b9a0 <_fwalk_sglue+0xc>
 800b9b0:	4630      	mov	r0, r6
 800b9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b6:	89ab      	ldrh	r3, [r5, #12]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d907      	bls.n	800b9cc <_fwalk_sglue+0x38>
 800b9bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	d003      	beq.n	800b9cc <_fwalk_sglue+0x38>
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	47c0      	blx	r8
 800b9ca:	4306      	orrs	r6, r0
 800b9cc:	3568      	adds	r5, #104	; 0x68
 800b9ce:	e7e9      	b.n	800b9a4 <_fwalk_sglue+0x10>

0800b9d0 <sniprintf>:
 800b9d0:	b40c      	push	{r2, r3}
 800b9d2:	b530      	push	{r4, r5, lr}
 800b9d4:	4b17      	ldr	r3, [pc, #92]	; (800ba34 <sniprintf+0x64>)
 800b9d6:	1e0c      	subs	r4, r1, #0
 800b9d8:	681d      	ldr	r5, [r3, #0]
 800b9da:	b09d      	sub	sp, #116	; 0x74
 800b9dc:	da08      	bge.n	800b9f0 <sniprintf+0x20>
 800b9de:	238b      	movs	r3, #139	; 0x8b
 800b9e0:	602b      	str	r3, [r5, #0]
 800b9e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e6:	b01d      	add	sp, #116	; 0x74
 800b9e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9ec:	b002      	add	sp, #8
 800b9ee:	4770      	bx	lr
 800b9f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b9f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b9f8:	bf14      	ite	ne
 800b9fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b9fe:	4623      	moveq	r3, r4
 800ba00:	9304      	str	r3, [sp, #16]
 800ba02:	9307      	str	r3, [sp, #28]
 800ba04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba08:	9002      	str	r0, [sp, #8]
 800ba0a:	9006      	str	r0, [sp, #24]
 800ba0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ba10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ba12:	ab21      	add	r3, sp, #132	; 0x84
 800ba14:	a902      	add	r1, sp, #8
 800ba16:	4628      	mov	r0, r5
 800ba18:	9301      	str	r3, [sp, #4]
 800ba1a:	f001 fbbb 	bl	800d194 <_svfiprintf_r>
 800ba1e:	1c43      	adds	r3, r0, #1
 800ba20:	bfbc      	itt	lt
 800ba22:	238b      	movlt	r3, #139	; 0x8b
 800ba24:	602b      	strlt	r3, [r5, #0]
 800ba26:	2c00      	cmp	r4, #0
 800ba28:	d0dd      	beq.n	800b9e6 <sniprintf+0x16>
 800ba2a:	9b02      	ldr	r3, [sp, #8]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	e7d9      	b.n	800b9e6 <sniprintf+0x16>
 800ba32:	bf00      	nop
 800ba34:	20000130 	.word	0x20000130

0800ba38 <siprintf>:
 800ba38:	b40e      	push	{r1, r2, r3}
 800ba3a:	b500      	push	{lr}
 800ba3c:	b09c      	sub	sp, #112	; 0x70
 800ba3e:	ab1d      	add	r3, sp, #116	; 0x74
 800ba40:	9002      	str	r0, [sp, #8]
 800ba42:	9006      	str	r0, [sp, #24]
 800ba44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba48:	4809      	ldr	r0, [pc, #36]	; (800ba70 <siprintf+0x38>)
 800ba4a:	9107      	str	r1, [sp, #28]
 800ba4c:	9104      	str	r1, [sp, #16]
 800ba4e:	4909      	ldr	r1, [pc, #36]	; (800ba74 <siprintf+0x3c>)
 800ba50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba54:	9105      	str	r1, [sp, #20]
 800ba56:	6800      	ldr	r0, [r0, #0]
 800ba58:	9301      	str	r3, [sp, #4]
 800ba5a:	a902      	add	r1, sp, #8
 800ba5c:	f001 fb9a 	bl	800d194 <_svfiprintf_r>
 800ba60:	9b02      	ldr	r3, [sp, #8]
 800ba62:	2200      	movs	r2, #0
 800ba64:	701a      	strb	r2, [r3, #0]
 800ba66:	b01c      	add	sp, #112	; 0x70
 800ba68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba6c:	b003      	add	sp, #12
 800ba6e:	4770      	bx	lr
 800ba70:	20000130 	.word	0x20000130
 800ba74:	ffff0208 	.word	0xffff0208

0800ba78 <__sread>:
 800ba78:	b510      	push	{r4, lr}
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba80:	f000 f86c 	bl	800bb5c <_read_r>
 800ba84:	2800      	cmp	r0, #0
 800ba86:	bfab      	itete	ge
 800ba88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ba8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ba8c:	181b      	addge	r3, r3, r0
 800ba8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ba92:	bfac      	ite	ge
 800ba94:	6563      	strge	r3, [r4, #84]	; 0x54
 800ba96:	81a3      	strhlt	r3, [r4, #12]
 800ba98:	bd10      	pop	{r4, pc}

0800ba9a <__swrite>:
 800ba9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba9e:	461f      	mov	r7, r3
 800baa0:	898b      	ldrh	r3, [r1, #12]
 800baa2:	05db      	lsls	r3, r3, #23
 800baa4:	4605      	mov	r5, r0
 800baa6:	460c      	mov	r4, r1
 800baa8:	4616      	mov	r6, r2
 800baaa:	d505      	bpl.n	800bab8 <__swrite+0x1e>
 800baac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab0:	2302      	movs	r3, #2
 800bab2:	2200      	movs	r2, #0
 800bab4:	f000 f840 	bl	800bb38 <_lseek_r>
 800bab8:	89a3      	ldrh	r3, [r4, #12]
 800baba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800babe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bac2:	81a3      	strh	r3, [r4, #12]
 800bac4:	4632      	mov	r2, r6
 800bac6:	463b      	mov	r3, r7
 800bac8:	4628      	mov	r0, r5
 800baca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bace:	f000 b857 	b.w	800bb80 <_write_r>

0800bad2 <__sseek>:
 800bad2:	b510      	push	{r4, lr}
 800bad4:	460c      	mov	r4, r1
 800bad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bada:	f000 f82d 	bl	800bb38 <_lseek_r>
 800bade:	1c43      	adds	r3, r0, #1
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	bf15      	itete	ne
 800bae4:	6560      	strne	r0, [r4, #84]	; 0x54
 800bae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800baea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800baee:	81a3      	strheq	r3, [r4, #12]
 800baf0:	bf18      	it	ne
 800baf2:	81a3      	strhne	r3, [r4, #12]
 800baf4:	bd10      	pop	{r4, pc}

0800baf6 <__sclose>:
 800baf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bafa:	f000 b80d 	b.w	800bb18 <_close_r>

0800bafe <memset>:
 800bafe:	4402      	add	r2, r0
 800bb00:	4603      	mov	r3, r0
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d100      	bne.n	800bb08 <memset+0xa>
 800bb06:	4770      	bx	lr
 800bb08:	f803 1b01 	strb.w	r1, [r3], #1
 800bb0c:	e7f9      	b.n	800bb02 <memset+0x4>
	...

0800bb10 <_localeconv_r>:
 800bb10:	4800      	ldr	r0, [pc, #0]	; (800bb14 <_localeconv_r+0x4>)
 800bb12:	4770      	bx	lr
 800bb14:	20000224 	.word	0x20000224

0800bb18 <_close_r>:
 800bb18:	b538      	push	{r3, r4, r5, lr}
 800bb1a:	4d06      	ldr	r5, [pc, #24]	; (800bb34 <_close_r+0x1c>)
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	4604      	mov	r4, r0
 800bb20:	4608      	mov	r0, r1
 800bb22:	602b      	str	r3, [r5, #0]
 800bb24:	f7f8 f941 	bl	8003daa <_close>
 800bb28:	1c43      	adds	r3, r0, #1
 800bb2a:	d102      	bne.n	800bb32 <_close_r+0x1a>
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	b103      	cbz	r3, 800bb32 <_close_r+0x1a>
 800bb30:	6023      	str	r3, [r4, #0]
 800bb32:	bd38      	pop	{r3, r4, r5, pc}
 800bb34:	20000a1c 	.word	0x20000a1c

0800bb38 <_lseek_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4d07      	ldr	r5, [pc, #28]	; (800bb58 <_lseek_r+0x20>)
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	4608      	mov	r0, r1
 800bb40:	4611      	mov	r1, r2
 800bb42:	2200      	movs	r2, #0
 800bb44:	602a      	str	r2, [r5, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	f7f8 f956 	bl	8003df8 <_lseek>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_lseek_r+0x1e>
 800bb50:	682b      	ldr	r3, [r5, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_lseek_r+0x1e>
 800bb54:	6023      	str	r3, [r4, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	20000a1c 	.word	0x20000a1c

0800bb5c <_read_r>:
 800bb5c:	b538      	push	{r3, r4, r5, lr}
 800bb5e:	4d07      	ldr	r5, [pc, #28]	; (800bb7c <_read_r+0x20>)
 800bb60:	4604      	mov	r4, r0
 800bb62:	4608      	mov	r0, r1
 800bb64:	4611      	mov	r1, r2
 800bb66:	2200      	movs	r2, #0
 800bb68:	602a      	str	r2, [r5, #0]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f7f8 f8e4 	bl	8003d38 <_read>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_read_r+0x1e>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_read_r+0x1e>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	20000a1c 	.word	0x20000a1c

0800bb80 <_write_r>:
 800bb80:	b538      	push	{r3, r4, r5, lr}
 800bb82:	4d07      	ldr	r5, [pc, #28]	; (800bba0 <_write_r+0x20>)
 800bb84:	4604      	mov	r4, r0
 800bb86:	4608      	mov	r0, r1
 800bb88:	4611      	mov	r1, r2
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	602a      	str	r2, [r5, #0]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	f7f8 f8ef 	bl	8003d72 <_write>
 800bb94:	1c43      	adds	r3, r0, #1
 800bb96:	d102      	bne.n	800bb9e <_write_r+0x1e>
 800bb98:	682b      	ldr	r3, [r5, #0]
 800bb9a:	b103      	cbz	r3, 800bb9e <_write_r+0x1e>
 800bb9c:	6023      	str	r3, [r4, #0]
 800bb9e:	bd38      	pop	{r3, r4, r5, pc}
 800bba0:	20000a1c 	.word	0x20000a1c

0800bba4 <__errno>:
 800bba4:	4b01      	ldr	r3, [pc, #4]	; (800bbac <__errno+0x8>)
 800bba6:	6818      	ldr	r0, [r3, #0]
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	20000130 	.word	0x20000130

0800bbb0 <__libc_init_array>:
 800bbb0:	b570      	push	{r4, r5, r6, lr}
 800bbb2:	4d0d      	ldr	r5, [pc, #52]	; (800bbe8 <__libc_init_array+0x38>)
 800bbb4:	4c0d      	ldr	r4, [pc, #52]	; (800bbec <__libc_init_array+0x3c>)
 800bbb6:	1b64      	subs	r4, r4, r5
 800bbb8:	10a4      	asrs	r4, r4, #2
 800bbba:	2600      	movs	r6, #0
 800bbbc:	42a6      	cmp	r6, r4
 800bbbe:	d109      	bne.n	800bbd4 <__libc_init_array+0x24>
 800bbc0:	4d0b      	ldr	r5, [pc, #44]	; (800bbf0 <__libc_init_array+0x40>)
 800bbc2:	4c0c      	ldr	r4, [pc, #48]	; (800bbf4 <__libc_init_array+0x44>)
 800bbc4:	f002 fe48 	bl	800e858 <_init>
 800bbc8:	1b64      	subs	r4, r4, r5
 800bbca:	10a4      	asrs	r4, r4, #2
 800bbcc:	2600      	movs	r6, #0
 800bbce:	42a6      	cmp	r6, r4
 800bbd0:	d105      	bne.n	800bbde <__libc_init_array+0x2e>
 800bbd2:	bd70      	pop	{r4, r5, r6, pc}
 800bbd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbd8:	4798      	blx	r3
 800bbda:	3601      	adds	r6, #1
 800bbdc:	e7ee      	b.n	800bbbc <__libc_init_array+0xc>
 800bbde:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbe2:	4798      	blx	r3
 800bbe4:	3601      	adds	r6, #1
 800bbe6:	e7f2      	b.n	800bbce <__libc_init_array+0x1e>
 800bbe8:	0800f270 	.word	0x0800f270
 800bbec:	0800f270 	.word	0x0800f270
 800bbf0:	0800f270 	.word	0x0800f270
 800bbf4:	0800f274 	.word	0x0800f274

0800bbf8 <__retarget_lock_init_recursive>:
 800bbf8:	4770      	bx	lr

0800bbfa <__retarget_lock_acquire_recursive>:
 800bbfa:	4770      	bx	lr

0800bbfc <__retarget_lock_release_recursive>:
 800bbfc:	4770      	bx	lr

0800bbfe <quorem>:
 800bbfe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc02:	6903      	ldr	r3, [r0, #16]
 800bc04:	690c      	ldr	r4, [r1, #16]
 800bc06:	42a3      	cmp	r3, r4
 800bc08:	4607      	mov	r7, r0
 800bc0a:	db7e      	blt.n	800bd0a <quorem+0x10c>
 800bc0c:	3c01      	subs	r4, #1
 800bc0e:	f101 0814 	add.w	r8, r1, #20
 800bc12:	f100 0514 	add.w	r5, r0, #20
 800bc16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc1a:	9301      	str	r3, [sp, #4]
 800bc1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bc20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bc24:	3301      	adds	r3, #1
 800bc26:	429a      	cmp	r2, r3
 800bc28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bc2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bc30:	fbb2 f6f3 	udiv	r6, r2, r3
 800bc34:	d331      	bcc.n	800bc9a <quorem+0x9c>
 800bc36:	f04f 0e00 	mov.w	lr, #0
 800bc3a:	4640      	mov	r0, r8
 800bc3c:	46ac      	mov	ip, r5
 800bc3e:	46f2      	mov	sl, lr
 800bc40:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc44:	b293      	uxth	r3, r2
 800bc46:	fb06 e303 	mla	r3, r6, r3, lr
 800bc4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc4e:	0c1a      	lsrs	r2, r3, #16
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	ebaa 0303 	sub.w	r3, sl, r3
 800bc56:	f8dc a000 	ldr.w	sl, [ip]
 800bc5a:	fa13 f38a 	uxtah	r3, r3, sl
 800bc5e:	fb06 220e 	mla	r2, r6, lr, r2
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	9b00      	ldr	r3, [sp, #0]
 800bc66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bc6a:	b292      	uxth	r2, r2
 800bc6c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bc70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bc74:	f8bd 3000 	ldrh.w	r3, [sp]
 800bc78:	4581      	cmp	r9, r0
 800bc7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bc7e:	f84c 3b04 	str.w	r3, [ip], #4
 800bc82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bc86:	d2db      	bcs.n	800bc40 <quorem+0x42>
 800bc88:	f855 300b 	ldr.w	r3, [r5, fp]
 800bc8c:	b92b      	cbnz	r3, 800bc9a <quorem+0x9c>
 800bc8e:	9b01      	ldr	r3, [sp, #4]
 800bc90:	3b04      	subs	r3, #4
 800bc92:	429d      	cmp	r5, r3
 800bc94:	461a      	mov	r2, r3
 800bc96:	d32c      	bcc.n	800bcf2 <quorem+0xf4>
 800bc98:	613c      	str	r4, [r7, #16]
 800bc9a:	4638      	mov	r0, r7
 800bc9c:	f001 f920 	bl	800cee0 <__mcmp>
 800bca0:	2800      	cmp	r0, #0
 800bca2:	db22      	blt.n	800bcea <quorem+0xec>
 800bca4:	3601      	adds	r6, #1
 800bca6:	4629      	mov	r1, r5
 800bca8:	2000      	movs	r0, #0
 800bcaa:	f858 2b04 	ldr.w	r2, [r8], #4
 800bcae:	f8d1 c000 	ldr.w	ip, [r1]
 800bcb2:	b293      	uxth	r3, r2
 800bcb4:	1ac3      	subs	r3, r0, r3
 800bcb6:	0c12      	lsrs	r2, r2, #16
 800bcb8:	fa13 f38c 	uxtah	r3, r3, ip
 800bcbc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800bcc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcca:	45c1      	cmp	r9, r8
 800bccc:	f841 3b04 	str.w	r3, [r1], #4
 800bcd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bcd4:	d2e9      	bcs.n	800bcaa <quorem+0xac>
 800bcd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcde:	b922      	cbnz	r2, 800bcea <quorem+0xec>
 800bce0:	3b04      	subs	r3, #4
 800bce2:	429d      	cmp	r5, r3
 800bce4:	461a      	mov	r2, r3
 800bce6:	d30a      	bcc.n	800bcfe <quorem+0x100>
 800bce8:	613c      	str	r4, [r7, #16]
 800bcea:	4630      	mov	r0, r6
 800bcec:	b003      	add	sp, #12
 800bcee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf2:	6812      	ldr	r2, [r2, #0]
 800bcf4:	3b04      	subs	r3, #4
 800bcf6:	2a00      	cmp	r2, #0
 800bcf8:	d1ce      	bne.n	800bc98 <quorem+0x9a>
 800bcfa:	3c01      	subs	r4, #1
 800bcfc:	e7c9      	b.n	800bc92 <quorem+0x94>
 800bcfe:	6812      	ldr	r2, [r2, #0]
 800bd00:	3b04      	subs	r3, #4
 800bd02:	2a00      	cmp	r2, #0
 800bd04:	d1f0      	bne.n	800bce8 <quorem+0xea>
 800bd06:	3c01      	subs	r4, #1
 800bd08:	e7eb      	b.n	800bce2 <quorem+0xe4>
 800bd0a:	2000      	movs	r0, #0
 800bd0c:	e7ee      	b.n	800bcec <quorem+0xee>
	...

0800bd10 <_dtoa_r>:
 800bd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd14:	ed2d 8b02 	vpush	{d8}
 800bd18:	69c5      	ldr	r5, [r0, #28]
 800bd1a:	b091      	sub	sp, #68	; 0x44
 800bd1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bd20:	ec59 8b10 	vmov	r8, r9, d0
 800bd24:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800bd26:	9106      	str	r1, [sp, #24]
 800bd28:	4606      	mov	r6, r0
 800bd2a:	9208      	str	r2, [sp, #32]
 800bd2c:	930c      	str	r3, [sp, #48]	; 0x30
 800bd2e:	b975      	cbnz	r5, 800bd4e <_dtoa_r+0x3e>
 800bd30:	2010      	movs	r0, #16
 800bd32:	f000 fda5 	bl	800c880 <malloc>
 800bd36:	4602      	mov	r2, r0
 800bd38:	61f0      	str	r0, [r6, #28]
 800bd3a:	b920      	cbnz	r0, 800bd46 <_dtoa_r+0x36>
 800bd3c:	4ba6      	ldr	r3, [pc, #664]	; (800bfd8 <_dtoa_r+0x2c8>)
 800bd3e:	21ef      	movs	r1, #239	; 0xef
 800bd40:	48a6      	ldr	r0, [pc, #664]	; (800bfdc <_dtoa_r+0x2cc>)
 800bd42:	f001 fc0b 	bl	800d55c <__assert_func>
 800bd46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd4a:	6005      	str	r5, [r0, #0]
 800bd4c:	60c5      	str	r5, [r0, #12]
 800bd4e:	69f3      	ldr	r3, [r6, #28]
 800bd50:	6819      	ldr	r1, [r3, #0]
 800bd52:	b151      	cbz	r1, 800bd6a <_dtoa_r+0x5a>
 800bd54:	685a      	ldr	r2, [r3, #4]
 800bd56:	604a      	str	r2, [r1, #4]
 800bd58:	2301      	movs	r3, #1
 800bd5a:	4093      	lsls	r3, r2
 800bd5c:	608b      	str	r3, [r1, #8]
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f000 fe82 	bl	800ca68 <_Bfree>
 800bd64:	69f3      	ldr	r3, [r6, #28]
 800bd66:	2200      	movs	r2, #0
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	f1b9 0300 	subs.w	r3, r9, #0
 800bd6e:	bfbb      	ittet	lt
 800bd70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bd74:	9303      	strlt	r3, [sp, #12]
 800bd76:	2300      	movge	r3, #0
 800bd78:	2201      	movlt	r2, #1
 800bd7a:	bfac      	ite	ge
 800bd7c:	6023      	strge	r3, [r4, #0]
 800bd7e:	6022      	strlt	r2, [r4, #0]
 800bd80:	4b97      	ldr	r3, [pc, #604]	; (800bfe0 <_dtoa_r+0x2d0>)
 800bd82:	9c03      	ldr	r4, [sp, #12]
 800bd84:	43a3      	bics	r3, r4
 800bd86:	d11c      	bne.n	800bdc2 <_dtoa_r+0xb2>
 800bd88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd8a:	f242 730f 	movw	r3, #9999	; 0x270f
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bd94:	ea53 0308 	orrs.w	r3, r3, r8
 800bd98:	f000 84fb 	beq.w	800c792 <_dtoa_r+0xa82>
 800bd9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bd9e:	b963      	cbnz	r3, 800bdba <_dtoa_r+0xaa>
 800bda0:	4b90      	ldr	r3, [pc, #576]	; (800bfe4 <_dtoa_r+0x2d4>)
 800bda2:	e020      	b.n	800bde6 <_dtoa_r+0xd6>
 800bda4:	4b90      	ldr	r3, [pc, #576]	; (800bfe8 <_dtoa_r+0x2d8>)
 800bda6:	9301      	str	r3, [sp, #4]
 800bda8:	3308      	adds	r3, #8
 800bdaa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bdac:	6013      	str	r3, [r2, #0]
 800bdae:	9801      	ldr	r0, [sp, #4]
 800bdb0:	b011      	add	sp, #68	; 0x44
 800bdb2:	ecbd 8b02 	vpop	{d8}
 800bdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdba:	4b8a      	ldr	r3, [pc, #552]	; (800bfe4 <_dtoa_r+0x2d4>)
 800bdbc:	9301      	str	r3, [sp, #4]
 800bdbe:	3303      	adds	r3, #3
 800bdc0:	e7f3      	b.n	800bdaa <_dtoa_r+0x9a>
 800bdc2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bdc6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdce:	d10c      	bne.n	800bdea <_dtoa_r+0xda>
 800bdd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	6013      	str	r3, [r2, #0]
 800bdd6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f000 84d7 	beq.w	800c78c <_dtoa_r+0xa7c>
 800bdde:	4b83      	ldr	r3, [pc, #524]	; (800bfec <_dtoa_r+0x2dc>)
 800bde0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	9301      	str	r3, [sp, #4]
 800bde8:	e7e1      	b.n	800bdae <_dtoa_r+0x9e>
 800bdea:	aa0e      	add	r2, sp, #56	; 0x38
 800bdec:	a90f      	add	r1, sp, #60	; 0x3c
 800bdee:	4630      	mov	r0, r6
 800bdf0:	eeb0 0b48 	vmov.f64	d0, d8
 800bdf4:	f001 f91a 	bl	800d02c <__d2b>
 800bdf8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800bdfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdfe:	4605      	mov	r5, r0
 800be00:	2b00      	cmp	r3, #0
 800be02:	d046      	beq.n	800be92 <_dtoa_r+0x182>
 800be04:	eeb0 7b48 	vmov.f64	d7, d8
 800be08:	ee18 1a90 	vmov	r1, s17
 800be0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800be10:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800be14:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800be18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800be1c:	2000      	movs	r0, #0
 800be1e:	ee07 1a90 	vmov	s15, r1
 800be22:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800be26:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800bfc0 <_dtoa_r+0x2b0>
 800be2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800be2e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800bfc8 <_dtoa_r+0x2b8>
 800be32:	eea7 6b05 	vfma.f64	d6, d7, d5
 800be36:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800bfd0 <_dtoa_r+0x2c0>
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800be42:	eeb0 7b46 	vmov.f64	d7, d6
 800be46:	eea4 7b05 	vfma.f64	d7, d4, d5
 800be4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800be4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800be52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be56:	ee16 ba90 	vmov	fp, s13
 800be5a:	9009      	str	r0, [sp, #36]	; 0x24
 800be5c:	d508      	bpl.n	800be70 <_dtoa_r+0x160>
 800be5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800be62:	eeb4 6b47 	vcmp.f64	d6, d7
 800be66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6a:	bf18      	it	ne
 800be6c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800be70:	f1bb 0f16 	cmp.w	fp, #22
 800be74:	d82b      	bhi.n	800bece <_dtoa_r+0x1be>
 800be76:	495e      	ldr	r1, [pc, #376]	; (800bff0 <_dtoa_r+0x2e0>)
 800be78:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800be7c:	ed91 7b00 	vldr	d7, [r1]
 800be80:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800be84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be88:	d501      	bpl.n	800be8e <_dtoa_r+0x17e>
 800be8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be8e:	2100      	movs	r1, #0
 800be90:	e01e      	b.n	800bed0 <_dtoa_r+0x1c0>
 800be92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800be94:	4413      	add	r3, r2
 800be96:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800be9a:	2920      	cmp	r1, #32
 800be9c:	bfc1      	itttt	gt
 800be9e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800bea2:	408c      	lslgt	r4, r1
 800bea4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800bea8:	fa28 f101 	lsrgt.w	r1, r8, r1
 800beac:	bfd6      	itet	le
 800beae:	f1c1 0120 	rsble	r1, r1, #32
 800beb2:	4321      	orrgt	r1, r4
 800beb4:	fa08 f101 	lslle.w	r1, r8, r1
 800beb8:	ee07 1a90 	vmov	s15, r1
 800bebc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bec0:	3b01      	subs	r3, #1
 800bec2:	ee17 1a90 	vmov	r1, s15
 800bec6:	2001      	movs	r0, #1
 800bec8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800becc:	e7a7      	b.n	800be1e <_dtoa_r+0x10e>
 800bece:	2101      	movs	r1, #1
 800bed0:	1ad2      	subs	r2, r2, r3
 800bed2:	1e53      	subs	r3, r2, #1
 800bed4:	9305      	str	r3, [sp, #20]
 800bed6:	bf45      	ittet	mi
 800bed8:	f1c2 0301 	rsbmi	r3, r2, #1
 800bedc:	9304      	strmi	r3, [sp, #16]
 800bede:	2300      	movpl	r3, #0
 800bee0:	2300      	movmi	r3, #0
 800bee2:	bf4c      	ite	mi
 800bee4:	9305      	strmi	r3, [sp, #20]
 800bee6:	9304      	strpl	r3, [sp, #16]
 800bee8:	f1bb 0f00 	cmp.w	fp, #0
 800beec:	910b      	str	r1, [sp, #44]	; 0x2c
 800beee:	db18      	blt.n	800bf22 <_dtoa_r+0x212>
 800bef0:	9b05      	ldr	r3, [sp, #20]
 800bef2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800bef6:	445b      	add	r3, fp
 800bef8:	9305      	str	r3, [sp, #20]
 800befa:	2300      	movs	r3, #0
 800befc:	9a06      	ldr	r2, [sp, #24]
 800befe:	2a09      	cmp	r2, #9
 800bf00:	d848      	bhi.n	800bf94 <_dtoa_r+0x284>
 800bf02:	2a05      	cmp	r2, #5
 800bf04:	bfc4      	itt	gt
 800bf06:	3a04      	subgt	r2, #4
 800bf08:	9206      	strgt	r2, [sp, #24]
 800bf0a:	9a06      	ldr	r2, [sp, #24]
 800bf0c:	f1a2 0202 	sub.w	r2, r2, #2
 800bf10:	bfcc      	ite	gt
 800bf12:	2400      	movgt	r4, #0
 800bf14:	2401      	movle	r4, #1
 800bf16:	2a03      	cmp	r2, #3
 800bf18:	d847      	bhi.n	800bfaa <_dtoa_r+0x29a>
 800bf1a:	e8df f002 	tbb	[pc, r2]
 800bf1e:	2d0b      	.short	0x2d0b
 800bf20:	392b      	.short	0x392b
 800bf22:	9b04      	ldr	r3, [sp, #16]
 800bf24:	2200      	movs	r2, #0
 800bf26:	eba3 030b 	sub.w	r3, r3, fp
 800bf2a:	9304      	str	r3, [sp, #16]
 800bf2c:	920a      	str	r2, [sp, #40]	; 0x28
 800bf2e:	f1cb 0300 	rsb	r3, fp, #0
 800bf32:	e7e3      	b.n	800befc <_dtoa_r+0x1ec>
 800bf34:	2200      	movs	r2, #0
 800bf36:	9207      	str	r2, [sp, #28]
 800bf38:	9a08      	ldr	r2, [sp, #32]
 800bf3a:	2a00      	cmp	r2, #0
 800bf3c:	dc38      	bgt.n	800bfb0 <_dtoa_r+0x2a0>
 800bf3e:	f04f 0a01 	mov.w	sl, #1
 800bf42:	46d1      	mov	r9, sl
 800bf44:	4652      	mov	r2, sl
 800bf46:	f8cd a020 	str.w	sl, [sp, #32]
 800bf4a:	69f7      	ldr	r7, [r6, #28]
 800bf4c:	2100      	movs	r1, #0
 800bf4e:	2004      	movs	r0, #4
 800bf50:	f100 0c14 	add.w	ip, r0, #20
 800bf54:	4594      	cmp	ip, r2
 800bf56:	d930      	bls.n	800bfba <_dtoa_r+0x2aa>
 800bf58:	6079      	str	r1, [r7, #4]
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	930d      	str	r3, [sp, #52]	; 0x34
 800bf5e:	f000 fd43 	bl	800c9e8 <_Balloc>
 800bf62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf64:	9001      	str	r0, [sp, #4]
 800bf66:	4602      	mov	r2, r0
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	d145      	bne.n	800bff8 <_dtoa_r+0x2e8>
 800bf6c:	4b21      	ldr	r3, [pc, #132]	; (800bff4 <_dtoa_r+0x2e4>)
 800bf6e:	f240 11af 	movw	r1, #431	; 0x1af
 800bf72:	e6e5      	b.n	800bd40 <_dtoa_r+0x30>
 800bf74:	2201      	movs	r2, #1
 800bf76:	e7de      	b.n	800bf36 <_dtoa_r+0x226>
 800bf78:	2200      	movs	r2, #0
 800bf7a:	9207      	str	r2, [sp, #28]
 800bf7c:	9a08      	ldr	r2, [sp, #32]
 800bf7e:	eb0b 0a02 	add.w	sl, fp, r2
 800bf82:	f10a 0901 	add.w	r9, sl, #1
 800bf86:	464a      	mov	r2, r9
 800bf88:	2a01      	cmp	r2, #1
 800bf8a:	bfb8      	it	lt
 800bf8c:	2201      	movlt	r2, #1
 800bf8e:	e7dc      	b.n	800bf4a <_dtoa_r+0x23a>
 800bf90:	2201      	movs	r2, #1
 800bf92:	e7f2      	b.n	800bf7a <_dtoa_r+0x26a>
 800bf94:	2401      	movs	r4, #1
 800bf96:	2200      	movs	r2, #0
 800bf98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800bf9c:	f04f 3aff 	mov.w	sl, #4294967295
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	46d1      	mov	r9, sl
 800bfa4:	2212      	movs	r2, #18
 800bfa6:	9108      	str	r1, [sp, #32]
 800bfa8:	e7cf      	b.n	800bf4a <_dtoa_r+0x23a>
 800bfaa:	2201      	movs	r2, #1
 800bfac:	9207      	str	r2, [sp, #28]
 800bfae:	e7f5      	b.n	800bf9c <_dtoa_r+0x28c>
 800bfb0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bfb4:	46d1      	mov	r9, sl
 800bfb6:	4652      	mov	r2, sl
 800bfb8:	e7c7      	b.n	800bf4a <_dtoa_r+0x23a>
 800bfba:	3101      	adds	r1, #1
 800bfbc:	0040      	lsls	r0, r0, #1
 800bfbe:	e7c7      	b.n	800bf50 <_dtoa_r+0x240>
 800bfc0:	636f4361 	.word	0x636f4361
 800bfc4:	3fd287a7 	.word	0x3fd287a7
 800bfc8:	8b60c8b3 	.word	0x8b60c8b3
 800bfcc:	3fc68a28 	.word	0x3fc68a28
 800bfd0:	509f79fb 	.word	0x509f79fb
 800bfd4:	3fd34413 	.word	0x3fd34413
 800bfd8:	0800ed59 	.word	0x0800ed59
 800bfdc:	0800ed70 	.word	0x0800ed70
 800bfe0:	7ff00000 	.word	0x7ff00000
 800bfe4:	0800ed55 	.word	0x0800ed55
 800bfe8:	0800ed4c 	.word	0x0800ed4c
 800bfec:	0800ed29 	.word	0x0800ed29
 800bff0:	0800ee60 	.word	0x0800ee60
 800bff4:	0800edc8 	.word	0x0800edc8
 800bff8:	69f2      	ldr	r2, [r6, #28]
 800bffa:	9901      	ldr	r1, [sp, #4]
 800bffc:	6011      	str	r1, [r2, #0]
 800bffe:	f1b9 0f0e 	cmp.w	r9, #14
 800c002:	d86c      	bhi.n	800c0de <_dtoa_r+0x3ce>
 800c004:	2c00      	cmp	r4, #0
 800c006:	d06a      	beq.n	800c0de <_dtoa_r+0x3ce>
 800c008:	f1bb 0f00 	cmp.w	fp, #0
 800c00c:	f340 80a0 	ble.w	800c150 <_dtoa_r+0x440>
 800c010:	4ac1      	ldr	r2, [pc, #772]	; (800c318 <_dtoa_r+0x608>)
 800c012:	f00b 010f 	and.w	r1, fp, #15
 800c016:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c01a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c01e:	ed92 7b00 	vldr	d7, [r2]
 800c022:	ea4f 122b 	mov.w	r2, fp, asr #4
 800c026:	f000 8087 	beq.w	800c138 <_dtoa_r+0x428>
 800c02a:	49bc      	ldr	r1, [pc, #752]	; (800c31c <_dtoa_r+0x60c>)
 800c02c:	ed91 6b08 	vldr	d6, [r1, #32]
 800c030:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c034:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c038:	f002 020f 	and.w	r2, r2, #15
 800c03c:	2103      	movs	r1, #3
 800c03e:	48b7      	ldr	r0, [pc, #732]	; (800c31c <_dtoa_r+0x60c>)
 800c040:	2a00      	cmp	r2, #0
 800c042:	d17b      	bne.n	800c13c <_dtoa_r+0x42c>
 800c044:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c048:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c04c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c050:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c052:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c056:	2a00      	cmp	r2, #0
 800c058:	f000 80a0 	beq.w	800c19c <_dtoa_r+0x48c>
 800c05c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800c060:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c068:	f140 8098 	bpl.w	800c19c <_dtoa_r+0x48c>
 800c06c:	f1b9 0f00 	cmp.w	r9, #0
 800c070:	f000 8094 	beq.w	800c19c <_dtoa_r+0x48c>
 800c074:	f1ba 0f00 	cmp.w	sl, #0
 800c078:	dd2f      	ble.n	800c0da <_dtoa_r+0x3ca>
 800c07a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800c07e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c082:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c086:	f10b 32ff 	add.w	r2, fp, #4294967295
 800c08a:	3101      	adds	r1, #1
 800c08c:	4654      	mov	r4, sl
 800c08e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c092:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800c096:	ee07 1a90 	vmov	s15, r1
 800c09a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c09e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800c0a2:	ee15 7a90 	vmov	r7, s11
 800c0a6:	ec51 0b15 	vmov	r0, r1, d5
 800c0aa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800c0ae:	2c00      	cmp	r4, #0
 800c0b0:	d177      	bne.n	800c1a2 <_dtoa_r+0x492>
 800c0b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c0b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c0ba:	ec41 0b17 	vmov	d7, r0, r1
 800c0be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c6:	f300 826a 	bgt.w	800c59e <_dtoa_r+0x88e>
 800c0ca:	eeb1 7b47 	vneg.f64	d7, d7
 800c0ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d6:	f100 8260 	bmi.w	800c59a <_dtoa_r+0x88a>
 800c0da:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c0de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c0e0:	2a00      	cmp	r2, #0
 800c0e2:	f2c0 811d 	blt.w	800c320 <_dtoa_r+0x610>
 800c0e6:	f1bb 0f0e 	cmp.w	fp, #14
 800c0ea:	f300 8119 	bgt.w	800c320 <_dtoa_r+0x610>
 800c0ee:	4b8a      	ldr	r3, [pc, #552]	; (800c318 <_dtoa_r+0x608>)
 800c0f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c0f4:	ed93 6b00 	vldr	d6, [r3]
 800c0f8:	9b08      	ldr	r3, [sp, #32]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f280 80b7 	bge.w	800c26e <_dtoa_r+0x55e>
 800c100:	f1b9 0f00 	cmp.w	r9, #0
 800c104:	f300 80b3 	bgt.w	800c26e <_dtoa_r+0x55e>
 800c108:	f040 8246 	bne.w	800c598 <_dtoa_r+0x888>
 800c10c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800c110:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c114:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c118:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c120:	464c      	mov	r4, r9
 800c122:	464f      	mov	r7, r9
 800c124:	f280 821c 	bge.w	800c560 <_dtoa_r+0x850>
 800c128:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c12c:	2331      	movs	r3, #49	; 0x31
 800c12e:	f808 3b01 	strb.w	r3, [r8], #1
 800c132:	f10b 0b01 	add.w	fp, fp, #1
 800c136:	e218      	b.n	800c56a <_dtoa_r+0x85a>
 800c138:	2102      	movs	r1, #2
 800c13a:	e780      	b.n	800c03e <_dtoa_r+0x32e>
 800c13c:	07d4      	lsls	r4, r2, #31
 800c13e:	d504      	bpl.n	800c14a <_dtoa_r+0x43a>
 800c140:	ed90 6b00 	vldr	d6, [r0]
 800c144:	3101      	adds	r1, #1
 800c146:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c14a:	1052      	asrs	r2, r2, #1
 800c14c:	3008      	adds	r0, #8
 800c14e:	e777      	b.n	800c040 <_dtoa_r+0x330>
 800c150:	d022      	beq.n	800c198 <_dtoa_r+0x488>
 800c152:	f1cb 0200 	rsb	r2, fp, #0
 800c156:	4970      	ldr	r1, [pc, #448]	; (800c318 <_dtoa_r+0x608>)
 800c158:	f002 000f 	and.w	r0, r2, #15
 800c15c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c160:	ed91 7b00 	vldr	d7, [r1]
 800c164:	ee28 7b07 	vmul.f64	d7, d8, d7
 800c168:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c16c:	486b      	ldr	r0, [pc, #428]	; (800c31c <_dtoa_r+0x60c>)
 800c16e:	1112      	asrs	r2, r2, #4
 800c170:	2400      	movs	r4, #0
 800c172:	2102      	movs	r1, #2
 800c174:	b92a      	cbnz	r2, 800c182 <_dtoa_r+0x472>
 800c176:	2c00      	cmp	r4, #0
 800c178:	f43f af6a 	beq.w	800c050 <_dtoa_r+0x340>
 800c17c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c180:	e766      	b.n	800c050 <_dtoa_r+0x340>
 800c182:	07d7      	lsls	r7, r2, #31
 800c184:	d505      	bpl.n	800c192 <_dtoa_r+0x482>
 800c186:	ed90 6b00 	vldr	d6, [r0]
 800c18a:	3101      	adds	r1, #1
 800c18c:	2401      	movs	r4, #1
 800c18e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c192:	1052      	asrs	r2, r2, #1
 800c194:	3008      	adds	r0, #8
 800c196:	e7ed      	b.n	800c174 <_dtoa_r+0x464>
 800c198:	2102      	movs	r1, #2
 800c19a:	e759      	b.n	800c050 <_dtoa_r+0x340>
 800c19c:	465a      	mov	r2, fp
 800c19e:	464c      	mov	r4, r9
 800c1a0:	e775      	b.n	800c08e <_dtoa_r+0x37e>
 800c1a2:	ec41 0b17 	vmov	d7, r0, r1
 800c1a6:	495c      	ldr	r1, [pc, #368]	; (800c318 <_dtoa_r+0x608>)
 800c1a8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800c1ac:	ed11 4b02 	vldr	d4, [r1, #-8]
 800c1b0:	9901      	ldr	r1, [sp, #4]
 800c1b2:	440c      	add	r4, r1
 800c1b4:	9907      	ldr	r1, [sp, #28]
 800c1b6:	b351      	cbz	r1, 800c20e <_dtoa_r+0x4fe>
 800c1b8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800c1bc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800c1c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c1c4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800c1c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c1cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c1d0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c1d4:	ee14 1a90 	vmov	r1, s9
 800c1d8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c1dc:	3130      	adds	r1, #48	; 0x30
 800c1de:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c1e2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1ea:	f808 1b01 	strb.w	r1, [r8], #1
 800c1ee:	d439      	bmi.n	800c264 <_dtoa_r+0x554>
 800c1f0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c1f4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fc:	d472      	bmi.n	800c2e4 <_dtoa_r+0x5d4>
 800c1fe:	45a0      	cmp	r8, r4
 800c200:	f43f af6b 	beq.w	800c0da <_dtoa_r+0x3ca>
 800c204:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c208:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c20c:	e7e0      	b.n	800c1d0 <_dtoa_r+0x4c0>
 800c20e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c212:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c216:	4620      	mov	r0, r4
 800c218:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c21c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c220:	ee14 1a90 	vmov	r1, s9
 800c224:	3130      	adds	r1, #48	; 0x30
 800c226:	f808 1b01 	strb.w	r1, [r8], #1
 800c22a:	45a0      	cmp	r8, r4
 800c22c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c230:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c234:	d118      	bne.n	800c268 <_dtoa_r+0x558>
 800c236:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c23a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c23e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c246:	dc4d      	bgt.n	800c2e4 <_dtoa_r+0x5d4>
 800c248:	ee35 5b47 	vsub.f64	d5, d5, d7
 800c24c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800c250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c254:	f57f af41 	bpl.w	800c0da <_dtoa_r+0x3ca>
 800c258:	4680      	mov	r8, r0
 800c25a:	3801      	subs	r0, #1
 800c25c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c260:	2b30      	cmp	r3, #48	; 0x30
 800c262:	d0f9      	beq.n	800c258 <_dtoa_r+0x548>
 800c264:	4693      	mov	fp, r2
 800c266:	e02a      	b.n	800c2be <_dtoa_r+0x5ae>
 800c268:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c26c:	e7d6      	b.n	800c21c <_dtoa_r+0x50c>
 800c26e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c272:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c276:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c27a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c27e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c282:	ee15 3a10 	vmov	r3, s10
 800c286:	3330      	adds	r3, #48	; 0x30
 800c288:	f808 3b01 	strb.w	r3, [r8], #1
 800c28c:	9b01      	ldr	r3, [sp, #4]
 800c28e:	eba8 0303 	sub.w	r3, r8, r3
 800c292:	4599      	cmp	r9, r3
 800c294:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c298:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c29c:	d133      	bne.n	800c306 <_dtoa_r+0x5f6>
 800c29e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c2a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2aa:	dc1a      	bgt.n	800c2e2 <_dtoa_r+0x5d2>
 800c2ac:	eeb4 7b46 	vcmp.f64	d7, d6
 800c2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2b4:	d103      	bne.n	800c2be <_dtoa_r+0x5ae>
 800c2b6:	ee15 3a10 	vmov	r3, s10
 800c2ba:	07d9      	lsls	r1, r3, #31
 800c2bc:	d411      	bmi.n	800c2e2 <_dtoa_r+0x5d2>
 800c2be:	4629      	mov	r1, r5
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f000 fbd1 	bl	800ca68 <_Bfree>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c2ca:	f888 3000 	strb.w	r3, [r8]
 800c2ce:	f10b 0301 	add.w	r3, fp, #1
 800c2d2:	6013      	str	r3, [r2, #0]
 800c2d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f43f ad69 	beq.w	800bdae <_dtoa_r+0x9e>
 800c2dc:	f8c3 8000 	str.w	r8, [r3]
 800c2e0:	e565      	b.n	800bdae <_dtoa_r+0x9e>
 800c2e2:	465a      	mov	r2, fp
 800c2e4:	4643      	mov	r3, r8
 800c2e6:	4698      	mov	r8, r3
 800c2e8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800c2ec:	2939      	cmp	r1, #57	; 0x39
 800c2ee:	d106      	bne.n	800c2fe <_dtoa_r+0x5ee>
 800c2f0:	9901      	ldr	r1, [sp, #4]
 800c2f2:	4299      	cmp	r1, r3
 800c2f4:	d1f7      	bne.n	800c2e6 <_dtoa_r+0x5d6>
 800c2f6:	9801      	ldr	r0, [sp, #4]
 800c2f8:	2130      	movs	r1, #48	; 0x30
 800c2fa:	3201      	adds	r2, #1
 800c2fc:	7001      	strb	r1, [r0, #0]
 800c2fe:	7819      	ldrb	r1, [r3, #0]
 800c300:	3101      	adds	r1, #1
 800c302:	7019      	strb	r1, [r3, #0]
 800c304:	e7ae      	b.n	800c264 <_dtoa_r+0x554>
 800c306:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c30a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c312:	d1b2      	bne.n	800c27a <_dtoa_r+0x56a>
 800c314:	e7d3      	b.n	800c2be <_dtoa_r+0x5ae>
 800c316:	bf00      	nop
 800c318:	0800ee60 	.word	0x0800ee60
 800c31c:	0800ee38 	.word	0x0800ee38
 800c320:	9907      	ldr	r1, [sp, #28]
 800c322:	2900      	cmp	r1, #0
 800c324:	f000 80d0 	beq.w	800c4c8 <_dtoa_r+0x7b8>
 800c328:	9906      	ldr	r1, [sp, #24]
 800c32a:	2901      	cmp	r1, #1
 800c32c:	f300 80b4 	bgt.w	800c498 <_dtoa_r+0x788>
 800c330:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c332:	2900      	cmp	r1, #0
 800c334:	f000 80ac 	beq.w	800c490 <_dtoa_r+0x780>
 800c338:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c33c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c340:	461c      	mov	r4, r3
 800c342:	9309      	str	r3, [sp, #36]	; 0x24
 800c344:	9b04      	ldr	r3, [sp, #16]
 800c346:	4413      	add	r3, r2
 800c348:	9304      	str	r3, [sp, #16]
 800c34a:	9b05      	ldr	r3, [sp, #20]
 800c34c:	2101      	movs	r1, #1
 800c34e:	4413      	add	r3, r2
 800c350:	4630      	mov	r0, r6
 800c352:	9305      	str	r3, [sp, #20]
 800c354:	f000 fc3e 	bl	800cbd4 <__i2b>
 800c358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c35a:	4607      	mov	r7, r0
 800c35c:	f1b8 0f00 	cmp.w	r8, #0
 800c360:	d00d      	beq.n	800c37e <_dtoa_r+0x66e>
 800c362:	9a05      	ldr	r2, [sp, #20]
 800c364:	2a00      	cmp	r2, #0
 800c366:	dd0a      	ble.n	800c37e <_dtoa_r+0x66e>
 800c368:	4542      	cmp	r2, r8
 800c36a:	9904      	ldr	r1, [sp, #16]
 800c36c:	bfa8      	it	ge
 800c36e:	4642      	movge	r2, r8
 800c370:	1a89      	subs	r1, r1, r2
 800c372:	9104      	str	r1, [sp, #16]
 800c374:	9905      	ldr	r1, [sp, #20]
 800c376:	eba8 0802 	sub.w	r8, r8, r2
 800c37a:	1a8a      	subs	r2, r1, r2
 800c37c:	9205      	str	r2, [sp, #20]
 800c37e:	b303      	cbz	r3, 800c3c2 <_dtoa_r+0x6b2>
 800c380:	9a07      	ldr	r2, [sp, #28]
 800c382:	2a00      	cmp	r2, #0
 800c384:	f000 80a5 	beq.w	800c4d2 <_dtoa_r+0x7c2>
 800c388:	2c00      	cmp	r4, #0
 800c38a:	dd13      	ble.n	800c3b4 <_dtoa_r+0x6a4>
 800c38c:	4639      	mov	r1, r7
 800c38e:	4622      	mov	r2, r4
 800c390:	4630      	mov	r0, r6
 800c392:	930d      	str	r3, [sp, #52]	; 0x34
 800c394:	f000 fcde 	bl	800cd54 <__pow5mult>
 800c398:	462a      	mov	r2, r5
 800c39a:	4601      	mov	r1, r0
 800c39c:	4607      	mov	r7, r0
 800c39e:	4630      	mov	r0, r6
 800c3a0:	f000 fc2e 	bl	800cc00 <__multiply>
 800c3a4:	4629      	mov	r1, r5
 800c3a6:	9009      	str	r0, [sp, #36]	; 0x24
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	f000 fb5d 	bl	800ca68 <_Bfree>
 800c3ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3b2:	4615      	mov	r5, r2
 800c3b4:	1b1a      	subs	r2, r3, r4
 800c3b6:	d004      	beq.n	800c3c2 <_dtoa_r+0x6b2>
 800c3b8:	4629      	mov	r1, r5
 800c3ba:	4630      	mov	r0, r6
 800c3bc:	f000 fcca 	bl	800cd54 <__pow5mult>
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	4630      	mov	r0, r6
 800c3c6:	f000 fc05 	bl	800cbd4 <__i2b>
 800c3ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	f340 8081 	ble.w	800c4d6 <_dtoa_r+0x7c6>
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	4601      	mov	r1, r0
 800c3d8:	4630      	mov	r0, r6
 800c3da:	f000 fcbb 	bl	800cd54 <__pow5mult>
 800c3de:	9b06      	ldr	r3, [sp, #24]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	dd7a      	ble.n	800c4dc <_dtoa_r+0x7cc>
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ea:	6922      	ldr	r2, [r4, #16]
 800c3ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c3f0:	6910      	ldr	r0, [r2, #16]
 800c3f2:	f000 fba1 	bl	800cb38 <__hi0bits>
 800c3f6:	f1c0 0020 	rsb	r0, r0, #32
 800c3fa:	9b05      	ldr	r3, [sp, #20]
 800c3fc:	4418      	add	r0, r3
 800c3fe:	f010 001f 	ands.w	r0, r0, #31
 800c402:	f000 8093 	beq.w	800c52c <_dtoa_r+0x81c>
 800c406:	f1c0 0220 	rsb	r2, r0, #32
 800c40a:	2a04      	cmp	r2, #4
 800c40c:	f340 8085 	ble.w	800c51a <_dtoa_r+0x80a>
 800c410:	9b04      	ldr	r3, [sp, #16]
 800c412:	f1c0 001c 	rsb	r0, r0, #28
 800c416:	4403      	add	r3, r0
 800c418:	9304      	str	r3, [sp, #16]
 800c41a:	9b05      	ldr	r3, [sp, #20]
 800c41c:	4480      	add	r8, r0
 800c41e:	4403      	add	r3, r0
 800c420:	9305      	str	r3, [sp, #20]
 800c422:	9b04      	ldr	r3, [sp, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	dd05      	ble.n	800c434 <_dtoa_r+0x724>
 800c428:	4629      	mov	r1, r5
 800c42a:	461a      	mov	r2, r3
 800c42c:	4630      	mov	r0, r6
 800c42e:	f000 fceb 	bl	800ce08 <__lshift>
 800c432:	4605      	mov	r5, r0
 800c434:	9b05      	ldr	r3, [sp, #20]
 800c436:	2b00      	cmp	r3, #0
 800c438:	dd05      	ble.n	800c446 <_dtoa_r+0x736>
 800c43a:	4621      	mov	r1, r4
 800c43c:	461a      	mov	r2, r3
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 fce2 	bl	800ce08 <__lshift>
 800c444:	4604      	mov	r4, r0
 800c446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d071      	beq.n	800c530 <_dtoa_r+0x820>
 800c44c:	4621      	mov	r1, r4
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 fd46 	bl	800cee0 <__mcmp>
 800c454:	2800      	cmp	r0, #0
 800c456:	da6b      	bge.n	800c530 <_dtoa_r+0x820>
 800c458:	2300      	movs	r3, #0
 800c45a:	4629      	mov	r1, r5
 800c45c:	220a      	movs	r2, #10
 800c45e:	4630      	mov	r0, r6
 800c460:	f000 fb24 	bl	800caac <__multadd>
 800c464:	9b07      	ldr	r3, [sp, #28]
 800c466:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c46a:	4605      	mov	r5, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	f000 8197 	beq.w	800c7a0 <_dtoa_r+0xa90>
 800c472:	4639      	mov	r1, r7
 800c474:	2300      	movs	r3, #0
 800c476:	220a      	movs	r2, #10
 800c478:	4630      	mov	r0, r6
 800c47a:	f000 fb17 	bl	800caac <__multadd>
 800c47e:	f1ba 0f00 	cmp.w	sl, #0
 800c482:	4607      	mov	r7, r0
 800c484:	f300 8093 	bgt.w	800c5ae <_dtoa_r+0x89e>
 800c488:	9b06      	ldr	r3, [sp, #24]
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	dc57      	bgt.n	800c53e <_dtoa_r+0x82e>
 800c48e:	e08e      	b.n	800c5ae <_dtoa_r+0x89e>
 800c490:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c492:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c496:	e751      	b.n	800c33c <_dtoa_r+0x62c>
 800c498:	f109 34ff 	add.w	r4, r9, #4294967295
 800c49c:	42a3      	cmp	r3, r4
 800c49e:	bfbf      	itttt	lt
 800c4a0:	1ae2      	sublt	r2, r4, r3
 800c4a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c4a4:	189b      	addlt	r3, r3, r2
 800c4a6:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c4a8:	bfae      	itee	ge
 800c4aa:	1b1c      	subge	r4, r3, r4
 800c4ac:	4623      	movlt	r3, r4
 800c4ae:	2400      	movlt	r4, #0
 800c4b0:	f1b9 0f00 	cmp.w	r9, #0
 800c4b4:	bfb5      	itete	lt
 800c4b6:	9a04      	ldrlt	r2, [sp, #16]
 800c4b8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800c4bc:	eba2 0809 	sublt.w	r8, r2, r9
 800c4c0:	464a      	movge	r2, r9
 800c4c2:	bfb8      	it	lt
 800c4c4:	2200      	movlt	r2, #0
 800c4c6:	e73c      	b.n	800c342 <_dtoa_r+0x632>
 800c4c8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c4cc:	9f07      	ldr	r7, [sp, #28]
 800c4ce:	461c      	mov	r4, r3
 800c4d0:	e744      	b.n	800c35c <_dtoa_r+0x64c>
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	e770      	b.n	800c3b8 <_dtoa_r+0x6a8>
 800c4d6:	9b06      	ldr	r3, [sp, #24]
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	dc18      	bgt.n	800c50e <_dtoa_r+0x7fe>
 800c4dc:	9b02      	ldr	r3, [sp, #8]
 800c4de:	b9b3      	cbnz	r3, 800c50e <_dtoa_r+0x7fe>
 800c4e0:	9b03      	ldr	r3, [sp, #12]
 800c4e2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c4e6:	b9a2      	cbnz	r2, 800c512 <_dtoa_r+0x802>
 800c4e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c4ec:	0d12      	lsrs	r2, r2, #20
 800c4ee:	0512      	lsls	r2, r2, #20
 800c4f0:	b18a      	cbz	r2, 800c516 <_dtoa_r+0x806>
 800c4f2:	9b04      	ldr	r3, [sp, #16]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	9304      	str	r3, [sp, #16]
 800c4f8:	9b05      	ldr	r3, [sp, #20]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	9305      	str	r3, [sp, #20]
 800c4fe:	2301      	movs	r3, #1
 800c500:	9309      	str	r3, [sp, #36]	; 0x24
 800c502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c504:	2b00      	cmp	r3, #0
 800c506:	f47f af70 	bne.w	800c3ea <_dtoa_r+0x6da>
 800c50a:	2001      	movs	r0, #1
 800c50c:	e775      	b.n	800c3fa <_dtoa_r+0x6ea>
 800c50e:	2300      	movs	r3, #0
 800c510:	e7f6      	b.n	800c500 <_dtoa_r+0x7f0>
 800c512:	9b02      	ldr	r3, [sp, #8]
 800c514:	e7f4      	b.n	800c500 <_dtoa_r+0x7f0>
 800c516:	9209      	str	r2, [sp, #36]	; 0x24
 800c518:	e7f3      	b.n	800c502 <_dtoa_r+0x7f2>
 800c51a:	d082      	beq.n	800c422 <_dtoa_r+0x712>
 800c51c:	9b04      	ldr	r3, [sp, #16]
 800c51e:	321c      	adds	r2, #28
 800c520:	4413      	add	r3, r2
 800c522:	9304      	str	r3, [sp, #16]
 800c524:	9b05      	ldr	r3, [sp, #20]
 800c526:	4490      	add	r8, r2
 800c528:	4413      	add	r3, r2
 800c52a:	e779      	b.n	800c420 <_dtoa_r+0x710>
 800c52c:	4602      	mov	r2, r0
 800c52e:	e7f5      	b.n	800c51c <_dtoa_r+0x80c>
 800c530:	f1b9 0f00 	cmp.w	r9, #0
 800c534:	dc36      	bgt.n	800c5a4 <_dtoa_r+0x894>
 800c536:	9b06      	ldr	r3, [sp, #24]
 800c538:	2b02      	cmp	r3, #2
 800c53a:	dd33      	ble.n	800c5a4 <_dtoa_r+0x894>
 800c53c:	46ca      	mov	sl, r9
 800c53e:	f1ba 0f00 	cmp.w	sl, #0
 800c542:	d10d      	bne.n	800c560 <_dtoa_r+0x850>
 800c544:	4621      	mov	r1, r4
 800c546:	4653      	mov	r3, sl
 800c548:	2205      	movs	r2, #5
 800c54a:	4630      	mov	r0, r6
 800c54c:	f000 faae 	bl	800caac <__multadd>
 800c550:	4601      	mov	r1, r0
 800c552:	4604      	mov	r4, r0
 800c554:	4628      	mov	r0, r5
 800c556:	f000 fcc3 	bl	800cee0 <__mcmp>
 800c55a:	2800      	cmp	r0, #0
 800c55c:	f73f ade4 	bgt.w	800c128 <_dtoa_r+0x418>
 800c560:	9b08      	ldr	r3, [sp, #32]
 800c562:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c566:	ea6f 0b03 	mvn.w	fp, r3
 800c56a:	f04f 0900 	mov.w	r9, #0
 800c56e:	4621      	mov	r1, r4
 800c570:	4630      	mov	r0, r6
 800c572:	f000 fa79 	bl	800ca68 <_Bfree>
 800c576:	2f00      	cmp	r7, #0
 800c578:	f43f aea1 	beq.w	800c2be <_dtoa_r+0x5ae>
 800c57c:	f1b9 0f00 	cmp.w	r9, #0
 800c580:	d005      	beq.n	800c58e <_dtoa_r+0x87e>
 800c582:	45b9      	cmp	r9, r7
 800c584:	d003      	beq.n	800c58e <_dtoa_r+0x87e>
 800c586:	4649      	mov	r1, r9
 800c588:	4630      	mov	r0, r6
 800c58a:	f000 fa6d 	bl	800ca68 <_Bfree>
 800c58e:	4639      	mov	r1, r7
 800c590:	4630      	mov	r0, r6
 800c592:	f000 fa69 	bl	800ca68 <_Bfree>
 800c596:	e692      	b.n	800c2be <_dtoa_r+0x5ae>
 800c598:	2400      	movs	r4, #0
 800c59a:	4627      	mov	r7, r4
 800c59c:	e7e0      	b.n	800c560 <_dtoa_r+0x850>
 800c59e:	4693      	mov	fp, r2
 800c5a0:	4627      	mov	r7, r4
 800c5a2:	e5c1      	b.n	800c128 <_dtoa_r+0x418>
 800c5a4:	9b07      	ldr	r3, [sp, #28]
 800c5a6:	46ca      	mov	sl, r9
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 8100 	beq.w	800c7ae <_dtoa_r+0xa9e>
 800c5ae:	f1b8 0f00 	cmp.w	r8, #0
 800c5b2:	dd05      	ble.n	800c5c0 <_dtoa_r+0x8b0>
 800c5b4:	4639      	mov	r1, r7
 800c5b6:	4642      	mov	r2, r8
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f000 fc25 	bl	800ce08 <__lshift>
 800c5be:	4607      	mov	r7, r0
 800c5c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d05d      	beq.n	800c682 <_dtoa_r+0x972>
 800c5c6:	6879      	ldr	r1, [r7, #4]
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	f000 fa0d 	bl	800c9e8 <_Balloc>
 800c5ce:	4680      	mov	r8, r0
 800c5d0:	b928      	cbnz	r0, 800c5de <_dtoa_r+0x8ce>
 800c5d2:	4b82      	ldr	r3, [pc, #520]	; (800c7dc <_dtoa_r+0xacc>)
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c5da:	f7ff bbb1 	b.w	800bd40 <_dtoa_r+0x30>
 800c5de:	693a      	ldr	r2, [r7, #16]
 800c5e0:	3202      	adds	r2, #2
 800c5e2:	0092      	lsls	r2, r2, #2
 800c5e4:	f107 010c 	add.w	r1, r7, #12
 800c5e8:	300c      	adds	r0, #12
 800c5ea:	f000 ffa9 	bl	800d540 <memcpy>
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	4641      	mov	r1, r8
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f000 fc08 	bl	800ce08 <__lshift>
 800c5f8:	9b01      	ldr	r3, [sp, #4]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	9304      	str	r3, [sp, #16]
 800c5fe:	9b01      	ldr	r3, [sp, #4]
 800c600:	4453      	add	r3, sl
 800c602:	9308      	str	r3, [sp, #32]
 800c604:	9b02      	ldr	r3, [sp, #8]
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	46b9      	mov	r9, r7
 800c60c:	9307      	str	r3, [sp, #28]
 800c60e:	4607      	mov	r7, r0
 800c610:	9b04      	ldr	r3, [sp, #16]
 800c612:	4621      	mov	r1, r4
 800c614:	3b01      	subs	r3, #1
 800c616:	4628      	mov	r0, r5
 800c618:	9302      	str	r3, [sp, #8]
 800c61a:	f7ff faf0 	bl	800bbfe <quorem>
 800c61e:	4603      	mov	r3, r0
 800c620:	3330      	adds	r3, #48	; 0x30
 800c622:	9005      	str	r0, [sp, #20]
 800c624:	4649      	mov	r1, r9
 800c626:	4628      	mov	r0, r5
 800c628:	9309      	str	r3, [sp, #36]	; 0x24
 800c62a:	f000 fc59 	bl	800cee0 <__mcmp>
 800c62e:	463a      	mov	r2, r7
 800c630:	4682      	mov	sl, r0
 800c632:	4621      	mov	r1, r4
 800c634:	4630      	mov	r0, r6
 800c636:	f000 fc6f 	bl	800cf18 <__mdiff>
 800c63a:	68c2      	ldr	r2, [r0, #12]
 800c63c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c63e:	4680      	mov	r8, r0
 800c640:	bb0a      	cbnz	r2, 800c686 <_dtoa_r+0x976>
 800c642:	4601      	mov	r1, r0
 800c644:	4628      	mov	r0, r5
 800c646:	f000 fc4b 	bl	800cee0 <__mcmp>
 800c64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c64c:	4602      	mov	r2, r0
 800c64e:	4641      	mov	r1, r8
 800c650:	4630      	mov	r0, r6
 800c652:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c656:	f000 fa07 	bl	800ca68 <_Bfree>
 800c65a:	9b06      	ldr	r3, [sp, #24]
 800c65c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c65e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c662:	ea43 0102 	orr.w	r1, r3, r2
 800c666:	9b07      	ldr	r3, [sp, #28]
 800c668:	4319      	orrs	r1, r3
 800c66a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c66c:	d10d      	bne.n	800c68a <_dtoa_r+0x97a>
 800c66e:	2b39      	cmp	r3, #57	; 0x39
 800c670:	d029      	beq.n	800c6c6 <_dtoa_r+0x9b6>
 800c672:	f1ba 0f00 	cmp.w	sl, #0
 800c676:	dd01      	ble.n	800c67c <_dtoa_r+0x96c>
 800c678:	9b05      	ldr	r3, [sp, #20]
 800c67a:	3331      	adds	r3, #49	; 0x31
 800c67c:	9a02      	ldr	r2, [sp, #8]
 800c67e:	7013      	strb	r3, [r2, #0]
 800c680:	e775      	b.n	800c56e <_dtoa_r+0x85e>
 800c682:	4638      	mov	r0, r7
 800c684:	e7b8      	b.n	800c5f8 <_dtoa_r+0x8e8>
 800c686:	2201      	movs	r2, #1
 800c688:	e7e1      	b.n	800c64e <_dtoa_r+0x93e>
 800c68a:	f1ba 0f00 	cmp.w	sl, #0
 800c68e:	db06      	blt.n	800c69e <_dtoa_r+0x98e>
 800c690:	9906      	ldr	r1, [sp, #24]
 800c692:	ea41 0a0a 	orr.w	sl, r1, sl
 800c696:	9907      	ldr	r1, [sp, #28]
 800c698:	ea5a 0a01 	orrs.w	sl, sl, r1
 800c69c:	d120      	bne.n	800c6e0 <_dtoa_r+0x9d0>
 800c69e:	2a00      	cmp	r2, #0
 800c6a0:	ddec      	ble.n	800c67c <_dtoa_r+0x96c>
 800c6a2:	4629      	mov	r1, r5
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	4630      	mov	r0, r6
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	f000 fbad 	bl	800ce08 <__lshift>
 800c6ae:	4621      	mov	r1, r4
 800c6b0:	4605      	mov	r5, r0
 800c6b2:	f000 fc15 	bl	800cee0 <__mcmp>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	9b04      	ldr	r3, [sp, #16]
 800c6ba:	dc02      	bgt.n	800c6c2 <_dtoa_r+0x9b2>
 800c6bc:	d1de      	bne.n	800c67c <_dtoa_r+0x96c>
 800c6be:	07da      	lsls	r2, r3, #31
 800c6c0:	d5dc      	bpl.n	800c67c <_dtoa_r+0x96c>
 800c6c2:	2b39      	cmp	r3, #57	; 0x39
 800c6c4:	d1d8      	bne.n	800c678 <_dtoa_r+0x968>
 800c6c6:	9a02      	ldr	r2, [sp, #8]
 800c6c8:	2339      	movs	r3, #57	; 0x39
 800c6ca:	7013      	strb	r3, [r2, #0]
 800c6cc:	4643      	mov	r3, r8
 800c6ce:	4698      	mov	r8, r3
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c6d6:	2a39      	cmp	r2, #57	; 0x39
 800c6d8:	d051      	beq.n	800c77e <_dtoa_r+0xa6e>
 800c6da:	3201      	adds	r2, #1
 800c6dc:	701a      	strb	r2, [r3, #0]
 800c6de:	e746      	b.n	800c56e <_dtoa_r+0x85e>
 800c6e0:	2a00      	cmp	r2, #0
 800c6e2:	dd03      	ble.n	800c6ec <_dtoa_r+0x9dc>
 800c6e4:	2b39      	cmp	r3, #57	; 0x39
 800c6e6:	d0ee      	beq.n	800c6c6 <_dtoa_r+0x9b6>
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	e7c7      	b.n	800c67c <_dtoa_r+0x96c>
 800c6ec:	9a04      	ldr	r2, [sp, #16]
 800c6ee:	9908      	ldr	r1, [sp, #32]
 800c6f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c6f4:	428a      	cmp	r2, r1
 800c6f6:	d02b      	beq.n	800c750 <_dtoa_r+0xa40>
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	220a      	movs	r2, #10
 800c6fe:	4630      	mov	r0, r6
 800c700:	f000 f9d4 	bl	800caac <__multadd>
 800c704:	45b9      	cmp	r9, r7
 800c706:	4605      	mov	r5, r0
 800c708:	f04f 0300 	mov.w	r3, #0
 800c70c:	f04f 020a 	mov.w	r2, #10
 800c710:	4649      	mov	r1, r9
 800c712:	4630      	mov	r0, r6
 800c714:	d107      	bne.n	800c726 <_dtoa_r+0xa16>
 800c716:	f000 f9c9 	bl	800caac <__multadd>
 800c71a:	4681      	mov	r9, r0
 800c71c:	4607      	mov	r7, r0
 800c71e:	9b04      	ldr	r3, [sp, #16]
 800c720:	3301      	adds	r3, #1
 800c722:	9304      	str	r3, [sp, #16]
 800c724:	e774      	b.n	800c610 <_dtoa_r+0x900>
 800c726:	f000 f9c1 	bl	800caac <__multadd>
 800c72a:	4639      	mov	r1, r7
 800c72c:	4681      	mov	r9, r0
 800c72e:	2300      	movs	r3, #0
 800c730:	220a      	movs	r2, #10
 800c732:	4630      	mov	r0, r6
 800c734:	f000 f9ba 	bl	800caac <__multadd>
 800c738:	4607      	mov	r7, r0
 800c73a:	e7f0      	b.n	800c71e <_dtoa_r+0xa0e>
 800c73c:	f1ba 0f00 	cmp.w	sl, #0
 800c740:	9a01      	ldr	r2, [sp, #4]
 800c742:	bfcc      	ite	gt
 800c744:	46d0      	movgt	r8, sl
 800c746:	f04f 0801 	movle.w	r8, #1
 800c74a:	4490      	add	r8, r2
 800c74c:	f04f 0900 	mov.w	r9, #0
 800c750:	4629      	mov	r1, r5
 800c752:	2201      	movs	r2, #1
 800c754:	4630      	mov	r0, r6
 800c756:	9302      	str	r3, [sp, #8]
 800c758:	f000 fb56 	bl	800ce08 <__lshift>
 800c75c:	4621      	mov	r1, r4
 800c75e:	4605      	mov	r5, r0
 800c760:	f000 fbbe 	bl	800cee0 <__mcmp>
 800c764:	2800      	cmp	r0, #0
 800c766:	dcb1      	bgt.n	800c6cc <_dtoa_r+0x9bc>
 800c768:	d102      	bne.n	800c770 <_dtoa_r+0xa60>
 800c76a:	9b02      	ldr	r3, [sp, #8]
 800c76c:	07db      	lsls	r3, r3, #31
 800c76e:	d4ad      	bmi.n	800c6cc <_dtoa_r+0x9bc>
 800c770:	4643      	mov	r3, r8
 800c772:	4698      	mov	r8, r3
 800c774:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c778:	2a30      	cmp	r2, #48	; 0x30
 800c77a:	d0fa      	beq.n	800c772 <_dtoa_r+0xa62>
 800c77c:	e6f7      	b.n	800c56e <_dtoa_r+0x85e>
 800c77e:	9a01      	ldr	r2, [sp, #4]
 800c780:	429a      	cmp	r2, r3
 800c782:	d1a4      	bne.n	800c6ce <_dtoa_r+0x9be>
 800c784:	f10b 0b01 	add.w	fp, fp, #1
 800c788:	2331      	movs	r3, #49	; 0x31
 800c78a:	e778      	b.n	800c67e <_dtoa_r+0x96e>
 800c78c:	4b14      	ldr	r3, [pc, #80]	; (800c7e0 <_dtoa_r+0xad0>)
 800c78e:	f7ff bb2a 	b.w	800bde6 <_dtoa_r+0xd6>
 800c792:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c794:	2b00      	cmp	r3, #0
 800c796:	f47f ab05 	bne.w	800bda4 <_dtoa_r+0x94>
 800c79a:	4b12      	ldr	r3, [pc, #72]	; (800c7e4 <_dtoa_r+0xad4>)
 800c79c:	f7ff bb23 	b.w	800bde6 <_dtoa_r+0xd6>
 800c7a0:	f1ba 0f00 	cmp.w	sl, #0
 800c7a4:	dc03      	bgt.n	800c7ae <_dtoa_r+0xa9e>
 800c7a6:	9b06      	ldr	r3, [sp, #24]
 800c7a8:	2b02      	cmp	r3, #2
 800c7aa:	f73f aec8 	bgt.w	800c53e <_dtoa_r+0x82e>
 800c7ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	4628      	mov	r0, r5
 800c7b6:	f7ff fa22 	bl	800bbfe <quorem>
 800c7ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c7be:	f808 3b01 	strb.w	r3, [r8], #1
 800c7c2:	9a01      	ldr	r2, [sp, #4]
 800c7c4:	eba8 0202 	sub.w	r2, r8, r2
 800c7c8:	4592      	cmp	sl, r2
 800c7ca:	ddb7      	ble.n	800c73c <_dtoa_r+0xa2c>
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	220a      	movs	r2, #10
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	f000 f96a 	bl	800caac <__multadd>
 800c7d8:	4605      	mov	r5, r0
 800c7da:	e7ea      	b.n	800c7b2 <_dtoa_r+0xaa2>
 800c7dc:	0800edc8 	.word	0x0800edc8
 800c7e0:	0800ed28 	.word	0x0800ed28
 800c7e4:	0800ed4c 	.word	0x0800ed4c

0800c7e8 <_free_r>:
 800c7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7ea:	2900      	cmp	r1, #0
 800c7ec:	d044      	beq.n	800c878 <_free_r+0x90>
 800c7ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7f2:	9001      	str	r0, [sp, #4]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f1a1 0404 	sub.w	r4, r1, #4
 800c7fa:	bfb8      	it	lt
 800c7fc:	18e4      	addlt	r4, r4, r3
 800c7fe:	f000 f8e7 	bl	800c9d0 <__malloc_lock>
 800c802:	4a1e      	ldr	r2, [pc, #120]	; (800c87c <_free_r+0x94>)
 800c804:	9801      	ldr	r0, [sp, #4]
 800c806:	6813      	ldr	r3, [r2, #0]
 800c808:	b933      	cbnz	r3, 800c818 <_free_r+0x30>
 800c80a:	6063      	str	r3, [r4, #4]
 800c80c:	6014      	str	r4, [r2, #0]
 800c80e:	b003      	add	sp, #12
 800c810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c814:	f000 b8e2 	b.w	800c9dc <__malloc_unlock>
 800c818:	42a3      	cmp	r3, r4
 800c81a:	d908      	bls.n	800c82e <_free_r+0x46>
 800c81c:	6825      	ldr	r5, [r4, #0]
 800c81e:	1961      	adds	r1, r4, r5
 800c820:	428b      	cmp	r3, r1
 800c822:	bf01      	itttt	eq
 800c824:	6819      	ldreq	r1, [r3, #0]
 800c826:	685b      	ldreq	r3, [r3, #4]
 800c828:	1949      	addeq	r1, r1, r5
 800c82a:	6021      	streq	r1, [r4, #0]
 800c82c:	e7ed      	b.n	800c80a <_free_r+0x22>
 800c82e:	461a      	mov	r2, r3
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	b10b      	cbz	r3, 800c838 <_free_r+0x50>
 800c834:	42a3      	cmp	r3, r4
 800c836:	d9fa      	bls.n	800c82e <_free_r+0x46>
 800c838:	6811      	ldr	r1, [r2, #0]
 800c83a:	1855      	adds	r5, r2, r1
 800c83c:	42a5      	cmp	r5, r4
 800c83e:	d10b      	bne.n	800c858 <_free_r+0x70>
 800c840:	6824      	ldr	r4, [r4, #0]
 800c842:	4421      	add	r1, r4
 800c844:	1854      	adds	r4, r2, r1
 800c846:	42a3      	cmp	r3, r4
 800c848:	6011      	str	r1, [r2, #0]
 800c84a:	d1e0      	bne.n	800c80e <_free_r+0x26>
 800c84c:	681c      	ldr	r4, [r3, #0]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	6053      	str	r3, [r2, #4]
 800c852:	440c      	add	r4, r1
 800c854:	6014      	str	r4, [r2, #0]
 800c856:	e7da      	b.n	800c80e <_free_r+0x26>
 800c858:	d902      	bls.n	800c860 <_free_r+0x78>
 800c85a:	230c      	movs	r3, #12
 800c85c:	6003      	str	r3, [r0, #0]
 800c85e:	e7d6      	b.n	800c80e <_free_r+0x26>
 800c860:	6825      	ldr	r5, [r4, #0]
 800c862:	1961      	adds	r1, r4, r5
 800c864:	428b      	cmp	r3, r1
 800c866:	bf04      	itt	eq
 800c868:	6819      	ldreq	r1, [r3, #0]
 800c86a:	685b      	ldreq	r3, [r3, #4]
 800c86c:	6063      	str	r3, [r4, #4]
 800c86e:	bf04      	itt	eq
 800c870:	1949      	addeq	r1, r1, r5
 800c872:	6021      	streq	r1, [r4, #0]
 800c874:	6054      	str	r4, [r2, #4]
 800c876:	e7ca      	b.n	800c80e <_free_r+0x26>
 800c878:	b003      	add	sp, #12
 800c87a:	bd30      	pop	{r4, r5, pc}
 800c87c:	20000a24 	.word	0x20000a24

0800c880 <malloc>:
 800c880:	4b02      	ldr	r3, [pc, #8]	; (800c88c <malloc+0xc>)
 800c882:	4601      	mov	r1, r0
 800c884:	6818      	ldr	r0, [r3, #0]
 800c886:	f000 b823 	b.w	800c8d0 <_malloc_r>
 800c88a:	bf00      	nop
 800c88c:	20000130 	.word	0x20000130

0800c890 <sbrk_aligned>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	4e0e      	ldr	r6, [pc, #56]	; (800c8cc <sbrk_aligned+0x3c>)
 800c894:	460c      	mov	r4, r1
 800c896:	6831      	ldr	r1, [r6, #0]
 800c898:	4605      	mov	r5, r0
 800c89a:	b911      	cbnz	r1, 800c8a2 <sbrk_aligned+0x12>
 800c89c:	f000 fe40 	bl	800d520 <_sbrk_r>
 800c8a0:	6030      	str	r0, [r6, #0]
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f000 fe3b 	bl	800d520 <_sbrk_r>
 800c8aa:	1c43      	adds	r3, r0, #1
 800c8ac:	d00a      	beq.n	800c8c4 <sbrk_aligned+0x34>
 800c8ae:	1cc4      	adds	r4, r0, #3
 800c8b0:	f024 0403 	bic.w	r4, r4, #3
 800c8b4:	42a0      	cmp	r0, r4
 800c8b6:	d007      	beq.n	800c8c8 <sbrk_aligned+0x38>
 800c8b8:	1a21      	subs	r1, r4, r0
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	f000 fe30 	bl	800d520 <_sbrk_r>
 800c8c0:	3001      	adds	r0, #1
 800c8c2:	d101      	bne.n	800c8c8 <sbrk_aligned+0x38>
 800c8c4:	f04f 34ff 	mov.w	r4, #4294967295
 800c8c8:	4620      	mov	r0, r4
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	20000a28 	.word	0x20000a28

0800c8d0 <_malloc_r>:
 800c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8d4:	1ccd      	adds	r5, r1, #3
 800c8d6:	f025 0503 	bic.w	r5, r5, #3
 800c8da:	3508      	adds	r5, #8
 800c8dc:	2d0c      	cmp	r5, #12
 800c8de:	bf38      	it	cc
 800c8e0:	250c      	movcc	r5, #12
 800c8e2:	2d00      	cmp	r5, #0
 800c8e4:	4607      	mov	r7, r0
 800c8e6:	db01      	blt.n	800c8ec <_malloc_r+0x1c>
 800c8e8:	42a9      	cmp	r1, r5
 800c8ea:	d905      	bls.n	800c8f8 <_malloc_r+0x28>
 800c8ec:	230c      	movs	r3, #12
 800c8ee:	603b      	str	r3, [r7, #0]
 800c8f0:	2600      	movs	r6, #0
 800c8f2:	4630      	mov	r0, r6
 800c8f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c9cc <_malloc_r+0xfc>
 800c8fc:	f000 f868 	bl	800c9d0 <__malloc_lock>
 800c900:	f8d8 3000 	ldr.w	r3, [r8]
 800c904:	461c      	mov	r4, r3
 800c906:	bb5c      	cbnz	r4, 800c960 <_malloc_r+0x90>
 800c908:	4629      	mov	r1, r5
 800c90a:	4638      	mov	r0, r7
 800c90c:	f7ff ffc0 	bl	800c890 <sbrk_aligned>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	4604      	mov	r4, r0
 800c914:	d155      	bne.n	800c9c2 <_malloc_r+0xf2>
 800c916:	f8d8 4000 	ldr.w	r4, [r8]
 800c91a:	4626      	mov	r6, r4
 800c91c:	2e00      	cmp	r6, #0
 800c91e:	d145      	bne.n	800c9ac <_malloc_r+0xdc>
 800c920:	2c00      	cmp	r4, #0
 800c922:	d048      	beq.n	800c9b6 <_malloc_r+0xe6>
 800c924:	6823      	ldr	r3, [r4, #0]
 800c926:	4631      	mov	r1, r6
 800c928:	4638      	mov	r0, r7
 800c92a:	eb04 0903 	add.w	r9, r4, r3
 800c92e:	f000 fdf7 	bl	800d520 <_sbrk_r>
 800c932:	4581      	cmp	r9, r0
 800c934:	d13f      	bne.n	800c9b6 <_malloc_r+0xe6>
 800c936:	6821      	ldr	r1, [r4, #0]
 800c938:	1a6d      	subs	r5, r5, r1
 800c93a:	4629      	mov	r1, r5
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7ff ffa7 	bl	800c890 <sbrk_aligned>
 800c942:	3001      	adds	r0, #1
 800c944:	d037      	beq.n	800c9b6 <_malloc_r+0xe6>
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	442b      	add	r3, r5
 800c94a:	6023      	str	r3, [r4, #0]
 800c94c:	f8d8 3000 	ldr.w	r3, [r8]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d038      	beq.n	800c9c6 <_malloc_r+0xf6>
 800c954:	685a      	ldr	r2, [r3, #4]
 800c956:	42a2      	cmp	r2, r4
 800c958:	d12b      	bne.n	800c9b2 <_malloc_r+0xe2>
 800c95a:	2200      	movs	r2, #0
 800c95c:	605a      	str	r2, [r3, #4]
 800c95e:	e00f      	b.n	800c980 <_malloc_r+0xb0>
 800c960:	6822      	ldr	r2, [r4, #0]
 800c962:	1b52      	subs	r2, r2, r5
 800c964:	d41f      	bmi.n	800c9a6 <_malloc_r+0xd6>
 800c966:	2a0b      	cmp	r2, #11
 800c968:	d917      	bls.n	800c99a <_malloc_r+0xca>
 800c96a:	1961      	adds	r1, r4, r5
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	6025      	str	r5, [r4, #0]
 800c970:	bf18      	it	ne
 800c972:	6059      	strne	r1, [r3, #4]
 800c974:	6863      	ldr	r3, [r4, #4]
 800c976:	bf08      	it	eq
 800c978:	f8c8 1000 	streq.w	r1, [r8]
 800c97c:	5162      	str	r2, [r4, r5]
 800c97e:	604b      	str	r3, [r1, #4]
 800c980:	4638      	mov	r0, r7
 800c982:	f104 060b 	add.w	r6, r4, #11
 800c986:	f000 f829 	bl	800c9dc <__malloc_unlock>
 800c98a:	f026 0607 	bic.w	r6, r6, #7
 800c98e:	1d23      	adds	r3, r4, #4
 800c990:	1af2      	subs	r2, r6, r3
 800c992:	d0ae      	beq.n	800c8f2 <_malloc_r+0x22>
 800c994:	1b9b      	subs	r3, r3, r6
 800c996:	50a3      	str	r3, [r4, r2]
 800c998:	e7ab      	b.n	800c8f2 <_malloc_r+0x22>
 800c99a:	42a3      	cmp	r3, r4
 800c99c:	6862      	ldr	r2, [r4, #4]
 800c99e:	d1dd      	bne.n	800c95c <_malloc_r+0x8c>
 800c9a0:	f8c8 2000 	str.w	r2, [r8]
 800c9a4:	e7ec      	b.n	800c980 <_malloc_r+0xb0>
 800c9a6:	4623      	mov	r3, r4
 800c9a8:	6864      	ldr	r4, [r4, #4]
 800c9aa:	e7ac      	b.n	800c906 <_malloc_r+0x36>
 800c9ac:	4634      	mov	r4, r6
 800c9ae:	6876      	ldr	r6, [r6, #4]
 800c9b0:	e7b4      	b.n	800c91c <_malloc_r+0x4c>
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	e7cc      	b.n	800c950 <_malloc_r+0x80>
 800c9b6:	230c      	movs	r3, #12
 800c9b8:	603b      	str	r3, [r7, #0]
 800c9ba:	4638      	mov	r0, r7
 800c9bc:	f000 f80e 	bl	800c9dc <__malloc_unlock>
 800c9c0:	e797      	b.n	800c8f2 <_malloc_r+0x22>
 800c9c2:	6025      	str	r5, [r4, #0]
 800c9c4:	e7dc      	b.n	800c980 <_malloc_r+0xb0>
 800c9c6:	605b      	str	r3, [r3, #4]
 800c9c8:	deff      	udf	#255	; 0xff
 800c9ca:	bf00      	nop
 800c9cc:	20000a24 	.word	0x20000a24

0800c9d0 <__malloc_lock>:
 800c9d0:	4801      	ldr	r0, [pc, #4]	; (800c9d8 <__malloc_lock+0x8>)
 800c9d2:	f7ff b912 	b.w	800bbfa <__retarget_lock_acquire_recursive>
 800c9d6:	bf00      	nop
 800c9d8:	20000a20 	.word	0x20000a20

0800c9dc <__malloc_unlock>:
 800c9dc:	4801      	ldr	r0, [pc, #4]	; (800c9e4 <__malloc_unlock+0x8>)
 800c9de:	f7ff b90d 	b.w	800bbfc <__retarget_lock_release_recursive>
 800c9e2:	bf00      	nop
 800c9e4:	20000a20 	.word	0x20000a20

0800c9e8 <_Balloc>:
 800c9e8:	b570      	push	{r4, r5, r6, lr}
 800c9ea:	69c6      	ldr	r6, [r0, #28]
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	460d      	mov	r5, r1
 800c9f0:	b976      	cbnz	r6, 800ca10 <_Balloc+0x28>
 800c9f2:	2010      	movs	r0, #16
 800c9f4:	f7ff ff44 	bl	800c880 <malloc>
 800c9f8:	4602      	mov	r2, r0
 800c9fa:	61e0      	str	r0, [r4, #28]
 800c9fc:	b920      	cbnz	r0, 800ca08 <_Balloc+0x20>
 800c9fe:	4b18      	ldr	r3, [pc, #96]	; (800ca60 <_Balloc+0x78>)
 800ca00:	4818      	ldr	r0, [pc, #96]	; (800ca64 <_Balloc+0x7c>)
 800ca02:	216b      	movs	r1, #107	; 0x6b
 800ca04:	f000 fdaa 	bl	800d55c <__assert_func>
 800ca08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca0c:	6006      	str	r6, [r0, #0]
 800ca0e:	60c6      	str	r6, [r0, #12]
 800ca10:	69e6      	ldr	r6, [r4, #28]
 800ca12:	68f3      	ldr	r3, [r6, #12]
 800ca14:	b183      	cbz	r3, 800ca38 <_Balloc+0x50>
 800ca16:	69e3      	ldr	r3, [r4, #28]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca1e:	b9b8      	cbnz	r0, 800ca50 <_Balloc+0x68>
 800ca20:	2101      	movs	r1, #1
 800ca22:	fa01 f605 	lsl.w	r6, r1, r5
 800ca26:	1d72      	adds	r2, r6, #5
 800ca28:	0092      	lsls	r2, r2, #2
 800ca2a:	4620      	mov	r0, r4
 800ca2c:	f000 fdb4 	bl	800d598 <_calloc_r>
 800ca30:	b160      	cbz	r0, 800ca4c <_Balloc+0x64>
 800ca32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca36:	e00e      	b.n	800ca56 <_Balloc+0x6e>
 800ca38:	2221      	movs	r2, #33	; 0x21
 800ca3a:	2104      	movs	r1, #4
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f000 fdab 	bl	800d598 <_calloc_r>
 800ca42:	69e3      	ldr	r3, [r4, #28]
 800ca44:	60f0      	str	r0, [r6, #12]
 800ca46:	68db      	ldr	r3, [r3, #12]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1e4      	bne.n	800ca16 <_Balloc+0x2e>
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	bd70      	pop	{r4, r5, r6, pc}
 800ca50:	6802      	ldr	r2, [r0, #0]
 800ca52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca56:	2300      	movs	r3, #0
 800ca58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca5c:	e7f7      	b.n	800ca4e <_Balloc+0x66>
 800ca5e:	bf00      	nop
 800ca60:	0800ed59 	.word	0x0800ed59
 800ca64:	0800edd9 	.word	0x0800edd9

0800ca68 <_Bfree>:
 800ca68:	b570      	push	{r4, r5, r6, lr}
 800ca6a:	69c6      	ldr	r6, [r0, #28]
 800ca6c:	4605      	mov	r5, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	b976      	cbnz	r6, 800ca90 <_Bfree+0x28>
 800ca72:	2010      	movs	r0, #16
 800ca74:	f7ff ff04 	bl	800c880 <malloc>
 800ca78:	4602      	mov	r2, r0
 800ca7a:	61e8      	str	r0, [r5, #28]
 800ca7c:	b920      	cbnz	r0, 800ca88 <_Bfree+0x20>
 800ca7e:	4b09      	ldr	r3, [pc, #36]	; (800caa4 <_Bfree+0x3c>)
 800ca80:	4809      	ldr	r0, [pc, #36]	; (800caa8 <_Bfree+0x40>)
 800ca82:	218f      	movs	r1, #143	; 0x8f
 800ca84:	f000 fd6a 	bl	800d55c <__assert_func>
 800ca88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca8c:	6006      	str	r6, [r0, #0]
 800ca8e:	60c6      	str	r6, [r0, #12]
 800ca90:	b13c      	cbz	r4, 800caa2 <_Bfree+0x3a>
 800ca92:	69eb      	ldr	r3, [r5, #28]
 800ca94:	6862      	ldr	r2, [r4, #4]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca9c:	6021      	str	r1, [r4, #0]
 800ca9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800caa2:	bd70      	pop	{r4, r5, r6, pc}
 800caa4:	0800ed59 	.word	0x0800ed59
 800caa8:	0800edd9 	.word	0x0800edd9

0800caac <__multadd>:
 800caac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cab0:	690d      	ldr	r5, [r1, #16]
 800cab2:	4607      	mov	r7, r0
 800cab4:	460c      	mov	r4, r1
 800cab6:	461e      	mov	r6, r3
 800cab8:	f101 0c14 	add.w	ip, r1, #20
 800cabc:	2000      	movs	r0, #0
 800cabe:	f8dc 3000 	ldr.w	r3, [ip]
 800cac2:	b299      	uxth	r1, r3
 800cac4:	fb02 6101 	mla	r1, r2, r1, r6
 800cac8:	0c1e      	lsrs	r6, r3, #16
 800caca:	0c0b      	lsrs	r3, r1, #16
 800cacc:	fb02 3306 	mla	r3, r2, r6, r3
 800cad0:	b289      	uxth	r1, r1
 800cad2:	3001      	adds	r0, #1
 800cad4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cad8:	4285      	cmp	r5, r0
 800cada:	f84c 1b04 	str.w	r1, [ip], #4
 800cade:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cae2:	dcec      	bgt.n	800cabe <__multadd+0x12>
 800cae4:	b30e      	cbz	r6, 800cb2a <__multadd+0x7e>
 800cae6:	68a3      	ldr	r3, [r4, #8]
 800cae8:	42ab      	cmp	r3, r5
 800caea:	dc19      	bgt.n	800cb20 <__multadd+0x74>
 800caec:	6861      	ldr	r1, [r4, #4]
 800caee:	4638      	mov	r0, r7
 800caf0:	3101      	adds	r1, #1
 800caf2:	f7ff ff79 	bl	800c9e8 <_Balloc>
 800caf6:	4680      	mov	r8, r0
 800caf8:	b928      	cbnz	r0, 800cb06 <__multadd+0x5a>
 800cafa:	4602      	mov	r2, r0
 800cafc:	4b0c      	ldr	r3, [pc, #48]	; (800cb30 <__multadd+0x84>)
 800cafe:	480d      	ldr	r0, [pc, #52]	; (800cb34 <__multadd+0x88>)
 800cb00:	21ba      	movs	r1, #186	; 0xba
 800cb02:	f000 fd2b 	bl	800d55c <__assert_func>
 800cb06:	6922      	ldr	r2, [r4, #16]
 800cb08:	3202      	adds	r2, #2
 800cb0a:	f104 010c 	add.w	r1, r4, #12
 800cb0e:	0092      	lsls	r2, r2, #2
 800cb10:	300c      	adds	r0, #12
 800cb12:	f000 fd15 	bl	800d540 <memcpy>
 800cb16:	4621      	mov	r1, r4
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f7ff ffa5 	bl	800ca68 <_Bfree>
 800cb1e:	4644      	mov	r4, r8
 800cb20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb24:	3501      	adds	r5, #1
 800cb26:	615e      	str	r6, [r3, #20]
 800cb28:	6125      	str	r5, [r4, #16]
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb30:	0800edc8 	.word	0x0800edc8
 800cb34:	0800edd9 	.word	0x0800edd9

0800cb38 <__hi0bits>:
 800cb38:	0c03      	lsrs	r3, r0, #16
 800cb3a:	041b      	lsls	r3, r3, #16
 800cb3c:	b9d3      	cbnz	r3, 800cb74 <__hi0bits+0x3c>
 800cb3e:	0400      	lsls	r0, r0, #16
 800cb40:	2310      	movs	r3, #16
 800cb42:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cb46:	bf04      	itt	eq
 800cb48:	0200      	lsleq	r0, r0, #8
 800cb4a:	3308      	addeq	r3, #8
 800cb4c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cb50:	bf04      	itt	eq
 800cb52:	0100      	lsleq	r0, r0, #4
 800cb54:	3304      	addeq	r3, #4
 800cb56:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cb5a:	bf04      	itt	eq
 800cb5c:	0080      	lsleq	r0, r0, #2
 800cb5e:	3302      	addeq	r3, #2
 800cb60:	2800      	cmp	r0, #0
 800cb62:	db05      	blt.n	800cb70 <__hi0bits+0x38>
 800cb64:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cb68:	f103 0301 	add.w	r3, r3, #1
 800cb6c:	bf08      	it	eq
 800cb6e:	2320      	moveq	r3, #32
 800cb70:	4618      	mov	r0, r3
 800cb72:	4770      	bx	lr
 800cb74:	2300      	movs	r3, #0
 800cb76:	e7e4      	b.n	800cb42 <__hi0bits+0xa>

0800cb78 <__lo0bits>:
 800cb78:	6803      	ldr	r3, [r0, #0]
 800cb7a:	f013 0207 	ands.w	r2, r3, #7
 800cb7e:	d00c      	beq.n	800cb9a <__lo0bits+0x22>
 800cb80:	07d9      	lsls	r1, r3, #31
 800cb82:	d422      	bmi.n	800cbca <__lo0bits+0x52>
 800cb84:	079a      	lsls	r2, r3, #30
 800cb86:	bf49      	itett	mi
 800cb88:	085b      	lsrmi	r3, r3, #1
 800cb8a:	089b      	lsrpl	r3, r3, #2
 800cb8c:	6003      	strmi	r3, [r0, #0]
 800cb8e:	2201      	movmi	r2, #1
 800cb90:	bf5c      	itt	pl
 800cb92:	6003      	strpl	r3, [r0, #0]
 800cb94:	2202      	movpl	r2, #2
 800cb96:	4610      	mov	r0, r2
 800cb98:	4770      	bx	lr
 800cb9a:	b299      	uxth	r1, r3
 800cb9c:	b909      	cbnz	r1, 800cba2 <__lo0bits+0x2a>
 800cb9e:	0c1b      	lsrs	r3, r3, #16
 800cba0:	2210      	movs	r2, #16
 800cba2:	b2d9      	uxtb	r1, r3
 800cba4:	b909      	cbnz	r1, 800cbaa <__lo0bits+0x32>
 800cba6:	3208      	adds	r2, #8
 800cba8:	0a1b      	lsrs	r3, r3, #8
 800cbaa:	0719      	lsls	r1, r3, #28
 800cbac:	bf04      	itt	eq
 800cbae:	091b      	lsreq	r3, r3, #4
 800cbb0:	3204      	addeq	r2, #4
 800cbb2:	0799      	lsls	r1, r3, #30
 800cbb4:	bf04      	itt	eq
 800cbb6:	089b      	lsreq	r3, r3, #2
 800cbb8:	3202      	addeq	r2, #2
 800cbba:	07d9      	lsls	r1, r3, #31
 800cbbc:	d403      	bmi.n	800cbc6 <__lo0bits+0x4e>
 800cbbe:	085b      	lsrs	r3, r3, #1
 800cbc0:	f102 0201 	add.w	r2, r2, #1
 800cbc4:	d003      	beq.n	800cbce <__lo0bits+0x56>
 800cbc6:	6003      	str	r3, [r0, #0]
 800cbc8:	e7e5      	b.n	800cb96 <__lo0bits+0x1e>
 800cbca:	2200      	movs	r2, #0
 800cbcc:	e7e3      	b.n	800cb96 <__lo0bits+0x1e>
 800cbce:	2220      	movs	r2, #32
 800cbd0:	e7e1      	b.n	800cb96 <__lo0bits+0x1e>
	...

0800cbd4 <__i2b>:
 800cbd4:	b510      	push	{r4, lr}
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	2101      	movs	r1, #1
 800cbda:	f7ff ff05 	bl	800c9e8 <_Balloc>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	b928      	cbnz	r0, 800cbee <__i2b+0x1a>
 800cbe2:	4b05      	ldr	r3, [pc, #20]	; (800cbf8 <__i2b+0x24>)
 800cbe4:	4805      	ldr	r0, [pc, #20]	; (800cbfc <__i2b+0x28>)
 800cbe6:	f240 1145 	movw	r1, #325	; 0x145
 800cbea:	f000 fcb7 	bl	800d55c <__assert_func>
 800cbee:	2301      	movs	r3, #1
 800cbf0:	6144      	str	r4, [r0, #20]
 800cbf2:	6103      	str	r3, [r0, #16]
 800cbf4:	bd10      	pop	{r4, pc}
 800cbf6:	bf00      	nop
 800cbf8:	0800edc8 	.word	0x0800edc8
 800cbfc:	0800edd9 	.word	0x0800edd9

0800cc00 <__multiply>:
 800cc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	4691      	mov	r9, r2
 800cc06:	690a      	ldr	r2, [r1, #16]
 800cc08:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	bfb8      	it	lt
 800cc10:	460b      	movlt	r3, r1
 800cc12:	460c      	mov	r4, r1
 800cc14:	bfbc      	itt	lt
 800cc16:	464c      	movlt	r4, r9
 800cc18:	4699      	movlt	r9, r3
 800cc1a:	6927      	ldr	r7, [r4, #16]
 800cc1c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc20:	68a3      	ldr	r3, [r4, #8]
 800cc22:	6861      	ldr	r1, [r4, #4]
 800cc24:	eb07 060a 	add.w	r6, r7, sl
 800cc28:	42b3      	cmp	r3, r6
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	bfb8      	it	lt
 800cc2e:	3101      	addlt	r1, #1
 800cc30:	f7ff feda 	bl	800c9e8 <_Balloc>
 800cc34:	b930      	cbnz	r0, 800cc44 <__multiply+0x44>
 800cc36:	4602      	mov	r2, r0
 800cc38:	4b44      	ldr	r3, [pc, #272]	; (800cd4c <__multiply+0x14c>)
 800cc3a:	4845      	ldr	r0, [pc, #276]	; (800cd50 <__multiply+0x150>)
 800cc3c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cc40:	f000 fc8c 	bl	800d55c <__assert_func>
 800cc44:	f100 0514 	add.w	r5, r0, #20
 800cc48:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cc4c:	462b      	mov	r3, r5
 800cc4e:	2200      	movs	r2, #0
 800cc50:	4543      	cmp	r3, r8
 800cc52:	d321      	bcc.n	800cc98 <__multiply+0x98>
 800cc54:	f104 0314 	add.w	r3, r4, #20
 800cc58:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cc5c:	f109 0314 	add.w	r3, r9, #20
 800cc60:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cc64:	9202      	str	r2, [sp, #8]
 800cc66:	1b3a      	subs	r2, r7, r4
 800cc68:	3a15      	subs	r2, #21
 800cc6a:	f022 0203 	bic.w	r2, r2, #3
 800cc6e:	3204      	adds	r2, #4
 800cc70:	f104 0115 	add.w	r1, r4, #21
 800cc74:	428f      	cmp	r7, r1
 800cc76:	bf38      	it	cc
 800cc78:	2204      	movcc	r2, #4
 800cc7a:	9201      	str	r2, [sp, #4]
 800cc7c:	9a02      	ldr	r2, [sp, #8]
 800cc7e:	9303      	str	r3, [sp, #12]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d80c      	bhi.n	800cc9e <__multiply+0x9e>
 800cc84:	2e00      	cmp	r6, #0
 800cc86:	dd03      	ble.n	800cc90 <__multiply+0x90>
 800cc88:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d05b      	beq.n	800cd48 <__multiply+0x148>
 800cc90:	6106      	str	r6, [r0, #16]
 800cc92:	b005      	add	sp, #20
 800cc94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc98:	f843 2b04 	str.w	r2, [r3], #4
 800cc9c:	e7d8      	b.n	800cc50 <__multiply+0x50>
 800cc9e:	f8b3 a000 	ldrh.w	sl, [r3]
 800cca2:	f1ba 0f00 	cmp.w	sl, #0
 800cca6:	d024      	beq.n	800ccf2 <__multiply+0xf2>
 800cca8:	f104 0e14 	add.w	lr, r4, #20
 800ccac:	46a9      	mov	r9, r5
 800ccae:	f04f 0c00 	mov.w	ip, #0
 800ccb2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ccb6:	f8d9 1000 	ldr.w	r1, [r9]
 800ccba:	fa1f fb82 	uxth.w	fp, r2
 800ccbe:	b289      	uxth	r1, r1
 800ccc0:	fb0a 110b 	mla	r1, sl, fp, r1
 800ccc4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ccc8:	f8d9 2000 	ldr.w	r2, [r9]
 800cccc:	4461      	add	r1, ip
 800ccce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccd2:	fb0a c20b 	mla	r2, sl, fp, ip
 800ccd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ccda:	b289      	uxth	r1, r1
 800ccdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cce0:	4577      	cmp	r7, lr
 800cce2:	f849 1b04 	str.w	r1, [r9], #4
 800cce6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ccea:	d8e2      	bhi.n	800ccb2 <__multiply+0xb2>
 800ccec:	9a01      	ldr	r2, [sp, #4]
 800ccee:	f845 c002 	str.w	ip, [r5, r2]
 800ccf2:	9a03      	ldr	r2, [sp, #12]
 800ccf4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	f1b9 0f00 	cmp.w	r9, #0
 800ccfe:	d021      	beq.n	800cd44 <__multiply+0x144>
 800cd00:	6829      	ldr	r1, [r5, #0]
 800cd02:	f104 0c14 	add.w	ip, r4, #20
 800cd06:	46ae      	mov	lr, r5
 800cd08:	f04f 0a00 	mov.w	sl, #0
 800cd0c:	f8bc b000 	ldrh.w	fp, [ip]
 800cd10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cd14:	fb09 220b 	mla	r2, r9, fp, r2
 800cd18:	4452      	add	r2, sl
 800cd1a:	b289      	uxth	r1, r1
 800cd1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cd20:	f84e 1b04 	str.w	r1, [lr], #4
 800cd24:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cd28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd2c:	f8be 1000 	ldrh.w	r1, [lr]
 800cd30:	fb09 110a 	mla	r1, r9, sl, r1
 800cd34:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cd38:	4567      	cmp	r7, ip
 800cd3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cd3e:	d8e5      	bhi.n	800cd0c <__multiply+0x10c>
 800cd40:	9a01      	ldr	r2, [sp, #4]
 800cd42:	50a9      	str	r1, [r5, r2]
 800cd44:	3504      	adds	r5, #4
 800cd46:	e799      	b.n	800cc7c <__multiply+0x7c>
 800cd48:	3e01      	subs	r6, #1
 800cd4a:	e79b      	b.n	800cc84 <__multiply+0x84>
 800cd4c:	0800edc8 	.word	0x0800edc8
 800cd50:	0800edd9 	.word	0x0800edd9

0800cd54 <__pow5mult>:
 800cd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd58:	4615      	mov	r5, r2
 800cd5a:	f012 0203 	ands.w	r2, r2, #3
 800cd5e:	4606      	mov	r6, r0
 800cd60:	460f      	mov	r7, r1
 800cd62:	d007      	beq.n	800cd74 <__pow5mult+0x20>
 800cd64:	4c25      	ldr	r4, [pc, #148]	; (800cdfc <__pow5mult+0xa8>)
 800cd66:	3a01      	subs	r2, #1
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd6e:	f7ff fe9d 	bl	800caac <__multadd>
 800cd72:	4607      	mov	r7, r0
 800cd74:	10ad      	asrs	r5, r5, #2
 800cd76:	d03d      	beq.n	800cdf4 <__pow5mult+0xa0>
 800cd78:	69f4      	ldr	r4, [r6, #28]
 800cd7a:	b97c      	cbnz	r4, 800cd9c <__pow5mult+0x48>
 800cd7c:	2010      	movs	r0, #16
 800cd7e:	f7ff fd7f 	bl	800c880 <malloc>
 800cd82:	4602      	mov	r2, r0
 800cd84:	61f0      	str	r0, [r6, #28]
 800cd86:	b928      	cbnz	r0, 800cd94 <__pow5mult+0x40>
 800cd88:	4b1d      	ldr	r3, [pc, #116]	; (800ce00 <__pow5mult+0xac>)
 800cd8a:	481e      	ldr	r0, [pc, #120]	; (800ce04 <__pow5mult+0xb0>)
 800cd8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cd90:	f000 fbe4 	bl	800d55c <__assert_func>
 800cd94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd98:	6004      	str	r4, [r0, #0]
 800cd9a:	60c4      	str	r4, [r0, #12]
 800cd9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cda0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cda4:	b94c      	cbnz	r4, 800cdba <__pow5mult+0x66>
 800cda6:	f240 2171 	movw	r1, #625	; 0x271
 800cdaa:	4630      	mov	r0, r6
 800cdac:	f7ff ff12 	bl	800cbd4 <__i2b>
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	6003      	str	r3, [r0, #0]
 800cdba:	f04f 0900 	mov.w	r9, #0
 800cdbe:	07eb      	lsls	r3, r5, #31
 800cdc0:	d50a      	bpl.n	800cdd8 <__pow5mult+0x84>
 800cdc2:	4639      	mov	r1, r7
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	f7ff ff1a 	bl	800cc00 <__multiply>
 800cdcc:	4639      	mov	r1, r7
 800cdce:	4680      	mov	r8, r0
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f7ff fe49 	bl	800ca68 <_Bfree>
 800cdd6:	4647      	mov	r7, r8
 800cdd8:	106d      	asrs	r5, r5, #1
 800cdda:	d00b      	beq.n	800cdf4 <__pow5mult+0xa0>
 800cddc:	6820      	ldr	r0, [r4, #0]
 800cdde:	b938      	cbnz	r0, 800cdf0 <__pow5mult+0x9c>
 800cde0:	4622      	mov	r2, r4
 800cde2:	4621      	mov	r1, r4
 800cde4:	4630      	mov	r0, r6
 800cde6:	f7ff ff0b 	bl	800cc00 <__multiply>
 800cdea:	6020      	str	r0, [r4, #0]
 800cdec:	f8c0 9000 	str.w	r9, [r0]
 800cdf0:	4604      	mov	r4, r0
 800cdf2:	e7e4      	b.n	800cdbe <__pow5mult+0x6a>
 800cdf4:	4638      	mov	r0, r7
 800cdf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdfa:	bf00      	nop
 800cdfc:	0800ef28 	.word	0x0800ef28
 800ce00:	0800ed59 	.word	0x0800ed59
 800ce04:	0800edd9 	.word	0x0800edd9

0800ce08 <__lshift>:
 800ce08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce0c:	460c      	mov	r4, r1
 800ce0e:	6849      	ldr	r1, [r1, #4]
 800ce10:	6923      	ldr	r3, [r4, #16]
 800ce12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce16:	68a3      	ldr	r3, [r4, #8]
 800ce18:	4607      	mov	r7, r0
 800ce1a:	4691      	mov	r9, r2
 800ce1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce20:	f108 0601 	add.w	r6, r8, #1
 800ce24:	42b3      	cmp	r3, r6
 800ce26:	db0b      	blt.n	800ce40 <__lshift+0x38>
 800ce28:	4638      	mov	r0, r7
 800ce2a:	f7ff fddd 	bl	800c9e8 <_Balloc>
 800ce2e:	4605      	mov	r5, r0
 800ce30:	b948      	cbnz	r0, 800ce46 <__lshift+0x3e>
 800ce32:	4602      	mov	r2, r0
 800ce34:	4b28      	ldr	r3, [pc, #160]	; (800ced8 <__lshift+0xd0>)
 800ce36:	4829      	ldr	r0, [pc, #164]	; (800cedc <__lshift+0xd4>)
 800ce38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ce3c:	f000 fb8e 	bl	800d55c <__assert_func>
 800ce40:	3101      	adds	r1, #1
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	e7ee      	b.n	800ce24 <__lshift+0x1c>
 800ce46:	2300      	movs	r3, #0
 800ce48:	f100 0114 	add.w	r1, r0, #20
 800ce4c:	f100 0210 	add.w	r2, r0, #16
 800ce50:	4618      	mov	r0, r3
 800ce52:	4553      	cmp	r3, sl
 800ce54:	db33      	blt.n	800cebe <__lshift+0xb6>
 800ce56:	6920      	ldr	r0, [r4, #16]
 800ce58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce5c:	f104 0314 	add.w	r3, r4, #20
 800ce60:	f019 091f 	ands.w	r9, r9, #31
 800ce64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce6c:	d02b      	beq.n	800cec6 <__lshift+0xbe>
 800ce6e:	f1c9 0e20 	rsb	lr, r9, #32
 800ce72:	468a      	mov	sl, r1
 800ce74:	2200      	movs	r2, #0
 800ce76:	6818      	ldr	r0, [r3, #0]
 800ce78:	fa00 f009 	lsl.w	r0, r0, r9
 800ce7c:	4310      	orrs	r0, r2
 800ce7e:	f84a 0b04 	str.w	r0, [sl], #4
 800ce82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce86:	459c      	cmp	ip, r3
 800ce88:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce8c:	d8f3      	bhi.n	800ce76 <__lshift+0x6e>
 800ce8e:	ebac 0304 	sub.w	r3, ip, r4
 800ce92:	3b15      	subs	r3, #21
 800ce94:	f023 0303 	bic.w	r3, r3, #3
 800ce98:	3304      	adds	r3, #4
 800ce9a:	f104 0015 	add.w	r0, r4, #21
 800ce9e:	4584      	cmp	ip, r0
 800cea0:	bf38      	it	cc
 800cea2:	2304      	movcc	r3, #4
 800cea4:	50ca      	str	r2, [r1, r3]
 800cea6:	b10a      	cbz	r2, 800ceac <__lshift+0xa4>
 800cea8:	f108 0602 	add.w	r6, r8, #2
 800ceac:	3e01      	subs	r6, #1
 800ceae:	4638      	mov	r0, r7
 800ceb0:	612e      	str	r6, [r5, #16]
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	f7ff fdd8 	bl	800ca68 <_Bfree>
 800ceb8:	4628      	mov	r0, r5
 800ceba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cebe:	f842 0f04 	str.w	r0, [r2, #4]!
 800cec2:	3301      	adds	r3, #1
 800cec4:	e7c5      	b.n	800ce52 <__lshift+0x4a>
 800cec6:	3904      	subs	r1, #4
 800cec8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cecc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ced0:	459c      	cmp	ip, r3
 800ced2:	d8f9      	bhi.n	800cec8 <__lshift+0xc0>
 800ced4:	e7ea      	b.n	800ceac <__lshift+0xa4>
 800ced6:	bf00      	nop
 800ced8:	0800edc8 	.word	0x0800edc8
 800cedc:	0800edd9 	.word	0x0800edd9

0800cee0 <__mcmp>:
 800cee0:	b530      	push	{r4, r5, lr}
 800cee2:	6902      	ldr	r2, [r0, #16]
 800cee4:	690c      	ldr	r4, [r1, #16]
 800cee6:	1b12      	subs	r2, r2, r4
 800cee8:	d10e      	bne.n	800cf08 <__mcmp+0x28>
 800ceea:	f100 0314 	add.w	r3, r0, #20
 800ceee:	3114      	adds	r1, #20
 800cef0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cef4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cef8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cefc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cf00:	42a5      	cmp	r5, r4
 800cf02:	d003      	beq.n	800cf0c <__mcmp+0x2c>
 800cf04:	d305      	bcc.n	800cf12 <__mcmp+0x32>
 800cf06:	2201      	movs	r2, #1
 800cf08:	4610      	mov	r0, r2
 800cf0a:	bd30      	pop	{r4, r5, pc}
 800cf0c:	4283      	cmp	r3, r0
 800cf0e:	d3f3      	bcc.n	800cef8 <__mcmp+0x18>
 800cf10:	e7fa      	b.n	800cf08 <__mcmp+0x28>
 800cf12:	f04f 32ff 	mov.w	r2, #4294967295
 800cf16:	e7f7      	b.n	800cf08 <__mcmp+0x28>

0800cf18 <__mdiff>:
 800cf18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf1c:	460c      	mov	r4, r1
 800cf1e:	4606      	mov	r6, r0
 800cf20:	4611      	mov	r1, r2
 800cf22:	4620      	mov	r0, r4
 800cf24:	4690      	mov	r8, r2
 800cf26:	f7ff ffdb 	bl	800cee0 <__mcmp>
 800cf2a:	1e05      	subs	r5, r0, #0
 800cf2c:	d110      	bne.n	800cf50 <__mdiff+0x38>
 800cf2e:	4629      	mov	r1, r5
 800cf30:	4630      	mov	r0, r6
 800cf32:	f7ff fd59 	bl	800c9e8 <_Balloc>
 800cf36:	b930      	cbnz	r0, 800cf46 <__mdiff+0x2e>
 800cf38:	4b3a      	ldr	r3, [pc, #232]	; (800d024 <__mdiff+0x10c>)
 800cf3a:	4602      	mov	r2, r0
 800cf3c:	f240 2137 	movw	r1, #567	; 0x237
 800cf40:	4839      	ldr	r0, [pc, #228]	; (800d028 <__mdiff+0x110>)
 800cf42:	f000 fb0b 	bl	800d55c <__assert_func>
 800cf46:	2301      	movs	r3, #1
 800cf48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf50:	bfa4      	itt	ge
 800cf52:	4643      	movge	r3, r8
 800cf54:	46a0      	movge	r8, r4
 800cf56:	4630      	mov	r0, r6
 800cf58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cf5c:	bfa6      	itte	ge
 800cf5e:	461c      	movge	r4, r3
 800cf60:	2500      	movge	r5, #0
 800cf62:	2501      	movlt	r5, #1
 800cf64:	f7ff fd40 	bl	800c9e8 <_Balloc>
 800cf68:	b920      	cbnz	r0, 800cf74 <__mdiff+0x5c>
 800cf6a:	4b2e      	ldr	r3, [pc, #184]	; (800d024 <__mdiff+0x10c>)
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	f240 2145 	movw	r1, #581	; 0x245
 800cf72:	e7e5      	b.n	800cf40 <__mdiff+0x28>
 800cf74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cf78:	6926      	ldr	r6, [r4, #16]
 800cf7a:	60c5      	str	r5, [r0, #12]
 800cf7c:	f104 0914 	add.w	r9, r4, #20
 800cf80:	f108 0514 	add.w	r5, r8, #20
 800cf84:	f100 0e14 	add.w	lr, r0, #20
 800cf88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cf8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cf90:	f108 0210 	add.w	r2, r8, #16
 800cf94:	46f2      	mov	sl, lr
 800cf96:	2100      	movs	r1, #0
 800cf98:	f859 3b04 	ldr.w	r3, [r9], #4
 800cf9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cfa0:	fa11 f88b 	uxtah	r8, r1, fp
 800cfa4:	b299      	uxth	r1, r3
 800cfa6:	0c1b      	lsrs	r3, r3, #16
 800cfa8:	eba8 0801 	sub.w	r8, r8, r1
 800cfac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cfb0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cfb4:	fa1f f888 	uxth.w	r8, r8
 800cfb8:	1419      	asrs	r1, r3, #16
 800cfba:	454e      	cmp	r6, r9
 800cfbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cfc0:	f84a 3b04 	str.w	r3, [sl], #4
 800cfc4:	d8e8      	bhi.n	800cf98 <__mdiff+0x80>
 800cfc6:	1b33      	subs	r3, r6, r4
 800cfc8:	3b15      	subs	r3, #21
 800cfca:	f023 0303 	bic.w	r3, r3, #3
 800cfce:	3304      	adds	r3, #4
 800cfd0:	3415      	adds	r4, #21
 800cfd2:	42a6      	cmp	r6, r4
 800cfd4:	bf38      	it	cc
 800cfd6:	2304      	movcc	r3, #4
 800cfd8:	441d      	add	r5, r3
 800cfda:	4473      	add	r3, lr
 800cfdc:	469e      	mov	lr, r3
 800cfde:	462e      	mov	r6, r5
 800cfe0:	4566      	cmp	r6, ip
 800cfe2:	d30e      	bcc.n	800d002 <__mdiff+0xea>
 800cfe4:	f10c 0203 	add.w	r2, ip, #3
 800cfe8:	1b52      	subs	r2, r2, r5
 800cfea:	f022 0203 	bic.w	r2, r2, #3
 800cfee:	3d03      	subs	r5, #3
 800cff0:	45ac      	cmp	ip, r5
 800cff2:	bf38      	it	cc
 800cff4:	2200      	movcc	r2, #0
 800cff6:	4413      	add	r3, r2
 800cff8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cffc:	b17a      	cbz	r2, 800d01e <__mdiff+0x106>
 800cffe:	6107      	str	r7, [r0, #16]
 800d000:	e7a4      	b.n	800cf4c <__mdiff+0x34>
 800d002:	f856 8b04 	ldr.w	r8, [r6], #4
 800d006:	fa11 f288 	uxtah	r2, r1, r8
 800d00a:	1414      	asrs	r4, r2, #16
 800d00c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d010:	b292      	uxth	r2, r2
 800d012:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d016:	f84e 2b04 	str.w	r2, [lr], #4
 800d01a:	1421      	asrs	r1, r4, #16
 800d01c:	e7e0      	b.n	800cfe0 <__mdiff+0xc8>
 800d01e:	3f01      	subs	r7, #1
 800d020:	e7ea      	b.n	800cff8 <__mdiff+0xe0>
 800d022:	bf00      	nop
 800d024:	0800edc8 	.word	0x0800edc8
 800d028:	0800edd9 	.word	0x0800edd9

0800d02c <__d2b>:
 800d02c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d030:	460f      	mov	r7, r1
 800d032:	2101      	movs	r1, #1
 800d034:	ec59 8b10 	vmov	r8, r9, d0
 800d038:	4616      	mov	r6, r2
 800d03a:	f7ff fcd5 	bl	800c9e8 <_Balloc>
 800d03e:	4604      	mov	r4, r0
 800d040:	b930      	cbnz	r0, 800d050 <__d2b+0x24>
 800d042:	4602      	mov	r2, r0
 800d044:	4b24      	ldr	r3, [pc, #144]	; (800d0d8 <__d2b+0xac>)
 800d046:	4825      	ldr	r0, [pc, #148]	; (800d0dc <__d2b+0xb0>)
 800d048:	f240 310f 	movw	r1, #783	; 0x30f
 800d04c:	f000 fa86 	bl	800d55c <__assert_func>
 800d050:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d054:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d058:	bb2d      	cbnz	r5, 800d0a6 <__d2b+0x7a>
 800d05a:	9301      	str	r3, [sp, #4]
 800d05c:	f1b8 0300 	subs.w	r3, r8, #0
 800d060:	d026      	beq.n	800d0b0 <__d2b+0x84>
 800d062:	4668      	mov	r0, sp
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	f7ff fd87 	bl	800cb78 <__lo0bits>
 800d06a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d06e:	b1e8      	cbz	r0, 800d0ac <__d2b+0x80>
 800d070:	f1c0 0320 	rsb	r3, r0, #32
 800d074:	fa02 f303 	lsl.w	r3, r2, r3
 800d078:	430b      	orrs	r3, r1
 800d07a:	40c2      	lsrs	r2, r0
 800d07c:	6163      	str	r3, [r4, #20]
 800d07e:	9201      	str	r2, [sp, #4]
 800d080:	9b01      	ldr	r3, [sp, #4]
 800d082:	61a3      	str	r3, [r4, #24]
 800d084:	2b00      	cmp	r3, #0
 800d086:	bf14      	ite	ne
 800d088:	2202      	movne	r2, #2
 800d08a:	2201      	moveq	r2, #1
 800d08c:	6122      	str	r2, [r4, #16]
 800d08e:	b1bd      	cbz	r5, 800d0c0 <__d2b+0x94>
 800d090:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d094:	4405      	add	r5, r0
 800d096:	603d      	str	r5, [r7, #0]
 800d098:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d09c:	6030      	str	r0, [r6, #0]
 800d09e:	4620      	mov	r0, r4
 800d0a0:	b003      	add	sp, #12
 800d0a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0aa:	e7d6      	b.n	800d05a <__d2b+0x2e>
 800d0ac:	6161      	str	r1, [r4, #20]
 800d0ae:	e7e7      	b.n	800d080 <__d2b+0x54>
 800d0b0:	a801      	add	r0, sp, #4
 800d0b2:	f7ff fd61 	bl	800cb78 <__lo0bits>
 800d0b6:	9b01      	ldr	r3, [sp, #4]
 800d0b8:	6163      	str	r3, [r4, #20]
 800d0ba:	3020      	adds	r0, #32
 800d0bc:	2201      	movs	r2, #1
 800d0be:	e7e5      	b.n	800d08c <__d2b+0x60>
 800d0c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d0c8:	6038      	str	r0, [r7, #0]
 800d0ca:	6918      	ldr	r0, [r3, #16]
 800d0cc:	f7ff fd34 	bl	800cb38 <__hi0bits>
 800d0d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0d4:	e7e2      	b.n	800d09c <__d2b+0x70>
 800d0d6:	bf00      	nop
 800d0d8:	0800edc8 	.word	0x0800edc8
 800d0dc:	0800edd9 	.word	0x0800edd9

0800d0e0 <__ssputs_r>:
 800d0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e4:	688e      	ldr	r6, [r1, #8]
 800d0e6:	461f      	mov	r7, r3
 800d0e8:	42be      	cmp	r6, r7
 800d0ea:	680b      	ldr	r3, [r1, #0]
 800d0ec:	4682      	mov	sl, r0
 800d0ee:	460c      	mov	r4, r1
 800d0f0:	4690      	mov	r8, r2
 800d0f2:	d82c      	bhi.n	800d14e <__ssputs_r+0x6e>
 800d0f4:	898a      	ldrh	r2, [r1, #12]
 800d0f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0fa:	d026      	beq.n	800d14a <__ssputs_r+0x6a>
 800d0fc:	6965      	ldr	r5, [r4, #20]
 800d0fe:	6909      	ldr	r1, [r1, #16]
 800d100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d104:	eba3 0901 	sub.w	r9, r3, r1
 800d108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d10c:	1c7b      	adds	r3, r7, #1
 800d10e:	444b      	add	r3, r9
 800d110:	106d      	asrs	r5, r5, #1
 800d112:	429d      	cmp	r5, r3
 800d114:	bf38      	it	cc
 800d116:	461d      	movcc	r5, r3
 800d118:	0553      	lsls	r3, r2, #21
 800d11a:	d527      	bpl.n	800d16c <__ssputs_r+0x8c>
 800d11c:	4629      	mov	r1, r5
 800d11e:	f7ff fbd7 	bl	800c8d0 <_malloc_r>
 800d122:	4606      	mov	r6, r0
 800d124:	b360      	cbz	r0, 800d180 <__ssputs_r+0xa0>
 800d126:	6921      	ldr	r1, [r4, #16]
 800d128:	464a      	mov	r2, r9
 800d12a:	f000 fa09 	bl	800d540 <memcpy>
 800d12e:	89a3      	ldrh	r3, [r4, #12]
 800d130:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d138:	81a3      	strh	r3, [r4, #12]
 800d13a:	6126      	str	r6, [r4, #16]
 800d13c:	6165      	str	r5, [r4, #20]
 800d13e:	444e      	add	r6, r9
 800d140:	eba5 0509 	sub.w	r5, r5, r9
 800d144:	6026      	str	r6, [r4, #0]
 800d146:	60a5      	str	r5, [r4, #8]
 800d148:	463e      	mov	r6, r7
 800d14a:	42be      	cmp	r6, r7
 800d14c:	d900      	bls.n	800d150 <__ssputs_r+0x70>
 800d14e:	463e      	mov	r6, r7
 800d150:	6820      	ldr	r0, [r4, #0]
 800d152:	4632      	mov	r2, r6
 800d154:	4641      	mov	r1, r8
 800d156:	f000 f9c9 	bl	800d4ec <memmove>
 800d15a:	68a3      	ldr	r3, [r4, #8]
 800d15c:	1b9b      	subs	r3, r3, r6
 800d15e:	60a3      	str	r3, [r4, #8]
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	4433      	add	r3, r6
 800d164:	6023      	str	r3, [r4, #0]
 800d166:	2000      	movs	r0, #0
 800d168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d16c:	462a      	mov	r2, r5
 800d16e:	f000 fa3b 	bl	800d5e8 <_realloc_r>
 800d172:	4606      	mov	r6, r0
 800d174:	2800      	cmp	r0, #0
 800d176:	d1e0      	bne.n	800d13a <__ssputs_r+0x5a>
 800d178:	6921      	ldr	r1, [r4, #16]
 800d17a:	4650      	mov	r0, sl
 800d17c:	f7ff fb34 	bl	800c7e8 <_free_r>
 800d180:	230c      	movs	r3, #12
 800d182:	f8ca 3000 	str.w	r3, [sl]
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d18c:	81a3      	strh	r3, [r4, #12]
 800d18e:	f04f 30ff 	mov.w	r0, #4294967295
 800d192:	e7e9      	b.n	800d168 <__ssputs_r+0x88>

0800d194 <_svfiprintf_r>:
 800d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	4698      	mov	r8, r3
 800d19a:	898b      	ldrh	r3, [r1, #12]
 800d19c:	061b      	lsls	r3, r3, #24
 800d19e:	b09d      	sub	sp, #116	; 0x74
 800d1a0:	4607      	mov	r7, r0
 800d1a2:	460d      	mov	r5, r1
 800d1a4:	4614      	mov	r4, r2
 800d1a6:	d50e      	bpl.n	800d1c6 <_svfiprintf_r+0x32>
 800d1a8:	690b      	ldr	r3, [r1, #16]
 800d1aa:	b963      	cbnz	r3, 800d1c6 <_svfiprintf_r+0x32>
 800d1ac:	2140      	movs	r1, #64	; 0x40
 800d1ae:	f7ff fb8f 	bl	800c8d0 <_malloc_r>
 800d1b2:	6028      	str	r0, [r5, #0]
 800d1b4:	6128      	str	r0, [r5, #16]
 800d1b6:	b920      	cbnz	r0, 800d1c2 <_svfiprintf_r+0x2e>
 800d1b8:	230c      	movs	r3, #12
 800d1ba:	603b      	str	r3, [r7, #0]
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	e0d0      	b.n	800d364 <_svfiprintf_r+0x1d0>
 800d1c2:	2340      	movs	r3, #64	; 0x40
 800d1c4:	616b      	str	r3, [r5, #20]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ca:	2320      	movs	r3, #32
 800d1cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1d4:	2330      	movs	r3, #48	; 0x30
 800d1d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d37c <_svfiprintf_r+0x1e8>
 800d1da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1de:	f04f 0901 	mov.w	r9, #1
 800d1e2:	4623      	mov	r3, r4
 800d1e4:	469a      	mov	sl, r3
 800d1e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1ea:	b10a      	cbz	r2, 800d1f0 <_svfiprintf_r+0x5c>
 800d1ec:	2a25      	cmp	r2, #37	; 0x25
 800d1ee:	d1f9      	bne.n	800d1e4 <_svfiprintf_r+0x50>
 800d1f0:	ebba 0b04 	subs.w	fp, sl, r4
 800d1f4:	d00b      	beq.n	800d20e <_svfiprintf_r+0x7a>
 800d1f6:	465b      	mov	r3, fp
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	4638      	mov	r0, r7
 800d1fe:	f7ff ff6f 	bl	800d0e0 <__ssputs_r>
 800d202:	3001      	adds	r0, #1
 800d204:	f000 80a9 	beq.w	800d35a <_svfiprintf_r+0x1c6>
 800d208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d20a:	445a      	add	r2, fp
 800d20c:	9209      	str	r2, [sp, #36]	; 0x24
 800d20e:	f89a 3000 	ldrb.w	r3, [sl]
 800d212:	2b00      	cmp	r3, #0
 800d214:	f000 80a1 	beq.w	800d35a <_svfiprintf_r+0x1c6>
 800d218:	2300      	movs	r3, #0
 800d21a:	f04f 32ff 	mov.w	r2, #4294967295
 800d21e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d222:	f10a 0a01 	add.w	sl, sl, #1
 800d226:	9304      	str	r3, [sp, #16]
 800d228:	9307      	str	r3, [sp, #28]
 800d22a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d22e:	931a      	str	r3, [sp, #104]	; 0x68
 800d230:	4654      	mov	r4, sl
 800d232:	2205      	movs	r2, #5
 800d234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d238:	4850      	ldr	r0, [pc, #320]	; (800d37c <_svfiprintf_r+0x1e8>)
 800d23a:	f7f3 f801 	bl	8000240 <memchr>
 800d23e:	9a04      	ldr	r2, [sp, #16]
 800d240:	b9d8      	cbnz	r0, 800d27a <_svfiprintf_r+0xe6>
 800d242:	06d0      	lsls	r0, r2, #27
 800d244:	bf44      	itt	mi
 800d246:	2320      	movmi	r3, #32
 800d248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d24c:	0711      	lsls	r1, r2, #28
 800d24e:	bf44      	itt	mi
 800d250:	232b      	movmi	r3, #43	; 0x2b
 800d252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d256:	f89a 3000 	ldrb.w	r3, [sl]
 800d25a:	2b2a      	cmp	r3, #42	; 0x2a
 800d25c:	d015      	beq.n	800d28a <_svfiprintf_r+0xf6>
 800d25e:	9a07      	ldr	r2, [sp, #28]
 800d260:	4654      	mov	r4, sl
 800d262:	2000      	movs	r0, #0
 800d264:	f04f 0c0a 	mov.w	ip, #10
 800d268:	4621      	mov	r1, r4
 800d26a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d26e:	3b30      	subs	r3, #48	; 0x30
 800d270:	2b09      	cmp	r3, #9
 800d272:	d94d      	bls.n	800d310 <_svfiprintf_r+0x17c>
 800d274:	b1b0      	cbz	r0, 800d2a4 <_svfiprintf_r+0x110>
 800d276:	9207      	str	r2, [sp, #28]
 800d278:	e014      	b.n	800d2a4 <_svfiprintf_r+0x110>
 800d27a:	eba0 0308 	sub.w	r3, r0, r8
 800d27e:	fa09 f303 	lsl.w	r3, r9, r3
 800d282:	4313      	orrs	r3, r2
 800d284:	9304      	str	r3, [sp, #16]
 800d286:	46a2      	mov	sl, r4
 800d288:	e7d2      	b.n	800d230 <_svfiprintf_r+0x9c>
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	1d19      	adds	r1, r3, #4
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	9103      	str	r1, [sp, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	bfbb      	ittet	lt
 800d296:	425b      	neglt	r3, r3
 800d298:	f042 0202 	orrlt.w	r2, r2, #2
 800d29c:	9307      	strge	r3, [sp, #28]
 800d29e:	9307      	strlt	r3, [sp, #28]
 800d2a0:	bfb8      	it	lt
 800d2a2:	9204      	strlt	r2, [sp, #16]
 800d2a4:	7823      	ldrb	r3, [r4, #0]
 800d2a6:	2b2e      	cmp	r3, #46	; 0x2e
 800d2a8:	d10c      	bne.n	800d2c4 <_svfiprintf_r+0x130>
 800d2aa:	7863      	ldrb	r3, [r4, #1]
 800d2ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d2ae:	d134      	bne.n	800d31a <_svfiprintf_r+0x186>
 800d2b0:	9b03      	ldr	r3, [sp, #12]
 800d2b2:	1d1a      	adds	r2, r3, #4
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	9203      	str	r2, [sp, #12]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	bfb8      	it	lt
 800d2bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2c0:	3402      	adds	r4, #2
 800d2c2:	9305      	str	r3, [sp, #20]
 800d2c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d38c <_svfiprintf_r+0x1f8>
 800d2c8:	7821      	ldrb	r1, [r4, #0]
 800d2ca:	2203      	movs	r2, #3
 800d2cc:	4650      	mov	r0, sl
 800d2ce:	f7f2 ffb7 	bl	8000240 <memchr>
 800d2d2:	b138      	cbz	r0, 800d2e4 <_svfiprintf_r+0x150>
 800d2d4:	9b04      	ldr	r3, [sp, #16]
 800d2d6:	eba0 000a 	sub.w	r0, r0, sl
 800d2da:	2240      	movs	r2, #64	; 0x40
 800d2dc:	4082      	lsls	r2, r0
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	3401      	adds	r4, #1
 800d2e2:	9304      	str	r3, [sp, #16]
 800d2e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2e8:	4825      	ldr	r0, [pc, #148]	; (800d380 <_svfiprintf_r+0x1ec>)
 800d2ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2ee:	2206      	movs	r2, #6
 800d2f0:	f7f2 ffa6 	bl	8000240 <memchr>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d038      	beq.n	800d36a <_svfiprintf_r+0x1d6>
 800d2f8:	4b22      	ldr	r3, [pc, #136]	; (800d384 <_svfiprintf_r+0x1f0>)
 800d2fa:	bb1b      	cbnz	r3, 800d344 <_svfiprintf_r+0x1b0>
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	3307      	adds	r3, #7
 800d300:	f023 0307 	bic.w	r3, r3, #7
 800d304:	3308      	adds	r3, #8
 800d306:	9303      	str	r3, [sp, #12]
 800d308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d30a:	4433      	add	r3, r6
 800d30c:	9309      	str	r3, [sp, #36]	; 0x24
 800d30e:	e768      	b.n	800d1e2 <_svfiprintf_r+0x4e>
 800d310:	fb0c 3202 	mla	r2, ip, r2, r3
 800d314:	460c      	mov	r4, r1
 800d316:	2001      	movs	r0, #1
 800d318:	e7a6      	b.n	800d268 <_svfiprintf_r+0xd4>
 800d31a:	2300      	movs	r3, #0
 800d31c:	3401      	adds	r4, #1
 800d31e:	9305      	str	r3, [sp, #20]
 800d320:	4619      	mov	r1, r3
 800d322:	f04f 0c0a 	mov.w	ip, #10
 800d326:	4620      	mov	r0, r4
 800d328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d32c:	3a30      	subs	r2, #48	; 0x30
 800d32e:	2a09      	cmp	r2, #9
 800d330:	d903      	bls.n	800d33a <_svfiprintf_r+0x1a6>
 800d332:	2b00      	cmp	r3, #0
 800d334:	d0c6      	beq.n	800d2c4 <_svfiprintf_r+0x130>
 800d336:	9105      	str	r1, [sp, #20]
 800d338:	e7c4      	b.n	800d2c4 <_svfiprintf_r+0x130>
 800d33a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d33e:	4604      	mov	r4, r0
 800d340:	2301      	movs	r3, #1
 800d342:	e7f0      	b.n	800d326 <_svfiprintf_r+0x192>
 800d344:	ab03      	add	r3, sp, #12
 800d346:	9300      	str	r3, [sp, #0]
 800d348:	462a      	mov	r2, r5
 800d34a:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <_svfiprintf_r+0x1f4>)
 800d34c:	a904      	add	r1, sp, #16
 800d34e:	4638      	mov	r0, r7
 800d350:	f7fd fed2 	bl	800b0f8 <_printf_float>
 800d354:	1c42      	adds	r2, r0, #1
 800d356:	4606      	mov	r6, r0
 800d358:	d1d6      	bne.n	800d308 <_svfiprintf_r+0x174>
 800d35a:	89ab      	ldrh	r3, [r5, #12]
 800d35c:	065b      	lsls	r3, r3, #25
 800d35e:	f53f af2d 	bmi.w	800d1bc <_svfiprintf_r+0x28>
 800d362:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d364:	b01d      	add	sp, #116	; 0x74
 800d366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d36a:	ab03      	add	r3, sp, #12
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	462a      	mov	r2, r5
 800d370:	4b05      	ldr	r3, [pc, #20]	; (800d388 <_svfiprintf_r+0x1f4>)
 800d372:	a904      	add	r1, sp, #16
 800d374:	4638      	mov	r0, r7
 800d376:	f7fe f947 	bl	800b608 <_printf_i>
 800d37a:	e7eb      	b.n	800d354 <_svfiprintf_r+0x1c0>
 800d37c:	0800ef34 	.word	0x0800ef34
 800d380:	0800ef3e 	.word	0x0800ef3e
 800d384:	0800b0f9 	.word	0x0800b0f9
 800d388:	0800d0e1 	.word	0x0800d0e1
 800d38c:	0800ef3a 	.word	0x0800ef3a

0800d390 <__sflush_r>:
 800d390:	898a      	ldrh	r2, [r1, #12]
 800d392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d396:	4605      	mov	r5, r0
 800d398:	0710      	lsls	r0, r2, #28
 800d39a:	460c      	mov	r4, r1
 800d39c:	d458      	bmi.n	800d450 <__sflush_r+0xc0>
 800d39e:	684b      	ldr	r3, [r1, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	dc05      	bgt.n	800d3b0 <__sflush_r+0x20>
 800d3a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	dc02      	bgt.n	800d3b0 <__sflush_r+0x20>
 800d3aa:	2000      	movs	r0, #0
 800d3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3b2:	2e00      	cmp	r6, #0
 800d3b4:	d0f9      	beq.n	800d3aa <__sflush_r+0x1a>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3bc:	682f      	ldr	r7, [r5, #0]
 800d3be:	6a21      	ldr	r1, [r4, #32]
 800d3c0:	602b      	str	r3, [r5, #0]
 800d3c2:	d032      	beq.n	800d42a <__sflush_r+0x9a>
 800d3c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3c6:	89a3      	ldrh	r3, [r4, #12]
 800d3c8:	075a      	lsls	r2, r3, #29
 800d3ca:	d505      	bpl.n	800d3d8 <__sflush_r+0x48>
 800d3cc:	6863      	ldr	r3, [r4, #4]
 800d3ce:	1ac0      	subs	r0, r0, r3
 800d3d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3d2:	b10b      	cbz	r3, 800d3d8 <__sflush_r+0x48>
 800d3d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3d6:	1ac0      	subs	r0, r0, r3
 800d3d8:	2300      	movs	r3, #0
 800d3da:	4602      	mov	r2, r0
 800d3dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3de:	6a21      	ldr	r1, [r4, #32]
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	47b0      	blx	r6
 800d3e4:	1c43      	adds	r3, r0, #1
 800d3e6:	89a3      	ldrh	r3, [r4, #12]
 800d3e8:	d106      	bne.n	800d3f8 <__sflush_r+0x68>
 800d3ea:	6829      	ldr	r1, [r5, #0]
 800d3ec:	291d      	cmp	r1, #29
 800d3ee:	d82b      	bhi.n	800d448 <__sflush_r+0xb8>
 800d3f0:	4a29      	ldr	r2, [pc, #164]	; (800d498 <__sflush_r+0x108>)
 800d3f2:	410a      	asrs	r2, r1
 800d3f4:	07d6      	lsls	r6, r2, #31
 800d3f6:	d427      	bmi.n	800d448 <__sflush_r+0xb8>
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	6062      	str	r2, [r4, #4]
 800d3fc:	04d9      	lsls	r1, r3, #19
 800d3fe:	6922      	ldr	r2, [r4, #16]
 800d400:	6022      	str	r2, [r4, #0]
 800d402:	d504      	bpl.n	800d40e <__sflush_r+0x7e>
 800d404:	1c42      	adds	r2, r0, #1
 800d406:	d101      	bne.n	800d40c <__sflush_r+0x7c>
 800d408:	682b      	ldr	r3, [r5, #0]
 800d40a:	b903      	cbnz	r3, 800d40e <__sflush_r+0x7e>
 800d40c:	6560      	str	r0, [r4, #84]	; 0x54
 800d40e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d410:	602f      	str	r7, [r5, #0]
 800d412:	2900      	cmp	r1, #0
 800d414:	d0c9      	beq.n	800d3aa <__sflush_r+0x1a>
 800d416:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d41a:	4299      	cmp	r1, r3
 800d41c:	d002      	beq.n	800d424 <__sflush_r+0x94>
 800d41e:	4628      	mov	r0, r5
 800d420:	f7ff f9e2 	bl	800c7e8 <_free_r>
 800d424:	2000      	movs	r0, #0
 800d426:	6360      	str	r0, [r4, #52]	; 0x34
 800d428:	e7c0      	b.n	800d3ac <__sflush_r+0x1c>
 800d42a:	2301      	movs	r3, #1
 800d42c:	4628      	mov	r0, r5
 800d42e:	47b0      	blx	r6
 800d430:	1c41      	adds	r1, r0, #1
 800d432:	d1c8      	bne.n	800d3c6 <__sflush_r+0x36>
 800d434:	682b      	ldr	r3, [r5, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d0c5      	beq.n	800d3c6 <__sflush_r+0x36>
 800d43a:	2b1d      	cmp	r3, #29
 800d43c:	d001      	beq.n	800d442 <__sflush_r+0xb2>
 800d43e:	2b16      	cmp	r3, #22
 800d440:	d101      	bne.n	800d446 <__sflush_r+0xb6>
 800d442:	602f      	str	r7, [r5, #0]
 800d444:	e7b1      	b.n	800d3aa <__sflush_r+0x1a>
 800d446:	89a3      	ldrh	r3, [r4, #12]
 800d448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d44c:	81a3      	strh	r3, [r4, #12]
 800d44e:	e7ad      	b.n	800d3ac <__sflush_r+0x1c>
 800d450:	690f      	ldr	r7, [r1, #16]
 800d452:	2f00      	cmp	r7, #0
 800d454:	d0a9      	beq.n	800d3aa <__sflush_r+0x1a>
 800d456:	0793      	lsls	r3, r2, #30
 800d458:	680e      	ldr	r6, [r1, #0]
 800d45a:	bf08      	it	eq
 800d45c:	694b      	ldreq	r3, [r1, #20]
 800d45e:	600f      	str	r7, [r1, #0]
 800d460:	bf18      	it	ne
 800d462:	2300      	movne	r3, #0
 800d464:	eba6 0807 	sub.w	r8, r6, r7
 800d468:	608b      	str	r3, [r1, #8]
 800d46a:	f1b8 0f00 	cmp.w	r8, #0
 800d46e:	dd9c      	ble.n	800d3aa <__sflush_r+0x1a>
 800d470:	6a21      	ldr	r1, [r4, #32]
 800d472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d474:	4643      	mov	r3, r8
 800d476:	463a      	mov	r2, r7
 800d478:	4628      	mov	r0, r5
 800d47a:	47b0      	blx	r6
 800d47c:	2800      	cmp	r0, #0
 800d47e:	dc06      	bgt.n	800d48e <__sflush_r+0xfe>
 800d480:	89a3      	ldrh	r3, [r4, #12]
 800d482:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d486:	81a3      	strh	r3, [r4, #12]
 800d488:	f04f 30ff 	mov.w	r0, #4294967295
 800d48c:	e78e      	b.n	800d3ac <__sflush_r+0x1c>
 800d48e:	4407      	add	r7, r0
 800d490:	eba8 0800 	sub.w	r8, r8, r0
 800d494:	e7e9      	b.n	800d46a <__sflush_r+0xda>
 800d496:	bf00      	nop
 800d498:	dfbffffe 	.word	0xdfbffffe

0800d49c <_fflush_r>:
 800d49c:	b538      	push	{r3, r4, r5, lr}
 800d49e:	690b      	ldr	r3, [r1, #16]
 800d4a0:	4605      	mov	r5, r0
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	b913      	cbnz	r3, 800d4ac <_fflush_r+0x10>
 800d4a6:	2500      	movs	r5, #0
 800d4a8:	4628      	mov	r0, r5
 800d4aa:	bd38      	pop	{r3, r4, r5, pc}
 800d4ac:	b118      	cbz	r0, 800d4b6 <_fflush_r+0x1a>
 800d4ae:	6a03      	ldr	r3, [r0, #32]
 800d4b0:	b90b      	cbnz	r3, 800d4b6 <_fflush_r+0x1a>
 800d4b2:	f7fe fa57 	bl	800b964 <__sinit>
 800d4b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d0f3      	beq.n	800d4a6 <_fflush_r+0xa>
 800d4be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4c0:	07d0      	lsls	r0, r2, #31
 800d4c2:	d404      	bmi.n	800d4ce <_fflush_r+0x32>
 800d4c4:	0599      	lsls	r1, r3, #22
 800d4c6:	d402      	bmi.n	800d4ce <_fflush_r+0x32>
 800d4c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4ca:	f7fe fb96 	bl	800bbfa <__retarget_lock_acquire_recursive>
 800d4ce:	4628      	mov	r0, r5
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	f7ff ff5d 	bl	800d390 <__sflush_r>
 800d4d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d4d8:	07da      	lsls	r2, r3, #31
 800d4da:	4605      	mov	r5, r0
 800d4dc:	d4e4      	bmi.n	800d4a8 <_fflush_r+0xc>
 800d4de:	89a3      	ldrh	r3, [r4, #12]
 800d4e0:	059b      	lsls	r3, r3, #22
 800d4e2:	d4e1      	bmi.n	800d4a8 <_fflush_r+0xc>
 800d4e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4e6:	f7fe fb89 	bl	800bbfc <__retarget_lock_release_recursive>
 800d4ea:	e7dd      	b.n	800d4a8 <_fflush_r+0xc>

0800d4ec <memmove>:
 800d4ec:	4288      	cmp	r0, r1
 800d4ee:	b510      	push	{r4, lr}
 800d4f0:	eb01 0402 	add.w	r4, r1, r2
 800d4f4:	d902      	bls.n	800d4fc <memmove+0x10>
 800d4f6:	4284      	cmp	r4, r0
 800d4f8:	4623      	mov	r3, r4
 800d4fa:	d807      	bhi.n	800d50c <memmove+0x20>
 800d4fc:	1e43      	subs	r3, r0, #1
 800d4fe:	42a1      	cmp	r1, r4
 800d500:	d008      	beq.n	800d514 <memmove+0x28>
 800d502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d50a:	e7f8      	b.n	800d4fe <memmove+0x12>
 800d50c:	4402      	add	r2, r0
 800d50e:	4601      	mov	r1, r0
 800d510:	428a      	cmp	r2, r1
 800d512:	d100      	bne.n	800d516 <memmove+0x2a>
 800d514:	bd10      	pop	{r4, pc}
 800d516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d51e:	e7f7      	b.n	800d510 <memmove+0x24>

0800d520 <_sbrk_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d06      	ldr	r5, [pc, #24]	; (800d53c <_sbrk_r+0x1c>)
 800d524:	2300      	movs	r3, #0
 800d526:	4604      	mov	r4, r0
 800d528:	4608      	mov	r0, r1
 800d52a:	602b      	str	r3, [r5, #0]
 800d52c:	f7f6 fc72 	bl	8003e14 <_sbrk>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d102      	bne.n	800d53a <_sbrk_r+0x1a>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	b103      	cbz	r3, 800d53a <_sbrk_r+0x1a>
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	20000a1c 	.word	0x20000a1c

0800d540 <memcpy>:
 800d540:	440a      	add	r2, r1
 800d542:	4291      	cmp	r1, r2
 800d544:	f100 33ff 	add.w	r3, r0, #4294967295
 800d548:	d100      	bne.n	800d54c <memcpy+0xc>
 800d54a:	4770      	bx	lr
 800d54c:	b510      	push	{r4, lr}
 800d54e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d552:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d556:	4291      	cmp	r1, r2
 800d558:	d1f9      	bne.n	800d54e <memcpy+0xe>
 800d55a:	bd10      	pop	{r4, pc}

0800d55c <__assert_func>:
 800d55c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d55e:	4614      	mov	r4, r2
 800d560:	461a      	mov	r2, r3
 800d562:	4b09      	ldr	r3, [pc, #36]	; (800d588 <__assert_func+0x2c>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	4605      	mov	r5, r0
 800d568:	68d8      	ldr	r0, [r3, #12]
 800d56a:	b14c      	cbz	r4, 800d580 <__assert_func+0x24>
 800d56c:	4b07      	ldr	r3, [pc, #28]	; (800d58c <__assert_func+0x30>)
 800d56e:	9100      	str	r1, [sp, #0]
 800d570:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d574:	4906      	ldr	r1, [pc, #24]	; (800d590 <__assert_func+0x34>)
 800d576:	462b      	mov	r3, r5
 800d578:	f000 f872 	bl	800d660 <fiprintf>
 800d57c:	f000 f882 	bl	800d684 <abort>
 800d580:	4b04      	ldr	r3, [pc, #16]	; (800d594 <__assert_func+0x38>)
 800d582:	461c      	mov	r4, r3
 800d584:	e7f3      	b.n	800d56e <__assert_func+0x12>
 800d586:	bf00      	nop
 800d588:	20000130 	.word	0x20000130
 800d58c:	0800ef4f 	.word	0x0800ef4f
 800d590:	0800ef5c 	.word	0x0800ef5c
 800d594:	0800ef8a 	.word	0x0800ef8a

0800d598 <_calloc_r>:
 800d598:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d59a:	fba1 2402 	umull	r2, r4, r1, r2
 800d59e:	b94c      	cbnz	r4, 800d5b4 <_calloc_r+0x1c>
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	9201      	str	r2, [sp, #4]
 800d5a4:	f7ff f994 	bl	800c8d0 <_malloc_r>
 800d5a8:	9a01      	ldr	r2, [sp, #4]
 800d5aa:	4605      	mov	r5, r0
 800d5ac:	b930      	cbnz	r0, 800d5bc <_calloc_r+0x24>
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	b003      	add	sp, #12
 800d5b2:	bd30      	pop	{r4, r5, pc}
 800d5b4:	220c      	movs	r2, #12
 800d5b6:	6002      	str	r2, [r0, #0]
 800d5b8:	2500      	movs	r5, #0
 800d5ba:	e7f8      	b.n	800d5ae <_calloc_r+0x16>
 800d5bc:	4621      	mov	r1, r4
 800d5be:	f7fe fa9e 	bl	800bafe <memset>
 800d5c2:	e7f4      	b.n	800d5ae <_calloc_r+0x16>

0800d5c4 <__ascii_mbtowc>:
 800d5c4:	b082      	sub	sp, #8
 800d5c6:	b901      	cbnz	r1, 800d5ca <__ascii_mbtowc+0x6>
 800d5c8:	a901      	add	r1, sp, #4
 800d5ca:	b142      	cbz	r2, 800d5de <__ascii_mbtowc+0x1a>
 800d5cc:	b14b      	cbz	r3, 800d5e2 <__ascii_mbtowc+0x1e>
 800d5ce:	7813      	ldrb	r3, [r2, #0]
 800d5d0:	600b      	str	r3, [r1, #0]
 800d5d2:	7812      	ldrb	r2, [r2, #0]
 800d5d4:	1e10      	subs	r0, r2, #0
 800d5d6:	bf18      	it	ne
 800d5d8:	2001      	movne	r0, #1
 800d5da:	b002      	add	sp, #8
 800d5dc:	4770      	bx	lr
 800d5de:	4610      	mov	r0, r2
 800d5e0:	e7fb      	b.n	800d5da <__ascii_mbtowc+0x16>
 800d5e2:	f06f 0001 	mvn.w	r0, #1
 800d5e6:	e7f8      	b.n	800d5da <__ascii_mbtowc+0x16>

0800d5e8 <_realloc_r>:
 800d5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ec:	4680      	mov	r8, r0
 800d5ee:	4614      	mov	r4, r2
 800d5f0:	460e      	mov	r6, r1
 800d5f2:	b921      	cbnz	r1, 800d5fe <_realloc_r+0x16>
 800d5f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	f7ff b969 	b.w	800c8d0 <_malloc_r>
 800d5fe:	b92a      	cbnz	r2, 800d60c <_realloc_r+0x24>
 800d600:	f7ff f8f2 	bl	800c7e8 <_free_r>
 800d604:	4625      	mov	r5, r4
 800d606:	4628      	mov	r0, r5
 800d608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d60c:	f000 f841 	bl	800d692 <_malloc_usable_size_r>
 800d610:	4284      	cmp	r4, r0
 800d612:	4607      	mov	r7, r0
 800d614:	d802      	bhi.n	800d61c <_realloc_r+0x34>
 800d616:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d61a:	d812      	bhi.n	800d642 <_realloc_r+0x5a>
 800d61c:	4621      	mov	r1, r4
 800d61e:	4640      	mov	r0, r8
 800d620:	f7ff f956 	bl	800c8d0 <_malloc_r>
 800d624:	4605      	mov	r5, r0
 800d626:	2800      	cmp	r0, #0
 800d628:	d0ed      	beq.n	800d606 <_realloc_r+0x1e>
 800d62a:	42bc      	cmp	r4, r7
 800d62c:	4622      	mov	r2, r4
 800d62e:	4631      	mov	r1, r6
 800d630:	bf28      	it	cs
 800d632:	463a      	movcs	r2, r7
 800d634:	f7ff ff84 	bl	800d540 <memcpy>
 800d638:	4631      	mov	r1, r6
 800d63a:	4640      	mov	r0, r8
 800d63c:	f7ff f8d4 	bl	800c7e8 <_free_r>
 800d640:	e7e1      	b.n	800d606 <_realloc_r+0x1e>
 800d642:	4635      	mov	r5, r6
 800d644:	e7df      	b.n	800d606 <_realloc_r+0x1e>

0800d646 <__ascii_wctomb>:
 800d646:	b149      	cbz	r1, 800d65c <__ascii_wctomb+0x16>
 800d648:	2aff      	cmp	r2, #255	; 0xff
 800d64a:	bf85      	ittet	hi
 800d64c:	238a      	movhi	r3, #138	; 0x8a
 800d64e:	6003      	strhi	r3, [r0, #0]
 800d650:	700a      	strbls	r2, [r1, #0]
 800d652:	f04f 30ff 	movhi.w	r0, #4294967295
 800d656:	bf98      	it	ls
 800d658:	2001      	movls	r0, #1
 800d65a:	4770      	bx	lr
 800d65c:	4608      	mov	r0, r1
 800d65e:	4770      	bx	lr

0800d660 <fiprintf>:
 800d660:	b40e      	push	{r1, r2, r3}
 800d662:	b503      	push	{r0, r1, lr}
 800d664:	4601      	mov	r1, r0
 800d666:	ab03      	add	r3, sp, #12
 800d668:	4805      	ldr	r0, [pc, #20]	; (800d680 <fiprintf+0x20>)
 800d66a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d66e:	6800      	ldr	r0, [r0, #0]
 800d670:	9301      	str	r3, [sp, #4]
 800d672:	f000 f83f 	bl	800d6f4 <_vfiprintf_r>
 800d676:	b002      	add	sp, #8
 800d678:	f85d eb04 	ldr.w	lr, [sp], #4
 800d67c:	b003      	add	sp, #12
 800d67e:	4770      	bx	lr
 800d680:	20000130 	.word	0x20000130

0800d684 <abort>:
 800d684:	b508      	push	{r3, lr}
 800d686:	2006      	movs	r0, #6
 800d688:	f000 fa0c 	bl	800daa4 <raise>
 800d68c:	2001      	movs	r0, #1
 800d68e:	f7f6 fb49 	bl	8003d24 <_exit>

0800d692 <_malloc_usable_size_r>:
 800d692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d696:	1f18      	subs	r0, r3, #4
 800d698:	2b00      	cmp	r3, #0
 800d69a:	bfbc      	itt	lt
 800d69c:	580b      	ldrlt	r3, [r1, r0]
 800d69e:	18c0      	addlt	r0, r0, r3
 800d6a0:	4770      	bx	lr

0800d6a2 <__sfputc_r>:
 800d6a2:	6893      	ldr	r3, [r2, #8]
 800d6a4:	3b01      	subs	r3, #1
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	b410      	push	{r4}
 800d6aa:	6093      	str	r3, [r2, #8]
 800d6ac:	da08      	bge.n	800d6c0 <__sfputc_r+0x1e>
 800d6ae:	6994      	ldr	r4, [r2, #24]
 800d6b0:	42a3      	cmp	r3, r4
 800d6b2:	db01      	blt.n	800d6b8 <__sfputc_r+0x16>
 800d6b4:	290a      	cmp	r1, #10
 800d6b6:	d103      	bne.n	800d6c0 <__sfputc_r+0x1e>
 800d6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6bc:	f000 b934 	b.w	800d928 <__swbuf_r>
 800d6c0:	6813      	ldr	r3, [r2, #0]
 800d6c2:	1c58      	adds	r0, r3, #1
 800d6c4:	6010      	str	r0, [r2, #0]
 800d6c6:	7019      	strb	r1, [r3, #0]
 800d6c8:	4608      	mov	r0, r1
 800d6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <__sfputs_r>:
 800d6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6d2:	4606      	mov	r6, r0
 800d6d4:	460f      	mov	r7, r1
 800d6d6:	4614      	mov	r4, r2
 800d6d8:	18d5      	adds	r5, r2, r3
 800d6da:	42ac      	cmp	r4, r5
 800d6dc:	d101      	bne.n	800d6e2 <__sfputs_r+0x12>
 800d6de:	2000      	movs	r0, #0
 800d6e0:	e007      	b.n	800d6f2 <__sfputs_r+0x22>
 800d6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6e6:	463a      	mov	r2, r7
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f7ff ffda 	bl	800d6a2 <__sfputc_r>
 800d6ee:	1c43      	adds	r3, r0, #1
 800d6f0:	d1f3      	bne.n	800d6da <__sfputs_r+0xa>
 800d6f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d6f4 <_vfiprintf_r>:
 800d6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f8:	460d      	mov	r5, r1
 800d6fa:	b09d      	sub	sp, #116	; 0x74
 800d6fc:	4614      	mov	r4, r2
 800d6fe:	4698      	mov	r8, r3
 800d700:	4606      	mov	r6, r0
 800d702:	b118      	cbz	r0, 800d70c <_vfiprintf_r+0x18>
 800d704:	6a03      	ldr	r3, [r0, #32]
 800d706:	b90b      	cbnz	r3, 800d70c <_vfiprintf_r+0x18>
 800d708:	f7fe f92c 	bl	800b964 <__sinit>
 800d70c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d70e:	07d9      	lsls	r1, r3, #31
 800d710:	d405      	bmi.n	800d71e <_vfiprintf_r+0x2a>
 800d712:	89ab      	ldrh	r3, [r5, #12]
 800d714:	059a      	lsls	r2, r3, #22
 800d716:	d402      	bmi.n	800d71e <_vfiprintf_r+0x2a>
 800d718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d71a:	f7fe fa6e 	bl	800bbfa <__retarget_lock_acquire_recursive>
 800d71e:	89ab      	ldrh	r3, [r5, #12]
 800d720:	071b      	lsls	r3, r3, #28
 800d722:	d501      	bpl.n	800d728 <_vfiprintf_r+0x34>
 800d724:	692b      	ldr	r3, [r5, #16]
 800d726:	b99b      	cbnz	r3, 800d750 <_vfiprintf_r+0x5c>
 800d728:	4629      	mov	r1, r5
 800d72a:	4630      	mov	r0, r6
 800d72c:	f000 f93a 	bl	800d9a4 <__swsetup_r>
 800d730:	b170      	cbz	r0, 800d750 <_vfiprintf_r+0x5c>
 800d732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d734:	07dc      	lsls	r4, r3, #31
 800d736:	d504      	bpl.n	800d742 <_vfiprintf_r+0x4e>
 800d738:	f04f 30ff 	mov.w	r0, #4294967295
 800d73c:	b01d      	add	sp, #116	; 0x74
 800d73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d742:	89ab      	ldrh	r3, [r5, #12]
 800d744:	0598      	lsls	r0, r3, #22
 800d746:	d4f7      	bmi.n	800d738 <_vfiprintf_r+0x44>
 800d748:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d74a:	f7fe fa57 	bl	800bbfc <__retarget_lock_release_recursive>
 800d74e:	e7f3      	b.n	800d738 <_vfiprintf_r+0x44>
 800d750:	2300      	movs	r3, #0
 800d752:	9309      	str	r3, [sp, #36]	; 0x24
 800d754:	2320      	movs	r3, #32
 800d756:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d75a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d75e:	2330      	movs	r3, #48	; 0x30
 800d760:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d914 <_vfiprintf_r+0x220>
 800d764:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d768:	f04f 0901 	mov.w	r9, #1
 800d76c:	4623      	mov	r3, r4
 800d76e:	469a      	mov	sl, r3
 800d770:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d774:	b10a      	cbz	r2, 800d77a <_vfiprintf_r+0x86>
 800d776:	2a25      	cmp	r2, #37	; 0x25
 800d778:	d1f9      	bne.n	800d76e <_vfiprintf_r+0x7a>
 800d77a:	ebba 0b04 	subs.w	fp, sl, r4
 800d77e:	d00b      	beq.n	800d798 <_vfiprintf_r+0xa4>
 800d780:	465b      	mov	r3, fp
 800d782:	4622      	mov	r2, r4
 800d784:	4629      	mov	r1, r5
 800d786:	4630      	mov	r0, r6
 800d788:	f7ff ffa2 	bl	800d6d0 <__sfputs_r>
 800d78c:	3001      	adds	r0, #1
 800d78e:	f000 80a9 	beq.w	800d8e4 <_vfiprintf_r+0x1f0>
 800d792:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d794:	445a      	add	r2, fp
 800d796:	9209      	str	r2, [sp, #36]	; 0x24
 800d798:	f89a 3000 	ldrb.w	r3, [sl]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f000 80a1 	beq.w	800d8e4 <_vfiprintf_r+0x1f0>
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7ac:	f10a 0a01 	add.w	sl, sl, #1
 800d7b0:	9304      	str	r3, [sp, #16]
 800d7b2:	9307      	str	r3, [sp, #28]
 800d7b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d7b8:	931a      	str	r3, [sp, #104]	; 0x68
 800d7ba:	4654      	mov	r4, sl
 800d7bc:	2205      	movs	r2, #5
 800d7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7c2:	4854      	ldr	r0, [pc, #336]	; (800d914 <_vfiprintf_r+0x220>)
 800d7c4:	f7f2 fd3c 	bl	8000240 <memchr>
 800d7c8:	9a04      	ldr	r2, [sp, #16]
 800d7ca:	b9d8      	cbnz	r0, 800d804 <_vfiprintf_r+0x110>
 800d7cc:	06d1      	lsls	r1, r2, #27
 800d7ce:	bf44      	itt	mi
 800d7d0:	2320      	movmi	r3, #32
 800d7d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7d6:	0713      	lsls	r3, r2, #28
 800d7d8:	bf44      	itt	mi
 800d7da:	232b      	movmi	r3, #43	; 0x2b
 800d7dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d7e6:	d015      	beq.n	800d814 <_vfiprintf_r+0x120>
 800d7e8:	9a07      	ldr	r2, [sp, #28]
 800d7ea:	4654      	mov	r4, sl
 800d7ec:	2000      	movs	r0, #0
 800d7ee:	f04f 0c0a 	mov.w	ip, #10
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7f8:	3b30      	subs	r3, #48	; 0x30
 800d7fa:	2b09      	cmp	r3, #9
 800d7fc:	d94d      	bls.n	800d89a <_vfiprintf_r+0x1a6>
 800d7fe:	b1b0      	cbz	r0, 800d82e <_vfiprintf_r+0x13a>
 800d800:	9207      	str	r2, [sp, #28]
 800d802:	e014      	b.n	800d82e <_vfiprintf_r+0x13a>
 800d804:	eba0 0308 	sub.w	r3, r0, r8
 800d808:	fa09 f303 	lsl.w	r3, r9, r3
 800d80c:	4313      	orrs	r3, r2
 800d80e:	9304      	str	r3, [sp, #16]
 800d810:	46a2      	mov	sl, r4
 800d812:	e7d2      	b.n	800d7ba <_vfiprintf_r+0xc6>
 800d814:	9b03      	ldr	r3, [sp, #12]
 800d816:	1d19      	adds	r1, r3, #4
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	9103      	str	r1, [sp, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	bfbb      	ittet	lt
 800d820:	425b      	neglt	r3, r3
 800d822:	f042 0202 	orrlt.w	r2, r2, #2
 800d826:	9307      	strge	r3, [sp, #28]
 800d828:	9307      	strlt	r3, [sp, #28]
 800d82a:	bfb8      	it	lt
 800d82c:	9204      	strlt	r2, [sp, #16]
 800d82e:	7823      	ldrb	r3, [r4, #0]
 800d830:	2b2e      	cmp	r3, #46	; 0x2e
 800d832:	d10c      	bne.n	800d84e <_vfiprintf_r+0x15a>
 800d834:	7863      	ldrb	r3, [r4, #1]
 800d836:	2b2a      	cmp	r3, #42	; 0x2a
 800d838:	d134      	bne.n	800d8a4 <_vfiprintf_r+0x1b0>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	1d1a      	adds	r2, r3, #4
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	9203      	str	r2, [sp, #12]
 800d842:	2b00      	cmp	r3, #0
 800d844:	bfb8      	it	lt
 800d846:	f04f 33ff 	movlt.w	r3, #4294967295
 800d84a:	3402      	adds	r4, #2
 800d84c:	9305      	str	r3, [sp, #20]
 800d84e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d924 <_vfiprintf_r+0x230>
 800d852:	7821      	ldrb	r1, [r4, #0]
 800d854:	2203      	movs	r2, #3
 800d856:	4650      	mov	r0, sl
 800d858:	f7f2 fcf2 	bl	8000240 <memchr>
 800d85c:	b138      	cbz	r0, 800d86e <_vfiprintf_r+0x17a>
 800d85e:	9b04      	ldr	r3, [sp, #16]
 800d860:	eba0 000a 	sub.w	r0, r0, sl
 800d864:	2240      	movs	r2, #64	; 0x40
 800d866:	4082      	lsls	r2, r0
 800d868:	4313      	orrs	r3, r2
 800d86a:	3401      	adds	r4, #1
 800d86c:	9304      	str	r3, [sp, #16]
 800d86e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d872:	4829      	ldr	r0, [pc, #164]	; (800d918 <_vfiprintf_r+0x224>)
 800d874:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d878:	2206      	movs	r2, #6
 800d87a:	f7f2 fce1 	bl	8000240 <memchr>
 800d87e:	2800      	cmp	r0, #0
 800d880:	d03f      	beq.n	800d902 <_vfiprintf_r+0x20e>
 800d882:	4b26      	ldr	r3, [pc, #152]	; (800d91c <_vfiprintf_r+0x228>)
 800d884:	bb1b      	cbnz	r3, 800d8ce <_vfiprintf_r+0x1da>
 800d886:	9b03      	ldr	r3, [sp, #12]
 800d888:	3307      	adds	r3, #7
 800d88a:	f023 0307 	bic.w	r3, r3, #7
 800d88e:	3308      	adds	r3, #8
 800d890:	9303      	str	r3, [sp, #12]
 800d892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d894:	443b      	add	r3, r7
 800d896:	9309      	str	r3, [sp, #36]	; 0x24
 800d898:	e768      	b.n	800d76c <_vfiprintf_r+0x78>
 800d89a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d89e:	460c      	mov	r4, r1
 800d8a0:	2001      	movs	r0, #1
 800d8a2:	e7a6      	b.n	800d7f2 <_vfiprintf_r+0xfe>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	3401      	adds	r4, #1
 800d8a8:	9305      	str	r3, [sp, #20]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	f04f 0c0a 	mov.w	ip, #10
 800d8b0:	4620      	mov	r0, r4
 800d8b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8b6:	3a30      	subs	r2, #48	; 0x30
 800d8b8:	2a09      	cmp	r2, #9
 800d8ba:	d903      	bls.n	800d8c4 <_vfiprintf_r+0x1d0>
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d0c6      	beq.n	800d84e <_vfiprintf_r+0x15a>
 800d8c0:	9105      	str	r1, [sp, #20]
 800d8c2:	e7c4      	b.n	800d84e <_vfiprintf_r+0x15a>
 800d8c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8c8:	4604      	mov	r4, r0
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e7f0      	b.n	800d8b0 <_vfiprintf_r+0x1bc>
 800d8ce:	ab03      	add	r3, sp, #12
 800d8d0:	9300      	str	r3, [sp, #0]
 800d8d2:	462a      	mov	r2, r5
 800d8d4:	4b12      	ldr	r3, [pc, #72]	; (800d920 <_vfiprintf_r+0x22c>)
 800d8d6:	a904      	add	r1, sp, #16
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f7fd fc0d 	bl	800b0f8 <_printf_float>
 800d8de:	4607      	mov	r7, r0
 800d8e0:	1c78      	adds	r0, r7, #1
 800d8e2:	d1d6      	bne.n	800d892 <_vfiprintf_r+0x19e>
 800d8e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8e6:	07d9      	lsls	r1, r3, #31
 800d8e8:	d405      	bmi.n	800d8f6 <_vfiprintf_r+0x202>
 800d8ea:	89ab      	ldrh	r3, [r5, #12]
 800d8ec:	059a      	lsls	r2, r3, #22
 800d8ee:	d402      	bmi.n	800d8f6 <_vfiprintf_r+0x202>
 800d8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8f2:	f7fe f983 	bl	800bbfc <__retarget_lock_release_recursive>
 800d8f6:	89ab      	ldrh	r3, [r5, #12]
 800d8f8:	065b      	lsls	r3, r3, #25
 800d8fa:	f53f af1d 	bmi.w	800d738 <_vfiprintf_r+0x44>
 800d8fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d900:	e71c      	b.n	800d73c <_vfiprintf_r+0x48>
 800d902:	ab03      	add	r3, sp, #12
 800d904:	9300      	str	r3, [sp, #0]
 800d906:	462a      	mov	r2, r5
 800d908:	4b05      	ldr	r3, [pc, #20]	; (800d920 <_vfiprintf_r+0x22c>)
 800d90a:	a904      	add	r1, sp, #16
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7fd fe7b 	bl	800b608 <_printf_i>
 800d912:	e7e4      	b.n	800d8de <_vfiprintf_r+0x1ea>
 800d914:	0800ef34 	.word	0x0800ef34
 800d918:	0800ef3e 	.word	0x0800ef3e
 800d91c:	0800b0f9 	.word	0x0800b0f9
 800d920:	0800d6d1 	.word	0x0800d6d1
 800d924:	0800ef3a 	.word	0x0800ef3a

0800d928 <__swbuf_r>:
 800d928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92a:	460e      	mov	r6, r1
 800d92c:	4614      	mov	r4, r2
 800d92e:	4605      	mov	r5, r0
 800d930:	b118      	cbz	r0, 800d93a <__swbuf_r+0x12>
 800d932:	6a03      	ldr	r3, [r0, #32]
 800d934:	b90b      	cbnz	r3, 800d93a <__swbuf_r+0x12>
 800d936:	f7fe f815 	bl	800b964 <__sinit>
 800d93a:	69a3      	ldr	r3, [r4, #24]
 800d93c:	60a3      	str	r3, [r4, #8]
 800d93e:	89a3      	ldrh	r3, [r4, #12]
 800d940:	071a      	lsls	r2, r3, #28
 800d942:	d525      	bpl.n	800d990 <__swbuf_r+0x68>
 800d944:	6923      	ldr	r3, [r4, #16]
 800d946:	b31b      	cbz	r3, 800d990 <__swbuf_r+0x68>
 800d948:	6823      	ldr	r3, [r4, #0]
 800d94a:	6922      	ldr	r2, [r4, #16]
 800d94c:	1a98      	subs	r0, r3, r2
 800d94e:	6963      	ldr	r3, [r4, #20]
 800d950:	b2f6      	uxtb	r6, r6
 800d952:	4283      	cmp	r3, r0
 800d954:	4637      	mov	r7, r6
 800d956:	dc04      	bgt.n	800d962 <__swbuf_r+0x3a>
 800d958:	4621      	mov	r1, r4
 800d95a:	4628      	mov	r0, r5
 800d95c:	f7ff fd9e 	bl	800d49c <_fflush_r>
 800d960:	b9e0      	cbnz	r0, 800d99c <__swbuf_r+0x74>
 800d962:	68a3      	ldr	r3, [r4, #8]
 800d964:	3b01      	subs	r3, #1
 800d966:	60a3      	str	r3, [r4, #8]
 800d968:	6823      	ldr	r3, [r4, #0]
 800d96a:	1c5a      	adds	r2, r3, #1
 800d96c:	6022      	str	r2, [r4, #0]
 800d96e:	701e      	strb	r6, [r3, #0]
 800d970:	6962      	ldr	r2, [r4, #20]
 800d972:	1c43      	adds	r3, r0, #1
 800d974:	429a      	cmp	r2, r3
 800d976:	d004      	beq.n	800d982 <__swbuf_r+0x5a>
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	07db      	lsls	r3, r3, #31
 800d97c:	d506      	bpl.n	800d98c <__swbuf_r+0x64>
 800d97e:	2e0a      	cmp	r6, #10
 800d980:	d104      	bne.n	800d98c <__swbuf_r+0x64>
 800d982:	4621      	mov	r1, r4
 800d984:	4628      	mov	r0, r5
 800d986:	f7ff fd89 	bl	800d49c <_fflush_r>
 800d98a:	b938      	cbnz	r0, 800d99c <__swbuf_r+0x74>
 800d98c:	4638      	mov	r0, r7
 800d98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d990:	4621      	mov	r1, r4
 800d992:	4628      	mov	r0, r5
 800d994:	f000 f806 	bl	800d9a4 <__swsetup_r>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d0d5      	beq.n	800d948 <__swbuf_r+0x20>
 800d99c:	f04f 37ff 	mov.w	r7, #4294967295
 800d9a0:	e7f4      	b.n	800d98c <__swbuf_r+0x64>
	...

0800d9a4 <__swsetup_r>:
 800d9a4:	b538      	push	{r3, r4, r5, lr}
 800d9a6:	4b2a      	ldr	r3, [pc, #168]	; (800da50 <__swsetup_r+0xac>)
 800d9a8:	4605      	mov	r5, r0
 800d9aa:	6818      	ldr	r0, [r3, #0]
 800d9ac:	460c      	mov	r4, r1
 800d9ae:	b118      	cbz	r0, 800d9b8 <__swsetup_r+0x14>
 800d9b0:	6a03      	ldr	r3, [r0, #32]
 800d9b2:	b90b      	cbnz	r3, 800d9b8 <__swsetup_r+0x14>
 800d9b4:	f7fd ffd6 	bl	800b964 <__sinit>
 800d9b8:	89a3      	ldrh	r3, [r4, #12]
 800d9ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9be:	0718      	lsls	r0, r3, #28
 800d9c0:	d422      	bmi.n	800da08 <__swsetup_r+0x64>
 800d9c2:	06d9      	lsls	r1, r3, #27
 800d9c4:	d407      	bmi.n	800d9d6 <__swsetup_r+0x32>
 800d9c6:	2309      	movs	r3, #9
 800d9c8:	602b      	str	r3, [r5, #0]
 800d9ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d9ce:	81a3      	strh	r3, [r4, #12]
 800d9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d4:	e034      	b.n	800da40 <__swsetup_r+0x9c>
 800d9d6:	0758      	lsls	r0, r3, #29
 800d9d8:	d512      	bpl.n	800da00 <__swsetup_r+0x5c>
 800d9da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9dc:	b141      	cbz	r1, 800d9f0 <__swsetup_r+0x4c>
 800d9de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9e2:	4299      	cmp	r1, r3
 800d9e4:	d002      	beq.n	800d9ec <__swsetup_r+0x48>
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	f7fe fefe 	bl	800c7e8 <_free_r>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	6363      	str	r3, [r4, #52]	; 0x34
 800d9f0:	89a3      	ldrh	r3, [r4, #12]
 800d9f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9f6:	81a3      	strh	r3, [r4, #12]
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	6063      	str	r3, [r4, #4]
 800d9fc:	6923      	ldr	r3, [r4, #16]
 800d9fe:	6023      	str	r3, [r4, #0]
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	f043 0308 	orr.w	r3, r3, #8
 800da06:	81a3      	strh	r3, [r4, #12]
 800da08:	6923      	ldr	r3, [r4, #16]
 800da0a:	b94b      	cbnz	r3, 800da20 <__swsetup_r+0x7c>
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800da12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da16:	d003      	beq.n	800da20 <__swsetup_r+0x7c>
 800da18:	4621      	mov	r1, r4
 800da1a:	4628      	mov	r0, r5
 800da1c:	f000 f884 	bl	800db28 <__smakebuf_r>
 800da20:	89a0      	ldrh	r0, [r4, #12]
 800da22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800da26:	f010 0301 	ands.w	r3, r0, #1
 800da2a:	d00a      	beq.n	800da42 <__swsetup_r+0x9e>
 800da2c:	2300      	movs	r3, #0
 800da2e:	60a3      	str	r3, [r4, #8]
 800da30:	6963      	ldr	r3, [r4, #20]
 800da32:	425b      	negs	r3, r3
 800da34:	61a3      	str	r3, [r4, #24]
 800da36:	6923      	ldr	r3, [r4, #16]
 800da38:	b943      	cbnz	r3, 800da4c <__swsetup_r+0xa8>
 800da3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da3e:	d1c4      	bne.n	800d9ca <__swsetup_r+0x26>
 800da40:	bd38      	pop	{r3, r4, r5, pc}
 800da42:	0781      	lsls	r1, r0, #30
 800da44:	bf58      	it	pl
 800da46:	6963      	ldrpl	r3, [r4, #20]
 800da48:	60a3      	str	r3, [r4, #8]
 800da4a:	e7f4      	b.n	800da36 <__swsetup_r+0x92>
 800da4c:	2000      	movs	r0, #0
 800da4e:	e7f7      	b.n	800da40 <__swsetup_r+0x9c>
 800da50:	20000130 	.word	0x20000130

0800da54 <_raise_r>:
 800da54:	291f      	cmp	r1, #31
 800da56:	b538      	push	{r3, r4, r5, lr}
 800da58:	4604      	mov	r4, r0
 800da5a:	460d      	mov	r5, r1
 800da5c:	d904      	bls.n	800da68 <_raise_r+0x14>
 800da5e:	2316      	movs	r3, #22
 800da60:	6003      	str	r3, [r0, #0]
 800da62:	f04f 30ff 	mov.w	r0, #4294967295
 800da66:	bd38      	pop	{r3, r4, r5, pc}
 800da68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800da6a:	b112      	cbz	r2, 800da72 <_raise_r+0x1e>
 800da6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da70:	b94b      	cbnz	r3, 800da86 <_raise_r+0x32>
 800da72:	4620      	mov	r0, r4
 800da74:	f000 f830 	bl	800dad8 <_getpid_r>
 800da78:	462a      	mov	r2, r5
 800da7a:	4601      	mov	r1, r0
 800da7c:	4620      	mov	r0, r4
 800da7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da82:	f000 b817 	b.w	800dab4 <_kill_r>
 800da86:	2b01      	cmp	r3, #1
 800da88:	d00a      	beq.n	800daa0 <_raise_r+0x4c>
 800da8a:	1c59      	adds	r1, r3, #1
 800da8c:	d103      	bne.n	800da96 <_raise_r+0x42>
 800da8e:	2316      	movs	r3, #22
 800da90:	6003      	str	r3, [r0, #0]
 800da92:	2001      	movs	r0, #1
 800da94:	e7e7      	b.n	800da66 <_raise_r+0x12>
 800da96:	2400      	movs	r4, #0
 800da98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da9c:	4628      	mov	r0, r5
 800da9e:	4798      	blx	r3
 800daa0:	2000      	movs	r0, #0
 800daa2:	e7e0      	b.n	800da66 <_raise_r+0x12>

0800daa4 <raise>:
 800daa4:	4b02      	ldr	r3, [pc, #8]	; (800dab0 <raise+0xc>)
 800daa6:	4601      	mov	r1, r0
 800daa8:	6818      	ldr	r0, [r3, #0]
 800daaa:	f7ff bfd3 	b.w	800da54 <_raise_r>
 800daae:	bf00      	nop
 800dab0:	20000130 	.word	0x20000130

0800dab4 <_kill_r>:
 800dab4:	b538      	push	{r3, r4, r5, lr}
 800dab6:	4d07      	ldr	r5, [pc, #28]	; (800dad4 <_kill_r+0x20>)
 800dab8:	2300      	movs	r3, #0
 800daba:	4604      	mov	r4, r0
 800dabc:	4608      	mov	r0, r1
 800dabe:	4611      	mov	r1, r2
 800dac0:	602b      	str	r3, [r5, #0]
 800dac2:	f7f6 f91f 	bl	8003d04 <_kill>
 800dac6:	1c43      	adds	r3, r0, #1
 800dac8:	d102      	bne.n	800dad0 <_kill_r+0x1c>
 800daca:	682b      	ldr	r3, [r5, #0]
 800dacc:	b103      	cbz	r3, 800dad0 <_kill_r+0x1c>
 800dace:	6023      	str	r3, [r4, #0]
 800dad0:	bd38      	pop	{r3, r4, r5, pc}
 800dad2:	bf00      	nop
 800dad4:	20000a1c 	.word	0x20000a1c

0800dad8 <_getpid_r>:
 800dad8:	f7f6 b90c 	b.w	8003cf4 <_getpid>

0800dadc <__swhatbuf_r>:
 800dadc:	b570      	push	{r4, r5, r6, lr}
 800dade:	460c      	mov	r4, r1
 800dae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dae4:	2900      	cmp	r1, #0
 800dae6:	b096      	sub	sp, #88	; 0x58
 800dae8:	4615      	mov	r5, r2
 800daea:	461e      	mov	r6, r3
 800daec:	da0d      	bge.n	800db0a <__swhatbuf_r+0x2e>
 800daee:	89a3      	ldrh	r3, [r4, #12]
 800daf0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800daf4:	f04f 0100 	mov.w	r1, #0
 800daf8:	bf0c      	ite	eq
 800dafa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dafe:	2340      	movne	r3, #64	; 0x40
 800db00:	2000      	movs	r0, #0
 800db02:	6031      	str	r1, [r6, #0]
 800db04:	602b      	str	r3, [r5, #0]
 800db06:	b016      	add	sp, #88	; 0x58
 800db08:	bd70      	pop	{r4, r5, r6, pc}
 800db0a:	466a      	mov	r2, sp
 800db0c:	f000 f848 	bl	800dba0 <_fstat_r>
 800db10:	2800      	cmp	r0, #0
 800db12:	dbec      	blt.n	800daee <__swhatbuf_r+0x12>
 800db14:	9901      	ldr	r1, [sp, #4]
 800db16:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800db1a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800db1e:	4259      	negs	r1, r3
 800db20:	4159      	adcs	r1, r3
 800db22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800db26:	e7eb      	b.n	800db00 <__swhatbuf_r+0x24>

0800db28 <__smakebuf_r>:
 800db28:	898b      	ldrh	r3, [r1, #12]
 800db2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800db2c:	079d      	lsls	r5, r3, #30
 800db2e:	4606      	mov	r6, r0
 800db30:	460c      	mov	r4, r1
 800db32:	d507      	bpl.n	800db44 <__smakebuf_r+0x1c>
 800db34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800db38:	6023      	str	r3, [r4, #0]
 800db3a:	6123      	str	r3, [r4, #16]
 800db3c:	2301      	movs	r3, #1
 800db3e:	6163      	str	r3, [r4, #20]
 800db40:	b002      	add	sp, #8
 800db42:	bd70      	pop	{r4, r5, r6, pc}
 800db44:	ab01      	add	r3, sp, #4
 800db46:	466a      	mov	r2, sp
 800db48:	f7ff ffc8 	bl	800dadc <__swhatbuf_r>
 800db4c:	9900      	ldr	r1, [sp, #0]
 800db4e:	4605      	mov	r5, r0
 800db50:	4630      	mov	r0, r6
 800db52:	f7fe febd 	bl	800c8d0 <_malloc_r>
 800db56:	b948      	cbnz	r0, 800db6c <__smakebuf_r+0x44>
 800db58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db5c:	059a      	lsls	r2, r3, #22
 800db5e:	d4ef      	bmi.n	800db40 <__smakebuf_r+0x18>
 800db60:	f023 0303 	bic.w	r3, r3, #3
 800db64:	f043 0302 	orr.w	r3, r3, #2
 800db68:	81a3      	strh	r3, [r4, #12]
 800db6a:	e7e3      	b.n	800db34 <__smakebuf_r+0xc>
 800db6c:	89a3      	ldrh	r3, [r4, #12]
 800db6e:	6020      	str	r0, [r4, #0]
 800db70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db74:	81a3      	strh	r3, [r4, #12]
 800db76:	9b00      	ldr	r3, [sp, #0]
 800db78:	6163      	str	r3, [r4, #20]
 800db7a:	9b01      	ldr	r3, [sp, #4]
 800db7c:	6120      	str	r0, [r4, #16]
 800db7e:	b15b      	cbz	r3, 800db98 <__smakebuf_r+0x70>
 800db80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db84:	4630      	mov	r0, r6
 800db86:	f000 f81d 	bl	800dbc4 <_isatty_r>
 800db8a:	b128      	cbz	r0, 800db98 <__smakebuf_r+0x70>
 800db8c:	89a3      	ldrh	r3, [r4, #12]
 800db8e:	f023 0303 	bic.w	r3, r3, #3
 800db92:	f043 0301 	orr.w	r3, r3, #1
 800db96:	81a3      	strh	r3, [r4, #12]
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	431d      	orrs	r5, r3
 800db9c:	81a5      	strh	r5, [r4, #12]
 800db9e:	e7cf      	b.n	800db40 <__smakebuf_r+0x18>

0800dba0 <_fstat_r>:
 800dba0:	b538      	push	{r3, r4, r5, lr}
 800dba2:	4d07      	ldr	r5, [pc, #28]	; (800dbc0 <_fstat_r+0x20>)
 800dba4:	2300      	movs	r3, #0
 800dba6:	4604      	mov	r4, r0
 800dba8:	4608      	mov	r0, r1
 800dbaa:	4611      	mov	r1, r2
 800dbac:	602b      	str	r3, [r5, #0]
 800dbae:	f7f6 f908 	bl	8003dc2 <_fstat>
 800dbb2:	1c43      	adds	r3, r0, #1
 800dbb4:	d102      	bne.n	800dbbc <_fstat_r+0x1c>
 800dbb6:	682b      	ldr	r3, [r5, #0]
 800dbb8:	b103      	cbz	r3, 800dbbc <_fstat_r+0x1c>
 800dbba:	6023      	str	r3, [r4, #0]
 800dbbc:	bd38      	pop	{r3, r4, r5, pc}
 800dbbe:	bf00      	nop
 800dbc0:	20000a1c 	.word	0x20000a1c

0800dbc4 <_isatty_r>:
 800dbc4:	b538      	push	{r3, r4, r5, lr}
 800dbc6:	4d06      	ldr	r5, [pc, #24]	; (800dbe0 <_isatty_r+0x1c>)
 800dbc8:	2300      	movs	r3, #0
 800dbca:	4604      	mov	r4, r0
 800dbcc:	4608      	mov	r0, r1
 800dbce:	602b      	str	r3, [r5, #0]
 800dbd0:	f7f6 f907 	bl	8003de2 <_isatty>
 800dbd4:	1c43      	adds	r3, r0, #1
 800dbd6:	d102      	bne.n	800dbde <_isatty_r+0x1a>
 800dbd8:	682b      	ldr	r3, [r5, #0]
 800dbda:	b103      	cbz	r3, 800dbde <_isatty_r+0x1a>
 800dbdc:	6023      	str	r3, [r4, #0]
 800dbde:	bd38      	pop	{r3, r4, r5, pc}
 800dbe0:	20000a1c 	.word	0x20000a1c
 800dbe4:	00000000 	.word	0x00000000

0800dbe8 <cos>:
 800dbe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dbea:	eeb0 7b40 	vmov.f64	d7, d0
 800dbee:	ee17 3a90 	vmov	r3, s15
 800dbf2:	4a21      	ldr	r2, [pc, #132]	; (800dc78 <cos+0x90>)
 800dbf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	dc06      	bgt.n	800dc0a <cos+0x22>
 800dbfc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800dc70 <cos+0x88>
 800dc00:	b005      	add	sp, #20
 800dc02:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc06:	f000 b887 	b.w	800dd18 <__kernel_cos>
 800dc0a:	4a1c      	ldr	r2, [pc, #112]	; (800dc7c <cos+0x94>)
 800dc0c:	4293      	cmp	r3, r2
 800dc0e:	dd04      	ble.n	800dc1a <cos+0x32>
 800dc10:	ee30 0b40 	vsub.f64	d0, d0, d0
 800dc14:	b005      	add	sp, #20
 800dc16:	f85d fb04 	ldr.w	pc, [sp], #4
 800dc1a:	4668      	mov	r0, sp
 800dc1c:	f000 f940 	bl	800dea0 <__ieee754_rem_pio2>
 800dc20:	f000 0003 	and.w	r0, r0, #3
 800dc24:	2801      	cmp	r0, #1
 800dc26:	d009      	beq.n	800dc3c <cos+0x54>
 800dc28:	2802      	cmp	r0, #2
 800dc2a:	d010      	beq.n	800dc4e <cos+0x66>
 800dc2c:	b9b0      	cbnz	r0, 800dc5c <cos+0x74>
 800dc2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc32:	ed9d 0b00 	vldr	d0, [sp]
 800dc36:	f000 f86f 	bl	800dd18 <__kernel_cos>
 800dc3a:	e7eb      	b.n	800dc14 <cos+0x2c>
 800dc3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc40:	ed9d 0b00 	vldr	d0, [sp]
 800dc44:	f000 f8d4 	bl	800ddf0 <__kernel_sin>
 800dc48:	eeb1 0b40 	vneg.f64	d0, d0
 800dc4c:	e7e2      	b.n	800dc14 <cos+0x2c>
 800dc4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc52:	ed9d 0b00 	vldr	d0, [sp]
 800dc56:	f000 f85f 	bl	800dd18 <__kernel_cos>
 800dc5a:	e7f5      	b.n	800dc48 <cos+0x60>
 800dc5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dc60:	ed9d 0b00 	vldr	d0, [sp]
 800dc64:	2001      	movs	r0, #1
 800dc66:	f000 f8c3 	bl	800ddf0 <__kernel_sin>
 800dc6a:	e7d3      	b.n	800dc14 <cos+0x2c>
 800dc6c:	f3af 8000 	nop.w
	...
 800dc78:	3fe921fb 	.word	0x3fe921fb
 800dc7c:	7fefffff 	.word	0x7fefffff

0800dc80 <sin>:
 800dc80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc82:	eeb0 7b40 	vmov.f64	d7, d0
 800dc86:	ee17 3a90 	vmov	r3, s15
 800dc8a:	4a21      	ldr	r2, [pc, #132]	; (800dd10 <sin+0x90>)
 800dc8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc90:	4293      	cmp	r3, r2
 800dc92:	dc07      	bgt.n	800dca4 <sin+0x24>
 800dc94:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 800dd08 <sin+0x88>
 800dc98:	2000      	movs	r0, #0
 800dc9a:	b005      	add	sp, #20
 800dc9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dca0:	f000 b8a6 	b.w	800ddf0 <__kernel_sin>
 800dca4:	4a1b      	ldr	r2, [pc, #108]	; (800dd14 <sin+0x94>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	dd04      	ble.n	800dcb4 <sin+0x34>
 800dcaa:	ee30 0b40 	vsub.f64	d0, d0, d0
 800dcae:	b005      	add	sp, #20
 800dcb0:	f85d fb04 	ldr.w	pc, [sp], #4
 800dcb4:	4668      	mov	r0, sp
 800dcb6:	f000 f8f3 	bl	800dea0 <__ieee754_rem_pio2>
 800dcba:	f000 0003 	and.w	r0, r0, #3
 800dcbe:	2801      	cmp	r0, #1
 800dcc0:	d00a      	beq.n	800dcd8 <sin+0x58>
 800dcc2:	2802      	cmp	r0, #2
 800dcc4:	d00f      	beq.n	800dce6 <sin+0x66>
 800dcc6:	b9c0      	cbnz	r0, 800dcfa <sin+0x7a>
 800dcc8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dccc:	ed9d 0b00 	vldr	d0, [sp]
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	f000 f88d 	bl	800ddf0 <__kernel_sin>
 800dcd6:	e7ea      	b.n	800dcae <sin+0x2e>
 800dcd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dcdc:	ed9d 0b00 	vldr	d0, [sp]
 800dce0:	f000 f81a 	bl	800dd18 <__kernel_cos>
 800dce4:	e7e3      	b.n	800dcae <sin+0x2e>
 800dce6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dcea:	ed9d 0b00 	vldr	d0, [sp]
 800dcee:	2001      	movs	r0, #1
 800dcf0:	f000 f87e 	bl	800ddf0 <__kernel_sin>
 800dcf4:	eeb1 0b40 	vneg.f64	d0, d0
 800dcf8:	e7d9      	b.n	800dcae <sin+0x2e>
 800dcfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 800dcfe:	ed9d 0b00 	vldr	d0, [sp]
 800dd02:	f000 f809 	bl	800dd18 <__kernel_cos>
 800dd06:	e7f5      	b.n	800dcf4 <sin+0x74>
	...
 800dd10:	3fe921fb 	.word	0x3fe921fb
 800dd14:	7fefffff 	.word	0x7fefffff

0800dd18 <__kernel_cos>:
 800dd18:	ee10 1a90 	vmov	r1, s1
 800dd1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800dd20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800dd24:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800dd28:	da05      	bge.n	800dd36 <__kernel_cos+0x1e>
 800dd2a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800dd2e:	ee17 3a90 	vmov	r3, s15
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d03d      	beq.n	800ddb2 <__kernel_cos+0x9a>
 800dd36:	ee20 5b00 	vmul.f64	d5, d0, d0
 800dd3a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800dd3e:	ed9f 7b1e 	vldr	d7, [pc, #120]	; 800ddb8 <__kernel_cos+0xa0>
 800dd42:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800ddc0 <__kernel_cos+0xa8>
 800dd46:	eea5 4b07 	vfma.f64	d4, d5, d7
 800dd4a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ddc8 <__kernel_cos+0xb0>
 800dd4e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800dd52:	ed9f 4b1f 	vldr	d4, [pc, #124]	; 800ddd0 <__kernel_cos+0xb8>
 800dd56:	eea7 4b05 	vfma.f64	d4, d7, d5
 800dd5a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800ddd8 <__kernel_cos+0xc0>
 800dd5e:	4b22      	ldr	r3, [pc, #136]	; (800dde8 <__kernel_cos+0xd0>)
 800dd60:	eea4 7b05 	vfma.f64	d7, d4, d5
 800dd64:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800dde0 <__kernel_cos+0xc8>
 800dd68:	4299      	cmp	r1, r3
 800dd6a:	eea7 4b05 	vfma.f64	d4, d7, d5
 800dd6e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800dd72:	ee24 4b05 	vmul.f64	d4, d4, d5
 800dd76:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dd7a:	eea5 1b04 	vfma.f64	d1, d5, d4
 800dd7e:	dc04      	bgt.n	800dd8a <__kernel_cos+0x72>
 800dd80:	ee37 7b41 	vsub.f64	d7, d7, d1
 800dd84:	ee36 0b47 	vsub.f64	d0, d6, d7
 800dd88:	4770      	bx	lr
 800dd8a:	4b18      	ldr	r3, [pc, #96]	; (800ddec <__kernel_cos+0xd4>)
 800dd8c:	4299      	cmp	r1, r3
 800dd8e:	dc0d      	bgt.n	800ddac <__kernel_cos+0x94>
 800dd90:	2200      	movs	r2, #0
 800dd92:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800dd96:	ec43 2b15 	vmov	d5, r2, r3
 800dd9a:	ee36 0b45 	vsub.f64	d0, d6, d5
 800dd9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800dda2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800dda6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800ddaa:	4770      	bx	lr
 800ddac:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800ddb0:	e7f3      	b.n	800dd9a <__kernel_cos+0x82>
 800ddb2:	eeb0 0b46 	vmov.f64	d0, d6
 800ddb6:	4770      	bx	lr
 800ddb8:	be8838d4 	.word	0xbe8838d4
 800ddbc:	bda8fae9 	.word	0xbda8fae9
 800ddc0:	bdb4b1c4 	.word	0xbdb4b1c4
 800ddc4:	3e21ee9e 	.word	0x3e21ee9e
 800ddc8:	809c52ad 	.word	0x809c52ad
 800ddcc:	be927e4f 	.word	0xbe927e4f
 800ddd0:	19cb1590 	.word	0x19cb1590
 800ddd4:	3efa01a0 	.word	0x3efa01a0
 800ddd8:	16c15177 	.word	0x16c15177
 800dddc:	bf56c16c 	.word	0xbf56c16c
 800dde0:	5555554c 	.word	0x5555554c
 800dde4:	3fa55555 	.word	0x3fa55555
 800dde8:	3fd33332 	.word	0x3fd33332
 800ddec:	3fe90000 	.word	0x3fe90000

0800ddf0 <__kernel_sin>:
 800ddf0:	ee10 3a90 	vmov	r3, s1
 800ddf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ddf8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ddfc:	da04      	bge.n	800de08 <__kernel_sin+0x18>
 800ddfe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800de02:	ee17 3a90 	vmov	r3, s15
 800de06:	b35b      	cbz	r3, 800de60 <__kernel_sin+0x70>
 800de08:	ee20 6b00 	vmul.f64	d6, d0, d0
 800de0c:	ee20 5b06 	vmul.f64	d5, d0, d6
 800de10:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800de68 <__kernel_sin+0x78>
 800de14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800de70 <__kernel_sin+0x80>
 800de18:	eea6 4b07 	vfma.f64	d4, d6, d7
 800de1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800de78 <__kernel_sin+0x88>
 800de20:	eea4 7b06 	vfma.f64	d7, d4, d6
 800de24:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800de80 <__kernel_sin+0x90>
 800de28:	eea7 4b06 	vfma.f64	d4, d7, d6
 800de2c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800de88 <__kernel_sin+0x98>
 800de30:	eea4 7b06 	vfma.f64	d7, d4, d6
 800de34:	b930      	cbnz	r0, 800de44 <__kernel_sin+0x54>
 800de36:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800de90 <__kernel_sin+0xa0>
 800de3a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800de3e:	eea4 0b05 	vfma.f64	d0, d4, d5
 800de42:	4770      	bx	lr
 800de44:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800de48:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800de4c:	eea1 7b04 	vfma.f64	d7, d1, d4
 800de50:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800de54:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800de98 <__kernel_sin+0xa8>
 800de58:	eea5 1b07 	vfma.f64	d1, d5, d7
 800de5c:	ee30 0b41 	vsub.f64	d0, d0, d1
 800de60:	4770      	bx	lr
 800de62:	bf00      	nop
 800de64:	f3af 8000 	nop.w
 800de68:	5acfd57c 	.word	0x5acfd57c
 800de6c:	3de5d93a 	.word	0x3de5d93a
 800de70:	8a2b9ceb 	.word	0x8a2b9ceb
 800de74:	be5ae5e6 	.word	0xbe5ae5e6
 800de78:	57b1fe7d 	.word	0x57b1fe7d
 800de7c:	3ec71de3 	.word	0x3ec71de3
 800de80:	19c161d5 	.word	0x19c161d5
 800de84:	bf2a01a0 	.word	0xbf2a01a0
 800de88:	1110f8a6 	.word	0x1110f8a6
 800de8c:	3f811111 	.word	0x3f811111
 800de90:	55555549 	.word	0x55555549
 800de94:	bfc55555 	.word	0xbfc55555
 800de98:	55555549 	.word	0x55555549
 800de9c:	3fc55555 	.word	0x3fc55555

0800dea0 <__ieee754_rem_pio2>:
 800dea0:	b570      	push	{r4, r5, r6, lr}
 800dea2:	eeb0 7b40 	vmov.f64	d7, d0
 800dea6:	ee17 5a90 	vmov	r5, s15
 800deaa:	4b99      	ldr	r3, [pc, #612]	; (800e110 <__ieee754_rem_pio2+0x270>)
 800deac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800deb0:	429e      	cmp	r6, r3
 800deb2:	b088      	sub	sp, #32
 800deb4:	4604      	mov	r4, r0
 800deb6:	dc07      	bgt.n	800dec8 <__ieee754_rem_pio2+0x28>
 800deb8:	2200      	movs	r2, #0
 800deba:	2300      	movs	r3, #0
 800debc:	ed84 0b00 	vstr	d0, [r4]
 800dec0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dec4:	2000      	movs	r0, #0
 800dec6:	e01b      	b.n	800df00 <__ieee754_rem_pio2+0x60>
 800dec8:	4b92      	ldr	r3, [pc, #584]	; (800e114 <__ieee754_rem_pio2+0x274>)
 800deca:	429e      	cmp	r6, r3
 800decc:	dc3b      	bgt.n	800df46 <__ieee754_rem_pio2+0xa6>
 800dece:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800ded2:	2d00      	cmp	r5, #0
 800ded4:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 800e0d0 <__ieee754_rem_pio2+0x230>
 800ded8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800dedc:	dd19      	ble.n	800df12 <__ieee754_rem_pio2+0x72>
 800dede:	ee30 7b46 	vsub.f64	d7, d0, d6
 800dee2:	429e      	cmp	r6, r3
 800dee4:	d00e      	beq.n	800df04 <__ieee754_rem_pio2+0x64>
 800dee6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800e0d8 <__ieee754_rem_pio2+0x238>
 800deea:	ee37 5b46 	vsub.f64	d5, d7, d6
 800deee:	ee37 7b45 	vsub.f64	d7, d7, d5
 800def2:	ed84 5b00 	vstr	d5, [r4]
 800def6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800defa:	ed84 7b02 	vstr	d7, [r4, #8]
 800defe:	2001      	movs	r0, #1
 800df00:	b008      	add	sp, #32
 800df02:	bd70      	pop	{r4, r5, r6, pc}
 800df04:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e0e0 <__ieee754_rem_pio2+0x240>
 800df08:	ee37 7b46 	vsub.f64	d7, d7, d6
 800df0c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800e0e8 <__ieee754_rem_pio2+0x248>
 800df10:	e7eb      	b.n	800deea <__ieee754_rem_pio2+0x4a>
 800df12:	429e      	cmp	r6, r3
 800df14:	ee30 7b06 	vadd.f64	d7, d0, d6
 800df18:	d00e      	beq.n	800df38 <__ieee754_rem_pio2+0x98>
 800df1a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 800e0d8 <__ieee754_rem_pio2+0x238>
 800df1e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800df22:	ee37 7b45 	vsub.f64	d7, d7, d5
 800df26:	ed84 5b00 	vstr	d5, [r4]
 800df2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800df2e:	f04f 30ff 	mov.w	r0, #4294967295
 800df32:	ed84 7b02 	vstr	d7, [r4, #8]
 800df36:	e7e3      	b.n	800df00 <__ieee754_rem_pio2+0x60>
 800df38:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e0e0 <__ieee754_rem_pio2+0x240>
 800df3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800df40:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800e0e8 <__ieee754_rem_pio2+0x248>
 800df44:	e7eb      	b.n	800df1e <__ieee754_rem_pio2+0x7e>
 800df46:	4b74      	ldr	r3, [pc, #464]	; (800e118 <__ieee754_rem_pio2+0x278>)
 800df48:	429e      	cmp	r6, r3
 800df4a:	dc70      	bgt.n	800e02e <__ieee754_rem_pio2+0x18e>
 800df4c:	f000 f8ec 	bl	800e128 <fabs>
 800df50:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800df54:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800e0f0 <__ieee754_rem_pio2+0x250>
 800df58:	eea0 7b06 	vfma.f64	d7, d0, d6
 800df5c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800df60:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800df64:	ee17 0a90 	vmov	r0, s15
 800df68:	eeb1 4b45 	vneg.f64	d4, d5
 800df6c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e0d0 <__ieee754_rem_pio2+0x230>
 800df70:	eea5 0b47 	vfms.f64	d0, d5, d7
 800df74:	ed9f 7b58 	vldr	d7, [pc, #352]	; 800e0d8 <__ieee754_rem_pio2+0x238>
 800df78:	281f      	cmp	r0, #31
 800df7a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800df7e:	ee30 6b47 	vsub.f64	d6, d0, d7
 800df82:	dc08      	bgt.n	800df96 <__ieee754_rem_pio2+0xf6>
 800df84:	4b65      	ldr	r3, [pc, #404]	; (800e11c <__ieee754_rem_pio2+0x27c>)
 800df86:	1e42      	subs	r2, r0, #1
 800df88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8c:	42b3      	cmp	r3, r6
 800df8e:	d002      	beq.n	800df96 <__ieee754_rem_pio2+0xf6>
 800df90:	ed84 6b00 	vstr	d6, [r4]
 800df94:	e024      	b.n	800dfe0 <__ieee754_rem_pio2+0x140>
 800df96:	ee16 3a90 	vmov	r3, s13
 800df9a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800df9e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800dfa2:	2b10      	cmp	r3, #16
 800dfa4:	ea4f 5226 	mov.w	r2, r6, asr #20
 800dfa8:	ddf2      	ble.n	800df90 <__ieee754_rem_pio2+0xf0>
 800dfaa:	eeb0 6b40 	vmov.f64	d6, d0
 800dfae:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 800e0e0 <__ieee754_rem_pio2+0x240>
 800dfb2:	eea4 6b03 	vfma.f64	d6, d4, d3
 800dfb6:	ee30 7b46 	vsub.f64	d7, d0, d6
 800dfba:	eea4 7b03 	vfma.f64	d7, d4, d3
 800dfbe:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800e0e8 <__ieee754_rem_pio2+0x248>
 800dfc2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800dfc6:	ee36 3b47 	vsub.f64	d3, d6, d7
 800dfca:	ee13 3a90 	vmov	r3, s7
 800dfce:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	2b31      	cmp	r3, #49	; 0x31
 800dfd6:	dc17      	bgt.n	800e008 <__ieee754_rem_pio2+0x168>
 800dfd8:	eeb0 0b46 	vmov.f64	d0, d6
 800dfdc:	ed84 3b00 	vstr	d3, [r4]
 800dfe0:	ed94 6b00 	vldr	d6, [r4]
 800dfe4:	2d00      	cmp	r5, #0
 800dfe6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dfea:	ee30 0b47 	vsub.f64	d0, d0, d7
 800dfee:	ed84 0b02 	vstr	d0, [r4, #8]
 800dff2:	da85      	bge.n	800df00 <__ieee754_rem_pio2+0x60>
 800dff4:	eeb1 6b46 	vneg.f64	d6, d6
 800dff8:	eeb1 0b40 	vneg.f64	d0, d0
 800dffc:	ed84 6b00 	vstr	d6, [r4]
 800e000:	ed84 0b02 	vstr	d0, [r4, #8]
 800e004:	4240      	negs	r0, r0
 800e006:	e77b      	b.n	800df00 <__ieee754_rem_pio2+0x60>
 800e008:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800e0f8 <__ieee754_rem_pio2+0x258>
 800e00c:	eeb0 0b46 	vmov.f64	d0, d6
 800e010:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e014:	ee36 6b40 	vsub.f64	d6, d6, d0
 800e018:	eea4 6b07 	vfma.f64	d6, d4, d7
 800e01c:	ed9f 4b38 	vldr	d4, [pc, #224]	; 800e100 <__ieee754_rem_pio2+0x260>
 800e020:	eeb0 7b46 	vmov.f64	d7, d6
 800e024:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800e028:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e02c:	e7b0      	b.n	800df90 <__ieee754_rem_pio2+0xf0>
 800e02e:	4b3c      	ldr	r3, [pc, #240]	; (800e120 <__ieee754_rem_pio2+0x280>)
 800e030:	429e      	cmp	r6, r3
 800e032:	dd06      	ble.n	800e042 <__ieee754_rem_pio2+0x1a2>
 800e034:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e038:	ed80 7b02 	vstr	d7, [r0, #8]
 800e03c:	ed80 7b00 	vstr	d7, [r0]
 800e040:	e740      	b.n	800dec4 <__ieee754_rem_pio2+0x24>
 800e042:	1532      	asrs	r2, r6, #20
 800e044:	ee10 0a10 	vmov	r0, s0
 800e048:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800e04c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e050:	ec41 0b17 	vmov	d7, r0, r1
 800e054:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e058:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800e108 <__ieee754_rem_pio2+0x268>
 800e05c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e060:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e064:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e068:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e06c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e070:	a808      	add	r0, sp, #32
 800e072:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e076:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e07a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e07e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e082:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e086:	2103      	movs	r1, #3
 800e088:	ed30 7b02 	vldmdb	r0!, {d7}
 800e08c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e094:	460b      	mov	r3, r1
 800e096:	f101 31ff 	add.w	r1, r1, #4294967295
 800e09a:	d0f5      	beq.n	800e088 <__ieee754_rem_pio2+0x1e8>
 800e09c:	4921      	ldr	r1, [pc, #132]	; (800e124 <__ieee754_rem_pio2+0x284>)
 800e09e:	9101      	str	r1, [sp, #4]
 800e0a0:	2102      	movs	r1, #2
 800e0a2:	9100      	str	r1, [sp, #0]
 800e0a4:	a802      	add	r0, sp, #8
 800e0a6:	4621      	mov	r1, r4
 800e0a8:	f000 f84a 	bl	800e140 <__kernel_rem_pio2>
 800e0ac:	2d00      	cmp	r5, #0
 800e0ae:	f6bf af27 	bge.w	800df00 <__ieee754_rem_pio2+0x60>
 800e0b2:	ed94 7b00 	vldr	d7, [r4]
 800e0b6:	eeb1 7b47 	vneg.f64	d7, d7
 800e0ba:	ed84 7b00 	vstr	d7, [r4]
 800e0be:	ed94 7b02 	vldr	d7, [r4, #8]
 800e0c2:	eeb1 7b47 	vneg.f64	d7, d7
 800e0c6:	ed84 7b02 	vstr	d7, [r4, #8]
 800e0ca:	e79b      	b.n	800e004 <__ieee754_rem_pio2+0x164>
 800e0cc:	f3af 8000 	nop.w
 800e0d0:	54400000 	.word	0x54400000
 800e0d4:	3ff921fb 	.word	0x3ff921fb
 800e0d8:	1a626331 	.word	0x1a626331
 800e0dc:	3dd0b461 	.word	0x3dd0b461
 800e0e0:	1a600000 	.word	0x1a600000
 800e0e4:	3dd0b461 	.word	0x3dd0b461
 800e0e8:	2e037073 	.word	0x2e037073
 800e0ec:	3ba3198a 	.word	0x3ba3198a
 800e0f0:	6dc9c883 	.word	0x6dc9c883
 800e0f4:	3fe45f30 	.word	0x3fe45f30
 800e0f8:	2e000000 	.word	0x2e000000
 800e0fc:	3ba3198a 	.word	0x3ba3198a
 800e100:	252049c1 	.word	0x252049c1
 800e104:	397b839a 	.word	0x397b839a
 800e108:	00000000 	.word	0x00000000
 800e10c:	41700000 	.word	0x41700000
 800e110:	3fe921fb 	.word	0x3fe921fb
 800e114:	4002d97b 	.word	0x4002d97b
 800e118:	413921fb 	.word	0x413921fb
 800e11c:	0800f08c 	.word	0x0800f08c
 800e120:	7fefffff 	.word	0x7fefffff
 800e124:	0800f10c 	.word	0x0800f10c

0800e128 <fabs>:
 800e128:	ec51 0b10 	vmov	r0, r1, d0
 800e12c:	ee10 2a10 	vmov	r2, s0
 800e130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e134:	ec43 2b10 	vmov	d0, r2, r3
 800e138:	4770      	bx	lr
 800e13a:	0000      	movs	r0, r0
 800e13c:	0000      	movs	r0, r0
	...

0800e140 <__kernel_rem_pio2>:
 800e140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e144:	ed2d 8b06 	vpush	{d8-d10}
 800e148:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800e14c:	460f      	mov	r7, r1
 800e14e:	9002      	str	r0, [sp, #8]
 800e150:	49c3      	ldr	r1, [pc, #780]	; (800e460 <__kernel_rem_pio2+0x320>)
 800e152:	98a2      	ldr	r0, [sp, #648]	; 0x288
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800e15a:	9901      	ldr	r1, [sp, #4]
 800e15c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800e15e:	f112 0f14 	cmn.w	r2, #20
 800e162:	bfa8      	it	ge
 800e164:	1ed0      	subge	r0, r2, #3
 800e166:	f101 3aff 	add.w	sl, r1, #4294967295
 800e16a:	bfaa      	itet	ge
 800e16c:	2418      	movge	r4, #24
 800e16e:	2000      	movlt	r0, #0
 800e170:	fb90 f0f4 	sdivge	r0, r0, r4
 800e174:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 800e448 <__kernel_rem_pio2+0x308>
 800e178:	f06f 0417 	mvn.w	r4, #23
 800e17c:	fb00 4404 	mla	r4, r0, r4, r4
 800e180:	eba0 060a 	sub.w	r6, r0, sl
 800e184:	4414      	add	r4, r2
 800e186:	eb09 0c0a 	add.w	ip, r9, sl
 800e18a:	ad1a      	add	r5, sp, #104	; 0x68
 800e18c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 800e190:	2200      	movs	r2, #0
 800e192:	4562      	cmp	r2, ip
 800e194:	dd10      	ble.n	800e1b8 <__kernel_rem_pio2+0x78>
 800e196:	9a01      	ldr	r2, [sp, #4]
 800e198:	a91a      	add	r1, sp, #104	; 0x68
 800e19a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800e19e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 800e1a2:	f04f 0c00 	mov.w	ip, #0
 800e1a6:	45cc      	cmp	ip, r9
 800e1a8:	dc26      	bgt.n	800e1f8 <__kernel_rem_pio2+0xb8>
 800e1aa:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 800e448 <__kernel_rem_pio2+0x308>
 800e1ae:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e1b2:	4616      	mov	r6, r2
 800e1b4:	2500      	movs	r5, #0
 800e1b6:	e015      	b.n	800e1e4 <__kernel_rem_pio2+0xa4>
 800e1b8:	42d6      	cmn	r6, r2
 800e1ba:	d409      	bmi.n	800e1d0 <__kernel_rem_pio2+0x90>
 800e1bc:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800e1c0:	ee07 1a90 	vmov	s15, r1
 800e1c4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e1c8:	eca5 7b02 	vstmia	r5!, {d7}
 800e1cc:	3201      	adds	r2, #1
 800e1ce:	e7e0      	b.n	800e192 <__kernel_rem_pio2+0x52>
 800e1d0:	eeb0 7b46 	vmov.f64	d7, d6
 800e1d4:	e7f8      	b.n	800e1c8 <__kernel_rem_pio2+0x88>
 800e1d6:	ecbe 5b02 	vldmia	lr!, {d5}
 800e1da:	ed96 6b00 	vldr	d6, [r6]
 800e1de:	3501      	adds	r5, #1
 800e1e0:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e1e4:	4555      	cmp	r5, sl
 800e1e6:	f1a6 0608 	sub.w	r6, r6, #8
 800e1ea:	ddf4      	ble.n	800e1d6 <__kernel_rem_pio2+0x96>
 800e1ec:	eca8 7b02 	vstmia	r8!, {d7}
 800e1f0:	f10c 0c01 	add.w	ip, ip, #1
 800e1f4:	3208      	adds	r2, #8
 800e1f6:	e7d6      	b.n	800e1a6 <__kernel_rem_pio2+0x66>
 800e1f8:	aa06      	add	r2, sp, #24
 800e1fa:	ed9f 9b95 	vldr	d9, [pc, #596]	; 800e450 <__kernel_rem_pio2+0x310>
 800e1fe:	ed9f ab96 	vldr	d10, [pc, #600]	; 800e458 <__kernel_rem_pio2+0x318>
 800e202:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800e206:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800e20a:	9204      	str	r2, [sp, #16]
 800e20c:	9303      	str	r3, [sp, #12]
 800e20e:	464d      	mov	r5, r9
 800e210:	00eb      	lsls	r3, r5, #3
 800e212:	9305      	str	r3, [sp, #20]
 800e214:	ab92      	add	r3, sp, #584	; 0x248
 800e216:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e21a:	f10d 0b18 	add.w	fp, sp, #24
 800e21e:	ab6a      	add	r3, sp, #424	; 0x1a8
 800e220:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 800e224:	465e      	mov	r6, fp
 800e226:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800e22a:	4628      	mov	r0, r5
 800e22c:	2800      	cmp	r0, #0
 800e22e:	f1a2 0208 	sub.w	r2, r2, #8
 800e232:	dc48      	bgt.n	800e2c6 <__kernel_rem_pio2+0x186>
 800e234:	4620      	mov	r0, r4
 800e236:	f000 fa17 	bl	800e668 <scalbn>
 800e23a:	eeb0 8b40 	vmov.f64	d8, d0
 800e23e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800e242:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e246:	f000 fa8f 	bl	800e768 <floor>
 800e24a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800e24e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e252:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e256:	2c00      	cmp	r4, #0
 800e258:	ee17 8a90 	vmov	r8, s15
 800e25c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e260:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e264:	dd41      	ble.n	800e2ea <__kernel_rem_pio2+0x1aa>
 800e266:	1e68      	subs	r0, r5, #1
 800e268:	ab06      	add	r3, sp, #24
 800e26a:	f1c4 0c18 	rsb	ip, r4, #24
 800e26e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 800e272:	fa46 f20c 	asr.w	r2, r6, ip
 800e276:	4490      	add	r8, r2
 800e278:	fa02 f20c 	lsl.w	r2, r2, ip
 800e27c:	1ab6      	subs	r6, r6, r2
 800e27e:	f1c4 0217 	rsb	r2, r4, #23
 800e282:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 800e286:	4116      	asrs	r6, r2
 800e288:	2e00      	cmp	r6, #0
 800e28a:	dd3d      	ble.n	800e308 <__kernel_rem_pio2+0x1c8>
 800e28c:	f04f 0c00 	mov.w	ip, #0
 800e290:	f108 0801 	add.w	r8, r8, #1
 800e294:	4660      	mov	r0, ip
 800e296:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800e29a:	4565      	cmp	r5, ip
 800e29c:	dc6a      	bgt.n	800e374 <__kernel_rem_pio2+0x234>
 800e29e:	2c00      	cmp	r4, #0
 800e2a0:	dd04      	ble.n	800e2ac <__kernel_rem_pio2+0x16c>
 800e2a2:	2c01      	cmp	r4, #1
 800e2a4:	d07b      	beq.n	800e39e <__kernel_rem_pio2+0x25e>
 800e2a6:	2c02      	cmp	r4, #2
 800e2a8:	f000 8083 	beq.w	800e3b2 <__kernel_rem_pio2+0x272>
 800e2ac:	2e02      	cmp	r6, #2
 800e2ae:	d12b      	bne.n	800e308 <__kernel_rem_pio2+0x1c8>
 800e2b0:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e2b4:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e2b8:	b330      	cbz	r0, 800e308 <__kernel_rem_pio2+0x1c8>
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	f000 f9d4 	bl	800e668 <scalbn>
 800e2c0:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e2c4:	e020      	b.n	800e308 <__kernel_rem_pio2+0x1c8>
 800e2c6:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e2ca:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e2ce:	3801      	subs	r0, #1
 800e2d0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e2d4:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e2d8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e2dc:	eca6 0a01 	vstmia	r6!, {s0}
 800e2e0:	ed92 0b00 	vldr	d0, [r2]
 800e2e4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e2e8:	e7a0      	b.n	800e22c <__kernel_rem_pio2+0xec>
 800e2ea:	d105      	bne.n	800e2f8 <__kernel_rem_pio2+0x1b8>
 800e2ec:	1e6a      	subs	r2, r5, #1
 800e2ee:	ab06      	add	r3, sp, #24
 800e2f0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800e2f4:	15f6      	asrs	r6, r6, #23
 800e2f6:	e7c7      	b.n	800e288 <__kernel_rem_pio2+0x148>
 800e2f8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800e2fc:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e304:	da34      	bge.n	800e370 <__kernel_rem_pio2+0x230>
 800e306:	2600      	movs	r6, #0
 800e308:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e30c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e310:	f040 80aa 	bne.w	800e468 <__kernel_rem_pio2+0x328>
 800e314:	f105 3bff 	add.w	fp, r5, #4294967295
 800e318:	4658      	mov	r0, fp
 800e31a:	2200      	movs	r2, #0
 800e31c:	4548      	cmp	r0, r9
 800e31e:	da50      	bge.n	800e3c2 <__kernel_rem_pio2+0x282>
 800e320:	2a00      	cmp	r2, #0
 800e322:	d06b      	beq.n	800e3fc <__kernel_rem_pio2+0x2bc>
 800e324:	ab06      	add	r3, sp, #24
 800e326:	3c18      	subs	r4, #24
 800e328:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	f000 8087 	beq.w	800e440 <__kernel_rem_pio2+0x300>
 800e332:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e336:	4620      	mov	r0, r4
 800e338:	f000 f996 	bl	800e668 <scalbn>
 800e33c:	ed9f 6b44 	vldr	d6, [pc, #272]	; 800e450 <__kernel_rem_pio2+0x310>
 800e340:	f10b 0201 	add.w	r2, fp, #1
 800e344:	a96a      	add	r1, sp, #424	; 0x1a8
 800e346:	00d3      	lsls	r3, r2, #3
 800e348:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e34c:	465a      	mov	r2, fp
 800e34e:	2a00      	cmp	r2, #0
 800e350:	f280 80b8 	bge.w	800e4c4 <__kernel_rem_pio2+0x384>
 800e354:	465a      	mov	r2, fp
 800e356:	2a00      	cmp	r2, #0
 800e358:	f2c0 80d6 	blt.w	800e508 <__kernel_rem_pio2+0x3c8>
 800e35c:	a96a      	add	r1, sp, #424	; 0x1a8
 800e35e:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 800e362:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800e448 <__kernel_rem_pio2+0x308>
 800e366:	4d3f      	ldr	r5, [pc, #252]	; (800e464 <__kernel_rem_pio2+0x324>)
 800e368:	2000      	movs	r0, #0
 800e36a:	ebab 0102 	sub.w	r1, fp, r2
 800e36e:	e0c0      	b.n	800e4f2 <__kernel_rem_pio2+0x3b2>
 800e370:	2602      	movs	r6, #2
 800e372:	e78b      	b.n	800e28c <__kernel_rem_pio2+0x14c>
 800e374:	f8db 2000 	ldr.w	r2, [fp]
 800e378:	b958      	cbnz	r0, 800e392 <__kernel_rem_pio2+0x252>
 800e37a:	b122      	cbz	r2, 800e386 <__kernel_rem_pio2+0x246>
 800e37c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800e380:	f8cb 2000 	str.w	r2, [fp]
 800e384:	2201      	movs	r2, #1
 800e386:	f10c 0c01 	add.w	ip, ip, #1
 800e38a:	f10b 0b04 	add.w	fp, fp, #4
 800e38e:	4610      	mov	r0, r2
 800e390:	e783      	b.n	800e29a <__kernel_rem_pio2+0x15a>
 800e392:	ebae 0202 	sub.w	r2, lr, r2
 800e396:	f8cb 2000 	str.w	r2, [fp]
 800e39a:	4602      	mov	r2, r0
 800e39c:	e7f3      	b.n	800e386 <__kernel_rem_pio2+0x246>
 800e39e:	f105 3cff 	add.w	ip, r5, #4294967295
 800e3a2:	ab06      	add	r3, sp, #24
 800e3a4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e3a8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800e3ac:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800e3b0:	e77c      	b.n	800e2ac <__kernel_rem_pio2+0x16c>
 800e3b2:	f105 3cff 	add.w	ip, r5, #4294967295
 800e3b6:	ab06      	add	r3, sp, #24
 800e3b8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800e3bc:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800e3c0:	e7f4      	b.n	800e3ac <__kernel_rem_pio2+0x26c>
 800e3c2:	ab06      	add	r3, sp, #24
 800e3c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e3c8:	3801      	subs	r0, #1
 800e3ca:	431a      	orrs	r2, r3
 800e3cc:	e7a6      	b.n	800e31c <__kernel_rem_pio2+0x1dc>
 800e3ce:	3201      	adds	r2, #1
 800e3d0:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800e3d4:	2e00      	cmp	r6, #0
 800e3d6:	d0fa      	beq.n	800e3ce <__kernel_rem_pio2+0x28e>
 800e3d8:	9b05      	ldr	r3, [sp, #20]
 800e3da:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800e3de:	eb0d 0003 	add.w	r0, sp, r3
 800e3e2:	9b01      	ldr	r3, [sp, #4]
 800e3e4:	18ee      	adds	r6, r5, r3
 800e3e6:	ab1a      	add	r3, sp, #104	; 0x68
 800e3e8:	f105 0c01 	add.w	ip, r5, #1
 800e3ec:	3898      	subs	r0, #152	; 0x98
 800e3ee:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800e3f2:	442a      	add	r2, r5
 800e3f4:	4562      	cmp	r2, ip
 800e3f6:	da04      	bge.n	800e402 <__kernel_rem_pio2+0x2c2>
 800e3f8:	4615      	mov	r5, r2
 800e3fa:	e709      	b.n	800e210 <__kernel_rem_pio2+0xd0>
 800e3fc:	9804      	ldr	r0, [sp, #16]
 800e3fe:	2201      	movs	r2, #1
 800e400:	e7e6      	b.n	800e3d0 <__kernel_rem_pio2+0x290>
 800e402:	9b03      	ldr	r3, [sp, #12]
 800e404:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e408:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e40c:	9305      	str	r3, [sp, #20]
 800e40e:	ee07 3a90 	vmov	s15, r3
 800e412:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e416:	2500      	movs	r5, #0
 800e418:	eca6 7b02 	vstmia	r6!, {d7}
 800e41c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800e448 <__kernel_rem_pio2+0x308>
 800e420:	46b0      	mov	r8, r6
 800e422:	4555      	cmp	r5, sl
 800e424:	dd04      	ble.n	800e430 <__kernel_rem_pio2+0x2f0>
 800e426:	eca0 7b02 	vstmia	r0!, {d7}
 800e42a:	f10c 0c01 	add.w	ip, ip, #1
 800e42e:	e7e1      	b.n	800e3f4 <__kernel_rem_pio2+0x2b4>
 800e430:	ecbe 5b02 	vldmia	lr!, {d5}
 800e434:	ed38 6b02 	vldmdb	r8!, {d6}
 800e438:	3501      	adds	r5, #1
 800e43a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e43e:	e7f0      	b.n	800e422 <__kernel_rem_pio2+0x2e2>
 800e440:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e444:	e76e      	b.n	800e324 <__kernel_rem_pio2+0x1e4>
 800e446:	bf00      	nop
	...
 800e454:	3e700000 	.word	0x3e700000
 800e458:	00000000 	.word	0x00000000
 800e45c:	41700000 	.word	0x41700000
 800e460:	0800f258 	.word	0x0800f258
 800e464:	0800f218 	.word	0x0800f218
 800e468:	4260      	negs	r0, r4
 800e46a:	eeb0 0b48 	vmov.f64	d0, d8
 800e46e:	f000 f8fb 	bl	800e668 <scalbn>
 800e472:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800e650 <__kernel_rem_pio2+0x510>
 800e476:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e47e:	db18      	blt.n	800e4b2 <__kernel_rem_pio2+0x372>
 800e480:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800e658 <__kernel_rem_pio2+0x518>
 800e484:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e488:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e48c:	aa06      	add	r2, sp, #24
 800e48e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e492:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e496:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e49a:	f105 0b01 	add.w	fp, r5, #1
 800e49e:	ee10 3a10 	vmov	r3, s0
 800e4a2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e4a6:	ee17 3a10 	vmov	r3, s14
 800e4aa:	3418      	adds	r4, #24
 800e4ac:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 800e4b0:	e73f      	b.n	800e332 <__kernel_rem_pio2+0x1f2>
 800e4b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e4b6:	aa06      	add	r2, sp, #24
 800e4b8:	ee10 3a10 	vmov	r3, s0
 800e4bc:	46ab      	mov	fp, r5
 800e4be:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800e4c2:	e736      	b.n	800e332 <__kernel_rem_pio2+0x1f2>
 800e4c4:	a806      	add	r0, sp, #24
 800e4c6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e4ca:	9001      	str	r0, [sp, #4]
 800e4cc:	ee07 0a90 	vmov	s15, r0
 800e4d0:	3a01      	subs	r2, #1
 800e4d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e4d6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e4da:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e4de:	ed21 7b02 	vstmdb	r1!, {d7}
 800e4e2:	e734      	b.n	800e34e <__kernel_rem_pio2+0x20e>
 800e4e4:	ecb5 5b02 	vldmia	r5!, {d5}
 800e4e8:	ecb4 6b02 	vldmia	r4!, {d6}
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e4f2:	4548      	cmp	r0, r9
 800e4f4:	dc01      	bgt.n	800e4fa <__kernel_rem_pio2+0x3ba>
 800e4f6:	4288      	cmp	r0, r1
 800e4f8:	ddf4      	ble.n	800e4e4 <__kernel_rem_pio2+0x3a4>
 800e4fa:	a842      	add	r0, sp, #264	; 0x108
 800e4fc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e500:	ed81 7b00 	vstr	d7, [r1]
 800e504:	3a01      	subs	r2, #1
 800e506:	e726      	b.n	800e356 <__kernel_rem_pio2+0x216>
 800e508:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e50a:	2a02      	cmp	r2, #2
 800e50c:	dc0a      	bgt.n	800e524 <__kernel_rem_pio2+0x3e4>
 800e50e:	2a00      	cmp	r2, #0
 800e510:	dc2e      	bgt.n	800e570 <__kernel_rem_pio2+0x430>
 800e512:	d047      	beq.n	800e5a4 <__kernel_rem_pio2+0x464>
 800e514:	f008 0007 	and.w	r0, r8, #7
 800e518:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800e51c:	ecbd 8b06 	vpop	{d8-d10}
 800e520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e524:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800e526:	2a03      	cmp	r2, #3
 800e528:	d1f4      	bne.n	800e514 <__kernel_rem_pio2+0x3d4>
 800e52a:	a942      	add	r1, sp, #264	; 0x108
 800e52c:	f1a3 0208 	sub.w	r2, r3, #8
 800e530:	440a      	add	r2, r1
 800e532:	4611      	mov	r1, r2
 800e534:	4658      	mov	r0, fp
 800e536:	2800      	cmp	r0, #0
 800e538:	f1a1 0108 	sub.w	r1, r1, #8
 800e53c:	dc55      	bgt.n	800e5ea <__kernel_rem_pio2+0x4aa>
 800e53e:	4659      	mov	r1, fp
 800e540:	2901      	cmp	r1, #1
 800e542:	f1a2 0208 	sub.w	r2, r2, #8
 800e546:	dc60      	bgt.n	800e60a <__kernel_rem_pio2+0x4ca>
 800e548:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800e660 <__kernel_rem_pio2+0x520>
 800e54c:	aa42      	add	r2, sp, #264	; 0x108
 800e54e:	4413      	add	r3, r2
 800e550:	f1bb 0f01 	cmp.w	fp, #1
 800e554:	dc69      	bgt.n	800e62a <__kernel_rem_pio2+0x4ea>
 800e556:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800e55a:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800e55e:	2e00      	cmp	r6, #0
 800e560:	d16a      	bne.n	800e638 <__kernel_rem_pio2+0x4f8>
 800e562:	ed87 5b00 	vstr	d5, [r7]
 800e566:	ed87 6b02 	vstr	d6, [r7, #8]
 800e56a:	ed87 7b04 	vstr	d7, [r7, #16]
 800e56e:	e7d1      	b.n	800e514 <__kernel_rem_pio2+0x3d4>
 800e570:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800e660 <__kernel_rem_pio2+0x520>
 800e574:	aa42      	add	r2, sp, #264	; 0x108
 800e576:	4413      	add	r3, r2
 800e578:	465a      	mov	r2, fp
 800e57a:	2a00      	cmp	r2, #0
 800e57c:	da26      	bge.n	800e5cc <__kernel_rem_pio2+0x48c>
 800e57e:	b35e      	cbz	r6, 800e5d8 <__kernel_rem_pio2+0x498>
 800e580:	eeb1 7b46 	vneg.f64	d7, d6
 800e584:	ed87 7b00 	vstr	d7, [r7]
 800e588:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800e58c:	aa44      	add	r2, sp, #272	; 0x110
 800e58e:	2301      	movs	r3, #1
 800e590:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e594:	459b      	cmp	fp, r3
 800e596:	da22      	bge.n	800e5de <__kernel_rem_pio2+0x49e>
 800e598:	b10e      	cbz	r6, 800e59e <__kernel_rem_pio2+0x45e>
 800e59a:	eeb1 7b47 	vneg.f64	d7, d7
 800e59e:	ed87 7b02 	vstr	d7, [r7, #8]
 800e5a2:	e7b7      	b.n	800e514 <__kernel_rem_pio2+0x3d4>
 800e5a4:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800e660 <__kernel_rem_pio2+0x520>
 800e5a8:	aa42      	add	r2, sp, #264	; 0x108
 800e5aa:	4413      	add	r3, r2
 800e5ac:	f1bb 0f00 	cmp.w	fp, #0
 800e5b0:	da05      	bge.n	800e5be <__kernel_rem_pio2+0x47e>
 800e5b2:	b10e      	cbz	r6, 800e5b8 <__kernel_rem_pio2+0x478>
 800e5b4:	eeb1 7b47 	vneg.f64	d7, d7
 800e5b8:	ed87 7b00 	vstr	d7, [r7]
 800e5bc:	e7aa      	b.n	800e514 <__kernel_rem_pio2+0x3d4>
 800e5be:	ed33 6b02 	vldmdb	r3!, {d6}
 800e5c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e5c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e5ca:	e7ef      	b.n	800e5ac <__kernel_rem_pio2+0x46c>
 800e5cc:	ed33 7b02 	vldmdb	r3!, {d7}
 800e5d0:	3a01      	subs	r2, #1
 800e5d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e5d6:	e7d0      	b.n	800e57a <__kernel_rem_pio2+0x43a>
 800e5d8:	eeb0 7b46 	vmov.f64	d7, d6
 800e5dc:	e7d2      	b.n	800e584 <__kernel_rem_pio2+0x444>
 800e5de:	ecb2 6b02 	vldmia	r2!, {d6}
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e5e8:	e7d4      	b.n	800e594 <__kernel_rem_pio2+0x454>
 800e5ea:	ed91 7b00 	vldr	d7, [r1]
 800e5ee:	ed91 5b02 	vldr	d5, [r1, #8]
 800e5f2:	3801      	subs	r0, #1
 800e5f4:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e5f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e5fc:	ed81 6b00 	vstr	d6, [r1]
 800e600:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e604:	ed81 7b02 	vstr	d7, [r1, #8]
 800e608:	e795      	b.n	800e536 <__kernel_rem_pio2+0x3f6>
 800e60a:	ed92 7b00 	vldr	d7, [r2]
 800e60e:	ed92 5b02 	vldr	d5, [r2, #8]
 800e612:	3901      	subs	r1, #1
 800e614:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e618:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e61c:	ed82 6b00 	vstr	d6, [r2]
 800e620:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e624:	ed82 7b02 	vstr	d7, [r2, #8]
 800e628:	e78a      	b.n	800e540 <__kernel_rem_pio2+0x400>
 800e62a:	ed33 6b02 	vldmdb	r3!, {d6}
 800e62e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e632:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e636:	e78b      	b.n	800e550 <__kernel_rem_pio2+0x410>
 800e638:	eeb1 5b45 	vneg.f64	d5, d5
 800e63c:	eeb1 6b46 	vneg.f64	d6, d6
 800e640:	ed87 5b00 	vstr	d5, [r7]
 800e644:	eeb1 7b47 	vneg.f64	d7, d7
 800e648:	ed87 6b02 	vstr	d6, [r7, #8]
 800e64c:	e78d      	b.n	800e56a <__kernel_rem_pio2+0x42a>
 800e64e:	bf00      	nop
 800e650:	00000000 	.word	0x00000000
 800e654:	41700000 	.word	0x41700000
 800e658:	00000000 	.word	0x00000000
 800e65c:	3e700000 	.word	0x3e700000
	...

0800e668 <scalbn>:
 800e668:	ee10 1a90 	vmov	r1, s1
 800e66c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e670:	b98b      	cbnz	r3, 800e696 <scalbn+0x2e>
 800e672:	ee10 3a10 	vmov	r3, s0
 800e676:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e67a:	4319      	orrs	r1, r3
 800e67c:	d00a      	beq.n	800e694 <scalbn+0x2c>
 800e67e:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 800e730 <scalbn+0xc8>
 800e682:	4b37      	ldr	r3, [pc, #220]	; (800e760 <scalbn+0xf8>)
 800e684:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e688:	4298      	cmp	r0, r3
 800e68a:	da0b      	bge.n	800e6a4 <scalbn+0x3c>
 800e68c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800e738 <scalbn+0xd0>
 800e690:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e694:	4770      	bx	lr
 800e696:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d107      	bne.n	800e6ae <scalbn+0x46>
 800e69e:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e6a2:	4770      	bx	lr
 800e6a4:	ee10 1a90 	vmov	r1, s1
 800e6a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e6ac:	3b36      	subs	r3, #54	; 0x36
 800e6ae:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e6b2:	4290      	cmp	r0, r2
 800e6b4:	dd0d      	ble.n	800e6d2 <scalbn+0x6a>
 800e6b6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800e740 <scalbn+0xd8>
 800e6ba:	ee10 3a90 	vmov	r3, s1
 800e6be:	eeb0 6b47 	vmov.f64	d6, d7
 800e6c2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 800e748 <scalbn+0xe0>
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e6cc:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e6d0:	4770      	bx	lr
 800e6d2:	4418      	add	r0, r3
 800e6d4:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800e6d8:	4298      	cmp	r0, r3
 800e6da:	dcec      	bgt.n	800e6b6 <scalbn+0x4e>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	dd0a      	ble.n	800e6f6 <scalbn+0x8e>
 800e6e0:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e6e4:	ec53 2b10 	vmov	r2, r3, d0
 800e6e8:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e6ec:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e6f0:	ec43 2b10 	vmov	d0, r2, r3
 800e6f4:	4770      	bx	lr
 800e6f6:	f110 0f35 	cmn.w	r0, #53	; 0x35
 800e6fa:	da09      	bge.n	800e710 <scalbn+0xa8>
 800e6fc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800e738 <scalbn+0xd0>
 800e700:	ee10 3a90 	vmov	r3, s1
 800e704:	eeb0 6b47 	vmov.f64	d6, d7
 800e708:	ed9f 5b11 	vldr	d5, [pc, #68]	; 800e750 <scalbn+0xe8>
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	e7db      	b.n	800e6c8 <scalbn+0x60>
 800e710:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800e714:	ec53 2b10 	vmov	r2, r3, d0
 800e718:	3036      	adds	r0, #54	; 0x36
 800e71a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800e71e:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e722:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800e758 <scalbn+0xf0>
 800e726:	ec43 2b10 	vmov	d0, r2, r3
 800e72a:	e7b1      	b.n	800e690 <scalbn+0x28>
 800e72c:	f3af 8000 	nop.w
 800e730:	00000000 	.word	0x00000000
 800e734:	43500000 	.word	0x43500000
 800e738:	c2f8f359 	.word	0xc2f8f359
 800e73c:	01a56e1f 	.word	0x01a56e1f
 800e740:	8800759c 	.word	0x8800759c
 800e744:	7e37e43c 	.word	0x7e37e43c
 800e748:	8800759c 	.word	0x8800759c
 800e74c:	fe37e43c 	.word	0xfe37e43c
 800e750:	c2f8f359 	.word	0xc2f8f359
 800e754:	81a56e1f 	.word	0x81a56e1f
 800e758:	00000000 	.word	0x00000000
 800e75c:	3c900000 	.word	0x3c900000
 800e760:	ffff3cb0 	.word	0xffff3cb0
 800e764:	00000000 	.word	0x00000000

0800e768 <floor>:
 800e768:	ee10 1a90 	vmov	r1, s1
 800e76c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e770:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800e774:	2b13      	cmp	r3, #19
 800e776:	b530      	push	{r4, r5, lr}
 800e778:	ee10 0a10 	vmov	r0, s0
 800e77c:	ee10 5a10 	vmov	r5, s0
 800e780:	dc31      	bgt.n	800e7e6 <floor+0x7e>
 800e782:	2b00      	cmp	r3, #0
 800e784:	da15      	bge.n	800e7b2 <floor+0x4a>
 800e786:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800e848 <floor+0xe0>
 800e78a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e78e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e796:	dd07      	ble.n	800e7a8 <floor+0x40>
 800e798:	2900      	cmp	r1, #0
 800e79a:	da4e      	bge.n	800e83a <floor+0xd2>
 800e79c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e7a0:	4308      	orrs	r0, r1
 800e7a2:	d04d      	beq.n	800e840 <floor+0xd8>
 800e7a4:	492a      	ldr	r1, [pc, #168]	; (800e850 <floor+0xe8>)
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	4602      	mov	r2, r0
 800e7ac:	ec43 2b10 	vmov	d0, r2, r3
 800e7b0:	e020      	b.n	800e7f4 <floor+0x8c>
 800e7b2:	4a28      	ldr	r2, [pc, #160]	; (800e854 <floor+0xec>)
 800e7b4:	411a      	asrs	r2, r3
 800e7b6:	ea01 0402 	and.w	r4, r1, r2
 800e7ba:	4304      	orrs	r4, r0
 800e7bc:	d01a      	beq.n	800e7f4 <floor+0x8c>
 800e7be:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800e848 <floor+0xe0>
 800e7c2:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e7c6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ce:	ddeb      	ble.n	800e7a8 <floor+0x40>
 800e7d0:	2900      	cmp	r1, #0
 800e7d2:	bfbe      	ittt	lt
 800e7d4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800e7d8:	fa40 f303 	asrlt.w	r3, r0, r3
 800e7dc:	18c9      	addlt	r1, r1, r3
 800e7de:	ea21 0102 	bic.w	r1, r1, r2
 800e7e2:	2000      	movs	r0, #0
 800e7e4:	e7e0      	b.n	800e7a8 <floor+0x40>
 800e7e6:	2b33      	cmp	r3, #51	; 0x33
 800e7e8:	dd05      	ble.n	800e7f6 <floor+0x8e>
 800e7ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e7ee:	d101      	bne.n	800e7f4 <floor+0x8c>
 800e7f0:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e7f4:	bd30      	pop	{r4, r5, pc}
 800e7f6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800e7fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e7fe:	40e2      	lsrs	r2, r4
 800e800:	4210      	tst	r0, r2
 800e802:	d0f7      	beq.n	800e7f4 <floor+0x8c>
 800e804:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800e848 <floor+0xe0>
 800e808:	ee30 0b07 	vadd.f64	d0, d0, d7
 800e80c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e814:	ddc8      	ble.n	800e7a8 <floor+0x40>
 800e816:	2900      	cmp	r1, #0
 800e818:	da02      	bge.n	800e820 <floor+0xb8>
 800e81a:	2b14      	cmp	r3, #20
 800e81c:	d103      	bne.n	800e826 <floor+0xbe>
 800e81e:	3101      	adds	r1, #1
 800e820:	ea20 0002 	bic.w	r0, r0, r2
 800e824:	e7c0      	b.n	800e7a8 <floor+0x40>
 800e826:	2401      	movs	r4, #1
 800e828:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e82c:	fa04 f303 	lsl.w	r3, r4, r3
 800e830:	4418      	add	r0, r3
 800e832:	4285      	cmp	r5, r0
 800e834:	bf88      	it	hi
 800e836:	1909      	addhi	r1, r1, r4
 800e838:	e7f2      	b.n	800e820 <floor+0xb8>
 800e83a:	2000      	movs	r0, #0
 800e83c:	4601      	mov	r1, r0
 800e83e:	e7b3      	b.n	800e7a8 <floor+0x40>
 800e840:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e844:	e7b0      	b.n	800e7a8 <floor+0x40>
 800e846:	bf00      	nop
 800e848:	8800759c 	.word	0x8800759c
 800e84c:	7e37e43c 	.word	0x7e37e43c
 800e850:	bff00000 	.word	0xbff00000
 800e854:	000fffff 	.word	0x000fffff

0800e858 <_init>:
 800e858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e85a:	bf00      	nop
 800e85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e85e:	bc08      	pop	{r3}
 800e860:	469e      	mov	lr, r3
 800e862:	4770      	bx	lr

0800e864 <_fini>:
 800e864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e866:	bf00      	nop
 800e868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e86a:	bc08      	pop	{r3}
 800e86c:	469e      	mov	lr, r3
 800e86e:	4770      	bx	lr
