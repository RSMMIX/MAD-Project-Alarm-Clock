
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3f4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000814  0800d5f8  0800d5f8  0001d5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de0c  0800de0c  0002029c  2**0
                  CONTENTS
  4 .ARM          00000008  0800de0c  0800de0c  0001de0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de14  0800de14  0002029c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de14  0800de14  0001de14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de18  0800de18  0001de18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000029c  20000000  0800de1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  2000029c  0800e0b8  0002029c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  0800e0b8  000209f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002029c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202ca  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e7dd  00000000  00000000  0002030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047b1  00000000  00000000  0003eaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b8  00000000  00000000  000432a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013ee  00000000  00000000  00044c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c832  00000000  00000000  00046046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022d29  00000000  00000000  00072878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001081c7  00000000  00000000  000955a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007a04  00000000  00000000  0019d768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001a516c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000029c 	.word	0x2000029c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800d5dc 	.word	0x0800d5dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002a0 	.word	0x200002a0
 800023c:	0800d5dc 	.word	0x0800d5dc

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	460b      	mov	r3, r1
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	4613      	mov	r3, r2
 80005fc:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	b29a      	uxth	r2, r3
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	b29b      	uxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	b29b      	uxth	r3, r3
 800060e:	4413      	add	r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	f203 1305 	addw	r3, r3, #261	; 0x105
 8000616:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8000618:	8afb      	ldrh	r3, [r7, #22]
 800061a:	425b      	negs	r3, r3
 800061c:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800061e:	237e      	movs	r3, #126	; 0x7e
 8000620:	733b      	strb	r3, [r7, #12]
 8000622:	23ff      	movs	r3, #255	; 0xff
 8000624:	737b      	strb	r3, [r7, #13]
 8000626:	2306      	movs	r3, #6
 8000628:	73bb      	strb	r3, [r7, #14]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	2300      	movs	r3, #0
 8000630:	743b      	strb	r3, [r7, #16]
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	747b      	strb	r3, [r7, #17]
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	74bb      	strb	r3, [r7, #18]
 800063a:	8afb      	ldrh	r3, [r7, #22]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29b      	uxth	r3, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	74fb      	strb	r3, [r7, #19]
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	753b      	strb	r3, [r7, #20]
 800064a:	23ef      	movs	r3, #239	; 0xef
 800064c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 800064e:	f107 010c 	add.w	r1, r7, #12
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	220a      	movs	r2, #10
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <Send_cmd+0x7c>)
 800065a:	f009 fd19 	bl	800a090 <HAL_UART_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000081c 	.word	0x2000081c

0800066c <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8000670:	2201      	movs	r2, #1
 8000672:	2100      	movs	r1, #0
 8000674:	2003      	movs	r0, #3
 8000676:	f7ff ffb9 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 800067a:	20c8      	movs	r0, #200	; 0xc8
 800067c:	f004 fc12 	bl	8004ea4 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <DF_SetEQ>:

void DF_SetEQ(uint8_t mode)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  Send_cmd(0x07,0x00, mode);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	461a      	mov	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f7ff ffa9 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 800069a:	20c8      	movs	r0, #200	; 0xc8
 800069c:	f004 fc02 	bl	8004ea4 <HAL_Delay>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <DF_SetVolume>:

void DF_SetVolume(uint8_t volume)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  Send_cmd(0x06,0x00, volume);
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	461a      	mov	r2, r3
 80006b6:	2100      	movs	r1, #0
 80006b8:	2006      	movs	r0, #6
 80006ba:	f7ff ff97 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 80006be:	20c8      	movs	r0, #200	; 0xc8
 80006c0:	f004 fbf0 	bl	8004ea4 <HAL_Delay>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <DF_Init>:


void DF_Init (uint8_t volume)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 80006d6:	2202      	movs	r2, #2
 80006d8:	2100      	movs	r1, #0
 80006da:	203f      	movs	r0, #63	; 0x3f
 80006dc:	f7ff ff86 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 80006e0:	20c8      	movs	r0, #200	; 0xc8
 80006e2:	f004 fbdf 	bl	8004ea4 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	461a      	mov	r2, r3
 80006ea:	2100      	movs	r1, #0
 80006ec:	2006      	movs	r0, #6
 80006ee:	f7ff ff7d 	bl	80005ec <Send_cmd>
	HAL_Delay(500);
 80006f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f6:	f004 fbd5 	bl	8004ea4 <HAL_Delay>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <DF_Pause>:
	Send_cmd(0x01, 0x00, 0x00);
	HAL_Delay(200);
}

void DF_Pause (void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	200e      	movs	r0, #14
 800070c:	f7ff ff6e 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 8000710:	20c8      	movs	r0, #200	; 0xc8
 8000712:	f004 fbc7 	bl	8004ea4 <HAL_Delay>
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}

0800071a <DF_Playback>:
	Send_cmd(0x02, 0, 0);
	HAL_Delay(200);
}

void DF_Playback (void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
	Send_cmd(0x0D, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	200d      	movs	r0, #13
 8000724:	f7ff ff62 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 8000728:	20c8      	movs	r0, #200	; 0xc8
 800072a:	f004 fbbb 	bl	8004ea4 <HAL_Delay>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <selectSong>:
	}
}


void selectSong (void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key))
 8000738:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800073c:	482b      	ldr	r0, [pc, #172]	; (80007ec <selectSong+0xb8>)
 800073e:	f005 fe39 	bl	80063b4 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d114      	bne.n	8000772 <selectSong+0x3e>
	{
		HAL_Delay(50);
 8000748:	2032      	movs	r0, #50	; 0x32
 800074a:	f004 fbab 	bl	8004ea4 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key)){
 800074e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000752:	4826      	ldr	r0, [pc, #152]	; (80007ec <selectSong+0xb8>)
 8000754:	f005 fe2e 	bl	80063b4 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d109      	bne.n	8000772 <selectSong+0x3e>
			DF_SetFolder(1, songList);
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <selectSong+0xbc>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	2001      	movs	r0, #1
 8000766:	f000 f847 	bl	80007f8 <DF_SetFolder>
			savedSong = songList;
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <selectSong+0xbc>)
 800076c:	881a      	ldrh	r2, [r3, #0]
 800076e:	4b21      	ldr	r3, [pc, #132]	; (80007f4 <selectSong+0xc0>)
 8000770:	801a      	strh	r2, [r3, #0]
		}
	}

	if (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key))
 8000772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000776:	481d      	ldr	r0, [pc, #116]	; (80007ec <selectSong+0xb8>)
 8000778:	f005 fe1c 	bl	80063b4 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10d      	bne.n	800079e <selectSong+0x6a>
	{
		HAL_Delay(50);
 8000782:	2032      	movs	r0, #50	; 0x32
 8000784:	f004 fb8e 	bl	8004ea4 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key));
 8000788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078c:	4817      	ldr	r0, [pc, #92]	; (80007ec <selectSong+0xb8>)
 800078e:	f005 fe11 	bl	80063b4 <HAL_GPIO_ReadPin>
		songList--;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <selectSong+0xbc>)
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <selectSong+0xbc>)
 800079c:	801a      	strh	r2, [r3, #0]
		//DF_Previous();
	}

	if (!HAL_GPIO_ReadPin(Next_Port, Next_Key))
 800079e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a2:	4812      	ldr	r0, [pc, #72]	; (80007ec <selectSong+0xb8>)
 80007a4:	f005 fe06 	bl	80063b4 <HAL_GPIO_ReadPin>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d10d      	bne.n	80007ca <selectSong+0x96>
	{
		HAL_Delay(50);
 80007ae:	2032      	movs	r0, #50	; 0x32
 80007b0:	f004 fb78 	bl	8004ea4 <HAL_Delay>
		if (!HAL_GPIO_ReadPin(Next_Port, Next_Key));
 80007b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <selectSong+0xb8>)
 80007ba:	f005 fdfb 	bl	80063b4 <HAL_GPIO_ReadPin>
		songList++;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <selectSong+0xbc>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	3301      	adds	r3, #1
 80007c4:	b29a      	uxth	r2, r3
 80007c6:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <selectSong+0xbc>)
 80007c8:	801a      	strh	r2, [r3, #0]
		//DF_Next();
	}

	if(songList < 1)
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <selectSong+0xbc>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <selectSong+0xa6>
		songList = 10;
 80007d2:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <selectSong+0xbc>)
 80007d4:	220a      	movs	r2, #10
 80007d6:	801a      	strh	r2, [r3, #0]
	else if(songList > 10)
		songList = 1;
}
 80007d8:	e006      	b.n	80007e8 <selectSong+0xb4>
	else if(songList > 10)
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <selectSong+0xbc>)
 80007dc:	881b      	ldrh	r3, [r3, #0]
 80007de:	2b0a      	cmp	r3, #10
 80007e0:	d902      	bls.n	80007e8 <selectSong+0xb4>
		songList = 1;
 80007e2:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <selectSong+0xbc>)
 80007e4:	2201      	movs	r2, #1
 80007e6:	801a      	strh	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020400 	.word	0x40020400
 80007f0:	20000070 	.word	0x20000070
 80007f4:	200002bc 	.word	0x200002bc

080007f8 <DF_SetFolder>:




void DF_SetFolder(uint8_t fol ,uint8_t num)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]
  Send_cmd(0x0F, fol, num);
 8000808:	79ba      	ldrb	r2, [r7, #6]
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4619      	mov	r1, r3
 800080e:	200f      	movs	r0, #15
 8000810:	f7ff feec 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 8000814:	20c8      	movs	r0, #200	; 0xc8
 8000816:	f004 fb45 	bl	8004ea4 <HAL_Delay>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <MusicController>:


void MusicController (uint32_t val)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]


	uint32_t value = val*30/4095;
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	011b      	lsls	r3, r3, #4
 8000832:	1a9b      	subs	r3, r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	461a      	mov	r2, r3
 8000838:	4b3f      	ldr	r3, [pc, #252]	; (8000938 <MusicController+0x114>)
 800083a:	fba3 1302 	umull	r1, r3, r3, r2
 800083e:	1ad2      	subs	r2, r2, r3
 8000840:	0852      	lsrs	r2, r2, #1
 8000842:	4413      	add	r3, r2
 8000844:	0adb      	lsrs	r3, r3, #11
 8000846:	60bb      	str	r3, [r7, #8]

	DF_SetVolume(value);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	b2db      	uxtb	r3, r3
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff2b 	bl	80006a8 <DF_SetVolume>

	if (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key))
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	4839      	ldr	r0, [pc, #228]	; (800093c <MusicController+0x118>)
 8000858:	f005 fdac 	bl	80063b4 <HAL_GPIO_ReadPin>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d121      	bne.n	80008a6 <MusicController+0x82>
	{
		while (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key));
 8000862:	bf00      	nop
 8000864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000868:	4834      	ldr	r0, [pc, #208]	; (800093c <MusicController+0x118>)
 800086a:	f005 fda3 	bl	80063b4 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d0f7      	beq.n	8000864 <MusicController+0x40>
		if (isplaying)
 8000874:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MusicController+0x11c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d008      	beq.n	800088e <MusicController+0x6a>
		{
			ispause = 1;
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <MusicController+0x120>)
 800087e:	2201      	movs	r2, #1
 8000880:	601a      	str	r2, [r3, #0]
			isplaying = 0;
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MusicController+0x11c>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
			DF_Pause();
 8000888:	f7ff ff3b 	bl	8000702 <DF_Pause>
 800088c:	e00b      	b.n	80008a6 <MusicController+0x82>
		}

		else if (ispause)
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MusicController+0x120>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d007      	beq.n	80008a6 <MusicController+0x82>
		{
			isplaying = 1;
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <MusicController+0x11c>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
			ispause = 0;
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MusicController+0x120>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			DF_Playback();
 80008a2:	f7ff ff3a 	bl	800071a <DF_Playback>
		}
	}

	if (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key))
 80008a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008aa:	4824      	ldr	r0, [pc, #144]	; (800093c <MusicController+0x118>)
 80008ac:	f005 fd82 	bl	80063b4 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d12b      	bne.n	800090e <MusicController+0xea>
	{
		while (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key)){
 80008b6:	e022      	b.n	80008fe <MusicController+0xda>
			uint16_t num = HAL_RNG_GetRandomNumber(&hrng) % 8 + 1;
 80008b8:	4823      	ldr	r0, [pc, #140]	; (8000948 <MusicController+0x124>)
 80008ba:	f007 fd2b 	bl	8008314 <HAL_RNG_GetRandomNumber>
 80008be:	4603      	mov	r3, r0
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	3301      	adds	r3, #1
 80008ca:	81fb      	strh	r3, [r7, #14]
			while(pre_num == num){
 80008cc:	e009      	b.n	80008e2 <MusicController+0xbe>
				num = HAL_RNG_GetRandomNumber(&hrng) % 8 + 1;
 80008ce:	481e      	ldr	r0, [pc, #120]	; (8000948 <MusicController+0x124>)
 80008d0:	f007 fd20 	bl	8008314 <HAL_RNG_GetRandomNumber>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	f003 0307 	and.w	r3, r3, #7
 80008dc:	b29b      	uxth	r3, r3
 80008de:	3301      	adds	r3, #1
 80008e0:	81fb      	strh	r3, [r7, #14]
			while(pre_num == num){
 80008e2:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MusicController+0x128>)
 80008e4:	881b      	ldrh	r3, [r3, #0]
 80008e6:	89fa      	ldrh	r2, [r7, #14]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d0f0      	beq.n	80008ce <MusicController+0xaa>
			}
			pre_num = num;
 80008ec:	4a17      	ldr	r2, [pc, #92]	; (800094c <MusicController+0x128>)
 80008ee:	89fb      	ldrh	r3, [r7, #14]
 80008f0:	8013      	strh	r3, [r2, #0]
			DF_SetFolder(2, num);
 80008f2:	89fb      	ldrh	r3, [r7, #14]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	4619      	mov	r1, r3
 80008f8:	2002      	movs	r0, #2
 80008fa:	f7ff ff7d 	bl	80007f8 <DF_SetFolder>
		while (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key)){
 80008fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MusicController+0x118>)
 8000904:	f005 fd56 	bl	80063b4 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d0d4      	beq.n	80008b8 <MusicController+0x94>
		}

//		DF_SetFolder(1,4);
	}

	if (!HAL_GPIO_ReadPin(Next_Port, Next_Key))
 800090e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000912:	480a      	ldr	r0, [pc, #40]	; (800093c <MusicController+0x118>)
 8000914:	f005 fd4e 	bl	80063b4 <HAL_GPIO_ReadPin>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d108      	bne.n	8000930 <MusicController+0x10c>
	{
		while (!HAL_GPIO_ReadPin(Next_Port, Next_Key));
 800091e:	bf00      	nop
 8000920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000924:	4805      	ldr	r0, [pc, #20]	; (800093c <MusicController+0x118>)
 8000926:	f005 fd45 	bl	80063b4 <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0f7      	beq.n	8000920 <MusicController+0xfc>
		//DF_SetFolder();
	}
}
 8000930:	bf00      	nop
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	00100101 	.word	0x00100101
 800093c:	40020400 	.word	0x40020400
 8000940:	20000000 	.word	0x20000000
 8000944:	200002b8 	.word	0x200002b8
 8000948:	20000554 	.word	0x20000554
 800094c:	200002be 	.word	0x200002be

08000950 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000964:	4a28      	ldr	r2, [pc, #160]	; (8000a08 <MX_ADC1_Init+0xb8>)
 8000966:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_ADC1_Init+0xb4>)
 800096a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800096e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000978:	2201      	movs	r2, #1
 800097a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800097c:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <MX_ADC1_Init+0xb4>)
 800097e:	2200      	movs	r2, #0
 8000980:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000984:	2200      	movs	r2, #0
 8000986:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098a:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <MX_ADC1_Init+0xb4>)
 800098c:	2200      	movs	r2, #0
 800098e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <MX_ADC1_Init+0xbc>)
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <MX_ADC1_Init+0xb4>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800099c:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <MX_ADC1_Init+0xb4>)
 800099e:	2202      	movs	r2, #2
 80009a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80009aa:	4b16      	ldr	r3, [pc, #88]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b0:	4814      	ldr	r0, [pc, #80]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009b2:	f004 fa9b 	bl	8004eec <HAL_ADC_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009bc:	f002 fdf6 	bl	80035ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009c0:	230d      	movs	r3, #13
 80009c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c4:	2301      	movs	r3, #1
 80009c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4619      	mov	r1, r3
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009d2:	f004 fbe7 	bl	80051a4 <HAL_ADC_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009dc:	f002 fde6 	bl	80035ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009e0:	230a      	movs	r3, #10
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_ADC1_Init+0xb4>)
 80009ee:	f004 fbd9 	bl	80051a4 <HAL_ADC_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80009f8:	f002 fdd8 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	200002c0 	.word	0x200002c0
 8000a08:	40012000 	.word	0x40012000
 8000a0c:	0f000001 	.word	0x0f000001

08000a10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <HAL_ADC_MspInit+0xd0>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d152      	bne.n	8000ad8 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a32:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a2b      	ldr	r2, [pc, #172]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <HAL_ADC_MspInit+0xd4>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000a62:	2309      	movs	r3, #9
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a66:	2303      	movs	r3, #3
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	481c      	ldr	r0, [pc, #112]	; (8000ae8 <HAL_ADC_MspInit+0xd8>)
 8000a76:	f005 faf1 	bl	800605c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a7c:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <HAL_ADC_MspInit+0xe0>)
 8000a7e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8c:	4b17      	ldr	r3, [pc, #92]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000aa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000abe:	f004 ff55 	bl	800596c <HAL_DMA_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000ac8:	f002 fd70 	bl	80035ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a07      	ldr	r2, [pc, #28]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000ad0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ad2:	4a06      	ldr	r2, [pc, #24]	; (8000aec <HAL_ADC_MspInit+0xdc>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40012000 	.word	0x40012000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	20000308 	.word	0x20000308
 8000af0:	40026410 	.word	0x40026410

08000af4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_DMA_Init+0x38>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <MX_DMA_Init+0x38>)
 8000b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_DMA_Init+0x38>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2038      	movs	r0, #56	; 0x38
 8000b18:	f004 fef1 	bl	80058fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b1c:	2038      	movs	r0, #56	; 0x38
 8000b1e:	f004 ff0a 	bl	8005936 <HAL_NVIC_EnableIRQ>

}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800

08000b30 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 8000b38:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <DS3231_Init+0x30>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f8c9 	bl	8000cd6 <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f000 f88d 	bl	8000c64 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 8000b4a:	f000 f8e6 	bl	8000d1a <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8000b4e:	f000 f8ac 	bl	8000caa <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 f846 	bl	8000be4 <DS3231_SetInterruptMode>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000368 	.word	0x20000368

08000b64 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af02      	add	r7, sp, #8
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	733b      	strb	r3, [r7, #12]
 8000b78:	79bb      	ldrb	r3, [r7, #6]
 8000b7a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <DS3231_SetRegByte+0x38>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	f107 020c 	add.w	r2, r7, #12
 8000b84:	f04f 33ff 	mov.w	r3, #4294967295
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	21d0      	movs	r1, #208	; 0xd0
 8000b8e:	f005 fcf7 	bl	8006580 <HAL_I2C_Master_Transmit>
}
 8000b92:	bf00      	nop
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000368 	.word	0x20000368

08000ba0 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <DS3231_GetRegByte+0x40>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	1dfa      	adds	r2, r7, #7
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	9300      	str	r3, [sp, #0]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	21d0      	movs	r1, #208	; 0xd0
 8000bba:	f005 fce1 	bl	8006580 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <DS3231_GetRegByte+0x40>)
 8000bc0:	6818      	ldr	r0, [r3, #0]
 8000bc2:	f107 020f 	add.w	r2, r7, #15
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	21d0      	movs	r1, #208	; 0xd0
 8000bd0:	f005 fdca 	bl	8006768 <HAL_I2C_Master_Receive>
	return val;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000368 	.word	0x20000368

08000be4 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000bee:	200e      	movs	r0, #14
 8000bf0:	f7ff ffd6 	bl	8000ba0 <DS3231_GetRegByte>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 8000bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfc:	f023 0304 	bic.w	r3, r3, #4
 8000c00:	b25a      	sxtb	r2, r3
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	b25b      	sxtb	r3, r3
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	4619      	mov	r1, r3
 8000c16:	200e      	movs	r0, #14
 8000c18:	f7ff ffa4 	bl	8000b64 <DS3231_SetRegByte>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000c2e:	200e      	movs	r0, #14
 8000c30:	f7ff ffb6 	bl	8000ba0 <DS3231_GetRegByte>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 8000c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c3c:	f023 0318 	bic.w	r3, r3, #24
 8000c40:	b25a      	sxtb	r2, r3
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	f003 0318 	and.w	r3, r3, #24
 8000c4c:	b25b      	sxtb	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b25b      	sxtb	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4619      	mov	r1, r3
 8000c56:	200e      	movs	r0, #14
 8000c58:	f7ff ff84 	bl	8000b64 <DS3231_SetRegByte>
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000c6e:	200e      	movs	r0, #14
 8000c70:	f7ff ff96 	bl	8000ba0 <DS3231_GetRegByte>
 8000c74:	4603      	mov	r3, r0
 8000c76:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 8000c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7c:	f023 0302 	bic.w	r3, r3, #2
 8000c80:	b25a      	sxtb	r2, r3
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	b25b      	sxtb	r3, r3
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4619      	mov	r1, r3
 8000c96:	200e      	movs	r0, #14
 8000c98:	f7ff ff64 	bl	8000b64 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff ffa1 	bl	8000be4 <DS3231_SetInterruptMode>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8000cb0:	200f      	movs	r0, #15
 8000cb2:	f7ff ff75 	bl	8000ba0 <DS3231_GetRegByte>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f023 0302 	bic.w	r3, r3, #2
 8000cbc:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f023 0302 	bic.w	r3, r3, #2
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	200f      	movs	r0, #15
 8000cca:	f7ff ff4b 	bl	8000b64 <DS3231_SetRegByte>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000ce0:	200e      	movs	r0, #14
 8000ce2:	f7ff ff5d 	bl	8000ba0 <DS3231_GetRegByte>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	f023 0301 	bic.w	r3, r3, #1
 8000cf2:	b25a      	sxtb	r2, r3
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	b25b      	sxtb	r3, r3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	b25b      	sxtb	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	4619      	mov	r1, r3
 8000d06:	200e      	movs	r0, #14
 8000d08:	f7ff ff2c 	bl	8000b64 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff ff69 	bl	8000be4 <DS3231_SetInterruptMode>
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 8000d20:	200f      	movs	r0, #15
 8000d22:	f7ff ff3d 	bl	8000ba0 <DS3231_GetRegByte>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4619      	mov	r1, r3
 8000d38:	200f      	movs	r0, #15
 8000d3a:	f7ff ff13 	bl	8000b64 <DS3231_SetRegByte>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <DS3231_SetAlarm1Second>:

/**
 * @brief Set alarm 1 second to match. Does not change alarm 1 matching mode.
 * @param second Second, 0 to 59.
 */
void DS3231_SetAlarm1Second(uint8_t second){
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b084      	sub	sp, #16
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_SECOND) & 0x80;
 8000d50:	2007      	movs	r0, #7
 8000d52:	f7ff ff25 	bl	8000ba0 <DS3231_GetRegByte>
 8000d56:	4603      	mov	r3, r0
 8000d58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d5c:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m1 = temp | (DS3231_EncodeBCD(second) & 0x3f);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 fa71 	bl	8001248 <DS3231_EncodeBCD>
 8000d66:	4603      	mov	r3, r0
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b25b      	sxtb	r3, r3
 8000d78:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_SECOND, a1m1);
 8000d7a:	7bbb      	ldrb	r3, [r7, #14]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	2007      	movs	r0, #7
 8000d80:	f7ff fef0 	bl	8000b64 <DS3231_SetRegByte>
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <DS3231_SetAlarm1Minute>:

/**
 * @brief Set alarm 1 minute to match. Does not change alarm 1 matching mode.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetAlarm1Minute(uint8_t minute){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_MINUTE) & 0x80;
 8000d96:	2008      	movs	r0, #8
 8000d98:	f7ff ff02 	bl	8000ba0 <DS3231_GetRegByte>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000da2:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m2 = temp | (DS3231_EncodeBCD(minute) & 0x3f);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 fa4e 	bl	8001248 <DS3231_EncodeBCD>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000db4:	b25a      	sxtb	r2, r3
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_MINUTE, a1m2);
 8000dc0:	7bbb      	ldrb	r3, [r7, #14]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2008      	movs	r0, #8
 8000dc6:	f7ff fecd 	bl	8000b64 <DS3231_SetRegByte>
}
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <DS3231_SetAlarm1Hour>:

/**
 * @brief Set alarm 1 hour to match. Does not change alarm 1 matching mode.
 * @param hour Hour, 0 to 59.
 */
void DS3231_SetAlarm1Hour(uint8_t hour_24mode){
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_HOUR) & 0x80;
 8000ddc:	2009      	movs	r0, #9
 8000dde:	f7ff fedf 	bl	8000ba0 <DS3231_GetRegByte>
 8000de2:	4603      	mov	r3, r0
 8000de4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000de8:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m3 = temp | (DS3231_EncodeBCD(hour_24mode) & 0x3f);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fa2b 	bl	8001248 <DS3231_EncodeBCD>
 8000df2:	4603      	mov	r3, r0
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000dfa:	b25a      	sxtb	r2, r3
 8000dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_HOUR, a1m3);
 8000e06:	7bbb      	ldrb	r3, [r7, #14]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	2009      	movs	r0, #9
 8000e0c:	f7ff feaa 	bl	8000b64 <DS3231_SetRegByte>
}
 8000e10:	bf00      	nop
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <DS3231_SetAlarm1Day>:

/**
 * @brief Set alarm 1 day. Alarm 1 can only be set to match either date or day. Does not change alarm 1 matching mode.
 * @param day Days since last Sunday, 1 to 7.
 */
void DS3231_SetAlarm1Day(uint8_t day){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_DATE) & 0x80;
 8000e22:	200a      	movs	r0, #10
 8000e24:	f7ff febc 	bl	8000ba0 <DS3231_GetRegByte>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e2e:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m4 = temp | (0x01 << DS3231_DYDT) | (DS3231_EncodeBCD(day) & 0x3f);
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fa08 	bl	8001248 <DS3231_EncodeBCD>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	7bfb      	ldrb	r3, [r7, #15]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e4a:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_DATE, a1m4);
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	200a      	movs	r0, #10
 8000e52:	f7ff fe87 	bl	8000b64 <DS3231_SetRegByte>
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <DS3231_SetAlarm1Mode>:

/**
 * @brief Set alarm 1 mode.
 * @param alarmMode Alarm 1 mode, DS3231_A1_EVERY_S, DS3231_A1_MATCH_S, DS3231_A1_MATCH_S_M, DS3231_A1_MATCH_S_M_H, DS3231_A1_MATCH_S_M_H_DATE or DS3231_A1_MATCH_S_M_H_DAY.
 */
void DS3231_SetAlarm1Mode(DS3231_Alarm1Mode alarmMode){
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	4603      	mov	r3, r0
 8000e66:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	temp = DS3231_GetRegByte(DS3231_A1_SECOND) & 0x7f;
 8000e68:	2007      	movs	r0, #7
 8000e6a:	f7ff fe99 	bl	8000ba0 <DS3231_GetRegByte>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e74:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_SECOND, temp | (((alarmMode >> 0) & 0x01) << DS3231_AXMY));
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	01db      	lsls	r3, r3, #7
 8000e7a:	b25a      	sxtb	r2, r3
 8000e7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b25b      	sxtb	r3, r3
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4619      	mov	r1, r3
 8000e88:	2007      	movs	r0, #7
 8000e8a:	f7ff fe6b 	bl	8000b64 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_MINUTE) & 0x7f;
 8000e8e:	2008      	movs	r0, #8
 8000e90:	f7ff fe86 	bl	8000ba0 <DS3231_GetRegByte>
 8000e94:	4603      	mov	r3, r0
 8000e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e9a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_MINUTE, temp | (((alarmMode >> 1) & 0x01) << DS3231_AXMY));
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	085b      	lsrs	r3, r3, #1
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	01db      	lsls	r3, r3, #7
 8000ea4:	b25a      	sxtb	r2, r3
 8000ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2008      	movs	r0, #8
 8000eb4:	f7ff fe56 	bl	8000b64 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_HOUR) & 0x7f;
 8000eb8:	2009      	movs	r0, #9
 8000eba:	f7ff fe71 	bl	8000ba0 <DS3231_GetRegByte>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ec4:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_HOUR, temp | (((alarmMode >> 2) & 0x01) << DS3231_AXMY));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	01db      	lsls	r3, r3, #7
 8000ece:	b25a      	sxtb	r2, r3
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	4619      	mov	r1, r3
 8000edc:	2009      	movs	r0, #9
 8000ede:	f7ff fe41 	bl	8000b64 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_DATE) & 0x7f;
 8000ee2:	200a      	movs	r0, #10
 8000ee4:	f7ff fe5c 	bl	8000ba0 <DS3231_GetRegByte>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000eee:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_DATE, temp | (((alarmMode >> 3) & 0x01) << DS3231_AXMY) | (alarmMode & 0x80));
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	08db      	lsrs	r3, r3, #3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	01db      	lsls	r3, r3, #7
 8000ef8:	b25a      	sxtb	r2, r3
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	b25a      	sxtb	r2, r3
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000f0a:	b25b      	sxtb	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	b25b      	sxtb	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	4619      	mov	r1, r3
 8000f14:	200a      	movs	r0, #10
 8000f16:	f7ff fe25 	bl	8000b64 <DS3231_SetRegByte>
}
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <DS3231_IsAlarm1Triggered>:

/**
 * @brief Check if alarm 1 is triggered.
 * @return A1F flag bit, 0 or 1.
 */
uint8_t DS3231_IsAlarm1Triggered(){
 8000f22:	b580      	push	{r7, lr}
 8000f24:	af00      	add	r7, sp, #0
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_A1F) & 0x01;
 8000f26:	200f      	movs	r0, #15
 8000f28:	f7ff fe3a 	bl	8000ba0 <DS3231_GetRegByte>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	b2db      	uxtb	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8000f3c:	2003      	movs	r0, #3
 8000f3e:	f7ff fe2f 	bl	8000ba0 <DS3231_GetRegByte>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 f966 	bl	8001216 <DS3231_DecodeBCD>
 8000f4a:	4603      	mov	r3, r0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 8000f54:	2004      	movs	r0, #4
 8000f56:	f7ff fe23 	bl	8000ba0 <DS3231_GetRegByte>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 f95a 	bl	8001216 <DS3231_DecodeBCD>
 8000f62:	4603      	mov	r3, r0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8000f6c:	2005      	movs	r0, #5
 8000f6e:	f7ff fe17 	bl	8000ba0 <DS3231_GetRegByte>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f94b 	bl	8001216 <DS3231_DecodeBCD>
 8000f80:	4603      	mov	r3, r0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f7ff fe07 	bl	8000ba0 <DS3231_GetRegByte>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 f93e 	bl	8001216 <DS3231_DecodeBCD>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8000f9e:	2005      	movs	r0, #5
 8000fa0:	f7ff fdfe 	bl	8000ba0 <DS3231_GetRegByte>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	09db      	lsrs	r3, r3, #7
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	4413      	add	r3, r2
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	0091      	lsls	r1, r2, #2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4413      	add	r3, r2
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000fc4:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	88bb      	ldrh	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	b29b      	uxth	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8000fdc:	2002      	movs	r0, #2
 8000fde:	f7ff fddf 	bl	8000ba0 <DS3231_GetRegByte>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f916 	bl	8001216 <DS3231_DecodeBCD>
 8000fea:	4603      	mov	r3, r0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff fdd3 	bl	8000ba0 <DS3231_GetRegByte>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f90a 	bl	8001216 <DS3231_DecodeBCD>
 8001002:	4603      	mov	r3, r0
}
 8001004:	4618      	mov	r0, r3
 8001006:	bd80      	pop	{r7, pc}

08001008 <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 800100c:	2000      	movs	r0, #0
 800100e:	f7ff fdc7 	bl	8000ba0 <DS3231_GetRegByte>
 8001012:	4603      	mov	r3, r0
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8fe 	bl	8001216 <DS3231_DecodeBCD>
 800101a:	4603      	mov	r3, r0
}
 800101c:	4618      	mov	r0, r3
 800101e:	bd80      	pop	{r7, pc}

08001020 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f90b 	bl	8001248 <DS3231_EncodeBCD>
 8001032:	4603      	mov	r3, r0
 8001034:	4619      	mov	r1, r3
 8001036:	2003      	movs	r0, #3
 8001038:	f7ff fd94 	bl	8000b64 <DS3231_SetRegByte>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <DS3231_SetDate>:

/**
 * @brief Set the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS3231_SetDate(uint8_t date) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f000 f8f9 	bl	8001248 <DS3231_EncodeBCD>
 8001056:	4603      	mov	r3, r0
 8001058:	4619      	mov	r1, r3
 800105a:	2004      	movs	r0, #4
 800105c:	f7ff fd82 	bl	8000b64 <DS3231_SetRegByte>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <DS3231_SetMonth>:

/**
 * @brief Set the current month.
 * @param month Month, 1 to 12.
 */
void DS3231_SetMonth(uint8_t month) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8001072:	2005      	movs	r0, #5
 8001074:	f7ff fd94 	bl	8000ba0 <DS3231_GetRegByte>
 8001078:	4603      	mov	r3, r0
 800107a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800107e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f8e0 	bl	8001248 <DS3231_EncodeBCD>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	4313      	orrs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	4619      	mov	r1, r3
 8001094:	2005      	movs	r0, #5
 8001096:	f7ff fd65 	bl	8000b64 <DS3231_SetRegByte>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <DS3231_SetYear>:

/**
 * @brief Set the current year.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetYear(uint16_t year) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
	uint8_t century = (year / 100) % 20;
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <DS3231_SetYear+0x80>)
 80010b2:	fba2 2303 	umull	r2, r3, r2, r3
 80010b6:	095b      	lsrs	r3, r3, #5
 80010b8:	b29a      	uxth	r2, r3
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <DS3231_SetYear+0x84>)
 80010bc:	fba3 1302 	umull	r1, r3, r3, r2
 80010c0:	0919      	lsrs	r1, r3, #4
 80010c2:	460b      	mov	r3, r1
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	73fb      	strb	r3, [r7, #15]
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 80010d0:	2005      	movs	r0, #5
 80010d2:	f7ff fd65 	bl	8000ba0 <DS3231_GetRegByte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80010de:	b25a      	sxtb	r2, r3
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	01db      	lsls	r3, r3, #7
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 80010ec:	7bbb      	ldrb	r3, [r7, #14]
 80010ee:	4619      	mov	r1, r3
 80010f0:	2005      	movs	r0, #5
 80010f2:	f7ff fd37 	bl	8000b64 <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <DS3231_SetYear+0x80>)
 80010fa:	fba2 1203 	umull	r1, r2, r2, r3
 80010fe:	0952      	lsrs	r2, r2, #5
 8001100:	2164      	movs	r1, #100	; 0x64
 8001102:	fb01 f202 	mul.w	r2, r1, r2
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	b29b      	uxth	r3, r3
 800110a:	b2db      	uxtb	r3, r3
 800110c:	4618      	mov	r0, r3
 800110e:	f000 f89b 	bl	8001248 <DS3231_EncodeBCD>
 8001112:	4603      	mov	r3, r0
 8001114:	4619      	mov	r1, r3
 8001116:	2006      	movs	r0, #6
 8001118:	f7ff fd24 	bl	8000b64 <DS3231_SetRegByte>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	51eb851f 	.word	0x51eb851f
 8001128:	cccccccd 	.word	0xcccccccd

0800112c <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f000 f882 	bl	8001248 <DS3231_EncodeBCD>
 8001144:	4603      	mov	r3, r0
 8001146:	4619      	mov	r1, r3
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fd0b 	bl	8000b64 <DS3231_SetRegByte>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	4618      	mov	r0, r3
 8001164:	f000 f870 	bl	8001248 <DS3231_EncodeBCD>
 8001168:	4603      	mov	r3, r0
 800116a:	4619      	mov	r1, r3
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff fcf9 	bl	8000b64 <DS3231_SetRegByte>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f85e 	bl	8001248 <DS3231_EncodeBCD>
 800118c:	4603      	mov	r3, r0
 800118e:	4619      	mov	r1, r3
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fce7 	bl	8000b64 <DS3231_SetRegByte>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
 80011a8:	460b      	mov	r3, r1
 80011aa:	71bb      	strb	r3, [r7, #6]
 80011ac:	4613      	mov	r3, r2
 80011ae:	717b      	strb	r3, [r7, #5]
	DS3231_SetHour(hour_24mode);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffba 	bl	800112c <DS3231_SetHour>
	DS3231_SetMinute(minute);
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffcb 	bl	8001156 <DS3231_SetMinute>
	DS3231_SetSecond(second);
 80011c0:	797b      	ldrb	r3, [r7, #5]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ffd9 	bl	800117a <DS3231_SetSecond>
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <DS3231_SetFullDate>:
 * @param date Date, 0 to 31.
 * @param month Month, 1 to 12.
 * @param dow Days since last Sunday, 1 to 7.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetFullDate(uint8_t date, uint8_t month, uint8_t dow, uint16_t year){
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4604      	mov	r4, r0
 80011d8:	4608      	mov	r0, r1
 80011da:	4611      	mov	r1, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	4623      	mov	r3, r4
 80011e0:	71fb      	strb	r3, [r7, #7]
 80011e2:	4603      	mov	r3, r0
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	460b      	mov	r3, r1
 80011e8:	717b      	strb	r3, [r7, #5]
 80011ea:	4613      	mov	r3, r2
 80011ec:	807b      	strh	r3, [r7, #2]
	DS3231_SetDate(date);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff27 	bl	8001044 <DS3231_SetDate>
	DS3231_SetMonth(month);
 80011f6:	79bb      	ldrb	r3, [r7, #6]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff35 	bl	8001068 <DS3231_SetMonth>
	DS3231_SetDayOfWeek(dow);
 80011fe:	797b      	ldrb	r3, [r7, #5]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff0d 	bl	8001020 <DS3231_SetDayOfWeek>
	DS3231_SetYear(year);
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff4b 	bl	80010a4 <DS3231_SetYear>
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}

08001216 <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	091b      	lsrs	r3, r3, #4
 8001224:	b2db      	uxtb	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	4413      	add	r3, r2
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	b2da      	uxtb	r2, r3
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4413      	add	r3, r2
 800123a:	b2db      	uxtb	r3, r3
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8001252:	79fa      	ldrb	r2, [r7, #7]
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <DS3231_EncodeBCD+0x40>)
 8001256:	fba3 1302 	umull	r1, r3, r3, r2
 800125a:	08d9      	lsrs	r1, r3, #3
 800125c:	460b      	mov	r3, r1
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	b2da      	uxtb	r2, r3
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4907      	ldr	r1, [pc, #28]	; (8001288 <DS3231_EncodeBCD+0x40>)
 800126c:	fba1 1303 	umull	r1, r3, r1, r3
 8001270:	08db      	lsrs	r3, r3, #3
 8001272:	b2db      	uxtb	r3, r3
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	b2db      	uxtb	r3, r3
 8001278:	4413      	add	r3, r2
 800127a:	b2db      	uxtb	r3, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	cccccccd 	.word	0xcccccccd

0800128c <MX_GPIO_Init>:
     PC5   ------> ETH_RXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
 80012a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012a2:	4b9c      	ldr	r3, [pc, #624]	; (8001514 <MX_GPIO_Init+0x288>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a9b      	ldr	r2, [pc, #620]	; (8001514 <MX_GPIO_Init+0x288>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b99      	ldr	r3, [pc, #612]	; (8001514 <MX_GPIO_Init+0x288>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	623b      	str	r3, [r7, #32]
 80012b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ba:	4b96      	ldr	r3, [pc, #600]	; (8001514 <MX_GPIO_Init+0x288>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a95      	ldr	r2, [pc, #596]	; (8001514 <MX_GPIO_Init+0x288>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b93      	ldr	r3, [pc, #588]	; (8001514 <MX_GPIO_Init+0x288>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d2:	4b90      	ldr	r3, [pc, #576]	; (8001514 <MX_GPIO_Init+0x288>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a8f      	ldr	r2, [pc, #572]	; (8001514 <MX_GPIO_Init+0x288>)
 80012d8:	f043 0320 	orr.w	r3, r3, #32
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b8d      	ldr	r3, [pc, #564]	; (8001514 <MX_GPIO_Init+0x288>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0320 	and.w	r3, r3, #32
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ea:	4b8a      	ldr	r3, [pc, #552]	; (8001514 <MX_GPIO_Init+0x288>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a89      	ldr	r2, [pc, #548]	; (8001514 <MX_GPIO_Init+0x288>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b87      	ldr	r3, [pc, #540]	; (8001514 <MX_GPIO_Init+0x288>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	4b84      	ldr	r3, [pc, #528]	; (8001514 <MX_GPIO_Init+0x288>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a83      	ldr	r2, [pc, #524]	; (8001514 <MX_GPIO_Init+0x288>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b81      	ldr	r3, [pc, #516]	; (8001514 <MX_GPIO_Init+0x288>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	4b7e      	ldr	r3, [pc, #504]	; (8001514 <MX_GPIO_Init+0x288>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a7d      	ldr	r2, [pc, #500]	; (8001514 <MX_GPIO_Init+0x288>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b7b      	ldr	r3, [pc, #492]	; (8001514 <MX_GPIO_Init+0x288>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	4b78      	ldr	r3, [pc, #480]	; (8001514 <MX_GPIO_Init+0x288>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a77      	ldr	r2, [pc, #476]	; (8001514 <MX_GPIO_Init+0x288>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b75      	ldr	r3, [pc, #468]	; (8001514 <MX_GPIO_Init+0x288>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800134a:	4b72      	ldr	r3, [pc, #456]	; (8001514 <MX_GPIO_Init+0x288>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a71      	ldr	r2, [pc, #452]	; (8001514 <MX_GPIO_Init+0x288>)
 8001350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b6f      	ldr	r3, [pc, #444]	; (8001514 <MX_GPIO_Init+0x288>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	2168      	movs	r1, #104	; 0x68
 8001366:	486c      	ldr	r0, [pc, #432]	; (8001518 <MX_GPIO_Init+0x28c>)
 8001368:	f005 f83c 	bl	80063e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	486a      	ldr	r0, [pc, #424]	; (800151c <MX_GPIO_Init+0x290>)
 8001372:	f005 f837 	bl	80063e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800137c:	4868      	ldr	r0, [pc, #416]	; (8001520 <MX_GPIO_Init+0x294>)
 800137e:	f005 f831 	bl	80063e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	4867      	ldr	r0, [pc, #412]	; (8001524 <MX_GPIO_Init+0x298>)
 8001388:	f005 f82c 	bl	80063e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 800138c:	2314      	movs	r3, #20
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139c:	4619      	mov	r1, r3
 800139e:	485e      	ldr	r0, [pc, #376]	; (8001518 <MX_GPIO_Init+0x28c>)
 80013a0:	f004 fe5c 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80013a4:	2368      	movs	r3, #104	; 0x68
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4857      	ldr	r0, [pc, #348]	; (8001518 <MX_GPIO_Init+0x28c>)
 80013bc:	f004 fe4e 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	4852      	ldr	r0, [pc, #328]	; (8001520 <MX_GPIO_Init+0x294>)
 80013d6:	f004 fe41 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80013da:	2332      	movs	r3, #50	; 0x32
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ea:	230b      	movs	r3, #11
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	4619      	mov	r1, r3
 80013f4:	484a      	ldr	r0, [pc, #296]	; (8001520 <MX_GPIO_Init+0x294>)
 80013f6:	f004 fe31 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80013fa:	2386      	movs	r3, #134	; 0x86
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800140a:	230b      	movs	r3, #11
 800140c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4844      	ldr	r0, [pc, #272]	; (8001528 <MX_GPIO_Init+0x29c>)
 8001416:	f004 fe21 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800141a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001420:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001426:	2301      	movs	r3, #1
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800142a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142e:	4619      	mov	r1, r3
 8001430:	4839      	ldr	r0, [pc, #228]	; (8001518 <MX_GPIO_Init+0x28c>)
 8001432:	f004 fe13 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001436:	f44f 4334 	mov.w	r3, #46080	; 0xb400
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4836      	ldr	r0, [pc, #216]	; (8001524 <MX_GPIO_Init+0x298>)
 800144c:	f004 fe06 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001450:	2340      	movs	r3, #64	; 0x40
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	482d      	ldr	r0, [pc, #180]	; (800151c <MX_GPIO_Init+0x290>)
 8001468:	f004 fdf8 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4827      	ldr	r0, [pc, #156]	; (800151c <MX_GPIO_Init+0x290>)
 8001480:	f004 fdec 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8001484:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001496:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149a:	4619      	mov	r1, r3
 800149c:	4820      	ldr	r0, [pc, #128]	; (8001520 <MX_GPIO_Init+0x294>)
 800149e:	f004 fddd 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b4:	4619      	mov	r1, r3
 80014b6:	481c      	ldr	r0, [pc, #112]	; (8001528 <MX_GPIO_Init+0x29c>)
 80014b8:	f004 fdd0 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ce:	230b      	movs	r3, #11
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4810      	ldr	r0, [pc, #64]	; (800151c <MX_GPIO_Init+0x290>)
 80014da:	f004 fdbf 	bl	800605c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <MX_GPIO_Init+0x298>)
 80014f6:	f004 fdb1 	bl	800605c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	f004 f9fd 	bl	80058fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001504:	2028      	movs	r0, #40	; 0x28
 8001506:	f004 fa16 	bl	8005936 <HAL_NVIC_EnableIRQ>

}
 800150a:	bf00      	nop
 800150c:	3738      	adds	r7, #56	; 0x38
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40021000 	.word	0x40021000
 800151c:	40021800 	.word	0x40021800
 8001520:	40020800 	.word	0x40020800
 8001524:	40020400 	.word	0x40020400
 8001528:	40020000 	.word	0x40020000

0800152c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <MX_I2C1_Init+0x7c>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_I2C1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_I2C1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001568:	f004 ff7a 	bl	8006460 <HAL_I2C_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001572:	f002 f81b 	bl	80035ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_I2C1_Init+0x74>)
 800157a:	f005 fc57 	bl	8006e2c <HAL_I2CEx_ConfigAnalogFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001584:	f002 f812 	bl	80035ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_I2C1_Init+0x74>)
 800158c:	f005 fc99 	bl	8006ec2 <HAL_I2CEx_ConfigDigitalFilter>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001596:	f002 f809 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000036c 	.word	0x2000036c
 80015a4:	40005400 	.word	0x40005400
 80015a8:	00c0eaff 	.word	0x00c0eaff

080015ac <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	; (8001620 <MX_I2C4_Init+0x74>)
 80015b2:	4a1c      	ldr	r2, [pc, #112]	; (8001624 <MX_I2C4_Init+0x78>)
 80015b4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <MX_I2C4_Init+0x74>)
 80015b8:	4a1b      	ldr	r2, [pc, #108]	; (8001628 <MX_I2C4_Init+0x7c>)
 80015ba:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80015bc:	4b18      	ldr	r3, [pc, #96]	; (8001620 <MX_I2C4_Init+0x74>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <MX_I2C4_Init+0x74>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <MX_I2C4_Init+0x74>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <MX_I2C4_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <MX_I2C4_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015da:	4b11      	ldr	r3, [pc, #68]	; (8001620 <MX_I2C4_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <MX_I2C4_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80015e6:	480e      	ldr	r0, [pc, #56]	; (8001620 <MX_I2C4_Init+0x74>)
 80015e8:	f004 ff3a 	bl	8006460 <HAL_I2C_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80015f2:	f001 ffdb 	bl	80035ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015f6:	2100      	movs	r1, #0
 80015f8:	4809      	ldr	r0, [pc, #36]	; (8001620 <MX_I2C4_Init+0x74>)
 80015fa:	f005 fc17 	bl	8006e2c <HAL_I2CEx_ConfigAnalogFilter>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001604:	f001 ffd2 	bl	80035ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001608:	2100      	movs	r1, #0
 800160a:	4805      	ldr	r0, [pc, #20]	; (8001620 <MX_I2C4_Init+0x74>)
 800160c:	f005 fc59 	bl	8006ec2 <HAL_I2CEx_ConfigDigitalFilter>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001616:	f001 ffc9 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200003c0 	.word	0x200003c0
 8001624:	40006000 	.word	0x40006000
 8001628:	00c0eaff 	.word	0x00c0eaff

0800162c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b0b0      	sub	sp, #192	; 0xc0
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001644:	f107 031c 	add.w	r3, r7, #28
 8001648:	2290      	movs	r2, #144	; 0x90
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f009 ff52 	bl	800b4f6 <memset>
  if(i2cHandle->Instance==I2C1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a44      	ldr	r2, [pc, #272]	; (8001768 <HAL_I2C_MspInit+0x13c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d13e      	bne.n	80016da <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800165c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001660:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4618      	mov	r0, r3
 800166e:	f006 f9a9 	bl	80079c4 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001678:	f001 ff98 	bl	80035ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4b3b      	ldr	r3, [pc, #236]	; (800176c <HAL_I2C_MspInit+0x140>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a3a      	ldr	r2, [pc, #232]	; (800176c <HAL_I2C_MspInit+0x140>)
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	6313      	str	r3, [r2, #48]	; 0x30
 8001688:	4b38      	ldr	r3, [pc, #224]	; (800176c <HAL_I2C_MspInit+0x140>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001694:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169c:	2312      	movs	r3, #18
 800169e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016ae:	2304      	movs	r3, #4
 80016b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016b8:	4619      	mov	r1, r3
 80016ba:	482d      	ldr	r0, [pc, #180]	; (8001770 <HAL_I2C_MspInit+0x144>)
 80016bc:	f004 fcce 	bl	800605c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016c0:	4b2a      	ldr	r3, [pc, #168]	; (800176c <HAL_I2C_MspInit+0x140>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a29      	ldr	r2, [pc, #164]	; (800176c <HAL_I2C_MspInit+0x140>)
 80016c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b27      	ldr	r3, [pc, #156]	; (800176c <HAL_I2C_MspInit+0x140>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80016d8:	e042      	b.n	8001760 <HAL_I2C_MspInit+0x134>
  else if(i2cHandle->Instance==I2C4)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a25      	ldr	r2, [pc, #148]	; (8001774 <HAL_I2C_MspInit+0x148>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d13d      	bne.n	8001760 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80016e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4618      	mov	r0, r3
 80016f6:	f006 f965 	bl	80079c4 <HAL_RCCEx_PeriphCLKConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001700:	f001 ff54 	bl	80035ac <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001704:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_I2C_MspInit+0x140>)
 8001706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001708:	4a18      	ldr	r2, [pc, #96]	; (800176c <HAL_I2C_MspInit+0x140>)
 800170a:	f043 0320 	orr.w	r3, r3, #32
 800170e:	6313      	str	r3, [r2, #48]	; 0x30
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_I2C_MspInit+0x140>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	613b      	str	r3, [r7, #16]
 800171a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800171c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001720:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001724:	2312      	movs	r3, #18
 8001726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001736:	2304      	movs	r3, #4
 8001738:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800173c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001740:	4619      	mov	r1, r3
 8001742:	480d      	ldr	r0, [pc, #52]	; (8001778 <HAL_I2C_MspInit+0x14c>)
 8001744:	f004 fc8a 	bl	800605c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001748:	4b08      	ldr	r3, [pc, #32]	; (800176c <HAL_I2C_MspInit+0x140>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a07      	ldr	r2, [pc, #28]	; (800176c <HAL_I2C_MspInit+0x140>)
 800174e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_I2C_MspInit+0x140>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
}
 8001760:	bf00      	nop
 8001762:	37c0      	adds	r7, #192	; 0xc0
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40005400 	.word	0x40005400
 800176c:	40023800 	.word	0x40023800
 8001770:	40020400 	.word	0x40020400
 8001774:	40006000 	.word	0x40006000
 8001778:	40021400 	.word	0x40021400

0800177c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001780:	f3bf 8f4f 	dsb	sy
}
 8001784:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001786:	f3bf 8f6f 	isb	sy
}
 800178a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800178c:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <SCB_EnableICache+0x48>)
 800178e:	2200      	movs	r2, #0
 8001790:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001794:	f3bf 8f4f 	dsb	sy
}
 8001798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800179a:	f3bf 8f6f 	isb	sy
}
 800179e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <SCB_EnableICache+0x48>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <SCB_EnableICache+0x48>)
 80017a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80017ac:	f3bf 8f4f 	dsb	sy
}
 80017b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017b2:	f3bf 8f6f 	isb	sy
}
 80017b6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <SCB_EnableDCache+0x84>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80017d6:	f3bf 8f4f 	dsb	sy
}
 80017da:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <SCB_EnableDCache+0x84>)
 80017de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017e2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	0b5b      	lsrs	r3, r3, #13
 80017e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80017ec:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017f6:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8001800:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001806:	4911      	ldr	r1, [pc, #68]	; (800184c <SCB_EnableDCache+0x84>)
 8001808:	4313      	orrs	r3, r2
 800180a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ef      	bne.n	80017f8 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	1e5a      	subs	r2, r3, #1
 800181c:	60fa      	str	r2, [r7, #12]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1e5      	bne.n	80017ee <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8001822:	f3bf 8f4f 	dsb	sy
}
 8001826:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <SCB_EnableDCache+0x84>)
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	4a07      	ldr	r2, [pc, #28]	; (800184c <SCB_EnableDCache+0x84>)
 800182e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001832:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001834:	f3bf 8f4f 	dsb	sy
}
 8001838:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183a:	f3bf 8f6f 	isb	sy
}
 800183e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <sendStringViaUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendStringViaUART(const char *str) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7fe fd41 	bl	80002e0 <strlen>
 800185e:	4603      	mov	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <sendStringViaUART+0x28>)
 800186a:	f008 fc11 	bl	800a090 <HAL_UART_Transmit>
}
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000794 	.word	0x20000794

0800187c <generateAndSortRandomNumbers>:

void generateAndSortRandomNumbers(uint32_t array[], uint32_t size) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b09e      	sub	sp, #120	; 0x78
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < size; i++) {
 8001886:	2300      	movs	r3, #0
 8001888:	677b      	str	r3, [r7, #116]	; 0x74
 800188a:	e012      	b.n	80018b2 <generateAndSortRandomNumbers+0x36>
    array[i] = abs(HAL_RNG_GetRandomNumber(&hrng)) % 4 + 1;
 800188c:	481b      	ldr	r0, [pc, #108]	; (80018fc <generateAndSortRandomNumbers+0x80>)
 800188e:	f006 fd41 	bl	8008314 <HAL_RNG_GetRandomNumber>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	bfb8      	it	lt
 8001898:	425b      	neglt	r3, r3
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	1c59      	adds	r1, r3, #1
 80018a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	460a      	mov	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < size; i++) {
 80018ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ae:	3301      	adds	r3, #1
 80018b0:	677b      	str	r3, [r7, #116]	; 0x74
 80018b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d3e8      	bcc.n	800188c <generateAndSortRandomNumbers+0x10>
  }

  char message[100];

  for (int i = 0; i < 4; i++) {
 80018ba:	2300      	movs	r3, #0
 80018bc:	673b      	str	r3, [r7, #112]	; 0x70
 80018be:	e012      	b.n	80018e6 <generateAndSortRandomNumbers+0x6a>
    sprintf(message, "%d ", array[i]);
 80018c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	490c      	ldr	r1, [pc, #48]	; (8001900 <generateAndSortRandomNumbers+0x84>)
 80018d0:	4618      	mov	r0, r3
 80018d2:	f009 fdad 	bl	800b430 <siprintf>
    sendStringViaUART(message);
 80018d6:	f107 030c 	add.w	r3, r7, #12
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ffb8 	bl	8001850 <sendStringViaUART>
  for (int i = 0; i < 4; i++) {
 80018e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e2:	3301      	adds	r3, #1
 80018e4:	673b      	str	r3, [r7, #112]	; 0x70
 80018e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	dde9      	ble.n	80018c0 <generateAndSortRandomNumbers+0x44>
  }
  sendStringViaUART(space);
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <generateAndSortRandomNumbers+0x88>)
 80018ee:	f7ff ffaf 	bl	8001850 <sendStringViaUART>
}
 80018f2:	bf00      	nop
 80018f4:	3778      	adds	r7, #120	; 0x78
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000554 	.word	0x20000554
 8001900:	0800d734 	.word	0x0800d734
 8001904:	2000006c 	.word	0x2000006c

08001908 <compareArrays>:

int compareArrays(int array1[], int array2[], int size) {
 8001908:	b480      	push	{r7}
 800190a:	b087      	sub	sp, #28
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
    int match = 1;  // Assume arrays match initially
 8001914:	2301      	movs	r3, #1
 8001916:	617b      	str	r3, [r7, #20]

    // Compare elements of the arrays
    for (int i = 0; i < size; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	e011      	b.n	8001942 <compareArrays+0x3a>
        if (array1[i] != array2[i]) {
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4413      	add	r3, r2
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	440b      	add	r3, r1
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d002      	beq.n	800193c <compareArrays+0x34>
            match = 0;  // Arrays do not match
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
            break;
 800193a:	e006      	b.n	800194a <compareArrays+0x42>
    for (int i = 0; i < size; i++) {
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	3301      	adds	r3, #1
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbe9      	blt.n	800191e <compareArrays+0x16>
        }
    }

    if (match) {
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <compareArrays+0x4c>
    	return 1;
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <compareArrays+0x4e>
    	//char message[] = "Match\r\n";
    	//HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
    } else {
    	return 0;
 8001954:	2300      	movs	r3, #0
    	//char message[] = "Not Match\r\n";
    	//HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
    }
}
 8001956:	4618      	mov	r0, r3
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <letTheMusicLouderThanAnySound>:

void letTheMusicLouderThanAnySound(float dt){
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	ed87 0a01 	vstr	s0, [r7, #4]


	float dutycycle = dt;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60fb      	str	r3, [r7, #12]
	    htim2.Instance -> CCR3 = (24-1) * dutycycle;
 8001972:	edd7 7a03 	vldr	s15, [r7, #12]
 8001976:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 800197a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <letTheMusicLouderThanAnySound+0x5c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001986:	ee17 2a90 	vmov	r2, s15
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800198c:	210c      	movs	r1, #12
 800198e:	480c      	ldr	r0, [pc, #48]	; (80019c0 <letTheMusicLouderThanAnySound+0x5c>)
 8001990:	f007 f99e 	bl	8008cd0 <HAL_TIM_PWM_Start>
	    HAL_Delay(1000);
 8001994:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001998:	f003 fa84 	bl	8004ea4 <HAL_Delay>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 800199c:	210c      	movs	r1, #12
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <letTheMusicLouderThanAnySound+0x5c>)
 80019a0:	f007 fa90 	bl	8008ec4 <HAL_TIM_PWM_Stop>
	    pwm = (GPIOA->IDR & GPIO_PIN_3) >> 3;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <letTheMusicLouderThanAnySound+0x60>)
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <letTheMusicLouderThanAnySound+0x64>)
 80019b4:	701a      	strb	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000618 	.word	0x20000618
 80019c4:	40020000 	.word	0x40020000
 80019c8:	20000530 	.word	0x20000530

080019cc <pabfai>:

void pabfai(int dt){
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]


		float duty = (float)dt/100.0;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019de:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a20 <pabfai+0x54>
 80019e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e6:	edc7 7a03 	vstr	s15, [r7, #12]
	    htim5.Instance -> CCR3 = (1000-1) * duty;
 80019ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ee:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001a24 <pabfai+0x58>
 80019f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f6:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <pabfai+0x5c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019fe:	ee17 2a90 	vmov	r2, s15
 8001a02:	63da      	str	r2, [r3, #60]	; 0x3c
	    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001a04:	2100      	movs	r1, #0
 8001a06:	4808      	ldr	r0, [pc, #32]	; (8001a28 <pabfai+0x5c>)
 8001a08:	f007 f962 	bl	8008cd0 <HAL_TIM_PWM_Start>
//	    HAL_Delay(1000);
//	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_);
	    pwm = (GPIOA->IDR & GPIO_PIN_0) >> 9;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <pabfai+0x60>)
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <pabfai+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]

}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	42c80000 	.word	0x42c80000
 8001a24:	4479c000 	.word	0x4479c000
 8001a28:	200006fc 	.word	0x200006fc
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	20000530 	.word	0x20000530

08001a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b0a0      	sub	sp, #128	; 0x80
 8001a38:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001a3a:	f7ff fe9f 	bl	800177c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001a3e:	f7ff fec3 	bl	80017c8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a42:	f003 f9c9 	bl	8004dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a46:	f000 fa3f 	bl	8001ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4a:	f7ff fc1f 	bl	800128c <MX_GPIO_Init>
  MX_DMA_Init();
 8001a4e:	f7ff f851 	bl	8000af4 <MX_DMA_Init>
  MX_SPI5_Init();
 8001a52:	f001 fdf7 	bl	8003644 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001a56:	f001 ffcb 	bl	80039f0 <MX_TIM1_Init>
  MX_RNG_Init();
 8001a5a:	f001 fdab 	bl	80035b4 <MX_RNG_Init>
  MX_I2C4_Init();
 8001a5e:	f7ff fda5 	bl	80015ac <MX_I2C4_Init>
  MX_TIM2_Init();
 8001a62:	f002 f871 	bl	8003b48 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001a66:	f7ff fd61 	bl	800152c <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8001a6a:	f002 fb57 	bl	800411c <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001a6e:	f002 f8c5 	bl	8003bfc <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001a72:	f002 fb23 	bl	80040bc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8001a76:	f7fe ff6b 	bl	8000950 <MX_ADC1_Init>
  MX_TIM5_Init();
 8001a7a:	f002 f95b 	bl	8003d34 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001a7e:	f002 f9d1 	bl	8003e24 <MX_TIM9_Init>
  MX_TIM4_Init();
 8001a82:	f002 f909 	bl	8003c98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8001a86:	f002 fe9f 	bl	80047c8 <ILI9341_Init>
  //HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_Base_Start_IT(&htim1);
 8001a8a:	4891      	ldr	r0, [pc, #580]	; (8001cd0 <main+0x29c>)
 8001a8c:	f007 f850 	bl	8008b30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001a90:	4890      	ldr	r0, [pc, #576]	; (8001cd4 <main+0x2a0>)
 8001a92:	f007 f84d 	bl	8008b30 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Init(&htim5);
 8001a96:	4890      	ldr	r0, [pc, #576]	; (8001cd8 <main+0x2a4>)
 8001a98:	f007 f8c2 	bl	8008c20 <HAL_TIM_PWM_Init>

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	488e      	ldr	r0, [pc, #568]	; (8001cd8 <main+0x2a4>)
 8001aa0:	f007 f916 	bl	8008cd0 <HAL_TIM_PWM_Start>


  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);

  HAL_UART_Init(&huart3);
 8001aa4:	488d      	ldr	r0, [pc, #564]	; (8001cdc <main+0x2a8>)
 8001aa6:	f008 faa5 	bl	8009ff4 <HAL_UART_Init>
  uint16_t mapColorByHourAndMinute(uint16_t hour, uint16_t minute);
  uint16_t complementaryColor(uint16_t color);



  DF_Init(30);
 8001aaa:	201e      	movs	r0, #30
 8001aac:	f7fe fe0e 	bl	80006cc <DF_Init>
	DF_PlayFromStart();
 8001ab0:	f7fe fddc 	bl	800066c <DF_PlayFromStart>
	DF_SetEQ(3);
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f7fe fde5 	bl	8000684 <DF_SetEQ>
	DS3231_Init(&hi2c4);
 8001aba:	4889      	ldr	r0, [pc, #548]	; (8001ce0 <main+0x2ac>)
 8001abc:	f7ff f838 	bl	8000b30 <DS3231_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
	__disable_irq();
	//Set interrupt mode to square wave mode, enable square wave interrupt at pin 3.
	DS3231_SetInterruptMode(DS3231_SQUARE_WAVE_INTERRUPT);
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	f7ff f88d 	bl	8000be4 <DS3231_SetInterruptMode>
	//Set interrupting frequency to 1 Hz.
	DS3231_SetRateSelect(DS3231_1HZ);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7ff f8aa 	bl	8000c24 <DS3231_SetRateSelect>
  __ASM volatile ("cpsie i" : : : "memory");
 8001ad0:	b662      	cpsie	i
}
 8001ad2:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    ILI9341_Fill_Screen(WHITE);
 8001ad4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ad8:	f003 f822 	bl	8004b20 <ILI9341_Fill_Screen>
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f002 fe15 	bl	800470c <ILI9341_Set_Rotation>
     starttime = count;
 8001ae2:	4b80      	ldr	r3, [pc, #512]	; (8001ce4 <main+0x2b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a80      	ldr	r2, [pc, #512]	; (8001ce8 <main+0x2b4>)
 8001ae8:	6013      	str	r3, [r2, #0]

     cmdBuffer[0] = 0x03;
 8001aea:	4b80      	ldr	r3, [pc, #512]	; (8001cec <main+0x2b8>)
 8001aec:	2203      	movs	r2, #3
 8001aee:	701a      	strb	r2, [r3, #0]
     cmdBuffer[1] = 0x00;
 8001af0:	4b7e      	ldr	r3, [pc, #504]	; (8001cec <main+0x2b8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	705a      	strb	r2, [r3, #1]
     cmdBuffer[2] = 0x04;
 8001af6:	4b7d      	ldr	r3, [pc, #500]	; (8001cec <main+0x2b8>)
 8001af8:	2204      	movs	r2, #4
 8001afa:	709a      	strb	r2, [r3, #2]
     //DS3231_SetFullDate(13, 10, 5, 2023);
     DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff f871 	bl	8000be4 <DS3231_SetInterruptMode>
	DS3231_ClearAlarm1Flag();
 8001b02:	f7ff f90a 	bl	8000d1a <DS3231_ClearAlarm1Flag>

	DS3231_EnableAlarm1(DS3231_ENABLED);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff f8e5 	bl	8000cd6 <DS3231_EnableAlarm1>
	DS3231_SetAlarm1Mode(DS3231_A1_MATCH_S_M_H_DAY);
 8001b0c:	2080      	movs	r0, #128	; 0x80
 8001b0e:	f7ff f9a6 	bl	8000e5e <DS3231_SetAlarm1Mode>
//	DS3231_SetAlarm1Second(5);
//	DS3231_SetAlarm1Minute(29);
//	DS3231_SetAlarm1Hour(19);
     ILI9341_Draw_Rectangle(0,0, 320,200,  WHITE);
 8001b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	23c8      	movs	r3, #200	; 0xc8
 8001b1a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2000      	movs	r0, #0
 8001b22:	f003 f8fd 	bl	8004d20 <ILI9341_Draw_Rectangle>
//	   	    pwm = (GPIOA->IDR & GPIO_PIN_3) >> 3;

	  // letTheMusicLouderThanAnySound(0.7);


	   HAL_ADC_Start_DMA(&hadc1, ADC_read, 2);
 8001b26:	2202      	movs	r2, #2
 8001b28:	4971      	ldr	r1, [pc, #452]	; (8001cf0 <main+0x2bc>)
 8001b2a:	4872      	ldr	r0, [pc, #456]	; (8001cf4 <main+0x2c0>)
 8001b2c:	f003 fa22 	bl	8004f74 <HAL_ADC_Start_DMA>
	   char message[20];
	   sprintf(message, "%d %d\r\n", ADC_read[0],ADC_read[1]);
 8001b30:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <main+0x2bc>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b6e      	ldr	r3, [pc, #440]	; (8001cf0 <main+0x2bc>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8001b3c:	496e      	ldr	r1, [pc, #440]	; (8001cf8 <main+0x2c4>)
 8001b3e:	f009 fc77 	bl	800b430 <siprintf>
	   HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 8001b42:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001b46:	f04f 33ff 	mov.w	r3, #4294967295
 8001b4a:	2214      	movs	r2, #20
 8001b4c:	4863      	ldr	r0, [pc, #396]	; (8001cdc <main+0x2a8>)
 8001b4e:	f008 fa9f 	bl	800a090 <HAL_UART_Transmit>




	   int TFT_level = ADC_read[1]*100/4095;
 8001b52:	4b67      	ldr	r3, [pc, #412]	; (8001cf0 <main+0x2bc>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2264      	movs	r2, #100	; 0x64
 8001b58:	fb03 f202 	mul.w	r2, r3, r2
 8001b5c:	4b67      	ldr	r3, [pc, #412]	; (8001cfc <main+0x2c8>)
 8001b5e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b62:	1ad2      	subs	r2, r2, r3
 8001b64:	0852      	lsrs	r2, r2, #1
 8001b66:	4413      	add	r3, r2
 8001b68:	0adb      	lsrs	r3, r3, #11
 8001b6a:	677b      	str	r3, [r7, #116]	; 0x74
	   char message2[20];
	   sprintf(message2, "TFT %d\r\n",TFT_level);
 8001b6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001b72:	4963      	ldr	r1, [pc, #396]	; (8001d00 <main+0x2cc>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f009 fc5b 	bl	800b430 <siprintf>
	  	   HAL_UART_Transmit(&huart3, (uint8_t *)message2, sizeof(message2), HAL_MAX_DELAY);
 8001b7a:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b82:	2214      	movs	r2, #20
 8001b84:	4855      	ldr	r0, [pc, #340]	; (8001cdc <main+0x2a8>)
 8001b86:	f008 fa83 	bl	800a090 <HAL_UART_Transmit>


	   pabfai(TFT_level);
 8001b8a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b8c:	f7ff ff1e 	bl	80019cc <pabfai>

	   // Debug time Tera term
	   if ( count - teratermTime > 3000){
 8001b90:	4b54      	ldr	r3, [pc, #336]	; (8001ce4 <main+0x2b0>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4b5b      	ldr	r3, [pc, #364]	; (8001d04 <main+0x2d0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d914      	bls.n	8001bcc <main+0x198>
		   char message[20];
		   sprintf(message, "%d\r\n", screen);
 8001ba2:	4b59      	ldr	r3, [pc, #356]	; (8001d08 <main+0x2d4>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bac:	4957      	ldr	r1, [pc, #348]	; (8001d0c <main+0x2d8>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f009 fc3e 	bl	800b430 <siprintf>
		   HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 8001bb4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbc:	2214      	movs	r2, #20
 8001bbe:	4847      	ldr	r0, [pc, #284]	; (8001cdc <main+0x2a8>)
 8001bc0:	f008 fa66 	bl	800a090 <HAL_UART_Transmit>
		   teratermTime = count;
 8001bc4:	4b47      	ldr	r3, [pc, #284]	; (8001ce4 <main+0x2b0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a4e      	ldr	r2, [pc, #312]	; (8001d04 <main+0x2d0>)
 8001bca:	6013      	str	r3, [r2, #0]

	   }

	   // If Alarm trigger
		if(alarmtrigger)
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <main+0x2dc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <main+0x1b6>
		{
			ILI9341_Fill_Screen(WHITE);
 8001bd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001bd8:	f002 ffa2 	bl	8004b20 <ILI9341_Fill_Screen>
			alarmtime = count;
 8001bdc:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <main+0x2b0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a4c      	ldr	r2, [pc, #304]	; (8001d14 <main+0x2e0>)
 8001be2:	6013      	str	r3, [r2, #0]
			alarm();
 8001be4:	f000 faa0 	bl	8002128 <alarm>
 8001be8:	e79d      	b.n	8001b26 <main+0xf2>
		   //alarmtrigger = 0;
		   //HAL_Delay(3000)
		}
		else{
	   // Screen state looping
	   switch(screen){
 8001bea:	4b47      	ldr	r3, [pc, #284]	; (8001d08 <main+0x2d4>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	f200 8132 	bhi.w	8001e5a <main+0x426>
 8001bf6:	a201      	add	r2, pc, #4	; (adr r2, 8001bfc <main+0x1c8>)
 8001bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bfc:	08001c0d 	.word	0x08001c0d
 8001c00:	08001d35 	.word	0x08001d35
 8001c04:	08001ddd 	.word	0x08001ddd
 8001c08:	08001e3b 	.word	0x08001e3b
	   case 1: // First state : show time
		   // Update screen every second

		   MusicController(ADC_read[0]);
 8001c0c:	4b38      	ldr	r3, [pc, #224]	; (8001cf0 <main+0x2bc>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fe07 	bl	8000824 <MusicController>


		   if((count-starttime) > 1000){
 8001c16:	4b33      	ldr	r3, [pc, #204]	; (8001ce4 <main+0x2b0>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <main+0x2b4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c24:	d91e      	bls.n	8001c64 <main+0x230>
				updateT();
 8001c26:	f000 fbc3 	bl	80023b0 <updateT>
				bgcolor = mapColorByHourAndMinute(hur,min);
 8001c2a:	4b3b      	ldr	r3, [pc, #236]	; (8001d18 <main+0x2e4>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	4a3a      	ldr	r2, [pc, #232]	; (8001d1c <main+0x2e8>)
 8001c32:	7812      	ldrb	r2, [r2, #0]
 8001c34:	b292      	uxth	r2, r2
 8001c36:	4611      	mov	r1, r2
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f001 fbad 	bl	8003398 <mapColorByHourAndMinute>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <main+0x2ec>)
 8001c44:	801a      	strh	r2, [r3, #0]
				fontcolor = complementaryColor(bgcolor);
 8001c46:	4b36      	ldr	r3, [pc, #216]	; (8001d20 <main+0x2ec>)
 8001c48:	881b      	ldrh	r3, [r3, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 fc24 	bl	8003498 <complementaryColor>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <main+0x2f0>)
 8001c56:	801a      	strh	r2, [r3, #0]

				showT();
 8001c58:	f000 fbea 	bl	8002430 <showT>
				starttime = count;
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <main+0x2b0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a21      	ldr	r2, [pc, #132]	; (8001ce8 <main+0x2b4>)
 8001c62:	6013      	str	r3, [r2, #0]
			}
//		   Check_Key();

			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c68:	482f      	ldr	r0, [pc, #188]	; (8001d28 <main+0x2f4>)
 8001c6a:	f004 fba3 	bl	80063b4 <HAL_GPIO_ReadPin>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d10f      	bne.n	8001c94 <main+0x260>
				 HAL_Delay(50);
 8001c74:	2032      	movs	r0, #50	; 0x32
 8001c76:	f003 f915 	bl	8004ea4 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7e:	482a      	ldr	r0, [pc, #168]	; (8001d28 <main+0x2f4>)
 8001c80:	f004 fb98 	bl	80063b4 <HAL_GPIO_ReadPin>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <main+0x260>
					DS3231_SetFullTime(21 , 12, 30);
 8001c8a:	221e      	movs	r2, #30
 8001c8c:	210c      	movs	r1, #12
 8001c8e:	2015      	movs	r0, #21
 8001c90:	f7ff fa85 	bl	800119e <DS3231_SetFullTime>
//			   alarmtime = count;
//			   alarmtrigger = 0;
//			   //HAL_Delay(3000)
//			}
			// Go to state 2
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && count - clicktime > 1000){
 8001c94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c98:	4824      	ldr	r0, [pc, #144]	; (8001d2c <main+0x2f8>)
 8001c9a:	f004 fb8b 	bl	80063b4 <HAL_GPIO_ReadPin>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f040 80d5 	bne.w	8001e50 <main+0x41c>
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <main+0x2b0>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <main+0x2fc>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cb4:	f240 80cc 	bls.w	8001e50 <main+0x41c>
					ILI9341_Fill_Screen(WHITE);
 8001cb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001cbc:	f002 ff30 	bl	8004b20 <ILI9341_Fill_Screen>
					clicktime = count;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <main+0x2b0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <main+0x2fc>)
 8001cc6:	6013      	str	r3, [r2, #0]
					screen = 2;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <main+0x2d4>)
 8001cca:	2202      	movs	r2, #2
 8001ccc:	701a      	strb	r2, [r3, #0]
			}

			break;
 8001cce:	e0bf      	b.n	8001e50 <main+0x41c>
 8001cd0:	200005cc 	.word	0x200005cc
 8001cd4:	20000664 	.word	0x20000664
 8001cd8:	200006fc 	.word	0x200006fc
 8001cdc:	20000794 	.word	0x20000794
 8001ce0:	200003c0 	.word	0x200003c0
 8001ce4:	20000414 	.word	0x20000414
 8001ce8:	20000418 	.word	0x20000418
 8001cec:	20000444 	.word	0x20000444
 8001cf0:	2000054c 	.word	0x2000054c
 8001cf4:	200002c0 	.word	0x200002c0
 8001cf8:	0800d738 	.word	0x0800d738
 8001cfc:	00100101 	.word	0x00100101
 8001d00:	0800d740 	.word	0x0800d740
 8001d04:	2000053c 	.word	0x2000053c
 8001d08:	20000004 	.word	0x20000004
 8001d0c:	0800d74c 	.word	0x0800d74c
 8001d10:	20000438 	.word	0x20000438
 8001d14:	2000041c 	.word	0x2000041c
 8001d18:	20000422 	.word	0x20000422
 8001d1c:	20000421 	.word	0x20000421
 8001d20:	20000548 	.word	0x20000548
 8001d24:	2000054a 	.word	0x2000054a
 8001d28:	40020800 	.word	0x40020800
 8001d2c:	40020000 	.word	0x40020000
 8001d30:	20000534 	.word	0x20000534

	   case 2:// Second State : Set Time
		   // If enter this state at first , set flag and time to set to current time
		   if(enterStateFlag == 0)
 8001d34:	4b50      	ldr	r3, [pc, #320]	; (8001e78 <main+0x444>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d11f      	bne.n	8001d7c <main+0x348>
		   {
			   setMin = DS3231_GetMinute();
 8001d3c:	f7ff f958 	bl	8000ff0 <DS3231_GetMinute>
 8001d40:	4603      	mov	r3, r0
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <main+0x448>)
 8001d46:	601a      	str	r2, [r3, #0]
			   setHour = DS3231_GetHour();
 8001d48:	f7ff f946 	bl	8000fd8 <DS3231_GetHour>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b4b      	ldr	r3, [pc, #300]	; (8001e80 <main+0x44c>)
 8001d52:	601a      	str	r2, [r3, #0]
			   setDate = date;
 8001d54:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <main+0x450>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <main+0x454>)
 8001d5c:	601a      	str	r2, [r3, #0]
			   setMonth = month;
 8001d5e:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <main+0x458>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4b4a      	ldr	r3, [pc, #296]	; (8001e90 <main+0x45c>)
 8001d66:	601a      	str	r2, [r3, #0]
			   setYear = year;
 8001d68:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <main+0x460>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a4a      	ldr	r2, [pc, #296]	; (8001e98 <main+0x464>)
 8001d6e:	6013      	str	r3, [r2, #0]
			   currentIndex = 0;
 8001d70:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <main+0x468>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	701a      	strb	r2, [r3, #0]
			   enterStateFlag = 1;
 8001d76:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <main+0x444>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]
		   }
		   //?
		   if(setDate == 99){
 8001d7c:	4b42      	ldr	r3, [pc, #264]	; (8001e88 <main+0x454>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b63      	cmp	r3, #99	; 0x63
 8001d82:	d11c      	bne.n	8001dbe <main+0x38a>

			   	   setMin = DS3231_GetMinute();
 8001d84:	f7ff f934 	bl	8000ff0 <DS3231_GetMinute>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <main+0x448>)
 8001d8e:	601a      	str	r2, [r3, #0]
			   	   setHour = DS3231_GetHour();
 8001d90:	f7ff f922 	bl	8000fd8 <DS3231_GetHour>
 8001d94:	4603      	mov	r3, r0
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <main+0x44c>)
 8001d9a:	601a      	str	r2, [r3, #0]
				   setDate = date;
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <main+0x450>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <main+0x454>)
 8001da4:	601a      	str	r2, [r3, #0]
				   setMonth = month;
 8001da6:	4b39      	ldr	r3, [pc, #228]	; (8001e8c <main+0x458>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	4b38      	ldr	r3, [pc, #224]	; (8001e90 <main+0x45c>)
 8001dae:	601a      	str	r2, [r3, #0]
				   setYear = year;
 8001db0:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <main+0x460>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a38      	ldr	r2, [pc, #224]	; (8001e98 <main+0x464>)
 8001db6:	6013      	str	r3, [r2, #0]
				   currentIndex = 0;
 8001db8:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <main+0x468>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]

			   }
		   // Setting
			   if(count-starttime > 1000){
 8001dbe:	4b38      	ldr	r3, [pc, #224]	; (8001ea0 <main+0x46c>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <main+0x470>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001dcc:	d942      	bls.n	8001e54 <main+0x420>
//			   		showSetTime();
				    setPage();
 8001dce:	f000 fec1 	bl	8002b54 <setPage>
			   		starttime = count;
 8001dd2:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <main+0x46c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a33      	ldr	r2, [pc, #204]	; (8001ea4 <main+0x470>)
 8001dd8:	6013      	str	r3, [r2, #0]
			   	}
			   break;
 8001dda:	e03b      	b.n	8001e54 <main+0x420>

	   case 3:// Third State : Set Alarm
		   		   // If enter this state at first , set flag and index
		   if(enterStateFlag == 0)
 8001ddc:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <main+0x444>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <main+0x3bc>
		   {
			   currentIndex = 2;
 8001de4:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <main+0x468>)
 8001de6:	2202      	movs	r2, #2
 8001de8:	701a      	strb	r2, [r3, #0]
			   enterStateFlag = 1;
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <main+0x444>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
		   }
		   if(setHour == 99){
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <main+0x44c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2b63      	cmp	r3, #99	; 0x63
 8001df6:	d111      	bne.n	8001e1c <main+0x3e8>
			   setHour = hur;
 8001df8:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <main+0x474>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <main+0x44c>)
 8001e00:	601a      	str	r2, [r3, #0]
			   setMin = min;
 8001e02:	4b2a      	ldr	r3, [pc, #168]	; (8001eac <main+0x478>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <main+0x448>)
 8001e0a:	601a      	str	r2, [r3, #0]
			   setSec = sec;
 8001e0c:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <main+0x47c>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <main+0x480>)
 8001e14:	601a      	str	r2, [r3, #0]
			   currentIndex = 0;
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <main+0x468>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
		   }
		   //Setting
		   if(count-starttime > 1000){
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <main+0x46c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <main+0x470>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e2a:	d915      	bls.n	8001e58 <main+0x424>
//				showSetAlarm();
				setPage();
 8001e2c:	f000 fe92 	bl	8002b54 <setPage>
				starttime = count;
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <main+0x46c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <main+0x470>)
 8001e36:	6013      	str	r3, [r2, #0]
			}
		   break;
 8001e38:	e00e      	b.n	8001e58 <main+0x424>

	   case 4:
//		   Check_Key();
		   if(songList != savedSong){
 8001e3a:	4b1f      	ldr	r3, [pc, #124]	; (8001eb8 <main+0x484>)
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	; (8001ebc <main+0x488>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <main+0x416>
			   DF_Pause();
 8001e46:	f7fe fc5c 	bl	8000702 <DF_Pause>
		   }
		   setPage();
 8001e4a:	f000 fe83 	bl	8002b54 <setPage>
		   break;
 8001e4e:	e004      	b.n	8001e5a <main+0x426>
			break;
 8001e50:	bf00      	nop
 8001e52:	e002      	b.n	8001e5a <main+0x426>
			   break;
 8001e54:	bf00      	nop
 8001e56:	e000      	b.n	8001e5a <main+0x426>
		   break;
 8001e58:	bf00      	nop

	   char message[50];
	   //sprintf(message, "2: %d %d %d | 3: %d %d %d | cur = %d\r\n", setDate, setMonth, setYear, setHour, setMin, setSec, currentIndex);
	   //HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);

	   if (previousScreen !=  screen){
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <main+0x48c>)
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <main+0x490>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	f43f ae5f 	beq.w	8001b26 <main+0xf2>
		   currentIndex = 0;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <main+0x468>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
		   previousScreen = screen;
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <main+0x490>)
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <main+0x48c>)
 8001e74:	701a      	strb	r2, [r3, #0]
   {
 8001e76:	e656      	b.n	8001b26 <main+0xf2>
 8001e78:	20000540 	.word	0x20000540
 8001e7c:	2000000c 	.word	0x2000000c
 8001e80:	20000010 	.word	0x20000010
 8001e84:	20000424 	.word	0x20000424
 8001e88:	20000014 	.word	0x20000014
 8001e8c:	20000425 	.word	0x20000425
 8001e90:	20000018 	.word	0x20000018
 8001e94:	20000428 	.word	0x20000428
 8001e98:	2000001c 	.word	0x2000001c
 8001e9c:	20000531 	.word	0x20000531
 8001ea0:	20000414 	.word	0x20000414
 8001ea4:	20000418 	.word	0x20000418
 8001ea8:	20000422 	.word	0x20000422
 8001eac:	20000421 	.word	0x20000421
 8001eb0:	20000420 	.word	0x20000420
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	20000070 	.word	0x20000070
 8001ebc:	200002bc 	.word	0x200002bc
 8001ec0:	20000532 	.word	0x20000532
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b094      	sub	sp, #80	; 0x50
 8001ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	2234      	movs	r2, #52	; 0x34
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fb0d 	bl	800b4f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001edc:	f107 0308 	add.w	r3, r7, #8
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001eec:	f005 f836 	bl	8006f5c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <SystemClock_Config+0xd8>)
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	4a2a      	ldr	r2, [pc, #168]	; (8001fa0 <SystemClock_Config+0xd8>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001efa:	6413      	str	r3, [r2, #64]	; 0x40
 8001efc:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <SystemClock_Config+0xd8>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <SystemClock_Config+0xdc>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a25      	ldr	r2, [pc, #148]	; (8001fa4 <SystemClock_Config+0xdc>)
 8001f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b23      	ldr	r3, [pc, #140]	; (8001fa4 <SystemClock_Config+0xdc>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f34:	2304      	movs	r3, #4
 8001f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001f38:	23c8      	movs	r3, #200	; 0xc8
 8001f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f40:	2309      	movs	r3, #9
 8001f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f005 f865 	bl	800701c <HAL_RCC_OscConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f58:	f001 fb28 	bl	80035ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f5c:	f005 f80e 	bl	8006f7c <HAL_PWREx_EnableOverDrive>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001f66:	f001 fb21 	bl	80035ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f6a:	230f      	movs	r3, #15
 8001f6c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f76:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f80:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	2106      	movs	r1, #6
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f005 faf5 	bl	8007578 <HAL_RCC_ClockConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001f94:	f001 fb0a 	bl	80035ac <Error_Handler>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3750      	adds	r7, #80	; 0x50
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40007000 	.word	0x40007000

08001fa8 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t lenght){
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xffff;
 8001fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fb8:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	737b      	strb	r3, [r7, #13]

	while (lenght--){
 8001fbe:	e023      	b.n	8002008 <CRC16_2+0x60>
		crc ^= *ptr++;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	89fb      	ldrh	r3, [r7, #14]
 8001fcc:	4053      	eors	r3, r2
 8001fce:	81fb      	strh	r3, [r7, #14]

		for (s = 0 ; s <8 ;s++){
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	737b      	strb	r3, [r7, #13]
 8001fd4:	e015      	b.n	8002002 <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 8001fd6:	89fb      	ldrh	r3, [r7, #14]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <CRC16_2+0x4e>
				crc >>= 1;
 8001fe0:	89fb      	ldrh	r3, [r7, #14]
 8001fe2:	085b      	lsrs	r3, r3, #1
 8001fe4:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8001fe6:	89fb      	ldrh	r3, [r7, #14]
 8001fe8:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001fec:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	81fb      	strh	r3, [r7, #14]
 8001ff4:	e002      	b.n	8001ffc <CRC16_2+0x54>

			}
			else{
				crc >>= 1;
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
 8001ff8:	085b      	lsrs	r3, r3, #1
 8001ffa:	81fb      	strh	r3, [r7, #14]
		for (s = 0 ; s <8 ;s++){
 8001ffc:	7b7b      	ldrb	r3, [r7, #13]
 8001ffe:	3301      	adds	r3, #1
 8002000:	737b      	strb	r3, [r7, #13]
 8002002:	7b7b      	ldrb	r3, [r7, #13]
 8002004:	2b07      	cmp	r3, #7
 8002006:	d9e6      	bls.n	8001fd6 <CRC16_2+0x2e>
	while (lenght--){
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	1e5a      	subs	r2, r3, #1
 800200c:	70fa      	strb	r2, [r7, #3]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1d6      	bne.n	8001fc0 <CRC16_2+0x18>
			}
		}
	}
	return crc;
 8002012:	89fb      	ldrh	r3, [r7, #14]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <updateSensor>:

void updateSensor() {
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 8002026:	23c8      	movs	r3, #200	; 0xc8
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2303      	movs	r3, #3
 800202c:	4a39      	ldr	r2, [pc, #228]	; (8002114 <updateSensor+0xf4>)
 800202e:	21b8      	movs	r1, #184	; 0xb8
 8002030:	4839      	ldr	r0, [pc, #228]	; (8002118 <updateSensor+0xf8>)
 8002032:	f004 faa5 	bl	8006580 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 8002036:	23c8      	movs	r3, #200	; 0xc8
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2303      	movs	r3, #3
 800203c:	4a35      	ldr	r2, [pc, #212]	; (8002114 <updateSensor+0xf4>)
 800203e:	21b8      	movs	r1, #184	; 0xb8
 8002040:	4835      	ldr	r0, [pc, #212]	; (8002118 <updateSensor+0xf8>)
 8002042:	f004 fa9d 	bl	8006580 <HAL_I2C_Master_Transmit>

	HAL_Delay(1);
 8002046:	2001      	movs	r0, #1
 8002048:	f002 ff2c 	bl	8004ea4 <HAL_Delay>

	// receive sensor data

	HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1 , dataBuffer , 8, 200);
 800204c:	23c8      	movs	r3, #200	; 0xc8
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2308      	movs	r3, #8
 8002052:	4a32      	ldr	r2, [pc, #200]	; (800211c <updateSensor+0xfc>)
 8002054:	21b8      	movs	r1, #184	; 0xb8
 8002056:	4830      	ldr	r0, [pc, #192]	; (8002118 <updateSensor+0xf8>)
 8002058:	f004 fb86 	bl	8006768 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8 ;
 800205c:	4b2f      	ldr	r3, [pc, #188]	; (800211c <updateSensor+0xfc>)
 800205e:	79db      	ldrb	r3, [r3, #7]
 8002060:	b29b      	uxth	r3, r3
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <updateSensor+0xfc>)
 8002068:	799b      	ldrb	r3, [r3, #6]
 800206a:	b29a      	uxth	r2, r3
 800206c:	88fb      	ldrh	r3, [r7, #6]
 800206e:	4413      	add	r3, r2
 8002070:	80fb      	strh	r3, [r7, #6]

	if (Rcrc == CRC16_2(dataBuffer,6)){
 8002072:	2106      	movs	r1, #6
 8002074:	4829      	ldr	r0, [pc, #164]	; (800211c <updateSensor+0xfc>)
 8002076:	f7ff ff97 	bl	8001fa8 <CRC16_2>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	88fb      	ldrh	r3, [r7, #6]
 8002080:	4293      	cmp	r3, r2
 8002082:	d143      	bne.n	800210c <updateSensor+0xec>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8 ) + dataBuffer[5];
 8002084:	4b25      	ldr	r3, [pc, #148]	; (800211c <updateSensor+0xfc>)
 8002086:	791b      	ldrb	r3, [r3, #4]
 8002088:	021b      	lsls	r3, r3, #8
 800208a:	b29b      	uxth	r3, r3
 800208c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b22      	ldr	r3, [pc, #136]	; (800211c <updateSensor+0xfc>)
 8002094:	795b      	ldrb	r3, [r3, #5]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4413      	add	r3, r2
 800209a:	80bb      	strh	r3, [r7, #4]

		temp = temperature  / 10.0 ;
 800209c:	88bb      	ldrh	r3, [r7, #4]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80020a6:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80020aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <updateSensor+0x100>)
 80020b4:	edc3 7a00 	vstr	s15, [r3]

		temp = (((dataBuffer[4] & 0x80) >> 7 ) == 1)? (temp * (-1)) : temp ;
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <updateSensor+0xfc>)
 80020ba:	791b      	ldrb	r3, [r3, #4]
 80020bc:	09db      	lsrs	r3, r3, #7
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d105      	bne.n	80020d0 <updateSensor+0xb0>
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <updateSensor+0x100>)
 80020c6:	edd3 7a00 	vldr	s15, [r3]
 80020ca:	eef1 7a67 	vneg.f32	s15, s15
 80020ce:	e002      	b.n	80020d6 <updateSensor+0xb6>
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <updateSensor+0x100>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	4b12      	ldr	r3, [pc, #72]	; (8002120 <updateSensor+0x100>)
 80020d8:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humi = (dataBuffer[2] << 8) + dataBuffer[3] ;
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <updateSensor+0xfc>)
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b29a      	uxth	r2, r3
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <updateSensor+0xfc>)
 80020e8:	78db      	ldrb	r3, [r3, #3]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4413      	add	r3, r2
 80020ee:	807b      	strh	r3, [r7, #2]
		RH = humi / 10.0 ;
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	ee07 3a90 	vmov	s15, r3
 80020f6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80020fa:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80020fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002102:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <updateSensor+0x104>)
 8002108:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000444 	.word	0x20000444
 8002118:	2000036c 	.word	0x2000036c
 800211c:	20000448 	.word	0x20000448
 8002120:	2000043c 	.word	0x2000043c
 8002124:	20000440 	.word	0x20000440

08002128 <alarm>:

void alarm(){
 8002128:	b590      	push	{r4, r7, lr}
 800212a:	b089      	sub	sp, #36	; 0x24
 800212c:	af02      	add	r7, sp, #8
	//-----------------------------------
	ILI9341_Draw_Text("WAKE UP!!", 50,50, BLACK, 4, WHITE);
 800212e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	2304      	movs	r3, #4
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	2232      	movs	r2, #50	; 0x32
 800213c:	2132      	movs	r1, #50	; 0x32
 800213e:	4891      	ldr	r0, [pc, #580]	; (8002384 <alarm+0x25c>)
 8002140:	f002 f9e4 	bl	800450c <ILI9341_Draw_Text>




	//-----------------------------------
	generateAndSortRandomNumbers(randomNumbers,4);
 8002144:	2104      	movs	r1, #4
 8002146:	4890      	ldr	r0, [pc, #576]	; (8002388 <alarm+0x260>)
 8002148:	f7ff fb98 	bl	800187c <generateAndSortRandomNumbers>
	char pinNumber[4][2];
//	snprintf(buttonInput, 15, "%d %d %d %d",randomNumbers[0],randomNumbers[1],randomNumbers[2],randomNumbers[3]);
	for(int i=0;i<4;i++){
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	e024      	b.n	800219c <alarm+0x74>
		sprintf(pinNumber[i], "%d", randomNumbers[i]);
 8002152:	463a      	mov	r2, r7
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	18d0      	adds	r0, r2, r3
 800215a:	4a8b      	ldr	r2, [pc, #556]	; (8002388 <alarm+0x260>)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002162:	461a      	mov	r2, r3
 8002164:	4989      	ldr	r1, [pc, #548]	; (800238c <alarm+0x264>)
 8002166:	f009 f963 	bl	800b430 <siprintf>
		ILI9341_Draw_Text(pinNumber[i], 50 + i*30,100, BLACK, 4, WHITE);
 800216a:	463a      	mov	r2, r7
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	18d0      	adds	r0, r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	3332      	adds	r3, #50	; 0x32
 8002182:	b2d9      	uxtb	r1, r3
 8002184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	2304      	movs	r3, #4
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2300      	movs	r3, #0
 8002190:	2264      	movs	r2, #100	; 0x64
 8002192:	f002 f9bb 	bl	800450c <ILI9341_Draw_Text>
	for(int i=0;i<4;i++){
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	ddd7      	ble.n	8002152 <alarm+0x2a>
	}
	DF_SetVolume(30);
 80021a2:	201e      	movs	r0, #30
 80021a4:	f7fe fa80 	bl	80006a8 <DF_SetVolume>
	DF_SetFolder(1, songList);
 80021a8:	4b79      	ldr	r3, [pc, #484]	; (8002390 <alarm+0x268>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	4619      	mov	r1, r3
 80021ae:	2001      	movs	r0, #1
 80021b0:	f7fe fb22 	bl	80007f8 <DF_SetFolder>
//	ILI9341_Draw_Text(buttonInput, 50,100, BLACK, 4, WHITE);
	int cnt = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
	while(1){
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET){
 80021b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021bc:	4875      	ldr	r0, [pc, #468]	; (8002394 <alarm+0x26c>)
 80021be:	f004 f8f9 	bl	80063b4 <HAL_GPIO_ReadPin>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d108      	bne.n	80021da <alarm+0xb2>
			DF_SetVolume(30);
 80021c8:	201e      	movs	r0, #30
 80021ca:	f7fe fa6d 	bl	80006a8 <DF_SetVolume>
			DF_SetFolder(1, songList);
 80021ce:	4b70      	ldr	r3, [pc, #448]	; (8002390 <alarm+0x268>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	4619      	mov	r1, r3
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7fe fb0f 	bl	80007f8 <DF_SetFolder>
		}
		if(cnt != 4){
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d04f      	beq.n	8002280 <alarm+0x158>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 80021e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e4:	486b      	ldr	r0, [pc, #428]	; (8002394 <alarm+0x26c>)
 80021e6:	f004 f8e5 	bl	80063b4 <HAL_GPIO_ReadPin>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <alarm+0xe0>
				userButtonInput[cnt++] = 1;
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1c5a      	adds	r2, r3, #1
 80021f4:	613a      	str	r2, [r7, #16]
 80021f6:	4a68      	ldr	r2, [pc, #416]	; (8002398 <alarm+0x270>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				letTheMusicLouderThanAnySound(0.1);
 80021fe:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800239c <alarm+0x274>
 8002202:	f7ff fbaf 	bl	8001964 <letTheMusicLouderThanAnySound>
 8002206:	e081      	b.n	800230c <alarm+0x1e4>

			}
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8002208:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220c:	4861      	ldr	r0, [pc, #388]	; (8002394 <alarm+0x26c>)
 800220e:	f004 f8d1 	bl	80063b4 <HAL_GPIO_ReadPin>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <alarm+0x108>
				userButtonInput[cnt++] = 2;
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	613a      	str	r2, [r7, #16]
 800221e:	4a5e      	ldr	r2, [pc, #376]	; (8002398 <alarm+0x270>)
 8002220:	2102      	movs	r1, #2
 8002222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				letTheMusicLouderThanAnySound(0.4);
 8002226:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80023a0 <alarm+0x278>
 800222a:	f7ff fb9b 	bl	8001964 <letTheMusicLouderThanAnySound>
 800222e:	e06d      	b.n	800230c <alarm+0x1e4>
			}
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8002230:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002234:	4857      	ldr	r0, [pc, #348]	; (8002394 <alarm+0x26c>)
 8002236:	f004 f8bd 	bl	80063b4 <HAL_GPIO_ReadPin>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <alarm+0x130>
				userButtonInput[cnt++] = 3;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	613a      	str	r2, [r7, #16]
 8002246:	4a54      	ldr	r2, [pc, #336]	; (8002398 <alarm+0x270>)
 8002248:	2103      	movs	r1, #3
 800224a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				letTheMusicLouderThanAnySound(0.6);
 800224e:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80023a4 <alarm+0x27c>
 8002252:	f7ff fb87 	bl	8001964 <letTheMusicLouderThanAnySound>
 8002256:	e059      	b.n	800230c <alarm+0x1e4>
			}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET){
 8002258:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800225c:	4852      	ldr	r0, [pc, #328]	; (80023a8 <alarm+0x280>)
 800225e:	f004 f8a9 	bl	80063b4 <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d151      	bne.n	800230c <alarm+0x1e4>
				userButtonInput[cnt++] = 4;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	613a      	str	r2, [r7, #16]
 800226e:	4a4a      	ldr	r2, [pc, #296]	; (8002398 <alarm+0x270>)
 8002270:	2104      	movs	r1, #4
 8002272:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				letTheMusicLouderThanAnySound(0.1);
 8002276:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800239c <alarm+0x274>
 800227a:	f7ff fb73 	bl	8001964 <letTheMusicLouderThanAnySound>
 800227e:	e045      	b.n	800230c <alarm+0x1e4>
			}
		}
		else{
//			snprintf(buttonInput, 15, "%d %d %d %d",userButtonInput[0],userButtonInput[1],userButtonInput[2],userButtonInput[3]);
//			ILI9341_Draw_Text(buttonInput, 50,10, BLACK, 4, WHITE);
			if(compareArrays(randomNumbers,userButtonInput,4) == 1){
 8002280:	2204      	movs	r2, #4
 8002282:	4945      	ldr	r1, [pc, #276]	; (8002398 <alarm+0x270>)
 8002284:	4840      	ldr	r0, [pc, #256]	; (8002388 <alarm+0x260>)
 8002286:	f7ff fb3f 	bl	8001908 <compareArrays>
 800228a:	4603      	mov	r3, r0
 800228c:	2b01      	cmp	r3, #1
 800228e:	d107      	bne.n	80022a0 <alarm+0x178>
				ILI9341_Fill_Screen(WHITE);
 8002290:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002294:	f002 fc44 	bl	8004b20 <ILI9341_Fill_Screen>
				alarmtrigger = 0;
 8002298:	4b44      	ldr	r3, [pc, #272]	; (80023ac <alarm+0x284>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
				break;
 800229e:	e06b      	b.n	8002378 <alarm+0x250>
			}else{
				generateAndSortRandomNumbers(randomNumbers,4);
 80022a0:	2104      	movs	r1, #4
 80022a2:	4839      	ldr	r0, [pc, #228]	; (8002388 <alarm+0x260>)
 80022a4:	f7ff faea 	bl	800187c <generateAndSortRandomNumbers>
				for(int i=0;i<4;i++){
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e029      	b.n	8002302 <alarm+0x1da>
					sprintf(pinNumber[i], "%d", randomNumbers[i]);
 80022ae:	463a      	mov	r2, r7
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	18d0      	adds	r0, r2, r3
 80022b6:	4a34      	ldr	r2, [pc, #208]	; (8002388 <alarm+0x260>)
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	461a      	mov	r2, r3
 80022c0:	4932      	ldr	r1, [pc, #200]	; (800238c <alarm+0x264>)
 80022c2:	f009 f8b5 	bl	800b430 <siprintf>
					ILI9341_Draw_Text(pinNumber[i], 50 + i*30,100, BLACK, 4, WHITE);
 80022c6:	463a      	mov	r2, r7
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	18d0      	adds	r0, r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	3332      	adds	r3, #50	; 0x32
 80022de:	b2d9      	uxtb	r1, r3
 80022e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2304      	movs	r3, #4
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	2264      	movs	r2, #100	; 0x64
 80022ee:	f002 f90d 	bl	800450c <ILI9341_Draw_Text>
					userButtonInput[i] = 0;
 80022f2:	4a29      	ldr	r2, [pc, #164]	; (8002398 <alarm+0x270>)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2100      	movs	r1, #0
 80022f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i=0;i<4;i++){
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	3301      	adds	r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b03      	cmp	r3, #3
 8002306:	ddd2      	ble.n	80022ae <alarm+0x186>
				}
//				snprintf(buttonInput, 15, "%d %d %d %d",randomNumbers[0],randomNumbers[1],randomNumbers[2],randomNumbers[3]);
//				ILI9341_Draw_Text(buttonInput, 50,100, BLACK, 4, WHITE);
				cnt = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
			}
		}
		for(int i=0;i<4;i++){
 800230c:	2300      	movs	r3, #0
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	e02e      	b.n	8002370 <alarm+0x248>
			ILI9341_Draw_Text(pinNumber[i], 50 + i*30,100, (userButtonInput[i] == randomNumbers[i]) ? GREEN : ((userButtonInput[i] == 0) ? BLACK : RED), 4, WHITE);
 8002312:	463a      	mov	r2, r7
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	18d0      	adds	r0, r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	0112      	lsls	r2, r2, #4
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3332      	adds	r3, #50	; 0x32
 800232a:	b2d9      	uxtb	r1, r3
 800232c:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <alarm+0x270>)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002334:	4c14      	ldr	r4, [pc, #80]	; (8002388 <alarm+0x260>)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800233c:	429a      	cmp	r2, r3
 800233e:	d00a      	beq.n	8002356 <alarm+0x22e>
 8002340:	4a15      	ldr	r2, [pc, #84]	; (8002398 <alarm+0x270>)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d101      	bne.n	8002350 <alarm+0x228>
 800234c:	2300      	movs	r3, #0
 800234e:	e004      	b.n	800235a <alarm+0x232>
 8002350:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002354:	e001      	b.n	800235a <alarm+0x232>
 8002356:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800235a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800235e:	9201      	str	r2, [sp, #4]
 8002360:	2204      	movs	r2, #4
 8002362:	9200      	str	r2, [sp, #0]
 8002364:	2264      	movs	r2, #100	; 0x64
 8002366:	f002 f8d1 	bl	800450c <ILI9341_Draw_Text>
		for(int i=0;i<4;i++){
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3301      	adds	r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b03      	cmp	r3, #3
 8002374:	ddcd      	ble.n	8002312 <alarm+0x1ea>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_SET){
 8002376:	e71f      	b.n	80021b8 <alarm+0x90>
//			else{
//				letTheMusicLouderThanAnySound(0.2);
//			}
		}
	}
	DF_Pause();
 8002378:	f7fe f9c3 	bl	8000702 <DF_Pause>
}
 800237c:	bf00      	nop
 800237e:	371c      	adds	r7, #28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd90      	pop	{r4, r7, pc}
 8002384:	0800d754 	.word	0x0800d754
 8002388:	20000510 	.word	0x20000510
 800238c:	0800d760 	.word	0x0800d760
 8002390:	20000070 	.word	0x20000070
 8002394:	40020400 	.word	0x40020400
 8002398:	20000520 	.word	0x20000520
 800239c:	3dcccccd 	.word	0x3dcccccd
 80023a0:	3ecccccd 	.word	0x3ecccccd
 80023a4:	3f19999a 	.word	0x3f19999a
 80023a8:	40020000 	.word	0x40020000
 80023ac:	20000438 	.word	0x20000438

080023b0 <updateT>:

 void updateT(){
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
 	sec = DS3231_GetSecond();
 80023b4:	f7fe fe28 	bl	8001008 <DS3231_GetSecond>
 80023b8:	4603      	mov	r3, r0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <updateT+0x64>)
 80023be:	701a      	strb	r2, [r3, #0]
 	min = DS3231_GetMinute();
 80023c0:	f7fe fe16 	bl	8000ff0 <DS3231_GetMinute>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <updateT+0x68>)
 80023ca:	701a      	strb	r2, [r3, #0]
 	hur = DS3231_GetHour();
 80023cc:	f7fe fe04 	bl	8000fd8 <DS3231_GetHour>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b11      	ldr	r3, [pc, #68]	; (800241c <updateT+0x6c>)
 80023d6:	701a      	strb	r2, [r3, #0]
 	dow = DS3231_GetDayOfWeek()-1;
 80023d8:	f7fe fdae 	bl	8000f38 <DS3231_GetDayOfWeek>
 80023dc:	4603      	mov	r3, r0
 80023de:	3b01      	subs	r3, #1
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <updateT+0x70>)
 80023e4:	701a      	strb	r2, [r3, #0]
 	date = DS3231_GetDate()-1;
 80023e6:	f7fe fdb3 	bl	8000f50 <DS3231_GetDate>
 80023ea:	4603      	mov	r3, r0
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b0c      	ldr	r3, [pc, #48]	; (8002424 <updateT+0x74>)
 80023f2:	701a      	strb	r2, [r3, #0]
 	month = DS3231_GetMonth()-1;
 80023f4:	f7fe fdb8 	bl	8000f68 <DS3231_GetMonth>
 80023f8:	4603      	mov	r3, r0
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <updateT+0x78>)
 8002400:	701a      	strb	r2, [r3, #0]
 	year = DS3231_GetYear();
 8002402:	f7fe fdc0 	bl	8000f86 <DS3231_GetYear>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <updateT+0x7c>)
 800240c:	601a      	str	r2, [r3, #0]

 }
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000420 	.word	0x20000420
 8002418:	20000421 	.word	0x20000421
 800241c:	20000422 	.word	0x20000422
 8002420:	20000423 	.word	0x20000423
 8002424:	20000424 	.word	0x20000424
 8002428:	20000425 	.word	0x20000425
 800242c:	20000428 	.word	0x20000428

08002430 <showT>:
 void showT(){
 8002430:	b580      	push	{r7, lr}
 8002432:	b092      	sub	sp, #72	; 0x48
 8002434:	af02      	add	r7, sp, #8

	updateSensor();
 8002436:	f7ff fdf3 	bl	8002020 <updateSensor>
//		sprintf(strH,"%02d",setHour);
//		sprintf(strM,"%02d",setMin);
//		sprintf(strS,"%02d",setSec);
//	}

	sprintf(strH,"%02d",hur);
 800243a:	4b72      	ldr	r3, [pc, #456]	; (8002604 <showT+0x1d4>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	4971      	ldr	r1, [pc, #452]	; (8002608 <showT+0x1d8>)
 8002442:	4872      	ldr	r0, [pc, #456]	; (800260c <showT+0x1dc>)
 8002444:	f008 fff4 	bl	800b430 <siprintf>
	sprintf(strM,"%02d",min);
 8002448:	4b71      	ldr	r3, [pc, #452]	; (8002610 <showT+0x1e0>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	496e      	ldr	r1, [pc, #440]	; (8002608 <showT+0x1d8>)
 8002450:	4870      	ldr	r0, [pc, #448]	; (8002614 <showT+0x1e4>)
 8002452:	f008 ffed 	bl	800b430 <siprintf>
	sprintf(strS,"%02d",sec);
 8002456:	4b70      	ldr	r3, [pc, #448]	; (8002618 <showT+0x1e8>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	496a      	ldr	r1, [pc, #424]	; (8002608 <showT+0x1d8>)
 800245e:	486f      	ldr	r0, [pc, #444]	; (800261c <showT+0x1ec>)
 8002460:	f008 ffe6 	bl	800b430 <siprintf>

 	sprintf(strsensor,"%.1f C %.1f %%RH",temp,RH);
 8002464:	4b6e      	ldr	r3, [pc, #440]	; (8002620 <showT+0x1f0>)
 8002466:	edd3 7a00 	vldr	s15, [r3]
 800246a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <showT+0x1f4>)
 8002470:	edd3 7a00 	vldr	s15, [r3]
 8002474:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002478:	ed8d 7b00 	vstr	d7, [sp]
 800247c:	ec53 2b16 	vmov	r2, r3, d6
 8002480:	4969      	ldr	r1, [pc, #420]	; (8002628 <showT+0x1f8>)
 8002482:	486a      	ldr	r0, [pc, #424]	; (800262c <showT+0x1fc>)
 8002484:	f008 ffd4 	bl	800b430 <siprintf>
// 	else{
// 		dow = dayofweek(setDate, setMonth + 1, setYear);
// 		snprintf(timedate,50,"%d %s %d",setDate, months[setMonth], setYear);
// 	}

 	dow = dayofweek(date + 1, month + 1, year);
 8002488:	4b69      	ldr	r3, [pc, #420]	; (8002630 <showT+0x200>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	4a69      	ldr	r2, [pc, #420]	; (8002634 <showT+0x204>)
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	1c51      	adds	r1, r2, #1
 8002494:	4a68      	ldr	r2, [pc, #416]	; (8002638 <showT+0x208>)
 8002496:	6812      	ldr	r2, [r2, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f001 f835 	bl	8003508 <dayofweek>
 800249e:	4603      	mov	r3, r0
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b66      	ldr	r3, [pc, #408]	; (800263c <showT+0x20c>)
 80024a4:	701a      	strb	r2, [r3, #0]
 	snprintf(timedate,50,"%d %s %d",date+1, months[month], year);
 80024a6:	4b62      	ldr	r3, [pc, #392]	; (8002630 <showT+0x200>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	4b61      	ldr	r3, [pc, #388]	; (8002634 <showT+0x204>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b63      	ldr	r3, [pc, #396]	; (8002640 <showT+0x210>)
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	4a5f      	ldr	r2, [pc, #380]	; (8002638 <showT+0x208>)
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	9201      	str	r2, [sp, #4]
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	460b      	mov	r3, r1
 80024c2:	4a60      	ldr	r2, [pc, #384]	; (8002644 <showT+0x214>)
 80024c4:	2132      	movs	r1, #50	; 0x32
 80024c6:	4860      	ldr	r0, [pc, #384]	; (8002648 <showT+0x218>)
 80024c8:	f008 ff7e 	bl	800b3c8 <sniprintf>

	snprintf(timeString, 50, "%s:%s:%s", strH, strM, strS);
 80024cc:	4b53      	ldr	r3, [pc, #332]	; (800261c <showT+0x1ec>)
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <showT+0x1e4>)
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4b4d      	ldr	r3, [pc, #308]	; (800260c <showT+0x1dc>)
 80024d6:	4a5d      	ldr	r2, [pc, #372]	; (800264c <showT+0x21c>)
 80024d8:	2132      	movs	r1, #50	; 0x32
 80024da:	485d      	ldr	r0, [pc, #372]	; (8002650 <showT+0x220>)
 80024dc:	f008 ff74 	bl	800b3c8 <sniprintf>
	ILI9341_Draw_Text(timeString, 42, 100, fontcolor, 5, bgcolor);
 80024e0:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <showT+0x224>)
 80024e2:	881a      	ldrh	r2, [r3, #0]
 80024e4:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <showT+0x228>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	2305      	movs	r3, #5
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	2264      	movs	r2, #100	; 0x64
 80024f2:	212a      	movs	r1, #42	; 0x2a
 80024f4:	4856      	ldr	r0, [pc, #344]	; (8002650 <showT+0x220>)
 80024f6:	f002 f809 	bl	800450c <ILI9341_Draw_Text>
//	ILI9341_Draw_Text(strH, 50,90, BLACK, 5, WHITE);
//	ILI9341_Draw_Text(strM, 120,90, BLACK, 5, WHITE);
//	ILI9341_Draw_Text(strS, 210,90, BLACK, 5, WHITE);

	uint32_t dow_x = 56 + (9 - strlen(day[dow])) * 12;
 80024fa:	4b50      	ldr	r3, [pc, #320]	; (800263c <showT+0x20c>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	4b56      	ldr	r3, [pc, #344]	; (800265c <showT+0x22c>)
 8002502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fd feea 	bl	80002e0 <strlen>
 800250c:	4602      	mov	r2, r0
 800250e:	4613      	mov	r3, r2
 8002510:	0092      	lsls	r2, r2, #2
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	33a4      	adds	r3, #164	; 0xa4
 8002518:	63fb      	str	r3, [r7, #60]	; 0x3c
	ILI9341_Draw_Text(day[dow], dow_x,10 , fontcolor, 4, bgcolor);
 800251a:	4b48      	ldr	r3, [pc, #288]	; (800263c <showT+0x20c>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	4b4e      	ldr	r3, [pc, #312]	; (800265c <showT+0x22c>)
 8002522:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002528:	b2d9      	uxtb	r1, r3
 800252a:	4b4a      	ldr	r3, [pc, #296]	; (8002654 <showT+0x224>)
 800252c:	881a      	ldrh	r2, [r3, #0]
 800252e:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <showT+0x228>)
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	2304      	movs	r3, #4
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	220a      	movs	r2, #10
 800253c:	f001 ffe6 	bl	800450c <ILI9341_Draw_Text>
	ILI9341_Draw_Text(strsensor, 75,40 , fontcolor, 2, bgcolor);
 8002540:	4b44      	ldr	r3, [pc, #272]	; (8002654 <showT+0x224>)
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	4b44      	ldr	r3, [pc, #272]	; (8002658 <showT+0x228>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2302      	movs	r3, #2
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	4613      	mov	r3, r2
 8002550:	2228      	movs	r2, #40	; 0x28
 8002552:	214b      	movs	r1, #75	; 0x4b
 8002554:	4835      	ldr	r0, [pc, #212]	; (800262c <showT+0x1fc>)
 8002556:	f001 ffd9 	bl	800450c <ILI9341_Draw_Text>
 //	ILI9341_Draw_Text(strsensor, 80,40 , BLACK, 1, WHITE);
//	ILI9341_Draw_Text(strdate, 50,210, BLACK, 2, WHITE);
//	ILI9341_Draw_Text(months[month], 80,210, BLACK, 2, WHITE);
//	ILI9341_Draw_Text(stryear, 200,210, BLACK, 2, WHITE);
	uint32_t time_x = 50 + (9-((setMonth == 99) ? strlen(months[month]) : strlen(months[setMonth]))) * 7;
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <showT+0x230>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b63      	cmp	r3, #99	; 0x63
 8002560:	d10e      	bne.n	8002580 <showT+0x150>
 8002562:	4b34      	ldr	r3, [pc, #208]	; (8002634 <showT+0x204>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	4b35      	ldr	r3, [pc, #212]	; (8002640 <showT+0x210>)
 800256a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256e:	4618      	mov	r0, r3
 8002570:	f7fd feb6 	bl	80002e0 <strlen>
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	3371      	adds	r3, #113	; 0x71
 800257e:	e00c      	b.n	800259a <showT+0x16a>
 8002580:	4b37      	ldr	r3, [pc, #220]	; (8002660 <showT+0x230>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a2e      	ldr	r2, [pc, #184]	; (8002640 <showT+0x210>)
 8002586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fd fea8 	bl	80002e0 <strlen>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	3371      	adds	r3, #113	; 0x71
 800259a:	63bb      	str	r3, [r7, #56]	; 0x38
//	if (month % 2 == 1)
//		x -= 5;
 	ILI9341_Draw_Text(timedate, time_x, 210, fontcolor, 2, bgcolor);
 800259c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259e:	b2d9      	uxtb	r1, r3
 80025a0:	4b2c      	ldr	r3, [pc, #176]	; (8002654 <showT+0x224>)
 80025a2:	881a      	ldrh	r2, [r3, #0]
 80025a4:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <showT+0x228>)
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	2302      	movs	r3, #2
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	4613      	mov	r3, r2
 80025b0:	22d2      	movs	r2, #210	; 0xd2
 80025b2:	4825      	ldr	r0, [pc, #148]	; (8002648 <showT+0x218>)
 80025b4:	f001 ffaa 	bl	800450c <ILI9341_Draw_Text>
//	ILI9341_Draw_Text(timedate, 50, 210, BLACK, 2, WHITE);
	char willBeAlarmIn[50] = "";
 80025b8:	2300      	movs	r3, #0
 80025ba:	607b      	str	r3, [r7, #4]
 80025bc:	f107 0308 	add.w	r3, r7, #8
 80025c0:	222e      	movs	r2, #46	; 0x2e
 80025c2:	2100      	movs	r1, #0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f008 ff96 	bl	800b4f6 <memset>
	snprintf(willBeAlarmIn, 50, "Alarm at %02d:%02d", setAlarmHour, setAlarmMin);
 80025ca:	4b26      	ldr	r3, [pc, #152]	; (8002664 <showT+0x234>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	4b26      	ldr	r3, [pc, #152]	; (8002668 <showT+0x238>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1d38      	adds	r0, r7, #4
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <showT+0x23c>)
 80025da:	2132      	movs	r1, #50	; 0x32
 80025dc:	f008 fef4 	bl	800b3c8 <sniprintf>
	ILI9341_Draw_Text(willBeAlarmIn, 75, 140, fontcolor, 2, bgcolor);
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <showT+0x224>)
 80025e2:	881a      	ldrh	r2, [r3, #0]
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <showT+0x228>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	1d38      	adds	r0, r7, #4
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	2302      	movs	r3, #2
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	228c      	movs	r2, #140	; 0x8c
 80025f4:	214b      	movs	r1, #75	; 0x4b
 80025f6:	f001 ff89 	bl	800450c <ILI9341_Draw_Text>

 }
 80025fa:	bf00      	nop
 80025fc:	3740      	adds	r7, #64	; 0x40
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000422 	.word	0x20000422
 8002608:	0800d764 	.word	0x0800d764
 800260c:	20000458 	.word	0x20000458
 8002610:	20000421 	.word	0x20000421
 8002614:	20000454 	.word	0x20000454
 8002618:	20000420 	.word	0x20000420
 800261c:	20000450 	.word	0x20000450
 8002620:	2000043c 	.word	0x2000043c
 8002624:	20000440 	.word	0x20000440
 8002628:	0800d76c 	.word	0x0800d76c
 800262c:	200004a8 	.word	0x200004a8
 8002630:	20000424 	.word	0x20000424
 8002634:	20000425 	.word	0x20000425
 8002638:	20000428 	.word	0x20000428
 800263c:	20000423 	.word	0x20000423
 8002640:	2000003c 	.word	0x2000003c
 8002644:	0800d780 	.word	0x0800d780
 8002648:	2000045c 	.word	0x2000045c
 800264c:	0800d78c 	.word	0x0800d78c
 8002650:	200004dc 	.word	0x200004dc
 8002654:	2000054a 	.word	0x2000054a
 8002658:	20000548 	.word	0x20000548
 800265c:	20000020 	.word	0x20000020
 8002660:	20000018 	.word	0x20000018
 8002664:	20000430 	.word	0x20000430
 8002668:	2000042c 	.word	0x2000042c
 800266c:	0800d798 	.word	0x0800d798

08002670 <showSetTime>:

void showSetTime(){
 8002670:	b580      	push	{r7, lr}
 8002672:	b09c      	sub	sp, #112	; 0x70
 8002674:	af02      	add	r7, sp, #8
	sprintf(strdate,"%02d",setDate+1);
 8002676:	4b7d      	ldr	r3, [pc, #500]	; (800286c <showSetTime+0x1fc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	461a      	mov	r2, r3
 800267e:	497c      	ldr	r1, [pc, #496]	; (8002870 <showSetTime+0x200>)
 8002680:	487c      	ldr	r0, [pc, #496]	; (8002874 <showSetTime+0x204>)
 8002682:	f008 fed5 	bl	800b430 <siprintf>
	sprintf(strmonth,"%s",months[setMonth]);
 8002686:	4b7c      	ldr	r3, [pc, #496]	; (8002878 <showSetTime+0x208>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a7c      	ldr	r2, [pc, #496]	; (800287c <showSetTime+0x20c>)
 800268c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002690:	461a      	mov	r2, r3
 8002692:	497b      	ldr	r1, [pc, #492]	; (8002880 <showSetTime+0x210>)
 8002694:	487b      	ldr	r0, [pc, #492]	; (8002884 <showSetTime+0x214>)
 8002696:	f008 fecb 	bl	800b430 <siprintf>
	sprintf(stryear,"%d",setYear);
 800269a:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <showSetTime+0x218>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	461a      	mov	r2, r3
 80026a0:	497a      	ldr	r1, [pc, #488]	; (800288c <showSetTime+0x21c>)
 80026a2:	487b      	ldr	r0, [pc, #492]	; (8002890 <showSetTime+0x220>)
 80026a4:	f008 fec4 	bl	800b430 <siprintf>

//	snprintf(timedate,50,"%s %s %s",strdate, strmonth, stryear);
//	ILI9341_Draw_Text(timedate, 80,10, BLACK, 2, WHITE);


	char getStr[100] = "";
 80026a8:	2300      	movs	r3, #0
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	f107 0308 	add.w	r3, r7, #8
 80026b0:	2260      	movs	r2, #96	; 0x60
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f008 ff1e 	bl	800b4f6 <memset>
	sprintf(getStr,"Setting");
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	4975      	ldr	r1, [pc, #468]	; (8002894 <showSetTime+0x224>)
 80026be:	4618      	mov	r0, r3
 80026c0:	f008 feb6 	bl	800b430 <siprintf>
	ILI9341_Draw_Text(getStr, 72,10, BLACK, 4, WHITE);
 80026c4:	1d38      	adds	r0, r7, #4
 80026c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2304      	movs	r3, #4
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	220a      	movs	r2, #10
 80026d4:	2148      	movs	r1, #72	; 0x48
 80026d6:	f001 ff19 	bl	800450c <ILI9341_Draw_Text>

	sprintf(getStr,"Date");
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	496e      	ldr	r1, [pc, #440]	; (8002898 <showSetTime+0x228>)
 80026de:	4618      	mov	r0, r3
 80026e0:	f008 fea6 	bl	800b430 <siprintf>
	ILI9341_Draw_Text(getStr, 115,60, BLACK, 3, WHITE);
 80026e4:	1d38      	adds	r0, r7, #4
 80026e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ea:	9301      	str	r3, [sp, #4]
 80026ec:	2303      	movs	r3, #3
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2300      	movs	r3, #0
 80026f2:	223c      	movs	r2, #60	; 0x3c
 80026f4:	2173      	movs	r1, #115	; 0x73
 80026f6:	f001 ff09 	bl	800450c <ILI9341_Draw_Text>

	sprintf(getStr,"Time");
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	4967      	ldr	r1, [pc, #412]	; (800289c <showSetTime+0x22c>)
 80026fe:	4618      	mov	r0, r3
 8002700:	f008 fe96 	bl	800b430 <siprintf>
	ILI9341_Draw_Text(getStr, 115,130, BLACK, 3, WHITE);
 8002704:	1d38      	adds	r0, r7, #4
 8002706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	2303      	movs	r3, #3
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	2300      	movs	r3, #0
 8002712:	2282      	movs	r2, #130	; 0x82
 8002714:	2173      	movs	r1, #115	; 0x73
 8002716:	f001 fef9 	bl	800450c <ILI9341_Draw_Text>

	if (currentIndex == 0)
 800271a:	4b61      	ldr	r3, [pc, #388]	; (80028a0 <showSetTime+0x230>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10b      	bne.n	800273a <showSetTime+0xca>
		ILI9341_Draw_Text(strdate, 55,100, BLUE, 2, WHITE);
 8002722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	2302      	movs	r3, #2
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	231f      	movs	r3, #31
 800272e:	2264      	movs	r2, #100	; 0x64
 8002730:	2137      	movs	r1, #55	; 0x37
 8002732:	4850      	ldr	r0, [pc, #320]	; (8002874 <showSetTime+0x204>)
 8002734:	f001 feea 	bl	800450c <ILI9341_Draw_Text>
 8002738:	e00a      	b.n	8002750 <showSetTime+0xe0>
	else
		ILI9341_Draw_Text(strdate, 55,100, BLACK, 2, WHITE);
 800273a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800273e:	9301      	str	r3, [sp, #4]
 8002740:	2302      	movs	r3, #2
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2300      	movs	r3, #0
 8002746:	2264      	movs	r2, #100	; 0x64
 8002748:	2137      	movs	r1, #55	; 0x37
 800274a:	484a      	ldr	r0, [pc, #296]	; (8002874 <showSetTime+0x204>)
 800274c:	f001 fede 	bl	800450c <ILI9341_Draw_Text>




	if (currentIndex == 1)
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <showSetTime+0x230>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d10b      	bne.n	8002770 <showSetTime+0x100>
		ILI9341_Draw_Text(strmonth, 100,100, BLUE, 2, WHITE);
 8002758:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	2302      	movs	r3, #2
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	231f      	movs	r3, #31
 8002764:	2264      	movs	r2, #100	; 0x64
 8002766:	2164      	movs	r1, #100	; 0x64
 8002768:	4846      	ldr	r0, [pc, #280]	; (8002884 <showSetTime+0x214>)
 800276a:	f001 fecf 	bl	800450c <ILI9341_Draw_Text>
 800276e:	e00a      	b.n	8002786 <showSetTime+0x116>
	else
		ILI9341_Draw_Text(strmonth, 100,100, BLACK, 2, WHITE);
 8002770:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2302      	movs	r3, #2
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2300      	movs	r3, #0
 800277c:	2264      	movs	r2, #100	; 0x64
 800277e:	2164      	movs	r1, #100	; 0x64
 8002780:	4840      	ldr	r0, [pc, #256]	; (8002884 <showSetTime+0x214>)
 8002782:	f001 fec3 	bl	800450c <ILI9341_Draw_Text>



	if (currentIndex== 2)
 8002786:	4b46      	ldr	r3, [pc, #280]	; (80028a0 <showSetTime+0x230>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d10b      	bne.n	80027a6 <showSetTime+0x136>
		ILI9341_Draw_Text(stryear, 215,100, BLUE, 2, WHITE);
 800278e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	231f      	movs	r3, #31
 800279a:	2264      	movs	r2, #100	; 0x64
 800279c:	21d7      	movs	r1, #215	; 0xd7
 800279e:	483c      	ldr	r0, [pc, #240]	; (8002890 <showSetTime+0x220>)
 80027a0:	f001 feb4 	bl	800450c <ILI9341_Draw_Text>
 80027a4:	e00a      	b.n	80027bc <showSetTime+0x14c>
	else
		ILI9341_Draw_Text(stryear, 215,100, BLACK, 2, WHITE);
 80027a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2302      	movs	r3, #2
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	2300      	movs	r3, #0
 80027b2:	2264      	movs	r2, #100	; 0x64
 80027b4:	21d7      	movs	r1, #215	; 0xd7
 80027b6:	4836      	ldr	r0, [pc, #216]	; (8002890 <showSetTime+0x220>)
 80027b8:	f001 fea8 	bl	800450c <ILI9341_Draw_Text>


	// hour

	sprintf(getStr,"%02d",setHour);
 80027bc:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <showSetTime+0x234>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	492b      	ldr	r1, [pc, #172]	; (8002870 <showSetTime+0x200>)
 80027c4:	4618      	mov	r0, r3
 80027c6:	f008 fe33 	bl	800b430 <siprintf>



	if (currentIndex== 3)
 80027ca:	4b35      	ldr	r3, [pc, #212]	; (80028a0 <showSetTime+0x230>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d10b      	bne.n	80027ea <showSetTime+0x17a>
			ILI9341_Draw_Text(getStr, 120,170, BLUE, 2, WHITE);
 80027d2:	1d38      	adds	r0, r7, #4
 80027d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	2302      	movs	r3, #2
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	231f      	movs	r3, #31
 80027e0:	22aa      	movs	r2, #170	; 0xaa
 80027e2:	2178      	movs	r1, #120	; 0x78
 80027e4:	f001 fe92 	bl	800450c <ILI9341_Draw_Text>
 80027e8:	e00a      	b.n	8002800 <showSetTime+0x190>
		else
			ILI9341_Draw_Text(getStr, 120,170, BLACK, 2, WHITE);
 80027ea:	1d38      	adds	r0, r7, #4
 80027ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	2302      	movs	r3, #2
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2300      	movs	r3, #0
 80027f8:	22aa      	movs	r2, #170	; 0xaa
 80027fa:	2178      	movs	r1, #120	; 0x78
 80027fc:	f001 fe86 	bl	800450c <ILI9341_Draw_Text>

	sprintf(getStr,":");
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	4929      	ldr	r1, [pc, #164]	; (80028a8 <showSetTime+0x238>)
 8002804:	4618      	mov	r0, r3
 8002806:	f008 fe13 	bl	800b430 <siprintf>
	ILI9341_Draw_Text(getStr, 150,170, BLACK, 2, WHITE);
 800280a:	1d38      	adds	r0, r7, #4
 800280c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	2302      	movs	r3, #2
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2300      	movs	r3, #0
 8002818:	22aa      	movs	r2, #170	; 0xaa
 800281a:	2196      	movs	r1, #150	; 0x96
 800281c:	f001 fe76 	bl	800450c <ILI9341_Draw_Text>

	// minute
	sprintf(getStr,"%02d",setMin);
 8002820:	4b22      	ldr	r3, [pc, #136]	; (80028ac <showSetTime+0x23c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	4912      	ldr	r1, [pc, #72]	; (8002870 <showSetTime+0x200>)
 8002828:	4618      	mov	r0, r3
 800282a:	f008 fe01 	bl	800b430 <siprintf>

	if (currentIndex== 4)
 800282e:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <showSetTime+0x230>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d10b      	bne.n	800284e <showSetTime+0x1de>
			ILI9341_Draw_Text(getStr, 160,170, BLUE, 2, WHITE);
 8002836:	1d38      	adds	r0, r7, #4
 8002838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	2302      	movs	r3, #2
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	231f      	movs	r3, #31
 8002844:	22aa      	movs	r2, #170	; 0xaa
 8002846:	21a0      	movs	r1, #160	; 0xa0
 8002848:	f001 fe60 	bl	800450c <ILI9341_Draw_Text>
		else
			ILI9341_Draw_Text(getStr, 160,170, BLACK, 2, WHITE);

//	ILI9341_Draw_Text(day[dow], 50, 10 , BLACK, 4, WHITE);
}
 800284c:	e00a      	b.n	8002864 <showSetTime+0x1f4>
			ILI9341_Draw_Text(getStr, 160,170, BLACK, 2, WHITE);
 800284e:	1d38      	adds	r0, r7, #4
 8002850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2302      	movs	r3, #2
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	22aa      	movs	r2, #170	; 0xaa
 800285e:	21a0      	movs	r1, #160	; 0xa0
 8002860:	f001 fe54 	bl	800450c <ILI9341_Draw_Text>
}
 8002864:	bf00      	nop
 8002866:	3768      	adds	r7, #104	; 0x68
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000014 	.word	0x20000014
 8002870:	0800d764 	.word	0x0800d764
 8002874:	20000490 	.word	0x20000490
 8002878:	20000018 	.word	0x20000018
 800287c:	2000003c 	.word	0x2000003c
 8002880:	0800d7ac 	.word	0x0800d7ac
 8002884:	20000494 	.word	0x20000494
 8002888:	2000001c 	.word	0x2000001c
 800288c:	0800d760 	.word	0x0800d760
 8002890:	200004a4 	.word	0x200004a4
 8002894:	0800d7b0 	.word	0x0800d7b0
 8002898:	0800d7b8 	.word	0x0800d7b8
 800289c:	0800d7c0 	.word	0x0800d7c0
 80028a0:	20000531 	.word	0x20000531
 80028a4:	20000010 	.word	0x20000010
 80028a8:	0800d7c8 	.word	0x0800d7c8
 80028ac:	2000000c 	.word	0x2000000c

080028b0 <showSetAlarm>:

void showSetAlarm(){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b09c      	sub	sp, #112	; 0x70
 80028b4:	af02      	add	r7, sp, #8



		char getStr[100] = "";
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	1d3b      	adds	r3, r7, #4
 80028bc:	2260      	movs	r2, #96	; 0x60
 80028be:	2100      	movs	r1, #0
 80028c0:	4618      	mov	r0, r3
 80028c2:	f008 fe18 	bl	800b4f6 <memset>


		sprintf(getStr,"Setting Alarm Time");
 80028c6:	463b      	mov	r3, r7
 80028c8:	4951      	ldr	r1, [pc, #324]	; (8002a10 <showSetAlarm+0x160>)
 80028ca:	4618      	mov	r0, r3
 80028cc:	f008 fdb0 	bl	800b430 <siprintf>
		ILI9341_Draw_Text(getStr, 50, 20, BLACK , 2, WHITE);
 80028d0:	4638      	mov	r0, r7
 80028d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	2302      	movs	r3, #2
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2300      	movs	r3, #0
 80028de:	2214      	movs	r2, #20
 80028e0:	2132      	movs	r1, #50	; 0x32
 80028e2:	f001 fe13 	bl	800450c <ILI9341_Draw_Text>


		ILI9341_Draw_Text("Hour   Minute", 90,90, BLACK, 2, WHITE);
 80028e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	2302      	movs	r3, #2
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2300      	movs	r3, #0
 80028f2:	225a      	movs	r2, #90	; 0x5a
 80028f4:	215a      	movs	r1, #90	; 0x5a
 80028f6:	4847      	ldr	r0, [pc, #284]	; (8002a14 <showSetAlarm+0x164>)
 80028f8:	f001 fe08 	bl	800450c <ILI9341_Draw_Text>

		sprintf(getStr,"%02d",setAlarmHour);
 80028fc:	4b46      	ldr	r3, [pc, #280]	; (8002a18 <showSetAlarm+0x168>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	463b      	mov	r3, r7
 8002902:	4946      	ldr	r1, [pc, #280]	; (8002a1c <showSetAlarm+0x16c>)
 8002904:	4618      	mov	r0, r3
 8002906:	f008 fd93 	bl	800b430 <siprintf>

		if (currentIndex== 2)
 800290a:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <showSetAlarm+0x170>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d10b      	bne.n	800292a <showSetAlarm+0x7a>
			ILI9341_Draw_Text(getStr, 95,110, BLUE, 3, WHITE);
 8002912:	4638      	mov	r0, r7
 8002914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	2303      	movs	r3, #3
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	231f      	movs	r3, #31
 8002920:	226e      	movs	r2, #110	; 0x6e
 8002922:	215f      	movs	r1, #95	; 0x5f
 8002924:	f001 fdf2 	bl	800450c <ILI9341_Draw_Text>
 8002928:	e00a      	b.n	8002940 <showSetAlarm+0x90>
		else
			ILI9341_Draw_Text(getStr, 95,110, BLACK, 3, WHITE);
 800292a:	4638      	mov	r0, r7
 800292c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2303      	movs	r3, #3
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2300      	movs	r3, #0
 8002938:	226e      	movs	r2, #110	; 0x6e
 800293a:	215f      	movs	r1, #95	; 0x5f
 800293c:	f001 fde6 	bl	800450c <ILI9341_Draw_Text>

		// minute
		sprintf(getStr,"%02d",setAlarmMin);
 8002940:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <showSetAlarm+0x174>)
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	463b      	mov	r3, r7
 8002946:	4935      	ldr	r1, [pc, #212]	; (8002a1c <showSetAlarm+0x16c>)
 8002948:	4618      	mov	r0, r3
 800294a:	f008 fd71 	bl	800b430 <siprintf>

		if (currentIndex== 3)
 800294e:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <showSetAlarm+0x170>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d10b      	bne.n	800296e <showSetAlarm+0xbe>
			ILI9341_Draw_Text(getStr, 184,110, BLUE, 3, WHITE);
 8002956:	4638      	mov	r0, r7
 8002958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800295c:	9301      	str	r3, [sp, #4]
 800295e:	2303      	movs	r3, #3
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	231f      	movs	r3, #31
 8002964:	226e      	movs	r2, #110	; 0x6e
 8002966:	21b8      	movs	r1, #184	; 0xb8
 8002968:	f001 fdd0 	bl	800450c <ILI9341_Draw_Text>
 800296c:	e00a      	b.n	8002984 <showSetAlarm+0xd4>
		else
			ILI9341_Draw_Text(getStr, 184,110, BLACK, 3, WHITE);
 800296e:	4638      	mov	r0, r7
 8002970:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	2303      	movs	r3, #3
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	2300      	movs	r3, #0
 800297c:	226e      	movs	r2, #110	; 0x6e
 800297e:	21b8      	movs	r1, #184	; 0xb8
 8002980:	f001 fdc4 	bl	800450c <ILI9341_Draw_Text>

		sprintf(getStr,"%s",day[setAlarmDay]);
 8002984:	4b28      	ldr	r3, [pc, #160]	; (8002a28 <showSetAlarm+0x178>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a28      	ldr	r2, [pc, #160]	; (8002a2c <showSetAlarm+0x17c>)
 800298a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800298e:	463b      	mov	r3, r7
 8002990:	4927      	ldr	r1, [pc, #156]	; (8002a30 <showSetAlarm+0x180>)
 8002992:	4618      	mov	r0, r3
 8002994:	f008 fd4c 	bl	800b430 <siprintf>
		uint32_t dow_x = 75 + (9 - strlen(day[setAlarmDay])) * 12;
 8002998:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <showSetAlarm+0x178>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <showSetAlarm+0x17c>)
 800299e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7fd fc9c 	bl	80002e0 <strlen>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4613      	mov	r3, r2
 80029ac:	0092      	lsls	r2, r2, #2
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	33b7      	adds	r3, #183	; 0xb7
 80029b4:	667b      	str	r3, [r7, #100]	; 0x64
		if (currentIndex== 4)
 80029b6:	4b1a      	ldr	r3, [pc, #104]	; (8002a20 <showSetAlarm+0x170>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d10c      	bne.n	80029d8 <showSetAlarm+0x128>
			ILI9341_Draw_Text(getStr, dow_x,175, BLUE, 3, WHITE);
 80029be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c0:	b2d9      	uxtb	r1, r3
 80029c2:	4638      	mov	r0, r7
 80029c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2303      	movs	r3, #3
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	231f      	movs	r3, #31
 80029d0:	22af      	movs	r2, #175	; 0xaf
 80029d2:	f001 fd9b 	bl	800450c <ILI9341_Draw_Text>
 80029d6:	e00b      	b.n	80029f0 <showSetAlarm+0x140>
		else
			ILI9341_Draw_Text(getStr, dow_x,175, BLACK, 3, WHITE);
 80029d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029da:	b2d9      	uxtb	r1, r3
 80029dc:	4638      	mov	r0, r7
 80029de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	2303      	movs	r3, #3
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2300      	movs	r3, #0
 80029ea:	22af      	movs	r2, #175	; 0xaf
 80029ec:	f001 fd8e 	bl	800450c <ILI9341_Draw_Text>



		ILI9341_Draw_Text(":", 155,110, BLACK, 3, WHITE);
 80029f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2303      	movs	r3, #3
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2300      	movs	r3, #0
 80029fc:	226e      	movs	r2, #110	; 0x6e
 80029fe:	219b      	movs	r1, #155	; 0x9b
 8002a00:	480c      	ldr	r0, [pc, #48]	; (8002a34 <showSetAlarm+0x184>)
 8002a02:	f001 fd83 	bl	800450c <ILI9341_Draw_Text>
	//ILI9341_Draw_Text(strS, 160,20, BLACK, 2, WHITE);
	//ILI9341_Draw_Text(day[dow], 60,200, BLACK, 2, WHITE);


//	ILI9341_Draw_Text(day[dow], 10, 200 , BLACK, 4, WHITE);
}
 8002a06:	bf00      	nop
 8002a08:	3768      	adds	r7, #104	; 0x68
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	0800d7cc 	.word	0x0800d7cc
 8002a14:	0800d7e0 	.word	0x0800d7e0
 8002a18:	20000430 	.word	0x20000430
 8002a1c:	0800d764 	.word	0x0800d764
 8002a20:	20000531 	.word	0x20000531
 8002a24:	2000042c 	.word	0x2000042c
 8002a28:	20000434 	.word	0x20000434
 8002a2c:	20000020 	.word	0x20000020
 8002a30:	0800d7ac 	.word	0x0800d7ac
 8002a34:	0800d7c8 	.word	0x0800d7c8

08002a38 <songSelectpage>:


void songSelectpage(){
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Song Number : ", 40,110, BLACK, 2, WHITE);
 8002a3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	2302      	movs	r3, #2
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	226e      	movs	r2, #110	; 0x6e
 8002a4c:	2128      	movs	r1, #40	; 0x28
 8002a4e:	483a      	ldr	r0, [pc, #232]	; (8002b38 <songSelectpage+0x100>)
 8002a50:	f001 fd5c 	bl	800450c <ILI9341_Draw_Text>

	char getname[20] = "";
 8002a54:	2300      	movs	r3, #0
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	1d3b      	adds	r3, r7, #4
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	60da      	str	r2, [r3, #12]
	sprintf(getname,"%d",songList);
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <songSelectpage+0x104>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	4934      	ldr	r1, [pc, #208]	; (8002b40 <songSelectpage+0x108>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f008 fcde 	bl	800b430 <siprintf>
	HAL_UART_Transmit(&huart3, getname, strlen(getname), 1000);
 8002a74:	463b      	mov	r3, r7
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fc32 	bl	80002e0 <strlen>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	4639      	mov	r1, r7
 8002a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a86:	482f      	ldr	r0, [pc, #188]	; (8002b44 <songSelectpage+0x10c>)
 8002a88:	f007 fb02 	bl	800a090 <HAL_UART_Transmit>
	if(previous_songlist != songList){
 8002a8c:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <songSelectpage+0x110>)
 8002a8e:	881a      	ldrh	r2, [r3, #0]
 8002a90:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <songSelectpage+0x104>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d016      	beq.n	8002ac6 <songSelectpage+0x8e>
		ILI9341_Draw_Filled_Rectangle_Coord(200,105, 240,130, WHITE);
 8002a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2382      	movs	r3, #130	; 0x82
 8002aa0:	22f0      	movs	r2, #240	; 0xf0
 8002aa2:	2169      	movs	r1, #105	; 0x69
 8002aa4:	20c8      	movs	r0, #200	; 0xc8
 8002aa6:	f001 fc38 	bl	800431a <ILI9341_Draw_Filled_Rectangle_Coord>
		ILI9341_Draw_Filled_Rectangle_Coord(40,140, 300,160, WHITE);
 8002aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	23a0      	movs	r3, #160	; 0xa0
 8002ab2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ab6:	218c      	movs	r1, #140	; 0x8c
 8002ab8:	2028      	movs	r0, #40	; 0x28
 8002aba:	f001 fc2e 	bl	800431a <ILI9341_Draw_Filled_Rectangle_Coord>
		previous_songlist = songList;
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <songSelectpage+0x104>)
 8002ac0:	881a      	ldrh	r2, [r3, #0]
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <songSelectpage+0x110>)
 8002ac4:	801a      	strh	r2, [r3, #0]
	}
	ILI9341_Draw_Text(getname, 200,105, BLACK, 3, WHITE);
 8002ac6:	4638      	mov	r0, r7
 8002ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	2303      	movs	r3, #3
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2269      	movs	r2, #105	; 0x69
 8002ad6:	21c8      	movs	r1, #200	; 0xc8
 8002ad8:	f001 fd18 	bl	800450c <ILI9341_Draw_Text>

	uint16_t song_x = 70 + (16-strlen(songs[songList-1]))*5;
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <songSelectpage+0x104>)
 8002ade:	881b      	ldrh	r3, [r3, #0]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	4a1a      	ldr	r2, [pc, #104]	; (8002b4c <songSelectpage+0x114>)
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fbf9 	bl	80002e0 <strlen>
 8002aee:	4603      	mov	r3, r0
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	0392      	lsls	r2, r2, #14
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3396      	adds	r3, #150	; 0x96
 8002b00:	82fb      	strh	r3, [r7, #22]
	sprintf(getname,"%s",songs[songList-1]);
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <songSelectpage+0x104>)
 8002b04:	881b      	ldrh	r3, [r3, #0]
 8002b06:	3b01      	subs	r3, #1
 8002b08:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <songSelectpage+0x114>)
 8002b0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b0e:	463b      	mov	r3, r7
 8002b10:	490f      	ldr	r1, [pc, #60]	; (8002b50 <songSelectpage+0x118>)
 8002b12:	4618      	mov	r0, r3
 8002b14:	f008 fc8c 	bl	800b430 <siprintf>

	ILI9341_Draw_Text(getname, song_x,140, BLACK, 2, WHITE);
 8002b18:	8afb      	ldrh	r3, [r7, #22]
 8002b1a:	b2d9      	uxtb	r1, r3
 8002b1c:	4638      	mov	r0, r7
 8002b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	2302      	movs	r3, #2
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	228c      	movs	r2, #140	; 0x8c
 8002b2c:	f001 fcee 	bl	800450c <ILI9341_Draw_Text>
//	ILI9341_Draw_Filled_Circle(X, Y, Radius, Colour)

}
 8002b30:	bf00      	nop
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	0800d7f0 	.word	0x0800d7f0
 8002b3c:	20000070 	.word	0x20000070
 8002b40:	0800d760 	.word	0x0800d760
 8002b44:	20000794 	.word	0x20000794
 8002b48:	20000072 	.word	0x20000072
 8002b4c:	20000074 	.word	0x20000074
 8002b50:	0800d7ac 	.word	0x0800d7ac

08002b54 <setPage>:

void setPage(){
 8002b54:	b5b0      	push	{r4, r5, r7, lr}
 8002b56:	b090      	sub	sp, #64	; 0x40
 8002b58:	af02      	add	r7, sp, #8
	if((count-starttime) > 1000){
 8002b5a:	4b98      	ldr	r3, [pc, #608]	; (8002dbc <setPage+0x268>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b98      	ldr	r3, [pc, #608]	; (8002dc0 <setPage+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b68:	d919      	bls.n	8002b9e <setPage+0x4a>
		if(screen == 2)
 8002b6a:	4b96      	ldr	r3, [pc, #600]	; (8002dc4 <setPage+0x270>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d102      	bne.n	8002b78 <setPage+0x24>
			showSetTime();
 8002b72:	f7ff fd7d 	bl	8002670 <showSetTime>
 8002b76:	e00e      	b.n	8002b96 <setPage+0x42>
		else if(screen == 3)
 8002b78:	4b92      	ldr	r3, [pc, #584]	; (8002dc4 <setPage+0x270>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d102      	bne.n	8002b86 <setPage+0x32>
			showSetAlarm();
 8002b80:	f7ff fe96 	bl	80028b0 <showSetAlarm>
 8002b84:	e007      	b.n	8002b96 <setPage+0x42>

		else if(screen == 4){
 8002b86:	4b8f      	ldr	r3, [pc, #572]	; (8002dc4 <setPage+0x270>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d103      	bne.n	8002b96 <setPage+0x42>
			songSelectpage();
 8002b8e:	f7ff ff53 	bl	8002a38 <songSelectpage>
			selectSong();
 8002b92:	f7fd fdcf 	bl	8000734 <selectSong>
//			HAL_UART_Transmit(&huart3, songList,  , Timeout);
		}

		starttime = count;
 8002b96:	4b89      	ldr	r3, [pc, #548]	; (8002dbc <setPage+0x268>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a89      	ldr	r2, [pc, #548]	; (8002dc0 <setPage+0x26c>)
 8002b9c:	6013      	str	r3, [r2, #0]
	}




   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && count - debounceTime > 1000){
 8002b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba2:	4889      	ldr	r0, [pc, #548]	; (8002dc8 <setPage+0x274>)
 8002ba4:	f003 fc06 	bl	80063b4 <HAL_GPIO_ReadPin>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f040 8156 	bne.w	8002e5c <setPage+0x308>
 8002bb0:	4b82      	ldr	r3, [pc, #520]	; (8002dbc <setPage+0x268>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b85      	ldr	r3, [pc, #532]	; (8002dcc <setPage+0x278>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bbe:	f240 814d 	bls.w	8002e5c <setPage+0x308>
	   debounceTime = count;
 8002bc2:	4b7e      	ldr	r3, [pc, #504]	; (8002dbc <setPage+0x268>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a81      	ldr	r2, [pc, #516]	; (8002dcc <setPage+0x278>)
 8002bc8:	6013      	str	r3, [r2, #0]
	   switch(currentIndex){
 8002bca:	4b81      	ldr	r3, [pc, #516]	; (8002dd0 <setPage+0x27c>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	f200 8325 	bhi.w	800321e <setPage+0x6ca>
 8002bd4:	a201      	add	r2, pc, #4	; (adr r2, 8002bdc <setPage+0x88>)
 8002bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bda:	bf00      	nop
 8002bdc:	08002bf1 	.word	0x08002bf1
 8002be0:	08002cab 	.word	0x08002cab
 8002be4:	08002ced 	.word	0x08002ced
 8002be8:	08002d31 	.word	0x08002d31
 8002bec:	08002d8d 	.word	0x08002d8d
	   case 0:
		   if(screen == 2){
 8002bf0:	4b74      	ldr	r3, [pc, #464]	; (8002dc4 <setPage+0x270>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	f040 8127 	bne.w	8002e48 <setPage+0x2f4>
			   setDate++;
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <setPage+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	4a74      	ldr	r2, [pc, #464]	; (8002dd4 <setPage+0x280>)
 8002c02:	6013      	str	r3, [r2, #0]
			   if(setMonth == 3 || setMonth == 5 || setMonth == 8 || setMonth == 10)
 8002c04:	4b74      	ldr	r3, [pc, #464]	; (8002dd8 <setPage+0x284>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d00b      	beq.n	8002c24 <setPage+0xd0>
 8002c0c:	4b72      	ldr	r3, [pc, #456]	; (8002dd8 <setPage+0x284>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d007      	beq.n	8002c24 <setPage+0xd0>
 8002c14:	4b70      	ldr	r3, [pc, #448]	; (8002dd8 <setPage+0x284>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d003      	beq.n	8002c24 <setPage+0xd0>
 8002c1c:	4b6e      	ldr	r3, [pc, #440]	; (8002dd8 <setPage+0x284>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b0a      	cmp	r3, #10
 8002c22:	d10d      	bne.n	8002c40 <setPage+0xec>
				   setDate %= 30;
 8002c24:	4b6b      	ldr	r3, [pc, #428]	; (8002dd4 <setPage+0x280>)
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	4b6c      	ldr	r3, [pc, #432]	; (8002ddc <setPage+0x288>)
 8002c2a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c2e:	091a      	lsrs	r2, r3, #4
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	1aca      	subs	r2, r1, r3
 8002c3a:	4b66      	ldr	r3, [pc, #408]	; (8002dd4 <setPage+0x280>)
 8002c3c:	601a      	str	r2, [r3, #0]
			   else{
				   setDate %= 31;
			   }
		   }

		   break;
 8002c3e:	e103      	b.n	8002e48 <setPage+0x2f4>
			   else if(setMonth == 1)
 8002c40:	4b65      	ldr	r3, [pc, #404]	; (8002dd8 <setPage+0x284>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d120      	bne.n	8002c8a <setPage+0x136>
				   setDate = setYear%4==0 ? setDate%29 : setDate%28;
 8002c48:	4b65      	ldr	r3, [pc, #404]	; (8002de0 <setPage+0x28c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10c      	bne.n	8002c6e <setPage+0x11a>
 8002c54:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <setPage+0x280>)
 8002c56:	6819      	ldr	r1, [r3, #0]
 8002c58:	4b62      	ldr	r3, [pc, #392]	; (8002de4 <setPage+0x290>)
 8002c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5e:	091a      	lsrs	r2, r3, #4
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	1aca      	subs	r2, r1, r3
 8002c6c:	e00a      	b.n	8002c84 <setPage+0x130>
 8002c6e:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <setPage+0x280>)
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	0893      	lsrs	r3, r2, #2
 8002c74:	495c      	ldr	r1, [pc, #368]	; (8002de8 <setPage+0x294>)
 8002c76:	fba1 3103 	umull	r3, r1, r1, r3
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	1a5b      	subs	r3, r3, r1
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	1ad2      	subs	r2, r2, r3
 8002c84:	4b53      	ldr	r3, [pc, #332]	; (8002dd4 <setPage+0x280>)
 8002c86:	601a      	str	r2, [r3, #0]
		   break;
 8002c88:	e0de      	b.n	8002e48 <setPage+0x2f4>
				   setDate %= 31;
 8002c8a:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <setPage+0x280>)
 8002c8c:	6819      	ldr	r1, [r3, #0]
 8002c8e:	4b57      	ldr	r3, [pc, #348]	; (8002dec <setPage+0x298>)
 8002c90:	fba3 2301 	umull	r2, r3, r3, r1
 8002c94:	1aca      	subs	r2, r1, r3
 8002c96:	0852      	lsrs	r2, r2, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	091a      	lsrs	r2, r3, #4
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	015b      	lsls	r3, r3, #5
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	1aca      	subs	r2, r1, r3
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <setPage+0x280>)
 8002ca6:	601a      	str	r2, [r3, #0]
		   break;
 8002ca8:	e0ce      	b.n	8002e48 <setPage+0x2f4>
	   case 1:
		   if(screen == 2) {
 8002caa:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <setPage+0x270>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	f040 80cc 	bne.w	8002e4c <setPage+0x2f8>
			   setMonth++;
 8002cb4:	4b48      	ldr	r3, [pc, #288]	; (8002dd8 <setPage+0x284>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	4a47      	ldr	r2, [pc, #284]	; (8002dd8 <setPage+0x284>)
 8002cbc:	6013      	str	r3, [r2, #0]
			   setMonth %= 12;
 8002cbe:	4b46      	ldr	r3, [pc, #280]	; (8002dd8 <setPage+0x284>)
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	4b4b      	ldr	r3, [pc, #300]	; (8002df0 <setPage+0x29c>)
 8002cc4:	fba3 2301 	umull	r2, r3, r3, r1
 8002cc8:	08da      	lsrs	r2, r3, #3
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	1aca      	subs	r2, r1, r3
 8002cd4:	4b40      	ldr	r3, [pc, #256]	; (8002dd8 <setPage+0x284>)
 8002cd6:	601a      	str	r2, [r3, #0]


			   ILI9341_Draw_Rectangle(90,100, 125,30,  WHITE);
 8002cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	231e      	movs	r3, #30
 8002ce0:	227d      	movs	r2, #125	; 0x7d
 8002ce2:	2164      	movs	r1, #100	; 0x64
 8002ce4:	205a      	movs	r0, #90	; 0x5a
 8002ce6:	f002 f81b 	bl	8004d20 <ILI9341_Draw_Rectangle>
		   }

		   break;
 8002cea:	e0af      	b.n	8002e4c <setPage+0x2f8>
	   case 2:
		   if(screen == 2) {setYear++;}
 8002cec:	4b35      	ldr	r3, [pc, #212]	; (8002dc4 <setPage+0x270>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d105      	bne.n	8002d00 <setPage+0x1ac>
 8002cf4:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <setPage+0x28c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	4a39      	ldr	r2, [pc, #228]	; (8002de0 <setPage+0x28c>)
 8002cfc:	6013      	str	r3, [r2, #0]
		   else if(screen == 3){
			   setAlarmHour++;
			   setAlarmHour %=24;
		   }

		   break;
 8002cfe:	e0a7      	b.n	8002e50 <setPage+0x2fc>
		   else if(screen == 3){
 8002d00:	4b30      	ldr	r3, [pc, #192]	; (8002dc4 <setPage+0x270>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	f040 80a3 	bne.w	8002e50 <setPage+0x2fc>
			   setAlarmHour++;
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	; (8002df4 <setPage+0x2a0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	4a38      	ldr	r2, [pc, #224]	; (8002df4 <setPage+0x2a0>)
 8002d12:	6013      	str	r3, [r2, #0]
			   setAlarmHour %=24;
 8002d14:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <setPage+0x2a0>)
 8002d16:	6819      	ldr	r1, [r3, #0]
 8002d18:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <setPage+0x29c>)
 8002d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d1e:	091a      	lsrs	r2, r3, #4
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	1aca      	subs	r2, r1, r3
 8002d2a:	4b32      	ldr	r3, [pc, #200]	; (8002df4 <setPage+0x2a0>)
 8002d2c:	601a      	str	r2, [r3, #0]
		   break;
 8002d2e:	e08f      	b.n	8002e50 <setPage+0x2fc>
	   case 3:
		   if(screen == 2){
 8002d30:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <setPage+0x270>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d112      	bne.n	8002d5e <setPage+0x20a>
			   setHour++;
 8002d38:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <setPage+0x2a4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a2e      	ldr	r2, [pc, #184]	; (8002df8 <setPage+0x2a4>)
 8002d40:	6013      	str	r3, [r2, #0]
			   setHour %= 24;
 8002d42:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <setPage+0x2a4>)
 8002d44:	6819      	ldr	r1, [r3, #0]
 8002d46:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <setPage+0x29c>)
 8002d48:	fba3 2301 	umull	r2, r3, r3, r1
 8002d4c:	091a      	lsrs	r2, r3, #4
 8002d4e:	4613      	mov	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4413      	add	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1aca      	subs	r2, r1, r3
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <setPage+0x2a4>)
 8002d5a:	601a      	str	r2, [r3, #0]
	   		else if(screen == 3){
	   			setAlarmMin++;
	   			setAlarmMin %=60;
	   		}

		   break;
 8002d5c:	e07a      	b.n	8002e54 <setPage+0x300>
	   		else if(screen == 3){
 8002d5e:	4b19      	ldr	r3, [pc, #100]	; (8002dc4 <setPage+0x270>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d176      	bne.n	8002e54 <setPage+0x300>
	   			setAlarmMin++;
 8002d66:	4b25      	ldr	r3, [pc, #148]	; (8002dfc <setPage+0x2a8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <setPage+0x2a8>)
 8002d6e:	6013      	str	r3, [r2, #0]
	   			setAlarmMin %=60;
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <setPage+0x2a8>)
 8002d72:	6819      	ldr	r1, [r3, #0]
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <setPage+0x288>)
 8002d76:	fba3 2301 	umull	r2, r3, r3, r1
 8002d7a:	095a      	lsrs	r2, r3, #5
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	1aca      	subs	r2, r1, r3
 8002d86:	4b1d      	ldr	r3, [pc, #116]	; (8002dfc <setPage+0x2a8>)
 8002d88:	601a      	str	r2, [r3, #0]
		   break;
 8002d8a:	e063      	b.n	8002e54 <setPage+0x300>
	   case 4:
	   		if(screen == 2){
 8002d8c:	4b0d      	ldr	r3, [pc, #52]	; (8002dc4 <setPage+0x270>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d137      	bne.n	8002e04 <setPage+0x2b0>
	   			   setMin++;
 8002d94:	4b1a      	ldr	r3, [pc, #104]	; (8002e00 <setPage+0x2ac>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <setPage+0x2ac>)
 8002d9c:	6013      	str	r3, [r2, #0]
	   			   setMin %= 60;
 8002d9e:	4b18      	ldr	r3, [pc, #96]	; (8002e00 <setPage+0x2ac>)
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	4b0e      	ldr	r3, [pc, #56]	; (8002ddc <setPage+0x288>)
 8002da4:	fba3 2301 	umull	r2, r3, r3, r1
 8002da8:	095a      	lsrs	r2, r3, #5
 8002daa:	4613      	mov	r3, r2
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	1a9b      	subs	r3, r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	1aca      	subs	r2, r1, r3
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <setPage+0x2ac>)
 8002db6:	601a      	str	r2, [r3, #0]
	   			setAlarmDay %= 7;

	   			ILI9341_Draw_Rectangle( 70,175, 200,40,  WHITE);
	   		}

	   		break;
 8002db8:	e04e      	b.n	8002e58 <setPage+0x304>
 8002dba:	bf00      	nop
 8002dbc:	20000414 	.word	0x20000414
 8002dc0:	20000418 	.word	0x20000418
 8002dc4:	20000004 	.word	0x20000004
 8002dc8:	40020400 	.word	0x40020400
 8002dcc:	20000538 	.word	0x20000538
 8002dd0:	20000531 	.word	0x20000531
 8002dd4:	20000014 	.word	0x20000014
 8002dd8:	20000018 	.word	0x20000018
 8002ddc:	88888889 	.word	0x88888889
 8002de0:	2000001c 	.word	0x2000001c
 8002de4:	8d3dcb09 	.word	0x8d3dcb09
 8002de8:	24924925 	.word	0x24924925
 8002dec:	08421085 	.word	0x08421085
 8002df0:	aaaaaaab 	.word	0xaaaaaaab
 8002df4:	20000430 	.word	0x20000430
 8002df8:	20000010 	.word	0x20000010
 8002dfc:	2000042c 	.word	0x2000042c
 8002e00:	2000000c 	.word	0x2000000c
	   		else if(screen == 3){
 8002e04:	4b9a      	ldr	r3, [pc, #616]	; (8003070 <setPage+0x51c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d125      	bne.n	8002e58 <setPage+0x304>
	   			setAlarmDay++;
 8002e0c:	4b99      	ldr	r3, [pc, #612]	; (8003074 <setPage+0x520>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3301      	adds	r3, #1
 8002e12:	4a98      	ldr	r2, [pc, #608]	; (8003074 <setPage+0x520>)
 8002e14:	6013      	str	r3, [r2, #0]
	   			setAlarmDay %= 7;
 8002e16:	4b97      	ldr	r3, [pc, #604]	; (8003074 <setPage+0x520>)
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	4b97      	ldr	r3, [pc, #604]	; (8003078 <setPage+0x524>)
 8002e1c:	fba3 2301 	umull	r2, r3, r3, r1
 8002e20:	1aca      	subs	r2, r1, r3
 8002e22:	0852      	lsrs	r2, r2, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	089a      	lsrs	r2, r3, #2
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	1aca      	subs	r2, r1, r3
 8002e30:	4b90      	ldr	r3, [pc, #576]	; (8003074 <setPage+0x520>)
 8002e32:	601a      	str	r2, [r3, #0]
	   			ILI9341_Draw_Rectangle( 70,175, 200,40,  WHITE);
 8002e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	2328      	movs	r3, #40	; 0x28
 8002e3c:	22c8      	movs	r2, #200	; 0xc8
 8002e3e:	21af      	movs	r1, #175	; 0xaf
 8002e40:	2046      	movs	r0, #70	; 0x46
 8002e42:	f001 ff6d 	bl	8004d20 <ILI9341_Draw_Rectangle>
	   		break;
 8002e46:	e007      	b.n	8002e58 <setPage+0x304>
		   break;
 8002e48:	bf00      	nop
 8002e4a:	e1e8      	b.n	800321e <setPage+0x6ca>
		   break;
 8002e4c:	bf00      	nop
 8002e4e:	e1e6      	b.n	800321e <setPage+0x6ca>
		   break;
 8002e50:	bf00      	nop
 8002e52:	e1e4      	b.n	800321e <setPage+0x6ca>
		   break;
 8002e54:	bf00      	nop
 8002e56:	e1e2      	b.n	800321e <setPage+0x6ca>
	   		break;
 8002e58:	bf00      	nop
	   switch(currentIndex){
 8002e5a:	e1e0      	b.n	800321e <setPage+0x6ca>

	   }
   }
   else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET && count - debounceTime > 1000){
 8002e5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e60:	4886      	ldr	r0, [pc, #536]	; (800307c <setPage+0x528>)
 8002e62:	f003 faa7 	bl	80063b4 <HAL_GPIO_ReadPin>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f040 80ab 	bne.w	8002fc4 <setPage+0x470>
 8002e6e:	4b84      	ldr	r3, [pc, #528]	; (8003080 <setPage+0x52c>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b84      	ldr	r3, [pc, #528]	; (8003084 <setPage+0x530>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e7c:	f240 80a2 	bls.w	8002fc4 <setPage+0x470>
	   debounceTime = count;
 8002e80:	4b7f      	ldr	r3, [pc, #508]	; (8003080 <setPage+0x52c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a7f      	ldr	r2, [pc, #508]	; (8003084 <setPage+0x530>)
 8002e86:	6013      	str	r3, [r2, #0]
	   switch(currentIndex){
 8002e88:	4b7f      	ldr	r3, [pc, #508]	; (8003088 <setPage+0x534>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	f200 81c6 	bhi.w	800321e <setPage+0x6ca>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <setPage+0x344>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ead 	.word	0x08002ead
 8002e9c:	08002ec9 	.word	0x08002ec9
 8002ea0:	08002ee5 	.word	0x08002ee5
 8002ea4:	08002f1d 	.word	0x08002f1d
 8002ea8:	08002f67 	.word	0x08002f67
	   case 0:
		   if(screen == 2){
 8002eac:	4b70      	ldr	r3, [pc, #448]	; (8003070 <setPage+0x51c>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d17d      	bne.n	8002fb0 <setPage+0x45c>
			   if(setDate > 0)
 8002eb4:	4b75      	ldr	r3, [pc, #468]	; (800308c <setPage+0x538>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d079      	beq.n	8002fb0 <setPage+0x45c>
				   setDate--;
 8002ebc:	4b73      	ldr	r3, [pc, #460]	; (800308c <setPage+0x538>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	4a72      	ldr	r2, [pc, #456]	; (800308c <setPage+0x538>)
 8002ec4:	6013      	str	r3, [r2, #0]
		   }

		   break;
 8002ec6:	e073      	b.n	8002fb0 <setPage+0x45c>
	   case 1:
		   if(screen == 2) {
 8002ec8:	4b69      	ldr	r3, [pc, #420]	; (8003070 <setPage+0x51c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d171      	bne.n	8002fb4 <setPage+0x460>
			   if (setMonth > 0)
 8002ed0:	4b6f      	ldr	r3, [pc, #444]	; (8003090 <setPage+0x53c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d06d      	beq.n	8002fb4 <setPage+0x460>
				   setMonth--;
 8002ed8:	4b6d      	ldr	r3, [pc, #436]	; (8003090 <setPage+0x53c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3b01      	subs	r3, #1
 8002ede:	4a6c      	ldr	r2, [pc, #432]	; (8003090 <setPage+0x53c>)
 8002ee0:	6013      	str	r3, [r2, #0]
//			   ILI9341_Draw_Rectangle(75,200, 125,40,  WHITE);

		   }

		   break;
 8002ee2:	e067      	b.n	8002fb4 <setPage+0x460>
	   case 2:
		   if(screen == 2) {
 8002ee4:	4b62      	ldr	r3, [pc, #392]	; (8003070 <setPage+0x51c>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d109      	bne.n	8002f00 <setPage+0x3ac>
			   if(setYear > 0)
 8002eec:	4b69      	ldr	r3, [pc, #420]	; (8003094 <setPage+0x540>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d061      	beq.n	8002fb8 <setPage+0x464>
				   setYear--;
 8002ef4:	4b67      	ldr	r3, [pc, #412]	; (8003094 <setPage+0x540>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	4a66      	ldr	r2, [pc, #408]	; (8003094 <setPage+0x540>)
 8002efc:	6013      	str	r3, [r2, #0]
					   setAlarmHour--;

						   }
		   }

		   break;
 8002efe:	e05b      	b.n	8002fb8 <setPage+0x464>
		   else if(screen == 3){
 8002f00:	4b5b      	ldr	r3, [pc, #364]	; (8003070 <setPage+0x51c>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d157      	bne.n	8002fb8 <setPage+0x464>
			   if(setAlarmHour > 0){
 8002f08:	4b63      	ldr	r3, [pc, #396]	; (8003098 <setPage+0x544>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d053      	beq.n	8002fb8 <setPage+0x464>
					   setAlarmHour--;
 8002f10:	4b61      	ldr	r3, [pc, #388]	; (8003098 <setPage+0x544>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	4a60      	ldr	r2, [pc, #384]	; (8003098 <setPage+0x544>)
 8002f18:	6013      	str	r3, [r2, #0]
		   break;
 8002f1a:	e04d      	b.n	8002fb8 <setPage+0x464>

	   case 3:
		   if(screen == 2){
 8002f1c:	4b54      	ldr	r3, [pc, #336]	; (8003070 <setPage+0x51c>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d109      	bne.n	8002f38 <setPage+0x3e4>
			   if(setHour > 0){
 8002f24:	4b5d      	ldr	r3, [pc, #372]	; (800309c <setPage+0x548>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d047      	beq.n	8002fbc <setPage+0x468>
	   			   setHour--;
 8002f2c:	4b5b      	ldr	r3, [pc, #364]	; (800309c <setPage+0x548>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	4a5a      	ldr	r2, [pc, #360]	; (800309c <setPage+0x548>)
 8002f34:	6013      	str	r3, [r2, #0]
			   if(setAlarmMin > 0){
					   setAlarmMin--;
					   ILI9341_Draw_Rectangle(90,175, 125,30,  WHITE);
						   }
		   }
		   break;
 8002f36:	e041      	b.n	8002fbc <setPage+0x468>
		   else if(screen == 3){
 8002f38:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <setPage+0x51c>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b03      	cmp	r3, #3
 8002f3e:	d13d      	bne.n	8002fbc <setPage+0x468>
			   if(setAlarmMin > 0){
 8002f40:	4b57      	ldr	r3, [pc, #348]	; (80030a0 <setPage+0x54c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d039      	beq.n	8002fbc <setPage+0x468>
					   setAlarmMin--;
 8002f48:	4b55      	ldr	r3, [pc, #340]	; (80030a0 <setPage+0x54c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	4a54      	ldr	r2, [pc, #336]	; (80030a0 <setPage+0x54c>)
 8002f50:	6013      	str	r3, [r2, #0]
					   ILI9341_Draw_Rectangle(90,175, 125,30,  WHITE);
 8002f52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	231e      	movs	r3, #30
 8002f5a:	227d      	movs	r2, #125	; 0x7d
 8002f5c:	21af      	movs	r1, #175	; 0xaf
 8002f5e:	205a      	movs	r0, #90	; 0x5a
 8002f60:	f001 fede 	bl	8004d20 <ILI9341_Draw_Rectangle>
		   break;
 8002f64:	e02a      	b.n	8002fbc <setPage+0x468>


	   case 4:
	   		   if(screen == 2){
 8002f66:	4b42      	ldr	r3, [pc, #264]	; (8003070 <setPage+0x51c>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d109      	bne.n	8002f82 <setPage+0x42e>
	   			   if(setMin > 0){
 8002f6e:	4b4d      	ldr	r3, [pc, #308]	; (80030a4 <setPage+0x550>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d024      	beq.n	8002fc0 <setPage+0x46c>
	   	   			   setMin--;
 8002f76:	4b4b      	ldr	r3, [pc, #300]	; (80030a4 <setPage+0x550>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	4a49      	ldr	r2, [pc, #292]	; (80030a4 <setPage+0x550>)
 8002f7e:	6013      	str	r3, [r2, #0]
						   }
			   ILI9341_Draw_Rectangle(60,200, 200,40,  WHITE);
//			   ILI9341_Draw_Rectangle(90,200, 125,40,  RED);
		   }

	   		   break;
 8002f80:	e01e      	b.n	8002fc0 <setPage+0x46c>
	   		else if(screen == 3){
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <setPage+0x51c>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d11a      	bne.n	8002fc0 <setPage+0x46c>
			   if(setAlarmDay > 0){
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <setPage+0x520>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <setPage+0x448>
					   setAlarmDay--;
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <setPage+0x520>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	3b01      	subs	r3, #1
 8002f98:	4a36      	ldr	r2, [pc, #216]	; (8003074 <setPage+0x520>)
 8002f9a:	6013      	str	r3, [r2, #0]
			   ILI9341_Draw_Rectangle(60,200, 200,40,  WHITE);
 8002f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2328      	movs	r3, #40	; 0x28
 8002fa4:	22c8      	movs	r2, #200	; 0xc8
 8002fa6:	21c8      	movs	r1, #200	; 0xc8
 8002fa8:	203c      	movs	r0, #60	; 0x3c
 8002faa:	f001 feb9 	bl	8004d20 <ILI9341_Draw_Rectangle>
	   		   break;
 8002fae:	e007      	b.n	8002fc0 <setPage+0x46c>
		   break;
 8002fb0:	bf00      	nop
 8002fb2:	e134      	b.n	800321e <setPage+0x6ca>
		   break;
 8002fb4:	bf00      	nop
 8002fb6:	e132      	b.n	800321e <setPage+0x6ca>
		   break;
 8002fb8:	bf00      	nop
 8002fba:	e130      	b.n	800321e <setPage+0x6ca>
		   break;
 8002fbc:	bf00      	nop
 8002fbe:	e12e      	b.n	800321e <setPage+0x6ca>
	   		   break;
 8002fc0:	bf00      	nop
	   switch(currentIndex){
 8002fc2:	e12c      	b.n	800321e <setPage+0x6ca>

	   }
   }
   else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTime > 100){
 8002fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002fc8:	482c      	ldr	r0, [pc, #176]	; (800307c <setPage+0x528>)
 8002fca:	f003 f9f3 	bl	80063b4 <HAL_GPIO_ReadPin>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 80c0 	bne.w	8003156 <setPage+0x602>
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <setPage+0x52c>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <setPage+0x530>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b64      	cmp	r3, #100	; 0x64
 8002fe2:	f240 80b8 	bls.w	8003156 <setPage+0x602>
	   debounceTime = count;
 8002fe6:	4b26      	ldr	r3, [pc, #152]	; (8003080 <setPage+0x52c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a26      	ldr	r2, [pc, #152]	; (8003084 <setPage+0x530>)
 8002fec:	6013      	str	r3, [r2, #0]
//	   else{

		   // update setting Time


		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8002fee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ff2:	4822      	ldr	r0, [pc, #136]	; (800307c <setPage+0x528>)
 8002ff4:	f003 f9de 	bl	80063b4 <HAL_GPIO_ReadPin>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d17d      	bne.n	80030fa <setPage+0x5a6>
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <setPage+0x52c>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <setPage+0x554>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800300c:	4293      	cmp	r3, r2
 800300e:	d974      	bls.n	80030fa <setPage+0x5a6>


			   if(screen == 2){
 8003010:	4b17      	ldr	r3, [pc, #92]	; (8003070 <setPage+0x51c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b02      	cmp	r3, #2
 8003016:	d149      	bne.n	80030ac <setPage+0x558>
			   DS3231_SetFullDate(setDate+1,setMonth+1, dayofweek(setDate + 1, setMonth + 1, setYear), setYear);
 8003018:	4b1c      	ldr	r3, [pc, #112]	; (800308c <setPage+0x538>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	b2db      	uxtb	r3, r3
 800301e:	3301      	adds	r3, #1
 8003020:	b2dc      	uxtb	r4, r3
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <setPage+0x53c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3301      	adds	r3, #1
 800302a:	b2dd      	uxtb	r5, r3
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <setPage+0x538>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	1c58      	adds	r0, r3, #1
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <setPage+0x53c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3301      	adds	r3, #1
 8003038:	4a16      	ldr	r2, [pc, #88]	; (8003094 <setPage+0x540>)
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	4619      	mov	r1, r3
 800303e:	f000 fa63 	bl	8003508 <dayofweek>
 8003042:	4603      	mov	r3, r0
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b13      	ldr	r3, [pc, #76]	; (8003094 <setPage+0x540>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	b29b      	uxth	r3, r3
 800304c:	4629      	mov	r1, r5
 800304e:	4620      	mov	r0, r4
 8003050:	f7fe f8be 	bl	80011d0 <DS3231_SetFullDate>
			   DS3231_SetMinute(setMin);
 8003054:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <setPage+0x550>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	4618      	mov	r0, r3
 800305c:	f7fe f87b 	bl	8001156 <DS3231_SetMinute>
			   DS3231_SetHour(setHour);
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <setPage+0x548>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe f860 	bl	800112c <DS3231_SetHour>
 800306c:	e039      	b.n	80030e2 <setPage+0x58e>
 800306e:	bf00      	nop
 8003070:	20000004 	.word	0x20000004
 8003074:	20000434 	.word	0x20000434
 8003078:	24924925 	.word	0x24924925
 800307c:	40020400 	.word	0x40020400
 8003080:	20000414 	.word	0x20000414
 8003084:	20000538 	.word	0x20000538
 8003088:	20000531 	.word	0x20000531
 800308c:	20000014 	.word	0x20000014
 8003090:	20000018 	.word	0x20000018
 8003094:	2000001c 	.word	0x2000001c
 8003098:	20000430 	.word	0x20000430
 800309c:	20000010 	.word	0x20000010
 80030a0:	2000042c 	.word	0x2000042c
 80030a4:	2000000c 	.word	0x2000000c
 80030a8:	20000544 	.word	0x20000544


			   }
			   else if (screen == 3){
 80030ac:	4b5e      	ldr	r3, [pc, #376]	; (8003228 <setPage+0x6d4>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d116      	bne.n	80030e2 <setPage+0x58e>

				   DS3231_SetAlarm1Hour(setAlarmHour);
 80030b4:	4b5d      	ldr	r3, [pc, #372]	; (800322c <setPage+0x6d8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fe89 	bl	8000dd2 <DS3231_SetAlarm1Hour>
				   DS3231_SetAlarm1Minute(setAlarmMin);
 80030c0:	4b5b      	ldr	r3, [pc, #364]	; (8003230 <setPage+0x6dc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fe60 	bl	8000d8c <DS3231_SetAlarm1Minute>
				   DS3231_SetAlarm1Second(0);
 80030cc:	2000      	movs	r0, #0
 80030ce:	f7fd fe3a 	bl	8000d46 <DS3231_SetAlarm1Second>
				   DS3231_SetAlarm1Day(setAlarmDay+1);  // ใส่ day of week
 80030d2:	4b58      	ldr	r3, [pc, #352]	; (8003234 <setPage+0x6e0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	3301      	adds	r3, #1
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fd fe9b 	bl	8000e18 <DS3231_SetAlarm1Day>
			   }


			   debounceTimeSave = count;
 80030e2:	4b55      	ldr	r3, [pc, #340]	; (8003238 <setPage+0x6e4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a55      	ldr	r2, [pc, #340]	; (800323c <setPage+0x6e8>)
 80030e8:	6013      	str	r3, [r2, #0]


			   HAL_UART_Transmit(&huart3, (uint8_t *)"SAVED!!", sizeof("SAVED!!"), HAL_MAX_DELAY);
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
 80030ee:	2208      	movs	r2, #8
 80030f0:	4953      	ldr	r1, [pc, #332]	; (8003240 <setPage+0x6ec>)
 80030f2:	4854      	ldr	r0, [pc, #336]	; (8003244 <setPage+0x6f0>)
 80030f4:	f006 ffcc 	bl	800a090 <HAL_UART_Transmit>
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 80030f8:	e08f      	b.n	800321a <setPage+0x6c6>
		   }
		   else{

			   if (screen==2){
 80030fa:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <setPage+0x6d4>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d113      	bne.n	800312a <setPage+0x5d6>
			   currentIndex += 1;
 8003102:	4b51      	ldr	r3, [pc, #324]	; (8003248 <setPage+0x6f4>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	3301      	adds	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <setPage+0x6f4>)
 800310c:	701a      	strb	r2, [r3, #0]
			   currentIndex %= 5;
 800310e:	4b4e      	ldr	r3, [pc, #312]	; (8003248 <setPage+0x6f4>)
 8003110:	781a      	ldrb	r2, [r3, #0]
 8003112:	4b4e      	ldr	r3, [pc, #312]	; (800324c <setPage+0x6f8>)
 8003114:	fba3 1302 	umull	r1, r3, r3, r2
 8003118:	0899      	lsrs	r1, r3, #2
 800311a:	460b      	mov	r3, r1
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	b2da      	uxtb	r2, r3
 8003124:	4b48      	ldr	r3, [pc, #288]	; (8003248 <setPage+0x6f4>)
 8003126:	701a      	strb	r2, [r3, #0]
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8003128:	e077      	b.n	800321a <setPage+0x6c6>
			   }
			   else if(screen==3){
 800312a:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <setPage+0x6d4>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d173      	bne.n	800321a <setPage+0x6c6>



				   currentIndex += 1;
 8003132:	4b45      	ldr	r3, [pc, #276]	; (8003248 <setPage+0x6f4>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	b2da      	uxtb	r2, r3
 800313a:	4b43      	ldr	r3, [pc, #268]	; (8003248 <setPage+0x6f4>)
 800313c:	701a      	strb	r2, [r3, #0]

				   if (currentIndex < 2 || currentIndex > 4){
 800313e:	4b42      	ldr	r3, [pc, #264]	; (8003248 <setPage+0x6f4>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d903      	bls.n	800314e <setPage+0x5fa>
 8003146:	4b40      	ldr	r3, [pc, #256]	; (8003248 <setPage+0x6f4>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b04      	cmp	r3, #4
 800314c:	d965      	bls.n	800321a <setPage+0x6c6>
					   currentIndex = 2;
 800314e:	4b3e      	ldr	r3, [pc, #248]	; (8003248 <setPage+0x6f4>)
 8003150:	2202      	movs	r2, #2
 8003152:	701a      	strb	r2, [r3, #0]
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8003154:	e061      	b.n	800321a <setPage+0x6c6>

//
//	   }
   }

   else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && count - debounceTime > 200 ){
 8003156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800315a:	483d      	ldr	r0, [pc, #244]	; (8003250 <setPage+0x6fc>)
 800315c:	f003 f92a 	bl	80063b4 <HAL_GPIO_ReadPin>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d15b      	bne.n	800321e <setPage+0x6ca>
 8003166:	4b34      	ldr	r3, [pc, #208]	; (8003238 <setPage+0x6e4>)
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	4b3a      	ldr	r3, [pc, #232]	; (8003254 <setPage+0x700>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2bc8      	cmp	r3, #200	; 0xc8
 8003172:	d954      	bls.n	800321e <setPage+0x6ca>
	   debounceTime = count;
 8003174:	4b30      	ldr	r3, [pc, #192]	; (8003238 <setPage+0x6e4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a36      	ldr	r2, [pc, #216]	; (8003254 <setPage+0x700>)
 800317a:	6013      	str	r3, [r2, #0]
	   ILI9341_Fill_Screen(WHITE);
 800317c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003180:	f001 fcce 	bl	8004b20 <ILI9341_Fill_Screen>
	   clicktime = count;
 8003184:	4b2c      	ldr	r3, [pc, #176]	; (8003238 <setPage+0x6e4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a33      	ldr	r2, [pc, #204]	; (8003258 <setPage+0x704>)
 800318a:	6013      	str	r3, [r2, #0]

	   while (count - clicktime < 1000){
 800318c:	e00e      	b.n	80031ac <setPage+0x658>
		   char message[50];
		   sprintf(message, "%d %d\r\n", clicktime, count);
 800318e:	4b32      	ldr	r3, [pc, #200]	; (8003258 <setPage+0x704>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b29      	ldr	r3, [pc, #164]	; (8003238 <setPage+0x6e4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1d38      	adds	r0, r7, #4
 8003198:	4930      	ldr	r1, [pc, #192]	; (800325c <setPage+0x708>)
 800319a:	f008 f949 	bl	800b430 <siprintf>
		   HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 800319e:	1d39      	adds	r1, r7, #4
 80031a0:	f04f 33ff 	mov.w	r3, #4294967295
 80031a4:	2232      	movs	r2, #50	; 0x32
 80031a6:	4827      	ldr	r0, [pc, #156]	; (8003244 <setPage+0x6f0>)
 80031a8:	f006 ff72 	bl	800a090 <HAL_UART_Transmit>
	   while (count - clicktime < 1000){
 80031ac:	4b22      	ldr	r3, [pc, #136]	; (8003238 <setPage+0x6e4>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b29      	ldr	r3, [pc, #164]	; (8003258 <setPage+0x704>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031ba:	d3e8      	bcc.n	800318e <setPage+0x63a>
	   }

	   if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && count - debounceTime >3000) {
 80031bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031c0:	4823      	ldr	r0, [pc, #140]	; (8003250 <setPage+0x6fc>)
 80031c2:	f003 f8f7 	bl	80063b4 <HAL_GPIO_ReadPin>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d113      	bne.n	80031f4 <setPage+0x6a0>
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <setPage+0x6e4>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b20      	ldr	r3, [pc, #128]	; (8003254 <setPage+0x700>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80031da:	4293      	cmp	r3, r2
 80031dc:	d90a      	bls.n	80031f4 <setPage+0x6a0>
		   screen--;
 80031de:	4b12      	ldr	r3, [pc, #72]	; (8003228 <setPage+0x6d4>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <setPage+0x6d4>)
 80031e8:	701a      	strb	r2, [r3, #0]
		   debounceTime = count;
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <setPage+0x6e4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a19      	ldr	r2, [pc, #100]	; (8003254 <setPage+0x700>)
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e014      	b.n	800321e <setPage+0x6ca>
	   }
	   else {
		   enterStateFlag = 0;
 80031f4:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <setPage+0x70c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
		   screen++;
 80031fa:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <setPage+0x6d4>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	3301      	adds	r3, #1
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4b09      	ldr	r3, [pc, #36]	; (8003228 <setPage+0x6d4>)
 8003204:	701a      	strb	r2, [r3, #0]
		   if (screen > 4){
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <setPage+0x6d4>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d907      	bls.n	800321e <setPage+0x6ca>
			   DF_Pause();
 800320e:	f7fd fa78 	bl	8000702 <DF_Pause>
			   screen = 1;
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <setPage+0x6d4>)
 8003214:	2201      	movs	r2, #1
 8003216:	701a      	strb	r2, [r3, #0]
//		   setHour = param1;
//		   setMin = param2;
//		   setSec = param3;
//	   }
   }
}
 8003218:	e001      	b.n	800321e <setPage+0x6ca>
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 800321a:	bf00      	nop
 800321c:	e7ff      	b.n	800321e <setPage+0x6ca>
}
 800321e:	bf00      	nop
 8003220:	3738      	adds	r7, #56	; 0x38
 8003222:	46bd      	mov	sp, r7
 8003224:	bdb0      	pop	{r4, r5, r7, pc}
 8003226:	bf00      	nop
 8003228:	20000004 	.word	0x20000004
 800322c:	20000430 	.word	0x20000430
 8003230:	2000042c 	.word	0x2000042c
 8003234:	20000434 	.word	0x20000434
 8003238:	20000414 	.word	0x20000414
 800323c:	20000544 	.word	0x20000544
 8003240:	0800d800 	.word	0x0800d800
 8003244:	20000794 	.word	0x20000794
 8003248:	20000531 	.word	0x20000531
 800324c:	cccccccd 	.word	0xcccccccd
 8003250:	40020000 	.word	0x40020000
 8003254:	20000538 	.word	0x20000538
 8003258:	20000534 	.word	0x20000534
 800325c:	0800d738 	.word	0x0800d738
 8003260:	20000540 	.word	0x20000540

08003264 <RGB565>:


// ฟัง�?์ชันตัวผสมสี
uint16_t RGB565(uint16_t R, uint16_t G, uint16_t B) {
 8003264:	b480      	push	{r7}
 8003266:	b08b      	sub	sp, #44	; 0x2c
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	81fb      	strh	r3, [r7, #14]
 800326e:	460b      	mov	r3, r1
 8003270:	81bb      	strh	r3, [r7, #12]
 8003272:	4613      	mov	r3, r2
 8003274:	817b      	strh	r3, [r7, #10]
    float Rr = (R * 255) / (float)100;
 8003276:	89fa      	ldrh	r2, [r7, #14]
 8003278:	4613      	mov	r3, r2
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003286:	eddf 6a42 	vldr	s13, [pc, #264]	; 8003390 <RGB565+0x12c>
 800328a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800328e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float Gg = (G * 255) / (float)100;
 8003292:	89ba      	ldrh	r2, [r7, #12]
 8003294:	4613      	mov	r3, r2
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032a2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003390 <RGB565+0x12c>
 80032a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032aa:	edc7 7a08 	vstr	s15, [r7, #32]
    float Bb = (B * 255) / (float)100;
 80032ae:	897a      	ldrh	r2, [r7, #10]
 80032b0:	4613      	mov	r3, r2
 80032b2:	021b      	lsls	r3, r3, #8
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	ee07 3a90 	vmov	s15, r3
 80032ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032be:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003390 <RGB565+0x12c>
 80032c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032c6:	edc7 7a07 	vstr	s15, [r7, #28]

    // ปรับค่าสี R, G, B ให้อยู่ในช่วง 0-255
    uint8_t R8 = (uint8_t)(Rr + 0.5);  // �?ปลงค่าทศนิยมเป็นจำนวนเต็ม
 80032ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80032ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80032d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80032da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80032de:	edc7 7a01 	vstr	s15, [r7, #4]
 80032e2:	793b      	ldrb	r3, [r7, #4]
 80032e4:	76fb      	strb	r3, [r7, #27]
    uint8_t G8 = (uint8_t)(Gg + 0.5);
 80032e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80032ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032ee:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80032f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80032f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80032fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80032fe:	793b      	ldrb	r3, [r7, #4]
 8003300:	76bb      	strb	r3, [r7, #26]
    uint8_t B8 = (uint8_t)(Bb + 0.5);
 8003302:	edd7 7a07 	vldr	s15, [r7, #28]
 8003306:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800330a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800330e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003312:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003316:	edc7 7a01 	vstr	s15, [r7, #4]
 800331a:	793b      	ldrb	r3, [r7, #4]
 800331c:	767b      	strb	r3, [r7, #25]

    // ทำ�?ารลดขนาดค่าสี R, G, B เข้าให้เป็นช่วง 0-31
    uint8_t R5 = (R8 * 31) / 255;
 800331e:	7efa      	ldrb	r2, [r7, #27]
 8003320:	4613      	mov	r3, r2
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	4a1b      	ldr	r2, [pc, #108]	; (8003394 <RGB565+0x130>)
 8003328:	fb82 1203 	smull	r1, r2, r2, r3
 800332c:	441a      	add	r2, r3
 800332e:	11d2      	asrs	r2, r2, #7
 8003330:	17db      	asrs	r3, r3, #31
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	763b      	strb	r3, [r7, #24]
    uint8_t G6 = (G8 * 63) / 255;
 8003336:	7eba      	ldrb	r2, [r7, #26]
 8003338:	4613      	mov	r3, r2
 800333a:	019b      	lsls	r3, r3, #6
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	4a15      	ldr	r2, [pc, #84]	; (8003394 <RGB565+0x130>)
 8003340:	fb82 1203 	smull	r1, r2, r2, r3
 8003344:	441a      	add	r2, r3
 8003346:	11d2      	asrs	r2, r2, #7
 8003348:	17db      	asrs	r3, r3, #31
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	75fb      	strb	r3, [r7, #23]
    uint8_t B5 = (B8 * 31) / 255;
 800334e:	7e7a      	ldrb	r2, [r7, #25]
 8003350:	4613      	mov	r3, r2
 8003352:	015b      	lsls	r3, r3, #5
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	4a0f      	ldr	r2, [pc, #60]	; (8003394 <RGB565+0x130>)
 8003358:	fb82 1203 	smull	r1, r2, r2, r3
 800335c:	441a      	add	r2, r3
 800335e:	11d2      	asrs	r2, r2, #7
 8003360:	17db      	asrs	r3, r3, #31
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	75bb      	strb	r3, [r7, #22]

    // คำนวณค่า RGB565
    uint16_t RGB565 = ((R5 << 11) | (G6 << 5) | B5);
 8003366:	7e3b      	ldrb	r3, [r7, #24]
 8003368:	02db      	lsls	r3, r3, #11
 800336a:	b21a      	sxth	r2, r3
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	015b      	lsls	r3, r3, #5
 8003370:	b21b      	sxth	r3, r3
 8003372:	4313      	orrs	r3, r2
 8003374:	b21a      	sxth	r2, r3
 8003376:	7dbb      	ldrb	r3, [r7, #22]
 8003378:	b21b      	sxth	r3, r3
 800337a:	4313      	orrs	r3, r2
 800337c:	b21b      	sxth	r3, r3
 800337e:	82bb      	strh	r3, [r7, #20]

    return RGB565;
 8003380:	8abb      	ldrh	r3, [r7, #20]
}
 8003382:	4618      	mov	r0, r3
 8003384:	372c      	adds	r7, #44	; 0x2c
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	42c80000 	.word	0x42c80000
 8003394:	80808081 	.word	0x80808081

08003398 <mapColorByHourAndMinute>:

uint16_t mapColorByHourAndMinute(uint16_t hour, uint16_t minute) {
 8003398:	b580      	push	{r7, lr}
 800339a:	b088      	sub	sp, #32
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	460a      	mov	r2, r1
 80033a2:	80fb      	strh	r3, [r7, #6]
 80033a4:	4613      	mov	r3, r2
 80033a6:	80bb      	strh	r3, [r7, #4]
    // คำนวณสีที่จะไล่ตามชั่วโมง�?ละนาที
    int R, G, B;

    if (hour >= 0 && hour < 6) {
 80033a8:	88fb      	ldrh	r3, [r7, #6]
 80033aa:	2b05      	cmp	r3, #5
 80033ac:	d806      	bhi.n	80033bc <mapColorByHourAndMinute+0x24>
        // 0.00-6.00: น้ำเงินเข้ม
        R = 0;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
        G = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61bb      	str	r3, [r7, #24]
        B = 50;
 80033b6:	2332      	movs	r3, #50	; 0x32
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e04f      	b.n	800345c <mapColorByHourAndMinute+0xc4>
    } else if (hour >= 6 && hour < 12) {
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	2b05      	cmp	r3, #5
 80033c0:	d914      	bls.n	80033ec <mapColorByHourAndMinute+0x54>
 80033c2:	88fb      	ldrh	r3, [r7, #6]
 80033c4:	2b0b      	cmp	r3, #11
 80033c6:	d811      	bhi.n	80033ec <mapColorByHourAndMinute+0x54>
        // 6.00-12.00: สีเหลืองเริ่มที่ความสวยของสีเขียวเพิ่มขึ้น
        int intensity = ((hour - 6) * 100) / 6;
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	3b06      	subs	r3, #6
 80033cc:	2264      	movs	r2, #100	; 0x64
 80033ce:	fb02 f303 	mul.w	r3, r2, r3
 80033d2:	4a2f      	ldr	r2, [pc, #188]	; (8003490 <mapColorByHourAndMinute+0xf8>)
 80033d4:	fb82 1203 	smull	r1, r2, r2, r3
 80033d8:	17db      	asrs	r3, r3, #31
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	613b      	str	r3, [r7, #16]
        R = 100;
 80033de:	2364      	movs	r3, #100	; 0x64
 80033e0:	61fb      	str	r3, [r7, #28]
        G = 100;
 80033e2:	2364      	movs	r3, #100	; 0x64
 80033e4:	61bb      	str	r3, [r7, #24]
        B = intensity;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	617b      	str	r3, [r7, #20]
    } else if (hour >= 6 && hour < 12) {
 80033ea:	e037      	b.n	800345c <mapColorByHourAndMinute+0xc4>
    } else if (hour >= 12 && hour < 18) {
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b0b      	cmp	r3, #11
 80033f0:	d916      	bls.n	8003420 <mapColorByHourAndMinute+0x88>
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	2b11      	cmp	r3, #17
 80033f6:	d813      	bhi.n	8003420 <mapColorByHourAndMinute+0x88>
        // 12.00-18.00: สีส้มเริ่มลดสีเขียว
        int intensity = ((hour - 12) * 100) / 6;
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	3b0c      	subs	r3, #12
 80033fc:	2264      	movs	r2, #100	; 0x64
 80033fe:	fb02 f303 	mul.w	r3, r2, r3
 8003402:	4a23      	ldr	r2, [pc, #140]	; (8003490 <mapColorByHourAndMinute+0xf8>)
 8003404:	fb82 1203 	smull	r1, r2, r2, r3
 8003408:	17db      	asrs	r3, r3, #31
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	60fb      	str	r3, [r7, #12]
        R = 100;
 800340e:	2364      	movs	r3, #100	; 0x64
 8003410:	61fb      	str	r3, [r7, #28]
        G = 100 - intensity;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003418:	61bb      	str	r3, [r7, #24]
        B = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
    } else if (hour >= 12 && hour < 18) {
 800341e:	e01d      	b.n	800345c <mapColorByHourAndMinute+0xc4>
    } else if (hour >= 18 && hour < 24) {
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	2b11      	cmp	r3, #17
 8003424:	d914      	bls.n	8003450 <mapColorByHourAndMinute+0xb8>
 8003426:	88fb      	ldrh	r3, [r7, #6]
 8003428:	2b17      	cmp	r3, #23
 800342a:	d811      	bhi.n	8003450 <mapColorByHourAndMinute+0xb8>
        // 18.00-24.00: สีเขียวเริ่มเพิ่มสีเขียว
        int intensity = ((hour - 18) * 100) / 6;
 800342c:	88fb      	ldrh	r3, [r7, #6]
 800342e:	3b12      	subs	r3, #18
 8003430:	2264      	movs	r2, #100	; 0x64
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	4a16      	ldr	r2, [pc, #88]	; (8003490 <mapColorByHourAndMinute+0xf8>)
 8003438:	fb82 1203 	smull	r1, r2, r2, r3
 800343c:	17db      	asrs	r3, r3, #31
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	60bb      	str	r3, [r7, #8]
        R = intensity;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	61fb      	str	r3, [r7, #28]
        G = 100;
 8003446:	2364      	movs	r3, #100	; 0x64
 8003448:	61bb      	str	r3, [r7, #24]
        B = 0;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
    } else if (hour >= 18 && hour < 24) {
 800344e:	e005      	b.n	800345c <mapColorByHourAndMinute+0xc4>
    } else {
        // ไม่ถู�?ต้อง
        R = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	61fb      	str	r3, [r7, #28]
        G = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	61bb      	str	r3, [r7, #24]
        B = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]
    }

    // �?�?้ไขสีตามนาที
    // เพิ่มความสวยของสีด้วย�?ารเปลี่ยน G (เขียว) ตามนาที
    G = (G * minute) / 60;
 800345c:	88bb      	ldrh	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	fb02 f303 	mul.w	r3, r2, r3
 8003464:	4a0b      	ldr	r2, [pc, #44]	; (8003494 <mapColorByHourAndMinute+0xfc>)
 8003466:	fb82 1203 	smull	r1, r2, r2, r3
 800346a:	441a      	add	r2, r3
 800346c:	1152      	asrs	r2, r2, #5
 800346e:	17db      	asrs	r3, r3, #31
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	61bb      	str	r3, [r7, #24]

    return RGB565(R, G, B);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	b29b      	uxth	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	b291      	uxth	r1, r2
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	b292      	uxth	r2, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff feef 	bl	8003264 <RGB565>
 8003486:	4603      	mov	r3, r0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	2aaaaaab 	.word	0x2aaaaaab
 8003494:	88888889 	.word	0x88888889

08003498 <complementaryColor>:

// ฟัง�?์ชันเพื่อคำนวณสีตรงข้าม (complementary color)
uint16_t complementaryColor(uint16_t color) {
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	80fb      	strh	r3, [r7, #6]
    // สลับค่า R (�?ดง), G (เขียว), �?ละ B (น้ำเงิน)
    uint8_t R5 = (color >> 11) & 0x1F;
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	0adb      	lsrs	r3, r3, #11
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	73fb      	strb	r3, [r7, #15]
    uint8_t G6 = (color >> 5) & 0x3F;
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034bc:	73bb      	strb	r3, [r7, #14]
    uint8_t B5 = color & 0x1F;
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	f003 031f 	and.w	r3, r3, #31
 80034c6:	737b      	strb	r3, [r7, #13]

    // คำนวณสีที่ตัด�?ัน
    uint8_t Rcomplementary = 31 - R5;  // ตัด�?ัน�?ละสลับค่า�?ดง
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	f1c3 031f 	rsb	r3, r3, #31
 80034ce:	733b      	strb	r3, [r7, #12]
    uint8_t Gcomplementary = 63 - G6;  // ตัด�?ัน�?ละสลับค่าเขียว
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 80034d6:	72fb      	strb	r3, [r7, #11]
    uint8_t Bcomplementary = 31 - B5;  // ตัด�?ัน�?ละสลับค่าน้ำเงิน
 80034d8:	7b7b      	ldrb	r3, [r7, #13]
 80034da:	f1c3 031f 	rsb	r3, r3, #31
 80034de:	72bb      	strb	r3, [r7, #10]

    // คำนวณสี RGB565 จา�?สีที่ตัด�?ัน
    return ((Rcomplementary << 11) | (Gcomplementary << 5) | Bcomplementary);
 80034e0:	7b3b      	ldrb	r3, [r7, #12]
 80034e2:	02db      	lsls	r3, r3, #11
 80034e4:	b21a      	sxth	r2, r3
 80034e6:	7afb      	ldrb	r3, [r7, #11]
 80034e8:	015b      	lsls	r3, r3, #5
 80034ea:	b21b      	sxth	r3, r3
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b21a      	sxth	r2, r3
 80034f0:	7abb      	ldrb	r3, [r7, #10]
 80034f2:	b21b      	sxth	r3, r3
 80034f4:	4313      	orrs	r3, r2
 80034f6:	b21b      	sxth	r3, r3
 80034f8:	b29b      	uxth	r3, r3
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <dayofweek>:


int dayofweek(int d, int m, int y)
{
 8003508:	b4b0      	push	{r4, r5, r7}
 800350a:	b091      	sub	sp, #68	; 0x44
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
	int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
 8003514:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <dayofweek+0x98>)
 8003516:	f107 0410 	add.w	r4, r7, #16
 800351a:	461d      	mov	r5, r3
 800351c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800351e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003524:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003528:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// if month is less than 3 reduce year by 1
	if (m < 3)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b02      	cmp	r3, #2
 8003530:	dc02      	bgt.n	8003538 <dayofweek+0x30>
		y -= 1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3b01      	subs	r3, #1
 8003536:	607b      	str	r3, [r7, #4]

	return ((y + y / 4 - y / 100 + y / 400 + t[m - 1] + d) % 7);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	da00      	bge.n	8003540 <dayofweek+0x38>
 800353e:	3303      	adds	r3, #3
 8003540:	109b      	asrs	r3, r3, #2
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	441a      	add	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4916      	ldr	r1, [pc, #88]	; (80035a4 <dayofweek+0x9c>)
 800354c:	fb81 0103 	smull	r0, r1, r1, r3
 8003550:	1149      	asrs	r1, r1, #5
 8003552:	17db      	asrs	r3, r3, #31
 8003554:	1a5b      	subs	r3, r3, r1
 8003556:	441a      	add	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4912      	ldr	r1, [pc, #72]	; (80035a4 <dayofweek+0x9c>)
 800355c:	fb81 0103 	smull	r0, r1, r1, r3
 8003560:	11c9      	asrs	r1, r1, #7
 8003562:	17db      	asrs	r3, r3, #31
 8003564:	1acb      	subs	r3, r1, r3
 8003566:	441a      	add	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	3b01      	subs	r3, #1
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	3340      	adds	r3, #64	; 0x40
 8003570:	443b      	add	r3, r7
 8003572:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8003576:	441a      	add	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	441a      	add	r2, r3
 800357c:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <dayofweek+0xa0>)
 800357e:	fb83 1302 	smull	r1, r3, r3, r2
 8003582:	4413      	add	r3, r2
 8003584:	1099      	asrs	r1, r3, #2
 8003586:	17d3      	asrs	r3, r2, #31
 8003588:	1ac9      	subs	r1, r1, r3
 800358a:	460b      	mov	r3, r1
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	1a5b      	subs	r3, r3, r1
 8003590:	1ad1      	subs	r1, r2, r3
 8003592:	460b      	mov	r3, r1
}
 8003594:	4618      	mov	r0, r3
 8003596:	3744      	adds	r7, #68	; 0x44
 8003598:	46bd      	mov	sp, r7
 800359a:	bcb0      	pop	{r4, r5, r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	0800d808 	.word	0x0800d808
 80035a4:	51eb851f 	.word	0x51eb851f
 80035a8:	92492493 	.word	0x92492493

080035ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80035b0:	e7fe      	b.n	80035b0 <Error_Handler+0x4>
	...

080035b4 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <MX_RNG_Init+0x20>)
 80035ba:	4a07      	ldr	r2, [pc, #28]	; (80035d8 <MX_RNG_Init+0x24>)
 80035bc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80035be:	4805      	ldr	r0, [pc, #20]	; (80035d4 <MX_RNG_Init+0x20>)
 80035c0:	f004 fe28 	bl	8008214 <HAL_RNG_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80035ca:	f7ff ffef 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000554 	.word	0x20000554
 80035d8:	50060800 	.word	0x50060800

080035dc <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b0a8      	sub	sp, #160	; 0xa0
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	2290      	movs	r2, #144	; 0x90
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f007 ff82 	bl	800b4f6 <memset>
  if(rngHandle->Instance==RNG)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a11      	ldr	r2, [pc, #68]	; (800363c <HAL_RNG_MspInit+0x60>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d11b      	bne.n	8003634 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80035fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003600:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003602:	2300      	movs	r3, #0
 8003604:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003608:	f107 0310 	add.w	r3, r7, #16
 800360c:	4618      	mov	r0, r3
 800360e:	f004 f9d9 	bl	80079c4 <HAL_RCCEx_PeriphCLKConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003618:	f7ff ffc8 	bl	80035ac <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_RNG_MspInit+0x64>)
 800361e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003620:	4a07      	ldr	r2, [pc, #28]	; (8003640 <HAL_RNG_MspInit+0x64>)
 8003622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003626:	6353      	str	r3, [r2, #52]	; 0x34
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <HAL_RNG_MspInit+0x64>)
 800362a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8003634:	bf00      	nop
 8003636:	37a0      	adds	r7, #160	; 0xa0
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	50060800 	.word	0x50060800
 8003640:	40023800 	.word	0x40023800

08003644 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003648:	4b1b      	ldr	r3, [pc, #108]	; (80036b8 <MX_SPI5_Init+0x74>)
 800364a:	4a1c      	ldr	r2, [pc, #112]	; (80036bc <MX_SPI5_Init+0x78>)
 800364c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800364e:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <MX_SPI5_Init+0x74>)
 8003650:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003654:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003656:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <MX_SPI5_Init+0x74>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800365c:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <MX_SPI5_Init+0x74>)
 800365e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003662:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <MX_SPI5_Init+0x74>)
 8003666:	2200      	movs	r2, #0
 8003668:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800366a:	4b13      	ldr	r3, [pc, #76]	; (80036b8 <MX_SPI5_Init+0x74>)
 800366c:	2200      	movs	r2, #0
 800366e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <MX_SPI5_Init+0x74>)
 8003672:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003676:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <MX_SPI5_Init+0x74>)
 800367a:	2200      	movs	r2, #0
 800367c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <MX_SPI5_Init+0x74>)
 8003680:	2200      	movs	r2, #0
 8003682:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <MX_SPI5_Init+0x74>)
 8003686:	2200      	movs	r2, #0
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800368a:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <MX_SPI5_Init+0x74>)
 800368c:	2200      	movs	r2, #0
 800368e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <MX_SPI5_Init+0x74>)
 8003692:	2207      	movs	r2, #7
 8003694:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003696:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <MX_SPI5_Init+0x74>)
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <MX_SPI5_Init+0x74>)
 800369e:	2200      	movs	r2, #0
 80036a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80036a2:	4805      	ldr	r0, [pc, #20]	; (80036b8 <MX_SPI5_Init+0x74>)
 80036a4:	f004 fe4b 	bl	800833e <HAL_SPI_Init>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80036ae:	f7ff ff7d 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80036b2:	bf00      	nop
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000564 	.word	0x20000564
 80036bc:	40015000 	.word	0x40015000

080036c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a17      	ldr	r2, [pc, #92]	; (800373c <HAL_SPI_MspInit+0x7c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d128      	bne.n	8003734 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80036e2:	4b17      	ldr	r3, [pc, #92]	; (8003740 <HAL_SPI_MspInit+0x80>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	4a16      	ldr	r2, [pc, #88]	; (8003740 <HAL_SPI_MspInit+0x80>)
 80036e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ec:	6453      	str	r3, [r2, #68]	; 0x44
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <HAL_SPI_MspInit+0x80>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_SPI_MspInit+0x80>)
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	4a10      	ldr	r2, [pc, #64]	; (8003740 <HAL_SPI_MspInit+0x80>)
 8003700:	f043 0320 	orr.w	r3, r3, #32
 8003704:	6313      	str	r3, [r2, #48]	; 0x30
 8003706:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <HAL_SPI_MspInit+0x80>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f003 0320 	and.w	r3, r3, #32
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003712:	f44f 7360 	mov.w	r3, #896	; 0x380
 8003716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	2302      	movs	r3, #2
 800371a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003720:	2303      	movs	r3, #3
 8003722:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003724:	2305      	movs	r3, #5
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	4619      	mov	r1, r3
 800372e:	4805      	ldr	r0, [pc, #20]	; (8003744 <HAL_SPI_MspInit+0x84>)
 8003730:	f002 fc94 	bl	800605c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003734:	bf00      	nop
 8003736:	3728      	adds	r7, #40	; 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40015000 	.word	0x40015000
 8003740:	40023800 	.word	0x40023800
 8003744:	40021400 	.word	0x40021400

08003748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800374e:	4b0f      	ldr	r3, [pc, #60]	; (800378c <HAL_MspInit+0x44>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	4a0e      	ldr	r2, [pc, #56]	; (800378c <HAL_MspInit+0x44>)
 8003754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003758:	6413      	str	r3, [r2, #64]	; 0x40
 800375a:	4b0c      	ldr	r3, [pc, #48]	; (800378c <HAL_MspInit+0x44>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_MspInit+0x44>)
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	4a08      	ldr	r2, [pc, #32]	; (800378c <HAL_MspInit+0x44>)
 800376c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003770:	6453      	str	r3, [r2, #68]	; 0x44
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_MspInit+0x44>)
 8003774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003776:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003794:	f001 fb66 	bl	8004e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003798:	bf00      	nop
 800379a:	bd80      	pop	{r7, pc}

0800379c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
	count++;
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3301      	adds	r3, #1
 80037a6:	4a03      	ldr	r2, [pc, #12]	; (80037b4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80037a8:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80037aa:	4803      	ldr	r0, [pc, #12]	; (80037b8 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 80037ac:	f005 fc0a 	bl	8008fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80037b0:	bf00      	nop
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000414 	.word	0x20000414
 80037b8:	200005cc 	.word	0x200005cc

080037bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(DS3231_IsAlarm1Triggered()){
 80037c0:	f7fd fbaf 	bl	8000f22 <DS3231_IsAlarm1Triggered>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d004      	beq.n	80037d4 <EXTI15_10_IRQHandler+0x18>
			alarmtrigger = 1;
 80037ca:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <EXTI15_10_IRQHandler+0x24>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
			DS3231_ClearAlarm1Flag();
 80037d0:	f7fd faa3 	bl	8000d1a <DS3231_ClearAlarm1Flag>
		}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80037d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037d8:	f002 fe1e 	bl	8006418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000438 	.word	0x20000438

080037e4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037e8:	4802      	ldr	r0, [pc, #8]	; (80037f4 <DMA2_Stream0_IRQHandler+0x10>)
 80037ea:	f002 f9cd 	bl	8005b88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000308 	.word	0x20000308

080037f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
	return 1;
 80037fc:	2301      	movs	r3, #1
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <_kill>:

int _kill(int pid, int sig)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003812:	f007 fec3 	bl	800b59c <__errno>
 8003816:	4603      	mov	r3, r0
 8003818:	2216      	movs	r2, #22
 800381a:	601a      	str	r2, [r3, #0]
	return -1;
 800381c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <_exit>:

void _exit (int status)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003830:	f04f 31ff 	mov.w	r1, #4294967295
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f7ff ffe7 	bl	8003808 <_kill>
	while (1) {}		/* Make sure we hang here */
 800383a:	e7fe      	b.n	800383a <_exit+0x12>

0800383c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e00a      	b.n	8003864 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800384e:	f3af 8000 	nop.w
 8003852:	4601      	mov	r1, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	60ba      	str	r2, [r7, #8]
 800385a:	b2ca      	uxtb	r2, r1
 800385c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3301      	adds	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	dbf0      	blt.n	800384e <_read+0x12>
	}

return len;
 800386c:	687b      	ldr	r3, [r7, #4]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e009      	b.n	800389c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	60ba      	str	r2, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	3301      	adds	r3, #1
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	dbf1      	blt.n	8003888 <_write+0x12>
	}
	return len;
 80038a4:	687b      	ldr	r3, [r7, #4]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <_close>:

int _close(int file)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
	return -1;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038d6:	605a      	str	r2, [r3, #4]
	return 0;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <_isatty>:

int _isatty(int file)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
	return 1;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
	return 0;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
	...

08003918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003920:	4a14      	ldr	r2, [pc, #80]	; (8003974 <_sbrk+0x5c>)
 8003922:	4b15      	ldr	r3, [pc, #84]	; (8003978 <_sbrk+0x60>)
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800392c:	4b13      	ldr	r3, [pc, #76]	; (800397c <_sbrk+0x64>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d102      	bne.n	800393a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <_sbrk+0x64>)
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <_sbrk+0x68>)
 8003938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <_sbrk+0x64>)
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4413      	add	r3, r2
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	429a      	cmp	r2, r3
 8003946:	d207      	bcs.n	8003958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003948:	f007 fe28 	bl	800b59c <__errno>
 800394c:	4603      	mov	r3, r0
 800394e:	220c      	movs	r2, #12
 8003950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003952:	f04f 33ff 	mov.w	r3, #4294967295
 8003956:	e009      	b.n	800396c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003958:	4b08      	ldr	r3, [pc, #32]	; (800397c <_sbrk+0x64>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800395e:	4b07      	ldr	r3, [pc, #28]	; (800397c <_sbrk+0x64>)
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4413      	add	r3, r2
 8003966:	4a05      	ldr	r2, [pc, #20]	; (800397c <_sbrk+0x64>)
 8003968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800396a:	68fb      	ldr	r3, [r7, #12]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20080000 	.word	0x20080000
 8003978:	00000400 	.word	0x00000400
 800397c:	200005c8 	.word	0x200005c8
 8003980:	200009f8 	.word	0x200009f8

08003984 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003988:	4b15      	ldr	r3, [pc, #84]	; (80039e0 <SystemInit+0x5c>)
 800398a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398e:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <SystemInit+0x5c>)
 8003990:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003994:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003998:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <SystemInit+0x60>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <SystemInit+0x60>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80039a4:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <SystemInit+0x60>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <SystemInit+0x60>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	490d      	ldr	r1, [pc, #52]	; (80039e4 <SystemInit+0x60>)
 80039b0:	4b0d      	ldr	r3, [pc, #52]	; (80039e8 <SystemInit+0x64>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80039b6:	4b0b      	ldr	r3, [pc, #44]	; (80039e4 <SystemInit+0x60>)
 80039b8:	4a0c      	ldr	r2, [pc, #48]	; (80039ec <SystemInit+0x68>)
 80039ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80039bc:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <SystemInit+0x60>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <SystemInit+0x60>)
 80039c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <SystemInit+0x60>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <SystemInit+0x5c>)
 80039d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039d4:	609a      	str	r2, [r3, #8]
#endif
}
 80039d6:	bf00      	nop
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	e000ed00 	.word	0xe000ed00
 80039e4:	40023800 	.word	0x40023800
 80039e8:	fef6ffff 	.word	0xfef6ffff
 80039ec:	24003010 	.word	0x24003010

080039f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b09a      	sub	sp, #104	; 0x68
 80039f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039f6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	605a      	str	r2, [r3, #4]
 8003a00:	609a      	str	r2, [r3, #8]
 8003a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	605a      	str	r2, [r3, #4]
 8003a1a:	609a      	str	r2, [r3, #8]
 8003a1c:	60da      	str	r2, [r3, #12]
 8003a1e:	611a      	str	r2, [r3, #16]
 8003a20:	615a      	str	r2, [r3, #20]
 8003a22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a24:	1d3b      	adds	r3, r7, #4
 8003a26:	222c      	movs	r2, #44	; 0x2c
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f007 fd63 	bl	800b4f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003a30:	4b43      	ldr	r3, [pc, #268]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a32:	4a44      	ldr	r2, [pc, #272]	; (8003b44 <MX_TIM1_Init+0x154>)
 8003a34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8003a36:	4b42      	ldr	r3, [pc, #264]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a38:	22c7      	movs	r2, #199	; 0xc7
 8003a3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a3c:	4b40      	ldr	r3, [pc, #256]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8003a42:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a4a:	4b3d      	ldr	r3, [pc, #244]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003a50:	4b3b      	ldr	r3, [pc, #236]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a56:	4b3a      	ldr	r3, [pc, #232]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003a5c:	4838      	ldr	r0, [pc, #224]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a5e:	f005 f80f 	bl	8008a80 <HAL_TIM_Base_Init>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003a68:	f7ff fda0 	bl	80035ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a70:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003a72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a76:	4619      	mov	r1, r3
 8003a78:	4831      	ldr	r0, [pc, #196]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a7a:	f005 fcd7 	bl	800942c <HAL_TIM_ConfigClockSource>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003a84:	f7ff fd92 	bl	80035ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003a88:	482d      	ldr	r0, [pc, #180]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003a8a:	f005 f8c9 	bl	8008c20 <HAL_TIM_PWM_Init>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003a94:	f7ff fd8a 	bl	80035ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003aa4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4825      	ldr	r0, [pc, #148]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003aac:	f006 f978 	bl	8009da0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003ab6:	f7ff fd79 	bl	80035ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aba:	2360      	movs	r3, #96	; 0x60
 8003abc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1000/4-1;
 8003abe:	23f9      	movs	r3, #249	; 0xf9
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ad6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ada:	2200      	movs	r2, #0
 8003adc:	4619      	mov	r1, r3
 8003ade:	4818      	ldr	r0, [pc, #96]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003ae0:	f005 fb90 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003aea:	f7ff fd5f 	bl	80035ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b06:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003b10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003b1e:	1d3b      	adds	r3, r7, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4807      	ldr	r0, [pc, #28]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003b24:	f006 f9ca 	bl	8009ebc <HAL_TIMEx_ConfigBreakDeadTime>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8003b2e:	f7ff fd3d 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003b32:	4803      	ldr	r0, [pc, #12]	; (8003b40 <MX_TIM1_Init+0x150>)
 8003b34:	f000 fa42 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 8003b38:	bf00      	nop
 8003b3a:	3768      	adds	r7, #104	; 0x68
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	200005cc 	.word	0x200005cc
 8003b44:	40010000 	.word	0x40010000

08003b48 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08a      	sub	sp, #40	; 0x28
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b4e:	f107 031c 	add.w	r3, r7, #28
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	605a      	str	r2, [r3, #4]
 8003b58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b5a:	463b      	mov	r3, r7
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
 8003b66:	611a      	str	r2, [r3, #16]
 8003b68:	615a      	str	r2, [r3, #20]
 8003b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b6c:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003b6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003b72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1250-1;
 8003b74:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003b76:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8003b7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b7c:	4b1e      	ldr	r3, [pc, #120]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24-1;
 8003b82:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003b84:	2217      	movs	r2, #23
 8003b86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003b94:	4818      	ldr	r0, [pc, #96]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003b96:	f005 f843 	bl	8008c20 <HAL_TIM_PWM_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003ba0:	f7ff fd04 	bl	80035ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003bac:	f107 031c 	add.w	r3, r7, #28
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4811      	ldr	r0, [pc, #68]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003bb4:	f006 f8f4 	bl	8009da0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d001      	beq.n	8003bc2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003bbe:	f7ff fcf5 	bl	80035ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bc2:	2360      	movs	r3, #96	; 0x60
 8003bc4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 24/4-1;
 8003bc6:	2305      	movs	r3, #5
 8003bc8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003bd2:	463b      	mov	r3, r7
 8003bd4:	220c      	movs	r2, #12
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	4807      	ldr	r0, [pc, #28]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003bda:	f005 fb13 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003be4:	f7ff fce2 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003be8:	4803      	ldr	r0, [pc, #12]	; (8003bf8 <MX_TIM2_Init+0xb0>)
 8003bea:	f000 f9e7 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 8003bee:	bf00      	nop
 8003bf0:	3728      	adds	r7, #40	; 0x28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20000618 	.word	0x20000618

08003bfc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c02:	f107 0310 	add.w	r3, r7, #16
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
 8003c0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c10:	1d3b      	adds	r3, r7, #4
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <MX_TIM3_Init+0x94>)
 8003c1c:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <MX_TIM3_Init+0x98>)
 8003c1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8003c20:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <MX_TIM3_Init+0x94>)
 8003c22:	2263      	movs	r2, #99	; 0x63
 8003c24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c26:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <MX_TIM3_Init+0x94>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <MX_TIM3_Init+0x94>)
 8003c2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c34:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <MX_TIM3_Init+0x94>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c3a:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <MX_TIM3_Init+0x94>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003c40:	4813      	ldr	r0, [pc, #76]	; (8003c90 <MX_TIM3_Init+0x94>)
 8003c42:	f004 ff1d 	bl	8008a80 <HAL_TIM_Base_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003c4c:	f7ff fcae 	bl	80035ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003c56:	f107 0310 	add.w	r3, r7, #16
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	480c      	ldr	r0, [pc, #48]	; (8003c90 <MX_TIM3_Init+0x94>)
 8003c5e:	f005 fbe5 	bl	800942c <HAL_TIM_ConfigClockSource>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003c68:	f7ff fca0 	bl	80035ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c74:	1d3b      	adds	r3, r7, #4
 8003c76:	4619      	mov	r1, r3
 8003c78:	4805      	ldr	r0, [pc, #20]	; (8003c90 <MX_TIM3_Init+0x94>)
 8003c7a:	f006 f891 	bl	8009da0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d001      	beq.n	8003c88 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003c84:	f7ff fc92 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003c88:	bf00      	nop
 8003c8a:	3720      	adds	r7, #32
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000664 	.word	0x20000664
 8003c94:	40000400 	.word	0x40000400

08003c98 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c9e:	f107 0310 	add.w	r3, r7, #16
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
 8003caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003cb6:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <MX_TIM4_Init+0x94>)
 8003cb8:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <MX_TIM4_Init+0x98>)
 8003cba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	; (8003d2c <MX_TIM4_Init+0x94>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <MX_TIM4_Init+0x94>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003cc8:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <MX_TIM4_Init+0x94>)
 8003cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <MX_TIM4_Init+0x94>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cd6:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <MX_TIM4_Init+0x94>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003cdc:	4813      	ldr	r0, [pc, #76]	; (8003d2c <MX_TIM4_Init+0x94>)
 8003cde:	f004 fecf 	bl	8008a80 <HAL_TIM_Base_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d001      	beq.n	8003cec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003ce8:	f7ff fc60 	bl	80035ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003cf2:	f107 0310 	add.w	r3, r7, #16
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	480c      	ldr	r0, [pc, #48]	; (8003d2c <MX_TIM4_Init+0x94>)
 8003cfa:	f005 fb97 	bl	800942c <HAL_TIM_ConfigClockSource>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003d04:	f7ff fc52 	bl	80035ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d10:	1d3b      	adds	r3, r7, #4
 8003d12:	4619      	mov	r1, r3
 8003d14:	4805      	ldr	r0, [pc, #20]	; (8003d2c <MX_TIM4_Init+0x94>)
 8003d16:	f006 f843 	bl	8009da0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003d20:	f7ff fc44 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003d24:	bf00      	nop
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200006b0 	.word	0x200006b0
 8003d30:	40000800 	.word	0x40000800

08003d34 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08e      	sub	sp, #56	; 0x38
 8003d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	605a      	str	r2, [r3, #4]
 8003d44:	609a      	str	r2, [r3, #8]
 8003d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d48:	f107 031c 	add.w	r3, r7, #28
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	601a      	str	r2, [r3, #0]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d54:	463b      	mov	r3, r7
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]
 8003d5c:	609a      	str	r2, [r3, #8]
 8003d5e:	60da      	str	r2, [r3, #12]
 8003d60:	611a      	str	r2, [r3, #16]
 8003d62:	615a      	str	r2, [r3, #20]
 8003d64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003d66:	4b2d      	ldr	r3, [pc, #180]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003d68:	4a2d      	ldr	r2, [pc, #180]	; (8003e20 <MX_TIM5_Init+0xec>)
 8003d6a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8003d6c:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003d6e:	22c7      	movs	r2, #199	; 0xc7
 8003d70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d72:	4b2a      	ldr	r3, [pc, #168]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8003d78:	4b28      	ldr	r3, [pc, #160]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d80:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d86:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003d8c:	4823      	ldr	r0, [pc, #140]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003d8e:	f004 fe77 	bl	8008a80 <HAL_TIM_Base_Init>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8003d98:	f7ff fc08 	bl	80035ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	4619      	mov	r1, r3
 8003da8:	481c      	ldr	r0, [pc, #112]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003daa:	f005 fb3f 	bl	800942c <HAL_TIM_ConfigClockSource>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8003db4:	f7ff fbfa 	bl	80035ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003db8:	4818      	ldr	r0, [pc, #96]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003dba:	f004 ff31 	bl	8008c20 <HAL_TIM_PWM_Init>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8003dc4:	f7ff fbf2 	bl	80035ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003dd0:	f107 031c 	add.w	r3, r7, #28
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	4811      	ldr	r0, [pc, #68]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003dd8:	f005 ffe2 	bl	8009da0 <HAL_TIMEx_MasterConfigSynchronization>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003de2:	f7ff fbe3 	bl	80035ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003de6:	2360      	movs	r3, #96	; 0x60
 8003de8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000/4-1;
 8003dea:	23f9      	movs	r3, #249	; 0xf9
 8003dec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003df6:	463b      	mov	r3, r7
 8003df8:	2200      	movs	r2, #0
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4807      	ldr	r0, [pc, #28]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003dfe:	f005 fa01 	bl	8009204 <HAL_TIM_PWM_ConfigChannel>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8003e08:	f7ff fbd0 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003e0c:	4803      	ldr	r0, [pc, #12]	; (8003e1c <MX_TIM5_Init+0xe8>)
 8003e0e:	f000 f8d5 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 8003e12:	bf00      	nop
 8003e14:	3738      	adds	r7, #56	; 0x38
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200006fc 	.word	0x200006fc
 8003e20:	40000c00 	.word	0x40000c00

08003e24 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e2a:	463b      	mov	r3, r7
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003e36:	4b15      	ldr	r3, [pc, #84]	; (8003e8c <MX_TIM9_Init+0x68>)
 8003e38:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <MX_TIM9_Init+0x6c>)
 8003e3a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 100-1;
 8003e3c:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <MX_TIM9_Init+0x68>)
 8003e3e:	2263      	movs	r2, #99	; 0x63
 8003e40:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <MX_TIM9_Init+0x68>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 24-1;
 8003e48:	4b10      	ldr	r3, [pc, #64]	; (8003e8c <MX_TIM9_Init+0x68>)
 8003e4a:	2217      	movs	r2, #23
 8003e4c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e4e:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <MX_TIM9_Init+0x68>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e54:	4b0d      	ldr	r3, [pc, #52]	; (8003e8c <MX_TIM9_Init+0x68>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003e5a:	480c      	ldr	r0, [pc, #48]	; (8003e8c <MX_TIM9_Init+0x68>)
 8003e5c:	f004 fe10 	bl	8008a80 <HAL_TIM_Base_Init>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8003e66:	f7ff fba1 	bl	80035ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e6e:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003e70:	463b      	mov	r3, r7
 8003e72:	4619      	mov	r1, r3
 8003e74:	4805      	ldr	r0, [pc, #20]	; (8003e8c <MX_TIM9_Init+0x68>)
 8003e76:	f005 fad9 	bl	800942c <HAL_TIM_ConfigClockSource>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8003e80:	f7ff fb94 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000748 	.word	0x20000748
 8003e90:	40014000 	.word	0x40014000

08003e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a31      	ldr	r2, [pc, #196]	; (8003f68 <HAL_TIM_Base_MspInit+0xd4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d114      	bne.n	8003ed0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ea6:	4b31      	ldr	r3, [pc, #196]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	4a30      	ldr	r2, [pc, #192]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb2:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	2019      	movs	r0, #25
 8003ec4:	f001 fd1b 	bl	80058fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003ec8:	2019      	movs	r0, #25
 8003eca:	f001 fd34 	bl	8005936 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8003ece:	e046      	b.n	8003f5e <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM3)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <HAL_TIM_Base_MspInit+0xdc>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10c      	bne.n	8003ef4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	4a23      	ldr	r2, [pc, #140]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee6:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	61bb      	str	r3, [r7, #24]
 8003ef0:	69bb      	ldr	r3, [r7, #24]
}
 8003ef2:	e034      	b.n	8003f5e <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <HAL_TIM_Base_MspInit+0xe0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d10c      	bne.n	8003f18 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	4a1a      	ldr	r2, [pc, #104]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003f04:	f043 0304 	orr.w	r3, r3, #4
 8003f08:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	697b      	ldr	r3, [r7, #20]
}
 8003f16:	e022      	b.n	8003f5e <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM5)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a16      	ldr	r2, [pc, #88]	; (8003f78 <HAL_TIM_Base_MspInit+0xe4>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d10c      	bne.n	8003f3c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	4a11      	ldr	r2, [pc, #68]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003f28:	f043 0308 	orr.w	r3, r3, #8
 8003f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	613b      	str	r3, [r7, #16]
 8003f38:	693b      	ldr	r3, [r7, #16]
}
 8003f3a:	e010      	b.n	8003f5e <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM9)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0e      	ldr	r2, [pc, #56]	; (8003f7c <HAL_TIM_Base_MspInit+0xe8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d10b      	bne.n	8003f5e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003f46:	4b09      	ldr	r3, [pc, #36]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	4a08      	ldr	r2, [pc, #32]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f50:	6453      	str	r3, [r2, #68]	; 0x44
 8003f52:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_TIM_Base_MspInit+0xd8>)
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
}
 8003f5e:	bf00      	nop
 8003f60:	3720      	adds	r7, #32
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40023800 	.word	0x40023800
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40000800 	.word	0x40000800
 8003f78:	40000c00 	.word	0x40000c00
 8003f7c:	40014000 	.word	0x40014000

08003f80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f90:	d10b      	bne.n	8003faa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_TIM_PWM_MspInit+0x38>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <HAL_TIM_PWM_MspInit+0x38>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_TIM_PWM_MspInit+0x38>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800

08003fbc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 0314 	add.w	r3, r7, #20
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a33      	ldr	r2, [pc, #204]	; (80040a8 <HAL_TIM_MspPostInit+0xec>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d11d      	bne.n	800401a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fde:	4b33      	ldr	r3, [pc, #204]	; (80040ac <HAL_TIM_MspPostInit+0xf0>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	4a32      	ldr	r2, [pc, #200]	; (80040ac <HAL_TIM_MspPostInit+0xf0>)
 8003fe4:	f043 0310 	orr.w	r3, r3, #16
 8003fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8003fea:	4b30      	ldr	r3, [pc, #192]	; (80040ac <HAL_TIM_MspPostInit+0xf0>)
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ff6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004000:	2300      	movs	r3, #0
 8004002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004004:	2300      	movs	r3, #0
 8004006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004008:	2301      	movs	r3, #1
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800400c:	f107 0314 	add.w	r3, r7, #20
 8004010:	4619      	mov	r1, r3
 8004012:	4827      	ldr	r0, [pc, #156]	; (80040b0 <HAL_TIM_MspPostInit+0xf4>)
 8004014:	f002 f822 	bl	800605c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8004018:	e042      	b.n	80040a0 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM2)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004022:	d11c      	bne.n	800405e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_TIM_MspPostInit+0xf0>)
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	4a20      	ldr	r2, [pc, #128]	; (80040ac <HAL_TIM_MspPostInit+0xf0>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6313      	str	r3, [r2, #48]	; 0x30
 8004030:	4b1e      	ldr	r3, [pc, #120]	; (80040ac <HAL_TIM_MspPostInit+0xf0>)
 8004032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004034:	f003 0301 	and.w	r3, r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800403c:	2308      	movs	r3, #8
 800403e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004040:	2302      	movs	r3, #2
 8004042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004044:	2300      	movs	r3, #0
 8004046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004048:	2300      	movs	r3, #0
 800404a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800404c:	2301      	movs	r3, #1
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	4619      	mov	r1, r3
 8004056:	4817      	ldr	r0, [pc, #92]	; (80040b4 <HAL_TIM_MspPostInit+0xf8>)
 8004058:	f002 f800 	bl	800605c <HAL_GPIO_Init>
}
 800405c:	e020      	b.n	80040a0 <HAL_TIM_MspPostInit+0xe4>
  else if(timHandle->Instance==TIM5)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <HAL_TIM_MspPostInit+0xfc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004068:	4b10      	ldr	r3, [pc, #64]	; (80040ac <HAL_TIM_MspPostInit+0xf0>)
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	4a0f      	ldr	r2, [pc, #60]	; (80040ac <HAL_TIM_MspPostInit+0xf0>)
 800406e:	f043 0301 	orr.w	r3, r3, #1
 8004072:	6313      	str	r3, [r2, #48]	; 0x30
 8004074:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <HAL_TIM_MspPostInit+0xf0>)
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004080:	2301      	movs	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004084:	2302      	movs	r3, #2
 8004086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	2300      	movs	r3, #0
 800408a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800408c:	2303      	movs	r3, #3
 800408e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8004090:	2302      	movs	r3, #2
 8004092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004094:	f107 0314 	add.w	r3, r7, #20
 8004098:	4619      	mov	r1, r3
 800409a:	4806      	ldr	r0, [pc, #24]	; (80040b4 <HAL_TIM_MspPostInit+0xf8>)
 800409c:	f001 ffde 	bl	800605c <HAL_GPIO_Init>
}
 80040a0:	bf00      	nop
 80040a2:	3728      	adds	r7, #40	; 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40010000 	.word	0x40010000
 80040ac:	40023800 	.word	0x40023800
 80040b0:	40021000 	.word	0x40021000
 80040b4:	40020000 	.word	0x40020000
 80040b8:	40000c00 	.word	0x40000c00

080040bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040c0:	4b14      	ldr	r3, [pc, #80]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040c2:	4a15      	ldr	r2, [pc, #84]	; (8004118 <MX_USART3_UART_Init+0x5c>)
 80040c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040ce:	4b11      	ldr	r3, [pc, #68]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040d4:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040dc:	2200      	movs	r2, #0
 80040de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040e2:	220c      	movs	r2, #12
 80040e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <MX_USART3_UART_Init+0x58>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <MX_USART3_UART_Init+0x58>)
 8004100:	f005 ff78 	bl	8009ff4 <HAL_UART_Init>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800410a:	f7ff fa4f 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000794 	.word	0x20000794
 8004118:	40004800 	.word	0x40004800

0800411c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <MX_USART6_UART_Init+0x58>)
 8004122:	4a15      	ldr	r2, [pc, #84]	; (8004178 <MX_USART6_UART_Init+0x5c>)
 8004124:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004126:	4b13      	ldr	r3, [pc, #76]	; (8004174 <MX_USART6_UART_Init+0x58>)
 8004128:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800412c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <MX_USART6_UART_Init+0x58>)
 8004130:	2200      	movs	r2, #0
 8004132:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004134:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <MX_USART6_UART_Init+0x58>)
 8004136:	2200      	movs	r2, #0
 8004138:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800413a:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <MX_USART6_UART_Init+0x58>)
 800413c:	2200      	movs	r2, #0
 800413e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <MX_USART6_UART_Init+0x58>)
 8004142:	220c      	movs	r2, #12
 8004144:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <MX_USART6_UART_Init+0x58>)
 8004148:	2200      	movs	r2, #0
 800414a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <MX_USART6_UART_Init+0x58>)
 800414e:	2200      	movs	r2, #0
 8004150:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004152:	4b08      	ldr	r3, [pc, #32]	; (8004174 <MX_USART6_UART_Init+0x58>)
 8004154:	2200      	movs	r2, #0
 8004156:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <MX_USART6_UART_Init+0x58>)
 800415a:	2200      	movs	r2, #0
 800415c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800415e:	4805      	ldr	r0, [pc, #20]	; (8004174 <MX_USART6_UART_Init+0x58>)
 8004160:	f005 ff48 	bl	8009ff4 <HAL_UART_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800416a:	f7ff fa1f 	bl	80035ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	2000081c 	.word	0x2000081c
 8004178:	40011400 	.word	0x40011400

0800417c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b0b0      	sub	sp, #192	; 0xc0
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004184:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004188:	2200      	movs	r2, #0
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	605a      	str	r2, [r3, #4]
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	60da      	str	r2, [r3, #12]
 8004192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004194:	f107 031c 	add.w	r3, r7, #28
 8004198:	2290      	movs	r2, #144	; 0x90
 800419a:	2100      	movs	r1, #0
 800419c:	4618      	mov	r0, r3
 800419e:	f007 f9aa 	bl	800b4f6 <memset>
  if(uartHandle->Instance==USART3)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a43      	ldr	r2, [pc, #268]	; (80042b4 <HAL_UART_MspInit+0x138>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d13d      	bne.n	8004228 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80041ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80041b2:	2300      	movs	r3, #0
 80041b4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041b6:	f107 031c 	add.w	r3, r7, #28
 80041ba:	4618      	mov	r0, r3
 80041bc:	f003 fc02 	bl	80079c4 <HAL_RCCEx_PeriphCLKConfig>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80041c6:	f7ff f9f1 	bl	80035ac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80041ca:	4b3b      	ldr	r3, [pc, #236]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a3a      	ldr	r2, [pc, #232]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d4:	6413      	str	r3, [r2, #64]	; 0x40
 80041d6:	4b38      	ldr	r3, [pc, #224]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041e2:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4a34      	ldr	r2, [pc, #208]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 80041e8:	f043 0308 	orr.w	r3, r3, #8
 80041ec:	6313      	str	r3, [r2, #48]	; 0x30
 80041ee:	4b32      	ldr	r3, [pc, #200]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80041fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420e:	2303      	movs	r3, #3
 8004210:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004214:	2307      	movs	r3, #7
 8004216:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800421a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800421e:	4619      	mov	r1, r3
 8004220:	4826      	ldr	r0, [pc, #152]	; (80042bc <HAL_UART_MspInit+0x140>)
 8004222:	f001 ff1b 	bl	800605c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004226:	e040      	b.n	80042aa <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART6)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <HAL_UART_MspInit+0x144>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d13b      	bne.n	80042aa <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8004232:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004236:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004238:	2300      	movs	r3, #0
 800423a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800423c:	f107 031c 	add.w	r3, r7, #28
 8004240:	4618      	mov	r0, r3
 8004242:	f003 fbbf 	bl	80079c4 <HAL_RCCEx_PeriphCLKConfig>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800424c:	f7ff f9ae 	bl	80035ac <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004250:	4b19      	ldr	r3, [pc, #100]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	4a18      	ldr	r2, [pc, #96]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	6453      	str	r3, [r2, #68]	; 0x44
 800425c:	4b16      	ldr	r3, [pc, #88]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 800425e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	613b      	str	r3, [r7, #16]
 8004266:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004268:	4b13      	ldr	r3, [pc, #76]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 800426e:	f043 0304 	orr.w	r3, r3, #4
 8004272:	6313      	str	r3, [r2, #48]	; 0x30
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <HAL_UART_MspInit+0x13c>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004280:	23c0      	movs	r3, #192	; 0xc0
 8004282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004286:	2302      	movs	r3, #2
 8004288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428c:	2300      	movs	r3, #0
 800428e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004292:	2303      	movs	r3, #3
 8004294:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004298:	2308      	movs	r3, #8
 800429a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800429e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80042a2:	4619      	mov	r1, r3
 80042a4:	4807      	ldr	r0, [pc, #28]	; (80042c4 <HAL_UART_MspInit+0x148>)
 80042a6:	f001 fed9 	bl	800605c <HAL_GPIO_Init>
}
 80042aa:	bf00      	nop
 80042ac:	37c0      	adds	r7, #192	; 0xc0
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40004800 	.word	0x40004800
 80042b8:	40023800 	.word	0x40023800
 80042bc:	40020c00 	.word	0x40020c00
 80042c0:	40011400 	.word	0x40011400
 80042c4:	40020800 	.word	0x40020800

080042c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80042c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004300 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042cc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042ce:	e003      	b.n	80042d8 <LoopCopyDataInit>

080042d0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042d2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042d4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042d6:	3104      	adds	r1, #4

080042d8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042d8:	480b      	ldr	r0, [pc, #44]	; (8004308 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042da:	4b0c      	ldr	r3, [pc, #48]	; (800430c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042dc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042de:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042e0:	d3f6      	bcc.n	80042d0 <CopyDataInit>
  ldr  r2, =_sbss
 80042e2:	4a0b      	ldr	r2, [pc, #44]	; (8004310 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042e4:	e002      	b.n	80042ec <LoopFillZerobss>

080042e6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042e6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042e8:	f842 3b04 	str.w	r3, [r2], #4

080042ec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042ec:	4b09      	ldr	r3, [pc, #36]	; (8004314 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042ee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042f0:	d3f9      	bcc.n	80042e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80042f2:	f7ff fb47 	bl	8003984 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042f6:	f007 f957 	bl	800b5a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042fa:	f7fd fb9b 	bl	8001a34 <main>
  bx  lr    
 80042fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004300:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004304:	0800de1c 	.word	0x0800de1c
  ldr  r0, =_sdata
 8004308:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800430c:	2000029c 	.word	0x2000029c
  ldr  r2, =_sbss
 8004310:	2000029c 	.word	0x2000029c
  ldr  r3, = _ebss
 8004314:	200009f4 	.word	0x200009f4

08004318 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004318:	e7fe      	b.n	8004318 <ADC_IRQHandler>

0800431a <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 800431a:	b590      	push	{r4, r7, lr}
 800431c:	b089      	sub	sp, #36	; 0x24
 800431e:	af02      	add	r7, sp, #8
 8004320:	4604      	mov	r4, r0
 8004322:	4608      	mov	r0, r1
 8004324:	4611      	mov	r1, r2
 8004326:	461a      	mov	r2, r3
 8004328:	4623      	mov	r3, r4
 800432a:	80fb      	strh	r3, [r7, #6]
 800432c:	4603      	mov	r3, r0
 800432e:	80bb      	strh	r3, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	807b      	strh	r3, [r7, #2]
 8004334:	4613      	mov	r3, r2
 8004336:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8004348:	2300      	movs	r3, #0
 800434a:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 800434c:	2300      	movs	r3, #0
 800434e:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8004354:	887a      	ldrh	r2, [r7, #2]
 8004356:	88fb      	ldrh	r3, [r7, #6]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	da01      	bge.n	8004366 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8004362:	2301      	movs	r3, #1
 8004364:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 800436a:	883a      	ldrh	r2, [r7, #0]
 800436c:	88bb      	ldrh	r3, [r7, #4]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	da01      	bge.n	800437c <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8004378:	2301      	movs	r3, #1
 800437a:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8004382:	887a      	ldrh	r2, [r7, #2]
 8004384:	88fb      	ldrh	r3, [r7, #6]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800438a:	88fb      	ldrh	r3, [r7, #6]
 800438c:	823b      	strh	r3, [r7, #16]
 800438e:	e005      	b.n	800439c <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8004390:	88fa      	ldrh	r2, [r7, #6]
 8004392:	887b      	ldrh	r3, [r7, #2]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 800439c:	7cbb      	ldrb	r3, [r7, #18]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80043a2:	883a      	ldrh	r2, [r7, #0]
 80043a4:	88bb      	ldrh	r3, [r7, #4]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80043aa:	88bb      	ldrh	r3, [r7, #4]
 80043ac:	81fb      	strh	r3, [r7, #14]
 80043ae:	e005      	b.n	80043bc <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80043b0:	88ba      	ldrh	r2, [r7, #4]
 80043b2:	883b      	ldrh	r3, [r7, #0]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80043b8:	883b      	ldrh	r3, [r7, #0]
 80043ba:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80043bc:	8abc      	ldrh	r4, [r7, #20]
 80043be:	8afa      	ldrh	r2, [r7, #22]
 80043c0:	89f9      	ldrh	r1, [r7, #14]
 80043c2:	8a38      	ldrh	r0, [r7, #16]
 80043c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	4623      	mov	r3, r4
 80043ca:	f000 fca9 	bl	8004d20 <ILI9341_Draw_Rectangle>
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd90      	pop	{r4, r7, pc}
	...

080043d8 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80043d8:	b590      	push	{r4, r7, lr}
 80043da:	b089      	sub	sp, #36	; 0x24
 80043dc:	af02      	add	r7, sp, #8
 80043de:	4604      	mov	r4, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4623      	mov	r3, r4
 80043e8:	71fb      	strb	r3, [r7, #7]
 80043ea:	4603      	mov	r3, r0
 80043ec:	71bb      	strb	r3, [r7, #6]
 80043ee:	460b      	mov	r3, r1
 80043f0:	717b      	strb	r3, [r7, #5]
 80043f2:	4613      	mov	r3, r2
 80043f4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80043f6:	79fb      	ldrb	r3, [r7, #7]
 80043f8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b1f      	cmp	r3, #31
 80043fe:	d802      	bhi.n	8004406 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	71fb      	strb	r3, [r7, #7]
 8004404:	e002      	b.n	800440c <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8004406:	7dfb      	ldrb	r3, [r7, #23]
 8004408:	3b20      	subs	r3, #32
 800440a:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800440c:	2300      	movs	r3, #0
 800440e:	753b      	strb	r3, [r7, #20]
 8004410:	e012      	b.n	8004438 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8004412:	7dfa      	ldrb	r2, [r7, #23]
 8004414:	7d38      	ldrb	r0, [r7, #20]
 8004416:	7d39      	ldrb	r1, [r7, #20]
 8004418:	4c3b      	ldr	r4, [pc, #236]	; (8004508 <ILI9341_Draw_Char+0x130>)
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4423      	add	r3, r4
 8004424:	4403      	add	r3, r0
 8004426:	781a      	ldrb	r2, [r3, #0]
 8004428:	f101 0318 	add.w	r3, r1, #24
 800442c:	443b      	add	r3, r7
 800442e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004432:	7d3b      	ldrb	r3, [r7, #20]
 8004434:	3301      	adds	r3, #1
 8004436:	753b      	strb	r3, [r7, #20]
 8004438:	7d3b      	ldrb	r3, [r7, #20]
 800443a:	2b05      	cmp	r3, #5
 800443c:	d9e9      	bls.n	8004412 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800443e:	79bb      	ldrb	r3, [r7, #6]
 8004440:	b298      	uxth	r0, r3
 8004442:	797b      	ldrb	r3, [r7, #5]
 8004444:	b299      	uxth	r1, r3
 8004446:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004448:	461a      	mov	r2, r3
 800444a:	0052      	lsls	r2, r2, #1
 800444c:	4413      	add	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004454:	00db      	lsls	r3, r3, #3
 8004456:	b29c      	uxth	r4, r3
 8004458:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	4623      	mov	r3, r4
 800445e:	f000 fc5f 	bl	8004d20 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004462:	2300      	movs	r3, #0
 8004464:	757b      	strb	r3, [r7, #21]
 8004466:	e047      	b.n	80044f8 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004468:	2300      	movs	r3, #0
 800446a:	75bb      	strb	r3, [r7, #22]
 800446c:	e03e      	b.n	80044ec <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800446e:	7d7b      	ldrb	r3, [r7, #21]
 8004470:	3318      	adds	r3, #24
 8004472:	443b      	add	r3, r7
 8004474:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8004478:	461a      	mov	r2, r3
 800447a:	7dbb      	ldrb	r3, [r7, #22]
 800447c:	fa42 f303 	asr.w	r3, r2, r3
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d02e      	beq.n	80044e6 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8004488:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800448a:	2b01      	cmp	r3, #1
 800448c:	d110      	bne.n	80044b0 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800448e:	79bb      	ldrb	r3, [r7, #6]
 8004490:	b29a      	uxth	r2, r3
 8004492:	7d7b      	ldrb	r3, [r7, #21]
 8004494:	b29b      	uxth	r3, r3
 8004496:	4413      	add	r3, r2
 8004498:	b298      	uxth	r0, r3
 800449a:	797b      	ldrb	r3, [r7, #5]
 800449c:	b29a      	uxth	r2, r3
 800449e:	7dbb      	ldrb	r3, [r7, #22]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	4413      	add	r3, r2
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	4619      	mov	r1, r3
 80044aa:	f000 fb5f 	bl	8004b6c <ILI9341_Draw_Pixel>
 80044ae:	e01a      	b.n	80044e6 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80044b0:	79bb      	ldrb	r3, [r7, #6]
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	7d7b      	ldrb	r3, [r7, #21]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80044ba:	fb11 f303 	smulbb	r3, r1, r3
 80044be:	b29b      	uxth	r3, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	b298      	uxth	r0, r3
 80044c4:	797b      	ldrb	r3, [r7, #5]
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	7dbb      	ldrb	r3, [r7, #22]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80044ce:	fb11 f303 	smulbb	r3, r1, r3
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	b299      	uxth	r1, r3
 80044d8:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80044da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	4623      	mov	r3, r4
 80044e2:	f000 fc1d 	bl	8004d20 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80044e6:	7dbb      	ldrb	r3, [r7, #22]
 80044e8:	3301      	adds	r3, #1
 80044ea:	75bb      	strb	r3, [r7, #22]
 80044ec:	7dbb      	ldrb	r3, [r7, #22]
 80044ee:	2b07      	cmp	r3, #7
 80044f0:	d9bd      	bls.n	800446e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80044f2:	7d7b      	ldrb	r3, [r7, #21]
 80044f4:	3301      	adds	r3, #1
 80044f6:	757b      	strb	r3, [r7, #21]
 80044f8:	7d7b      	ldrb	r3, [r7, #21]
 80044fa:	2b05      	cmp	r3, #5
 80044fc:	d9b4      	bls.n	8004468 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80044fe:	bf00      	nop
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	bd90      	pop	{r4, r7, pc}
 8004508:	0800d850 	.word	0x0800d850

0800450c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800450c:	b590      	push	{r4, r7, lr}
 800450e:	b085      	sub	sp, #20
 8004510:	af02      	add	r7, sp, #8
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	4608      	mov	r0, r1
 8004516:	4611      	mov	r1, r2
 8004518:	461a      	mov	r2, r3
 800451a:	4603      	mov	r3, r0
 800451c:	70fb      	strb	r3, [r7, #3]
 800451e:	460b      	mov	r3, r1
 8004520:	70bb      	strb	r3, [r7, #2]
 8004522:	4613      	mov	r3, r2
 8004524:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8004526:	e017      	b.n	8004558 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	607a      	str	r2, [r7, #4]
 800452e:	7818      	ldrb	r0, [r3, #0]
 8004530:	883c      	ldrh	r4, [r7, #0]
 8004532:	78ba      	ldrb	r2, [r7, #2]
 8004534:	78f9      	ldrb	r1, [r7, #3]
 8004536:	8bbb      	ldrh	r3, [r7, #28]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	8b3b      	ldrh	r3, [r7, #24]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	4623      	mov	r3, r4
 8004540:	f7ff ff4a 	bl	80043d8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8004544:	8b3b      	ldrh	r3, [r7, #24]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	461a      	mov	r2, r3
 800454a:	0052      	lsls	r2, r2, #1
 800454c:	4413      	add	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	b2da      	uxtb	r2, r3
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	4413      	add	r3, r2
 8004556:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e3      	bne.n	8004528 <ILI9341_Draw_Text+0x1c>
    }
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	bd90      	pop	{r4, r7, pc}
	...

0800456c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8004570:	f7ff f868 	bl	8003644 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8004574:	f7fc fe8a 	bl	800128c <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8004578:	2200      	movs	r2, #0
 800457a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800457e:	4802      	ldr	r0, [pc, #8]	; (8004588 <ILI9341_SPI_Init+0x1c>)
 8004580:	f001 ff30 	bl	80063e4 <HAL_GPIO_WritePin>
}
 8004584:	bf00      	nop
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40020800 	.word	0x40020800

0800458c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8004596:	1df9      	adds	r1, r7, #7
 8004598:	2301      	movs	r3, #1
 800459a:	2201      	movs	r2, #1
 800459c:	4803      	ldr	r0, [pc, #12]	; (80045ac <ILI9341_SPI_Send+0x20>)
 800459e:	f003 ff79 	bl	8008494 <HAL_SPI_Transmit>
}
 80045a2:	bf00      	nop
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20000564 	.word	0x20000564

080045b0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4603      	mov	r3, r0
 80045b8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80045ba:	2200      	movs	r2, #0
 80045bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045c0:	480b      	ldr	r0, [pc, #44]	; (80045f0 <ILI9341_Write_Command+0x40>)
 80045c2:	f001 ff0f 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80045c6:	2200      	movs	r2, #0
 80045c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045cc:	4808      	ldr	r0, [pc, #32]	; (80045f0 <ILI9341_Write_Command+0x40>)
 80045ce:	f001 ff09 	bl	80063e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7ff ffd9 	bl	800458c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80045da:	2201      	movs	r2, #1
 80045dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045e0:	4803      	ldr	r0, [pc, #12]	; (80045f0 <ILI9341_Write_Command+0x40>)
 80045e2:	f001 feff 	bl	80063e4 <HAL_GPIO_WritePin>
}
 80045e6:	bf00      	nop
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40020800 	.word	0x40020800

080045f4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80045fe:	2201      	movs	r2, #1
 8004600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004604:	480b      	ldr	r0, [pc, #44]	; (8004634 <ILI9341_Write_Data+0x40>)
 8004606:	f001 feed 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800460a:	2200      	movs	r2, #0
 800460c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004610:	4808      	ldr	r0, [pc, #32]	; (8004634 <ILI9341_Write_Data+0x40>)
 8004612:	f001 fee7 	bl	80063e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8004616:	79fb      	ldrb	r3, [r7, #7]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff ffb7 	bl	800458c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800461e:	2201      	movs	r2, #1
 8004620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004624:	4803      	ldr	r0, [pc, #12]	; (8004634 <ILI9341_Write_Data+0x40>)
 8004626:	f001 fedd 	bl	80063e4 <HAL_GPIO_WritePin>
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	40020800 	.word	0x40020800

08004638 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	4604      	mov	r4, r0
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	4623      	mov	r3, r4
 8004648:	80fb      	strh	r3, [r7, #6]
 800464a:	4603      	mov	r3, r0
 800464c:	80bb      	strh	r3, [r7, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	807b      	strh	r3, [r7, #2]
 8004652:	4613      	mov	r3, r2
 8004654:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8004656:	202a      	movs	r0, #42	; 0x2a
 8004658:	f7ff ffaa 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800465c:	88fb      	ldrh	r3, [r7, #6]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	b29b      	uxth	r3, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff ffc5 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff ffc0 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8004674:	887b      	ldrh	r3, [r7, #2]
 8004676:	0a1b      	lsrs	r3, r3, #8
 8004678:	b29b      	uxth	r3, r3
 800467a:	b2db      	uxtb	r3, r3
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ffb9 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8004682:	887b      	ldrh	r3, [r7, #2]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff ffb4 	bl	80045f4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800468c:	202b      	movs	r0, #43	; 0x2b
 800468e:	f7ff ff8f 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8004692:	88bb      	ldrh	r3, [r7, #4]
 8004694:	0a1b      	lsrs	r3, r3, #8
 8004696:	b29b      	uxth	r3, r3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ffaa 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80046a0:	88bb      	ldrh	r3, [r7, #4]
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff ffa5 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80046aa:	883b      	ldrh	r3, [r7, #0]
 80046ac:	0a1b      	lsrs	r3, r3, #8
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff ff9e 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80046b8:	883b      	ldrh	r3, [r7, #0]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff ff99 	bl	80045f4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80046c2:	202c      	movs	r0, #44	; 0x2c
 80046c4:	f7ff ff74 	bl	80045b0 <ILI9341_Write_Command>
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd90      	pop	{r4, r7, pc}

080046d0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80046d4:	2201      	movs	r2, #1
 80046d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046da:	480b      	ldr	r0, [pc, #44]	; (8004708 <ILI9341_Reset+0x38>)
 80046dc:	f001 fe82 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80046e0:	20c8      	movs	r0, #200	; 0xc8
 80046e2:	f000 fbdf 	bl	8004ea4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80046e6:	2200      	movs	r2, #0
 80046e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80046ec:	4806      	ldr	r0, [pc, #24]	; (8004708 <ILI9341_Reset+0x38>)
 80046ee:	f001 fe79 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80046f2:	20c8      	movs	r0, #200	; 0xc8
 80046f4:	f000 fbd6 	bl	8004ea4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80046f8:	2201      	movs	r2, #1
 80046fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80046fe:	4802      	ldr	r0, [pc, #8]	; (8004708 <ILI9341_Reset+0x38>)
 8004700:	f001 fe70 	bl	80063e4 <HAL_GPIO_WritePin>
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	40020800 	.word	0x40020800

0800470c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8004716:	79fb      	ldrb	r3, [r7, #7]
 8004718:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800471a:	2036      	movs	r0, #54	; 0x36
 800471c:	f7ff ff48 	bl	80045b0 <ILI9341_Write_Command>
HAL_Delay(1);
 8004720:	2001      	movs	r0, #1
 8004722:	f000 fbbf 	bl	8004ea4 <HAL_Delay>
	
switch(screen_rotation) 
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d837      	bhi.n	800479c <ILI9341_Set_Rotation+0x90>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <ILI9341_Set_Rotation+0x28>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004745 	.word	0x08004745
 8004738:	0800475b 	.word	0x0800475b
 800473c:	08004771 	.word	0x08004771
 8004740:	08004787 	.word	0x08004787
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8004744:	2048      	movs	r0, #72	; 0x48
 8004746:	f7ff ff55 	bl	80045f4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800474a:	4b17      	ldr	r3, [pc, #92]	; (80047a8 <ILI9341_Set_Rotation+0x9c>)
 800474c:	22f0      	movs	r2, #240	; 0xf0
 800474e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8004750:	4b16      	ldr	r3, [pc, #88]	; (80047ac <ILI9341_Set_Rotation+0xa0>)
 8004752:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004756:	801a      	strh	r2, [r3, #0]
			break;
 8004758:	e021      	b.n	800479e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800475a:	2028      	movs	r0, #40	; 0x28
 800475c:	f7ff ff4a 	bl	80045f4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8004760:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <ILI9341_Set_Rotation+0x9c>)
 8004762:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004766:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <ILI9341_Set_Rotation+0xa0>)
 800476a:	22f0      	movs	r2, #240	; 0xf0
 800476c:	801a      	strh	r2, [r3, #0]
			break;
 800476e:	e016      	b.n	800479e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8004770:	2088      	movs	r0, #136	; 0x88
 8004772:	f7ff ff3f 	bl	80045f4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8004776:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <ILI9341_Set_Rotation+0x9c>)
 8004778:	22f0      	movs	r2, #240	; 0xf0
 800477a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <ILI9341_Set_Rotation+0xa0>)
 800477e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004782:	801a      	strh	r2, [r3, #0]
			break;
 8004784:	e00b      	b.n	800479e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8004786:	20e8      	movs	r0, #232	; 0xe8
 8004788:	f7ff ff34 	bl	80045f4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <ILI9341_Set_Rotation+0x9c>)
 800478e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004792:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <ILI9341_Set_Rotation+0xa0>)
 8004796:	22f0      	movs	r2, #240	; 0xf0
 8004798:	801a      	strh	r2, [r3, #0]
			break;
 800479a:	e000      	b.n	800479e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800479c:	bf00      	nop
	}
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	200000ca 	.word	0x200000ca
 80047ac:	200000c8 	.word	0x200000c8

080047b0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80047b4:	2201      	movs	r2, #1
 80047b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80047ba:	4802      	ldr	r0, [pc, #8]	; (80047c4 <ILI9341_Enable+0x14>)
 80047bc:	f001 fe12 	bl	80063e4 <HAL_GPIO_WritePin>
}
 80047c0:	bf00      	nop
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	40020800 	.word	0x40020800

080047c8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80047cc:	f7ff fff0 	bl	80047b0 <ILI9341_Enable>
ILI9341_SPI_Init();
 80047d0:	f7ff fecc 	bl	800456c <ILI9341_SPI_Init>
ILI9341_Reset();
 80047d4:	f7ff ff7c 	bl	80046d0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80047d8:	2001      	movs	r0, #1
 80047da:	f7ff fee9 	bl	80045b0 <ILI9341_Write_Command>
HAL_Delay(1000);
 80047de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047e2:	f000 fb5f 	bl	8004ea4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80047e6:	20cb      	movs	r0, #203	; 0xcb
 80047e8:	f7ff fee2 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80047ec:	2039      	movs	r0, #57	; 0x39
 80047ee:	f7ff ff01 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80047f2:	202c      	movs	r0, #44	; 0x2c
 80047f4:	f7ff fefe 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80047f8:	2000      	movs	r0, #0
 80047fa:	f7ff fefb 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80047fe:	2034      	movs	r0, #52	; 0x34
 8004800:	f7ff fef8 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8004804:	2002      	movs	r0, #2
 8004806:	f7ff fef5 	bl	80045f4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800480a:	20cf      	movs	r0, #207	; 0xcf
 800480c:	f7ff fed0 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004810:	2000      	movs	r0, #0
 8004812:	f7ff feef 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004816:	20c1      	movs	r0, #193	; 0xc1
 8004818:	f7ff feec 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800481c:	2030      	movs	r0, #48	; 0x30
 800481e:	f7ff fee9 	bl	80045f4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8004822:	20e8      	movs	r0, #232	; 0xe8
 8004824:	f7ff fec4 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8004828:	2085      	movs	r0, #133	; 0x85
 800482a:	f7ff fee3 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800482e:	2000      	movs	r0, #0
 8004830:	f7ff fee0 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8004834:	2078      	movs	r0, #120	; 0x78
 8004836:	f7ff fedd 	bl	80045f4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800483a:	20ea      	movs	r0, #234	; 0xea
 800483c:	f7ff feb8 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004840:	2000      	movs	r0, #0
 8004842:	f7ff fed7 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004846:	2000      	movs	r0, #0
 8004848:	f7ff fed4 	bl	80045f4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800484c:	20ed      	movs	r0, #237	; 0xed
 800484e:	f7ff feaf 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8004852:	2064      	movs	r0, #100	; 0x64
 8004854:	f7ff fece 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8004858:	2003      	movs	r0, #3
 800485a:	f7ff fecb 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800485e:	2012      	movs	r0, #18
 8004860:	f7ff fec8 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8004864:	2081      	movs	r0, #129	; 0x81
 8004866:	f7ff fec5 	bl	80045f4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800486a:	20f7      	movs	r0, #247	; 0xf7
 800486c:	f7ff fea0 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8004870:	2020      	movs	r0, #32
 8004872:	f7ff febf 	bl	80045f4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8004876:	20c0      	movs	r0, #192	; 0xc0
 8004878:	f7ff fe9a 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800487c:	2023      	movs	r0, #35	; 0x23
 800487e:	f7ff feb9 	bl	80045f4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8004882:	20c1      	movs	r0, #193	; 0xc1
 8004884:	f7ff fe94 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8004888:	2010      	movs	r0, #16
 800488a:	f7ff feb3 	bl	80045f4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800488e:	20c5      	movs	r0, #197	; 0xc5
 8004890:	f7ff fe8e 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8004894:	203e      	movs	r0, #62	; 0x3e
 8004896:	f7ff fead 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800489a:	2028      	movs	r0, #40	; 0x28
 800489c:	f7ff feaa 	bl	80045f4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80048a0:	20c7      	movs	r0, #199	; 0xc7
 80048a2:	f7ff fe85 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80048a6:	2086      	movs	r0, #134	; 0x86
 80048a8:	f7ff fea4 	bl	80045f4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80048ac:	2036      	movs	r0, #54	; 0x36
 80048ae:	f7ff fe7f 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80048b2:	2048      	movs	r0, #72	; 0x48
 80048b4:	f7ff fe9e 	bl	80045f4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80048b8:	203a      	movs	r0, #58	; 0x3a
 80048ba:	f7ff fe79 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80048be:	2055      	movs	r0, #85	; 0x55
 80048c0:	f7ff fe98 	bl	80045f4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80048c4:	20b1      	movs	r0, #177	; 0xb1
 80048c6:	f7ff fe73 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80048ca:	2000      	movs	r0, #0
 80048cc:	f7ff fe92 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80048d0:	2018      	movs	r0, #24
 80048d2:	f7ff fe8f 	bl	80045f4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80048d6:	20b6      	movs	r0, #182	; 0xb6
 80048d8:	f7ff fe6a 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80048dc:	2008      	movs	r0, #8
 80048de:	f7ff fe89 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80048e2:	2082      	movs	r0, #130	; 0x82
 80048e4:	f7ff fe86 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80048e8:	2027      	movs	r0, #39	; 0x27
 80048ea:	f7ff fe83 	bl	80045f4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80048ee:	20f2      	movs	r0, #242	; 0xf2
 80048f0:	f7ff fe5e 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80048f4:	2000      	movs	r0, #0
 80048f6:	f7ff fe7d 	bl	80045f4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80048fa:	2026      	movs	r0, #38	; 0x26
 80048fc:	f7ff fe58 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8004900:	2001      	movs	r0, #1
 8004902:	f7ff fe77 	bl	80045f4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8004906:	20e0      	movs	r0, #224	; 0xe0
 8004908:	f7ff fe52 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800490c:	200f      	movs	r0, #15
 800490e:	f7ff fe71 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004912:	2031      	movs	r0, #49	; 0x31
 8004914:	f7ff fe6e 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8004918:	202b      	movs	r0, #43	; 0x2b
 800491a:	f7ff fe6b 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800491e:	200c      	movs	r0, #12
 8004920:	f7ff fe68 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004924:	200e      	movs	r0, #14
 8004926:	f7ff fe65 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800492a:	2008      	movs	r0, #8
 800492c:	f7ff fe62 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8004930:	204e      	movs	r0, #78	; 0x4e
 8004932:	f7ff fe5f 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8004936:	20f1      	movs	r0, #241	; 0xf1
 8004938:	f7ff fe5c 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800493c:	2037      	movs	r0, #55	; 0x37
 800493e:	f7ff fe59 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8004942:	2007      	movs	r0, #7
 8004944:	f7ff fe56 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8004948:	2010      	movs	r0, #16
 800494a:	f7ff fe53 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800494e:	2003      	movs	r0, #3
 8004950:	f7ff fe50 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004954:	200e      	movs	r0, #14
 8004956:	f7ff fe4d 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800495a:	2009      	movs	r0, #9
 800495c:	f7ff fe4a 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004960:	2000      	movs	r0, #0
 8004962:	f7ff fe47 	bl	80045f4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8004966:	20e1      	movs	r0, #225	; 0xe1
 8004968:	f7ff fe22 	bl	80045b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800496c:	2000      	movs	r0, #0
 800496e:	f7ff fe41 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8004972:	200e      	movs	r0, #14
 8004974:	f7ff fe3e 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8004978:	2014      	movs	r0, #20
 800497a:	f7ff fe3b 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800497e:	2003      	movs	r0, #3
 8004980:	f7ff fe38 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8004984:	2011      	movs	r0, #17
 8004986:	f7ff fe35 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800498a:	2007      	movs	r0, #7
 800498c:	f7ff fe32 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8004990:	2031      	movs	r0, #49	; 0x31
 8004992:	f7ff fe2f 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8004996:	20c1      	movs	r0, #193	; 0xc1
 8004998:	f7ff fe2c 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800499c:	2048      	movs	r0, #72	; 0x48
 800499e:	f7ff fe29 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80049a2:	2008      	movs	r0, #8
 80049a4:	f7ff fe26 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80049a8:	200f      	movs	r0, #15
 80049aa:	f7ff fe23 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80049ae:	200c      	movs	r0, #12
 80049b0:	f7ff fe20 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80049b4:	2031      	movs	r0, #49	; 0x31
 80049b6:	f7ff fe1d 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80049ba:	2036      	movs	r0, #54	; 0x36
 80049bc:	f7ff fe1a 	bl	80045f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80049c0:	200f      	movs	r0, #15
 80049c2:	f7ff fe17 	bl	80045f4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80049c6:	2011      	movs	r0, #17
 80049c8:	f7ff fdf2 	bl	80045b0 <ILI9341_Write_Command>
HAL_Delay(120);
 80049cc:	2078      	movs	r0, #120	; 0x78
 80049ce:	f000 fa69 	bl	8004ea4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80049d2:	2029      	movs	r0, #41	; 0x29
 80049d4:	f7ff fdec 	bl	80045b0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80049d8:	2000      	movs	r0, #0
 80049da:	f7ff fe97 	bl	800470c <ILI9341_Set_Rotation>
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80049e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049e8:	b08d      	sub	sp, #52	; 0x34
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	4603      	mov	r3, r0
 80049ee:	6039      	str	r1, [r7, #0]
 80049f0:	80fb      	strh	r3, [r7, #6]
 80049f2:	466b      	mov	r3, sp
 80049f4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a02:	d202      	bcs.n	8004a0a <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a08:	e002      	b.n	8004a10 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8004a0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004a10:	2201      	movs	r2, #1
 8004a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a16:	4840      	ldr	r0, [pc, #256]	; (8004b18 <ILI9341_Draw_Colour_Burst+0x134>)
 8004a18:	f001 fce4 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a22:	483d      	ldr	r0, [pc, #244]	; (8004b18 <ILI9341_Draw_Colour_Burst+0x134>)
 8004a24:	f001 fcde 	bl	80063e4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	0a1b      	lsrs	r3, r3, #8
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8004a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a34:	460b      	mov	r3, r1
 8004a36:	3b01      	subs	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	4688      	mov	r8, r1
 8004a3e:	4699      	mov	r9, r3
 8004a40:	f04f 0200 	mov.w	r2, #0
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a54:	2300      	movs	r3, #0
 8004a56:	460c      	mov	r4, r1
 8004a58:	461d      	mov	r5, r3
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	00eb      	lsls	r3, r5, #3
 8004a64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a68:	00e2      	lsls	r2, r4, #3
 8004a6a:	1dcb      	adds	r3, r1, #7
 8004a6c:	08db      	lsrs	r3, r3, #3
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	ebad 0d03 	sub.w	sp, sp, r3
 8004a74:	466b      	mov	r3, sp
 8004a76:	3300      	adds	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a7e:	e00e      	b.n	8004a9e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	4413      	add	r3, r2
 8004a86:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004a8a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	3301      	adds	r3, #1
 8004a90:	88fa      	ldrh	r2, [r7, #6]
 8004a92:	b2d1      	uxtb	r1, r2
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8004a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3ec      	bcc.n	8004a80 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8004aac:	697a      	ldr	r2, [r7, #20]
 8004aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aba:	fbb3 f2f2 	udiv	r2, r3, r2
 8004abe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac0:	fb01 f202 	mul.w	r2, r1, r2
 8004ac4:	1a9b      	subs	r3, r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d010      	beq.n	8004af0 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004ace:	2300      	movs	r3, #0
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad2:	e009      	b.n	8004ae8 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8004ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	230a      	movs	r3, #10
 8004ada:	69b9      	ldr	r1, [r7, #24]
 8004adc:	480f      	ldr	r0, [pc, #60]	; (8004b1c <ILI9341_Draw_Colour_Burst+0x138>)
 8004ade:	f003 fcd9 	bl	8008494 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d3f1      	bcc.n	8004ad4 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	230a      	movs	r3, #10
 8004af6:	69b9      	ldr	r1, [r7, #24]
 8004af8:	4808      	ldr	r0, [pc, #32]	; (8004b1c <ILI9341_Draw_Colour_Burst+0x138>)
 8004afa:	f003 fccb 	bl	8008494 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004afe:	2201      	movs	r2, #1
 8004b00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b04:	4804      	ldr	r0, [pc, #16]	; (8004b18 <ILI9341_Draw_Colour_Burst+0x134>)
 8004b06:	f001 fc6d 	bl	80063e4 <HAL_GPIO_WritePin>
 8004b0a:	46b5      	mov	sp, r6
}
 8004b0c:	bf00      	nop
 8004b0e:	3734      	adds	r7, #52	; 0x34
 8004b10:	46bd      	mov	sp, r7
 8004b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b16:	bf00      	nop
 8004b18:	40020800 	.word	0x40020800
 8004b1c:	20000564 	.word	0x20000564

08004b20 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <ILI9341_Fill_Screen+0x44>)
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <ILI9341_Fill_Screen+0x48>)
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	2100      	movs	r1, #0
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f7ff fd7d 	bl	8004638 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8004b3e:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <ILI9341_Fill_Screen+0x44>)
 8004b40:	881b      	ldrh	r3, [r3, #0]
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <ILI9341_Fill_Screen+0x48>)
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	fb02 f303 	mul.w	r3, r2, r3
 8004b50:	461a      	mov	r2, r3
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff44 	bl	80049e4 <ILI9341_Draw_Colour_Burst>
}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	200000ca 	.word	0x200000ca
 8004b68:	200000c8 	.word	0x200000c8

08004b6c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b086      	sub	sp, #24
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	4603      	mov	r3, r0
 8004b74:	80fb      	strh	r3, [r7, #6]
 8004b76:	460b      	mov	r3, r1
 8004b78:	80bb      	strh	r3, [r7, #4]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8004b7e:	4b64      	ldr	r3, [pc, #400]	; (8004d10 <ILI9341_Draw_Pixel+0x1a4>)
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	f080 80be 	bcs.w	8004d08 <ILI9341_Draw_Pixel+0x19c>
 8004b8c:	4b61      	ldr	r3, [pc, #388]	; (8004d14 <ILI9341_Draw_Pixel+0x1a8>)
 8004b8e:	881b      	ldrh	r3, [r3, #0]
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	88ba      	ldrh	r2, [r7, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	f080 80b7 	bcs.w	8004d08 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ba0:	485d      	ldr	r0, [pc, #372]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004ba2:	f001 fc1f 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bac:	485a      	ldr	r0, [pc, #360]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004bae:	f001 fc19 	bl	80063e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8004bb2:	202a      	movs	r0, #42	; 0x2a
 8004bb4:	f7ff fcea 	bl	800458c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bbe:	4856      	ldr	r0, [pc, #344]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004bc0:	f001 fc10 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bca:	4853      	ldr	r0, [pc, #332]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004bcc:	f001 fc0a 	bl	80063e4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bd6:	4850      	ldr	r0, [pc, #320]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004bd8:	f001 fc04 	bl	80063e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8004bdc:	88fb      	ldrh	r3, [r7, #6]
 8004bde:	0a1b      	lsrs	r3, r3, #8
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	753b      	strb	r3, [r7, #20]
 8004be6:	88fb      	ldrh	r3, [r7, #6]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	757b      	strb	r3, [r7, #21]
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	121b      	asrs	r3, r3, #8
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	75bb      	strb	r3, [r7, #22]
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8004c00:	f107 0114 	add.w	r1, r7, #20
 8004c04:	2301      	movs	r3, #1
 8004c06:	2204      	movs	r2, #4
 8004c08:	4844      	ldr	r0, [pc, #272]	; (8004d1c <ILI9341_Draw_Pixel+0x1b0>)
 8004c0a:	f003 fc43 	bl	8008494 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c14:	4840      	ldr	r0, [pc, #256]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004c16:	f001 fbe5 	bl	80063e4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c20:	483d      	ldr	r0, [pc, #244]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004c22:	f001 fbdf 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004c26:	2200      	movs	r2, #0
 8004c28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c2c:	483a      	ldr	r0, [pc, #232]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004c2e:	f001 fbd9 	bl	80063e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8004c32:	202b      	movs	r0, #43	; 0x2b
 8004c34:	f7ff fcaa 	bl	800458c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c3e:	4836      	ldr	r0, [pc, #216]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004c40:	f001 fbd0 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8004c44:	2201      	movs	r2, #1
 8004c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c4a:	4833      	ldr	r0, [pc, #204]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004c4c:	f001 fbca 	bl	80063e4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004c50:	2200      	movs	r2, #0
 8004c52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c56:	4830      	ldr	r0, [pc, #192]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004c58:	f001 fbc4 	bl	80063e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8004c5c:	88bb      	ldrh	r3, [r7, #4]
 8004c5e:	0a1b      	lsrs	r3, r3, #8
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	743b      	strb	r3, [r7, #16]
 8004c66:	88bb      	ldrh	r3, [r7, #4]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	747b      	strb	r3, [r7, #17]
 8004c6c:	88bb      	ldrh	r3, [r7, #4]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	121b      	asrs	r3, r3, #8
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	74bb      	strb	r3, [r7, #18]
 8004c76:	88bb      	ldrh	r3, [r7, #4]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8004c80:	f107 0110 	add.w	r1, r7, #16
 8004c84:	2301      	movs	r3, #1
 8004c86:	2204      	movs	r2, #4
 8004c88:	4824      	ldr	r0, [pc, #144]	; (8004d1c <ILI9341_Draw_Pixel+0x1b0>)
 8004c8a:	f003 fc03 	bl	8008494 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c94:	4820      	ldr	r0, [pc, #128]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004c96:	f001 fba5 	bl	80063e4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ca0:	481d      	ldr	r0, [pc, #116]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004ca2:	f001 fb9f 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cac:	481a      	ldr	r0, [pc, #104]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004cae:	f001 fb99 	bl	80063e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8004cb2:	202c      	movs	r0, #44	; 0x2c
 8004cb4:	f7ff fc6a 	bl	800458c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cbe:	4816      	ldr	r0, [pc, #88]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004cc0:	f001 fb90 	bl	80063e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cca:	4813      	ldr	r0, [pc, #76]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004ccc:	f001 fb8a 	bl	80063e4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cd6:	4810      	ldr	r0, [pc, #64]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004cd8:	f001 fb84 	bl	80063e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8004cdc:	887b      	ldrh	r3, [r7, #2]
 8004cde:	0a1b      	lsrs	r3, r3, #8
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	733b      	strb	r3, [r7, #12]
 8004ce6:	887b      	ldrh	r3, [r7, #2]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8004cec:	f107 010c 	add.w	r1, r7, #12
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	4809      	ldr	r0, [pc, #36]	; (8004d1c <ILI9341_Draw_Pixel+0x1b0>)
 8004cf6:	f003 fbcd 	bl	8008494 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d00:	4805      	ldr	r0, [pc, #20]	; (8004d18 <ILI9341_Draw_Pixel+0x1ac>)
 8004d02:	f001 fb6f 	bl	80063e4 <HAL_GPIO_WritePin>
 8004d06:	e000      	b.n	8004d0a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8004d08:	bf00      	nop
	
}
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	200000ca 	.word	0x200000ca
 8004d14:	200000c8 	.word	0x200000c8
 8004d18:	40020800 	.word	0x40020800
 8004d1c:	20000564 	.word	0x20000564

08004d20 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8004d20:	b590      	push	{r4, r7, lr}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4623      	mov	r3, r4
 8004d30:	80fb      	strh	r3, [r7, #6]
 8004d32:	4603      	mov	r3, r0
 8004d34:	80bb      	strh	r3, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	807b      	strh	r3, [r7, #2]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8004d3e:	4b24      	ldr	r3, [pc, #144]	; (8004dd0 <ILI9341_Draw_Rectangle+0xb0>)
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d23d      	bcs.n	8004dc6 <ILI9341_Draw_Rectangle+0xa6>
 8004d4a:	4b22      	ldr	r3, [pc, #136]	; (8004dd4 <ILI9341_Draw_Rectangle+0xb4>)
 8004d4c:	881b      	ldrh	r3, [r3, #0]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	88ba      	ldrh	r2, [r7, #4]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d237      	bcs.n	8004dc6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8004d56:	88fa      	ldrh	r2, [r7, #6]
 8004d58:	887b      	ldrh	r3, [r7, #2]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	4a1c      	ldr	r2, [pc, #112]	; (8004dd0 <ILI9341_Draw_Rectangle+0xb0>)
 8004d5e:	8812      	ldrh	r2, [r2, #0]
 8004d60:	b292      	uxth	r2, r2
 8004d62:	4293      	cmp	r3, r2
 8004d64:	dd05      	ble.n	8004d72 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8004d66:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <ILI9341_Draw_Rectangle+0xb0>)
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	88fb      	ldrh	r3, [r7, #6]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8004d72:	88ba      	ldrh	r2, [r7, #4]
 8004d74:	883b      	ldrh	r3, [r7, #0]
 8004d76:	4413      	add	r3, r2
 8004d78:	4a16      	ldr	r2, [pc, #88]	; (8004dd4 <ILI9341_Draw_Rectangle+0xb4>)
 8004d7a:	8812      	ldrh	r2, [r2, #0]
 8004d7c:	b292      	uxth	r2, r2
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	dd05      	ble.n	8004d8e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8004d82:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <ILI9341_Draw_Rectangle+0xb4>)
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	88bb      	ldrh	r3, [r7, #4]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8004d8e:	88fa      	ldrh	r2, [r7, #6]
 8004d90:	887b      	ldrh	r3, [r7, #2]
 8004d92:	4413      	add	r3, r2
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29c      	uxth	r4, r3
 8004d9a:	88ba      	ldrh	r2, [r7, #4]
 8004d9c:	883b      	ldrh	r3, [r7, #0]
 8004d9e:	4413      	add	r3, r2
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	88b9      	ldrh	r1, [r7, #4]
 8004da8:	88f8      	ldrh	r0, [r7, #6]
 8004daa:	4622      	mov	r2, r4
 8004dac:	f7ff fc44 	bl	8004638 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8004db0:	883b      	ldrh	r3, [r7, #0]
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	fb02 f303 	mul.w	r3, r2, r3
 8004db8:	461a      	mov	r2, r3
 8004dba:	8b3b      	ldrh	r3, [r7, #24]
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff fe10 	bl	80049e4 <ILI9341_Draw_Colour_Burst>
 8004dc4:	e000      	b.n	8004dc8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8004dc6:	bf00      	nop
}
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd90      	pop	{r4, r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	200000ca 	.word	0x200000ca
 8004dd4:	200000c8 	.word	0x200000c8

08004dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ddc:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <HAL_Init+0x28>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a07      	ldr	r2, [pc, #28]	; (8004e00 <HAL_Init+0x28>)
 8004de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004de6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004de8:	2003      	movs	r0, #3
 8004dea:	f000 fd7d 	bl	80058e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004dee:	2000      	movs	r0, #0
 8004df0:	f000 f808 	bl	8004e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004df4:	f7fe fca8 	bl	8003748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023c00 	.word	0x40023c00

08004e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e0c:	4b12      	ldr	r3, [pc, #72]	; (8004e58 <HAL_InitTick+0x54>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b12      	ldr	r3, [pc, #72]	; (8004e5c <HAL_InitTick+0x58>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	4619      	mov	r1, r3
 8004e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fd95 	bl	8005952 <HAL_SYSTICK_Config>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e00e      	b.n	8004e50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b0f      	cmp	r3, #15
 8004e36:	d80a      	bhi.n	8004e4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e38:	2200      	movs	r2, #0
 8004e3a:	6879      	ldr	r1, [r7, #4]
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	f000 fd5d 	bl	80058fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004e44:	4a06      	ldr	r2, [pc, #24]	; (8004e60 <HAL_InitTick+0x5c>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e000      	b.n	8004e50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200000c4 	.word	0x200000c4
 8004e5c:	200000d0 	.word	0x200000d0
 8004e60:	200000cc 	.word	0x200000cc

08004e64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e68:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_IncTick+0x20>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <HAL_IncTick+0x24>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4413      	add	r3, r2
 8004e74:	4a04      	ldr	r2, [pc, #16]	; (8004e88 <HAL_IncTick+0x24>)
 8004e76:	6013      	str	r3, [r2, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	200000d0 	.word	0x200000d0
 8004e88:	200008a4 	.word	0x200008a4

08004e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <HAL_GetTick+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	200008a4 	.word	0x200008a4

08004ea4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004eac:	f7ff ffee 	bl	8004e8c <HAL_GetTick>
 8004eb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d005      	beq.n	8004eca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <HAL_Delay+0x44>)
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004eca:	bf00      	nop
 8004ecc:	f7ff ffde 	bl	8004e8c <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d8f7      	bhi.n	8004ecc <HAL_Delay+0x28>
  {
  }
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200000d0 	.word	0x200000d0

08004eec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e031      	b.n	8004f66 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fb fd80 	bl	8000a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d116      	bne.n	8004f58 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f2e:	4b10      	ldr	r3, [pc, #64]	; (8004f70 <HAL_ADC_Init+0x84>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	f043 0202 	orr.w	r2, r3, #2
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fa88 	bl	8005450 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	f043 0201 	orr.w	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40
 8004f56:	e001      	b.n	8004f5c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	ffffeefd 	.word	0xffffeefd

08004f74 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8004f80:	2300      	movs	r3, #0
 8004f82:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d101      	bne.n	8004f92 <HAL_ADC_Start_DMA+0x1e>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	e0d4      	b.n	800513c <HAL_ADC_Start_DMA+0x1c8>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d018      	beq.n	8004fda <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0201 	orr.w	r2, r2, #1
 8004fb6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004fb8:	4b62      	ldr	r3, [pc, #392]	; (8005144 <HAL_ADC_Start_DMA+0x1d0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a62      	ldr	r2, [pc, #392]	; (8005148 <HAL_ADC_Start_DMA+0x1d4>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	0c9a      	lsrs	r2, r3, #18
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	4413      	add	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004fcc:	e002      	b.n	8004fd4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1f9      	bne.n	8004fce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0301 	and.w	r3, r3, #1
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	f040 809c 	bne.w	8005122 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fee:	4b57      	ldr	r3, [pc, #348]	; (800514c <HAL_ADC_Start_DMA+0x1d8>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005010:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005024:	d106      	bne.n	8005034 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800502a:	f023 0206 	bic.w	r2, r3, #6
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	645a      	str	r2, [r3, #68]	; 0x44
 8005032:	e002      	b.n	800503a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005046:	4a42      	ldr	r2, [pc, #264]	; (8005150 <HAL_ADC_Start_DMA+0x1dc>)
 8005048:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	4a41      	ldr	r2, [pc, #260]	; (8005154 <HAL_ADC_Start_DMA+0x1e0>)
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	4a40      	ldr	r2, [pc, #256]	; (8005158 <HAL_ADC_Start_DMA+0x1e4>)
 8005058:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005062:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005072:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005082:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	334c      	adds	r3, #76	; 0x4c
 800508e:	4619      	mov	r1, r3
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f000 fd18 	bl	8005ac8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005098:	4b30      	ldr	r3, [pc, #192]	; (800515c <HAL_ADC_Start_DMA+0x1e8>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10f      	bne.n	80050c4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d143      	bne.n	800513a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80050c0:	609a      	str	r2, [r3, #8]
 80050c2:	e03a      	b.n	800513a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a25      	ldr	r2, [pc, #148]	; (8005160 <HAL_ADC_Start_DMA+0x1ec>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d10e      	bne.n	80050ec <HAL_ADC_Start_DMA+0x178>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d107      	bne.n	80050ec <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80050ea:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80050ec:	4b1b      	ldr	r3, [pc, #108]	; (800515c <HAL_ADC_Start_DMA+0x1e8>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d120      	bne.n	800513a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a19      	ldr	r2, [pc, #100]	; (8005164 <HAL_ADC_Start_DMA+0x1f0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d11b      	bne.n	800513a <HAL_ADC_Start_DMA+0x1c6>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d114      	bne.n	800513a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689a      	ldr	r2, [r3, #8]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800511e:	609a      	str	r2, [r3, #8]
 8005120:	e00b      	b.n	800513a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f043 0210 	orr.w	r2, r3, #16
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005132:	f043 0201 	orr.w	r2, r3, #1
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	200000c4 	.word	0x200000c4
 8005148:	431bde83 	.word	0x431bde83
 800514c:	fffff8fe 	.word	0xfffff8fe
 8005150:	08005645 	.word	0x08005645
 8005154:	080056ff 	.word	0x080056ff
 8005158:	0800571b 	.word	0x0800571b
 800515c:	40012300 	.word	0x40012300
 8005160:	40012000 	.word	0x40012000
 8005164:	40012200 	.word	0x40012200

08005168 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_ADC_ConfigChannel+0x1c>
 80051bc:	2302      	movs	r3, #2
 80051be:	e136      	b.n	800542e <HAL_ADC_ConfigChannel+0x28a>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b09      	cmp	r3, #9
 80051ce:	d93a      	bls.n	8005246 <HAL_ADC_ConfigChannel+0xa2>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051d8:	d035      	beq.n	8005246 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68d9      	ldr	r1, [r3, #12]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	4613      	mov	r3, r2
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	4413      	add	r3, r2
 80051ee:	3b1e      	subs	r3, #30
 80051f0:	2207      	movs	r2, #7
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	43da      	mvns	r2, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	400a      	ands	r2, r1
 80051fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a8d      	ldr	r2, [pc, #564]	; (800543c <HAL_ADC_ConfigChannel+0x298>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d10a      	bne.n	8005220 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68d9      	ldr	r1, [r3, #12]
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	061a      	lsls	r2, r3, #24
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800521e:	e035      	b.n	800528c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68d9      	ldr	r1, [r3, #12]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	b29b      	uxth	r3, r3
 8005230:	4618      	mov	r0, r3
 8005232:	4603      	mov	r3, r0
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	4403      	add	r3, r0
 8005238:	3b1e      	subs	r3, #30
 800523a:	409a      	lsls	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	430a      	orrs	r2, r1
 8005242:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005244:	e022      	b.n	800528c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6919      	ldr	r1, [r3, #16]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	461a      	mov	r2, r3
 8005254:	4613      	mov	r3, r2
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	4413      	add	r3, r2
 800525a:	2207      	movs	r2, #7
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	43da      	mvns	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	400a      	ands	r2, r1
 8005268:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6919      	ldr	r1, [r3, #16]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	689a      	ldr	r2, [r3, #8]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	4618      	mov	r0, r3
 800527c:	4603      	mov	r3, r0
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4403      	add	r3, r0
 8005282:	409a      	lsls	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b06      	cmp	r3, #6
 8005292:	d824      	bhi.n	80052de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	3b05      	subs	r3, #5
 80052a6:	221f      	movs	r2, #31
 80052a8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ac:	43da      	mvns	r2, r3
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	400a      	ands	r2, r1
 80052b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	4618      	mov	r0, r3
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	3b05      	subs	r3, #5
 80052d0:	fa00 f203 	lsl.w	r2, r0, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	635a      	str	r2, [r3, #52]	; 0x34
 80052dc:	e04c      	b.n	8005378 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d824      	bhi.n	8005330 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	3b23      	subs	r3, #35	; 0x23
 80052f8:	221f      	movs	r2, #31
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43da      	mvns	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	400a      	ands	r2, r1
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	4618      	mov	r0, r3
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685a      	ldr	r2, [r3, #4]
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	3b23      	subs	r3, #35	; 0x23
 8005322:	fa00 f203 	lsl.w	r2, r0, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	631a      	str	r2, [r3, #48]	; 0x30
 800532e:	e023      	b.n	8005378 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	3b41      	subs	r3, #65	; 0x41
 8005342:	221f      	movs	r2, #31
 8005344:	fa02 f303 	lsl.w	r3, r2, r3
 8005348:	43da      	mvns	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	400a      	ands	r2, r1
 8005350:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	b29b      	uxth	r3, r3
 800535e:	4618      	mov	r0, r3
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	4613      	mov	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4413      	add	r3, r2
 800536a:	3b41      	subs	r3, #65	; 0x41
 800536c:	fa00 f203 	lsl.w	r2, r0, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a30      	ldr	r2, [pc, #192]	; (8005440 <HAL_ADC_ConfigChannel+0x29c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d10a      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x1f4>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800538a:	d105      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800538c:	4b2d      	ldr	r3, [pc, #180]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a2c      	ldr	r2, [pc, #176]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 8005392:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005396:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a28      	ldr	r2, [pc, #160]	; (8005440 <HAL_ADC_ConfigChannel+0x29c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d10f      	bne.n	80053c2 <HAL_ADC_ConfigChannel+0x21e>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b12      	cmp	r3, #18
 80053a8:	d10b      	bne.n	80053c2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80053aa:	4b26      	ldr	r3, [pc, #152]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	4a25      	ldr	r2, [pc, #148]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 80053b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053b4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80053b6:	4b23      	ldr	r3, [pc, #140]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	4a22      	ldr	r2, [pc, #136]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 80053bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80053c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <HAL_ADC_ConfigChannel+0x29c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d12b      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x280>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1a      	ldr	r2, [pc, #104]	; (800543c <HAL_ADC_ConfigChannel+0x298>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d003      	beq.n	80053de <HAL_ADC_ConfigChannel+0x23a>
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b11      	cmp	r3, #17
 80053dc:	d122      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80053de:	4b19      	ldr	r3, [pc, #100]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4a18      	ldr	r2, [pc, #96]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 80053e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80053e8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80053ea:	4b16      	ldr	r3, [pc, #88]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4a15      	ldr	r2, [pc, #84]	; (8005444 <HAL_ADC_ConfigChannel+0x2a0>)
 80053f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80053f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a10      	ldr	r2, [pc, #64]	; (800543c <HAL_ADC_ConfigChannel+0x298>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d111      	bne.n	8005424 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <HAL_ADC_ConfigChannel+0x2a4>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a11      	ldr	r2, [pc, #68]	; (800544c <HAL_ADC_ConfigChannel+0x2a8>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	0c9a      	lsrs	r2, r3, #18
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005416:	e002      	b.n	800541e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	3b01      	subs	r3, #1
 800541c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1f9      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3714      	adds	r7, #20
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	10000012 	.word	0x10000012
 8005440:	40012000 	.word	0x40012000
 8005444:	40012300 	.word	0x40012300
 8005448:	200000c4 	.word	0x200000c4
 800544c:	431bde83 	.word	0x431bde83

08005450 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005458:	4b78      	ldr	r3, [pc, #480]	; (800563c <ADC_Init+0x1ec>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4a77      	ldr	r2, [pc, #476]	; (800563c <ADC_Init+0x1ec>)
 800545e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005462:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005464:	4b75      	ldr	r3, [pc, #468]	; (800563c <ADC_Init+0x1ec>)
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4973      	ldr	r1, [pc, #460]	; (800563c <ADC_Init+0x1ec>)
 800546e:	4313      	orrs	r3, r2
 8005470:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6859      	ldr	r1, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	021a      	lsls	r2, r3, #8
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80054a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6859      	ldr	r1, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689a      	ldr	r2, [r3, #8]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6899      	ldr	r1, [r3, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	4a58      	ldr	r2, [pc, #352]	; (8005640 <ADC_Init+0x1f0>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6899      	ldr	r1, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	6899      	ldr	r1, [r3, #8]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
 8005528:	e00f      	b.n	800554a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005548:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689a      	ldr	r2, [r3, #8]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0202 	bic.w	r2, r2, #2
 8005558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6899      	ldr	r1, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	005a      	lsls	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01b      	beq.n	80055b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005586:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685a      	ldr	r2, [r3, #4]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005596:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6859      	ldr	r1, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	3b01      	subs	r3, #1
 80055a4:	035a      	lsls	r2, r3, #13
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	605a      	str	r2, [r3, #4]
 80055ae:	e007      	b.n	80055c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80055ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	3b01      	subs	r3, #1
 80055dc:	051a      	lsls	r2, r3, #20
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80055f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6899      	ldr	r1, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005602:	025a      	lsls	r2, r3, #9
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800561a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6899      	ldr	r1, [r3, #8]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	029a      	lsls	r2, r3, #10
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	40012300 	.word	0x40012300
 8005640:	0f000001 	.word	0x0f000001

08005644 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005656:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800565a:	2b00      	cmp	r3, #0
 800565c:	d13c      	bne.n	80056d8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d12b      	bne.n	80056d0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800567c:	2b00      	cmp	r3, #0
 800567e:	d127      	bne.n	80056d0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800568a:	2b00      	cmp	r3, #0
 800568c:	d006      	beq.n	800569c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005698:	2b00      	cmp	r3, #0
 800569a:	d119      	bne.n	80056d0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0220 	bic.w	r2, r2, #32
 80056aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d105      	bne.n	80056d0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	f043 0201 	orr.w	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f7ff fd49 	bl	8005168 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056d6:	e00e      	b.n	80056f6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7ff fd53 	bl	8005190 <HAL_ADC_ErrorCallback>
}
 80056ea:	e004      	b.n	80056f6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
}
 80056f6:	bf00      	nop
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b084      	sub	sp, #16
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff fd35 	bl	800517c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2240      	movs	r2, #64	; 0x40
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005732:	f043 0204 	orr.w	r2, r3, #4
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff fd28 	bl	8005190 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005740:	bf00      	nop
 8005742:	3710      	adds	r7, #16
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <__NVIC_SetPriorityGrouping>:
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005758:	4b0b      	ldr	r3, [pc, #44]	; (8005788 <__NVIC_SetPriorityGrouping+0x40>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005764:	4013      	ands	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <__NVIC_SetPriorityGrouping+0x44>)
 8005772:	4313      	orrs	r3, r2
 8005774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005776:	4a04      	ldr	r2, [pc, #16]	; (8005788 <__NVIC_SetPriorityGrouping+0x40>)
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	60d3      	str	r3, [r2, #12]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	e000ed00 	.word	0xe000ed00
 800578c:	05fa0000 	.word	0x05fa0000

08005790 <__NVIC_GetPriorityGrouping>:
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005794:	4b04      	ldr	r3, [pc, #16]	; (80057a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	0a1b      	lsrs	r3, r3, #8
 800579a:	f003 0307 	and.w	r3, r3, #7
}
 800579e:	4618      	mov	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	e000ed00 	.word	0xe000ed00

080057ac <__NVIC_EnableIRQ>:
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	db0b      	blt.n	80057d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	f003 021f 	and.w	r2, r3, #31
 80057c4:	4907      	ldr	r1, [pc, #28]	; (80057e4 <__NVIC_EnableIRQ+0x38>)
 80057c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	2001      	movs	r0, #1
 80057ce:	fa00 f202 	lsl.w	r2, r0, r2
 80057d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	e000e100 	.word	0xe000e100

080057e8 <__NVIC_SetPriority>:
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	6039      	str	r1, [r7, #0]
 80057f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	db0a      	blt.n	8005812 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	490c      	ldr	r1, [pc, #48]	; (8005834 <__NVIC_SetPriority+0x4c>)
 8005802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005806:	0112      	lsls	r2, r2, #4
 8005808:	b2d2      	uxtb	r2, r2
 800580a:	440b      	add	r3, r1
 800580c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005810:	e00a      	b.n	8005828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4908      	ldr	r1, [pc, #32]	; (8005838 <__NVIC_SetPriority+0x50>)
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	3b04      	subs	r3, #4
 8005820:	0112      	lsls	r2, r2, #4
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	440b      	add	r3, r1
 8005826:	761a      	strb	r2, [r3, #24]
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr
 8005834:	e000e100 	.word	0xe000e100
 8005838:	e000ed00 	.word	0xe000ed00

0800583c <NVIC_EncodePriority>:
{
 800583c:	b480      	push	{r7}
 800583e:	b089      	sub	sp, #36	; 0x24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0307 	and.w	r3, r3, #7
 800584e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f1c3 0307 	rsb	r3, r3, #7
 8005856:	2b04      	cmp	r3, #4
 8005858:	bf28      	it	cs
 800585a:	2304      	movcs	r3, #4
 800585c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	3304      	adds	r3, #4
 8005862:	2b06      	cmp	r3, #6
 8005864:	d902      	bls.n	800586c <NVIC_EncodePriority+0x30>
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	3b03      	subs	r3, #3
 800586a:	e000      	b.n	800586e <NVIC_EncodePriority+0x32>
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005870:	f04f 32ff 	mov.w	r2, #4294967295
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	fa02 f303 	lsl.w	r3, r2, r3
 800587a:	43da      	mvns	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	401a      	ands	r2, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005884:	f04f 31ff 	mov.w	r1, #4294967295
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	43d9      	mvns	r1, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005894:	4313      	orrs	r3, r2
}
 8005896:	4618      	mov	r0, r3
 8005898:	3724      	adds	r7, #36	; 0x24
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058b4:	d301      	bcc.n	80058ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058b6:	2301      	movs	r3, #1
 80058b8:	e00f      	b.n	80058da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058ba:	4a0a      	ldr	r2, [pc, #40]	; (80058e4 <SysTick_Config+0x40>)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3b01      	subs	r3, #1
 80058c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058c2:	210f      	movs	r1, #15
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	f7ff ff8e 	bl	80057e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058cc:	4b05      	ldr	r3, [pc, #20]	; (80058e4 <SysTick_Config+0x40>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058d2:	4b04      	ldr	r3, [pc, #16]	; (80058e4 <SysTick_Config+0x40>)
 80058d4:	2207      	movs	r2, #7
 80058d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d8:	2300      	movs	r3, #0
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	e000e010 	.word	0xe000e010

080058e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ff29 	bl	8005748 <__NVIC_SetPriorityGrouping>
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	4603      	mov	r3, r0
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
 800590a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005910:	f7ff ff3e 	bl	8005790 <__NVIC_GetPriorityGrouping>
 8005914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	6978      	ldr	r0, [r7, #20]
 800591c:	f7ff ff8e 	bl	800583c <NVIC_EncodePriority>
 8005920:	4602      	mov	r2, r0
 8005922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f7ff ff5d 	bl	80057e8 <__NVIC_SetPriority>
}
 800592e:	bf00      	nop
 8005930:	3718      	adds	r7, #24
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	4603      	mov	r3, r0
 800593e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff ff31 	bl	80057ac <__NVIC_EnableIRQ>
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b082      	sub	sp, #8
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff ffa2 	bl	80058a4 <SysTick_Config>
 8005960:	4603      	mov	r3, r0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
	...

0800596c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005978:	f7ff fa88 	bl	8004e8c <HAL_GetTick>
 800597c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e099      	b.n	8005abc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f022 0201 	bic.w	r2, r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059a8:	e00f      	b.n	80059ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059aa:	f7ff fa6f 	bl	8004e8c <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b05      	cmp	r3, #5
 80059b6:	d908      	bls.n	80059ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2220      	movs	r2, #32
 80059bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2203      	movs	r2, #3
 80059c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e078      	b.n	8005abc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e8      	bne.n	80059aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4b38      	ldr	r3, [pc, #224]	; (8005ac4 <HAL_DMA_Init+0x158>)
 80059e4:	4013      	ands	r3, r2
 80059e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d107      	bne.n	8005a34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0307 	bic.w	r3, r3, #7
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	d117      	bne.n	8005a8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00e      	beq.n	8005a8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fa77 	bl	8005f64 <DMA_CheckFifoParam>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d008      	beq.n	8005a8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2240      	movs	r2, #64	; 0x40
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e016      	b.n	8005abc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fa2e 	bl	8005ef8 <DMA_CalcBaseAndBitshift>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa4:	223f      	movs	r2, #63	; 0x3f
 8005aa6:	409a      	lsls	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	e010803f 	.word	0xe010803f

08005ac8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ade:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d101      	bne.n	8005aee <HAL_DMA_Start_IT+0x26>
 8005aea:	2302      	movs	r3, #2
 8005aec:	e048      	b.n	8005b80 <HAL_DMA_Start_IT+0xb8>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d137      	bne.n	8005b72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2202      	movs	r2, #2
 8005b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f9c0 	bl	8005e9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b20:	223f      	movs	r2, #63	; 0x3f
 8005b22:	409a      	lsls	r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0216 	orr.w	r2, r2, #22
 8005b36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	695a      	ldr	r2, [r3, #20]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b46:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0208 	orr.w	r2, r2, #8
 8005b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	e005      	b.n	8005b7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005b94:	4b8e      	ldr	r3, [pc, #568]	; (8005dd0 <HAL_DMA_IRQHandler+0x248>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a8e      	ldr	r2, [pc, #568]	; (8005dd4 <HAL_DMA_IRQHandler+0x24c>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	0a9b      	lsrs	r3, r3, #10
 8005ba0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb2:	2208      	movs	r2, #8
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01a      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d013      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 0204 	bic.w	r2, r2, #4
 8005bda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	2208      	movs	r2, #8
 8005be2:	409a      	lsls	r2, r3
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	f043 0201 	orr.w	r2, r3, #1
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	409a      	lsls	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d012      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00b      	beq.n	8005c2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c16:	2201      	movs	r2, #1
 8005c18:	409a      	lsls	r2, r3
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c22:	f043 0202 	orr.w	r2, r3, #2
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2e:	2204      	movs	r2, #4
 8005c30:	409a      	lsls	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d012      	beq.n	8005c60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00b      	beq.n	8005c60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c4c:	2204      	movs	r2, #4
 8005c4e:	409a      	lsls	r2, r3
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c58:	f043 0204 	orr.w	r2, r3, #4
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c64:	2210      	movs	r2, #16
 8005c66:	409a      	lsls	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d043      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0308 	and.w	r3, r3, #8
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d03c      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c82:	2210      	movs	r2, #16
 8005c84:	409a      	lsls	r2, r3
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d018      	beq.n	8005cca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d108      	bne.n	8005cb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d024      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
 8005cb6:	e01f      	b.n	8005cf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d01b      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	4798      	blx	r3
 8005cc8:	e016      	b.n	8005cf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d107      	bne.n	8005ce8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0208 	bic.w	r2, r2, #8
 8005ce6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d003      	beq.n	8005cf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	409a      	lsls	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4013      	ands	r3, r2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f000 808f 	beq.w	8005e28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8087 	beq.w	8005e28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1e:	2220      	movs	r2, #32
 8005d20:	409a      	lsls	r2, r3
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b05      	cmp	r3, #5
 8005d30:	d136      	bne.n	8005da0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0216 	bic.w	r2, r2, #22
 8005d40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	695a      	ldr	r2, [r3, #20]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <HAL_DMA_IRQHandler+0x1da>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d007      	beq.n	8005d72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 0208 	bic.w	r2, r2, #8
 8005d70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d76:	223f      	movs	r2, #63	; 0x3f
 8005d78:	409a      	lsls	r2, r3
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d07e      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
        }
        return;
 8005d9e:	e079      	b.n	8005e94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01d      	beq.n	8005dea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10d      	bne.n	8005dd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d031      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	4798      	blx	r3
 8005dcc:	e02c      	b.n	8005e28 <HAL_DMA_IRQHandler+0x2a0>
 8005dce:	bf00      	nop
 8005dd0:	200000c4 	.word	0x200000c4
 8005dd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d023      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	4798      	blx	r3
 8005de8:	e01e      	b.n	8005e28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10f      	bne.n	8005e18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 0210 	bic.w	r2, r2, #16
 8005e06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d003      	beq.n	8005e28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d032      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d022      	beq.n	8005e82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2205      	movs	r2, #5
 8005e40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f022 0201 	bic.w	r2, r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	3301      	adds	r3, #1
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d307      	bcc.n	8005e70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f2      	bne.n	8005e54 <HAL_DMA_IRQHandler+0x2cc>
 8005e6e:	e000      	b.n	8005e72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	4798      	blx	r3
 8005e92:	e000      	b.n	8005e96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e94:	bf00      	nop
    }
  }
}
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005eb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	2b40      	cmp	r3, #64	; 0x40
 8005ec8:	d108      	bne.n	8005edc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005eda:	e007      	b.n	8005eec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	60da      	str	r2, [r3, #12]
}
 8005eec:	bf00      	nop
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	3b10      	subs	r3, #16
 8005f08:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <DMA_CalcBaseAndBitshift+0x60>)
 8005f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0e:	091b      	lsrs	r3, r3, #4
 8005f10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f12:	4a12      	ldr	r2, [pc, #72]	; (8005f5c <DMA_CalcBaseAndBitshift+0x64>)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d908      	bls.n	8005f38 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4b0c      	ldr	r3, [pc, #48]	; (8005f60 <DMA_CalcBaseAndBitshift+0x68>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	1d1a      	adds	r2, r3, #4
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	659a      	str	r2, [r3, #88]	; 0x58
 8005f36:	e006      	b.n	8005f46 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4b08      	ldr	r3, [pc, #32]	; (8005f60 <DMA_CalcBaseAndBitshift+0x68>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	aaaaaaab 	.word	0xaaaaaaab
 8005f5c:	0800da90 	.word	0x0800da90
 8005f60:	fffffc00 	.word	0xfffffc00

08005f64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d11f      	bne.n	8005fbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d856      	bhi.n	8006032 <DMA_CheckFifoParam+0xce>
 8005f84:	a201      	add	r2, pc, #4	; (adr r2, 8005f8c <DMA_CheckFifoParam+0x28>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005faf 	.word	0x08005faf
 8005f94:	08005f9d 	.word	0x08005f9d
 8005f98:	08006033 	.word	0x08006033
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d046      	beq.n	8006036 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fac:	e043      	b.n	8006036 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fb6:	d140      	bne.n	800603a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fbc:	e03d      	b.n	800603a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc6:	d121      	bne.n	800600c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d837      	bhi.n	800603e <DMA_CheckFifoParam+0xda>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <DMA_CheckFifoParam+0x70>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005fe5 	.word	0x08005fe5
 8005fd8:	08005feb 	.word	0x08005feb
 8005fdc:	08005fe5 	.word	0x08005fe5
 8005fe0:	08005ffd 	.word	0x08005ffd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe8:	e030      	b.n	800604c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d025      	beq.n	8006042 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ffa:	e022      	b.n	8006042 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006000:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006004:	d11f      	bne.n	8006046 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800600a:	e01c      	b.n	8006046 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b02      	cmp	r3, #2
 8006010:	d903      	bls.n	800601a <DMA_CheckFifoParam+0xb6>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d003      	beq.n	8006020 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006018:	e018      	b.n	800604c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
      break;
 800601e:	e015      	b.n	800604c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00e      	beq.n	800604a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	73fb      	strb	r3, [r7, #15]
      break;
 8006030:	e00b      	b.n	800604a <DMA_CheckFifoParam+0xe6>
      break;
 8006032:	bf00      	nop
 8006034:	e00a      	b.n	800604c <DMA_CheckFifoParam+0xe8>
      break;
 8006036:	bf00      	nop
 8006038:	e008      	b.n	800604c <DMA_CheckFifoParam+0xe8>
      break;
 800603a:	bf00      	nop
 800603c:	e006      	b.n	800604c <DMA_CheckFifoParam+0xe8>
      break;
 800603e:	bf00      	nop
 8006040:	e004      	b.n	800604c <DMA_CheckFifoParam+0xe8>
      break;
 8006042:	bf00      	nop
 8006044:	e002      	b.n	800604c <DMA_CheckFifoParam+0xe8>
      break;   
 8006046:	bf00      	nop
 8006048:	e000      	b.n	800604c <DMA_CheckFifoParam+0xe8>
      break;
 800604a:	bf00      	nop
    }
  } 
  
  return status; 
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop

0800605c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800605c:	b480      	push	{r7}
 800605e:	b089      	sub	sp, #36	; 0x24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800606e:	2300      	movs	r3, #0
 8006070:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006072:	2300      	movs	r3, #0
 8006074:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	e175      	b.n	8006368 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800607c:	2201      	movs	r2, #1
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4013      	ands	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	429a      	cmp	r2, r3
 8006096:	f040 8164 	bne.w	8006362 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f003 0303 	and.w	r3, r3, #3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d005      	beq.n	80060b2 <HAL_GPIO_Init+0x56>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d130      	bne.n	8006114 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	2203      	movs	r2, #3
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43db      	mvns	r3, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4013      	ands	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4313      	orrs	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060e8:	2201      	movs	r2, #1
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	43db      	mvns	r3, r3
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	4013      	ands	r3, r2
 80060f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	091b      	lsrs	r3, r3, #4
 80060fe:	f003 0201 	and.w	r2, r3, #1
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	fa02 f303 	lsl.w	r3, r2, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4313      	orrs	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	f003 0303 	and.w	r3, r3, #3
 800611c:	2b03      	cmp	r3, #3
 800611e:	d017      	beq.n	8006150 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	2203      	movs	r2, #3
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	43db      	mvns	r3, r3
 8006132:	69ba      	ldr	r2, [r7, #24]
 8006134:	4013      	ands	r3, r2
 8006136:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	fa02 f303 	lsl.w	r3, r2, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	4313      	orrs	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d123      	bne.n	80061a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	08da      	lsrs	r2, r3, #3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3208      	adds	r2, #8
 8006164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	220f      	movs	r2, #15
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	43db      	mvns	r3, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4013      	ands	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	fa02 f303 	lsl.w	r3, r2, r3
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	4313      	orrs	r3, r2
 8006194:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	08da      	lsrs	r2, r3, #3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3208      	adds	r2, #8
 800619e:	69b9      	ldr	r1, [r7, #24]
 80061a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	2203      	movs	r2, #3
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	43db      	mvns	r3, r3
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	4013      	ands	r3, r2
 80061ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f003 0203 	and.w	r2, r3, #3
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	fa02 f303 	lsl.w	r3, r2, r3
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 80be 	beq.w	8006362 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061e6:	4b66      	ldr	r3, [pc, #408]	; (8006380 <HAL_GPIO_Init+0x324>)
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	4a65      	ldr	r2, [pc, #404]	; (8006380 <HAL_GPIO_Init+0x324>)
 80061ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061f0:	6453      	str	r3, [r2, #68]	; 0x44
 80061f2:	4b63      	ldr	r3, [pc, #396]	; (8006380 <HAL_GPIO_Init+0x324>)
 80061f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061fa:	60fb      	str	r3, [r7, #12]
 80061fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80061fe:	4a61      	ldr	r2, [pc, #388]	; (8006384 <HAL_GPIO_Init+0x328>)
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	089b      	lsrs	r3, r3, #2
 8006204:	3302      	adds	r3, #2
 8006206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	220f      	movs	r2, #15
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	43db      	mvns	r3, r3
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	4013      	ands	r3, r2
 8006220:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a58      	ldr	r2, [pc, #352]	; (8006388 <HAL_GPIO_Init+0x32c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d037      	beq.n	800629a <HAL_GPIO_Init+0x23e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a57      	ldr	r2, [pc, #348]	; (800638c <HAL_GPIO_Init+0x330>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d031      	beq.n	8006296 <HAL_GPIO_Init+0x23a>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a56      	ldr	r2, [pc, #344]	; (8006390 <HAL_GPIO_Init+0x334>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d02b      	beq.n	8006292 <HAL_GPIO_Init+0x236>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a55      	ldr	r2, [pc, #340]	; (8006394 <HAL_GPIO_Init+0x338>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d025      	beq.n	800628e <HAL_GPIO_Init+0x232>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a54      	ldr	r2, [pc, #336]	; (8006398 <HAL_GPIO_Init+0x33c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01f      	beq.n	800628a <HAL_GPIO_Init+0x22e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a53      	ldr	r2, [pc, #332]	; (800639c <HAL_GPIO_Init+0x340>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d019      	beq.n	8006286 <HAL_GPIO_Init+0x22a>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a52      	ldr	r2, [pc, #328]	; (80063a0 <HAL_GPIO_Init+0x344>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d013      	beq.n	8006282 <HAL_GPIO_Init+0x226>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a51      	ldr	r2, [pc, #324]	; (80063a4 <HAL_GPIO_Init+0x348>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00d      	beq.n	800627e <HAL_GPIO_Init+0x222>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a50      	ldr	r2, [pc, #320]	; (80063a8 <HAL_GPIO_Init+0x34c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <HAL_GPIO_Init+0x21e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a4f      	ldr	r2, [pc, #316]	; (80063ac <HAL_GPIO_Init+0x350>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d101      	bne.n	8006276 <HAL_GPIO_Init+0x21a>
 8006272:	2309      	movs	r3, #9
 8006274:	e012      	b.n	800629c <HAL_GPIO_Init+0x240>
 8006276:	230a      	movs	r3, #10
 8006278:	e010      	b.n	800629c <HAL_GPIO_Init+0x240>
 800627a:	2308      	movs	r3, #8
 800627c:	e00e      	b.n	800629c <HAL_GPIO_Init+0x240>
 800627e:	2307      	movs	r3, #7
 8006280:	e00c      	b.n	800629c <HAL_GPIO_Init+0x240>
 8006282:	2306      	movs	r3, #6
 8006284:	e00a      	b.n	800629c <HAL_GPIO_Init+0x240>
 8006286:	2305      	movs	r3, #5
 8006288:	e008      	b.n	800629c <HAL_GPIO_Init+0x240>
 800628a:	2304      	movs	r3, #4
 800628c:	e006      	b.n	800629c <HAL_GPIO_Init+0x240>
 800628e:	2303      	movs	r3, #3
 8006290:	e004      	b.n	800629c <HAL_GPIO_Init+0x240>
 8006292:	2302      	movs	r3, #2
 8006294:	e002      	b.n	800629c <HAL_GPIO_Init+0x240>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <HAL_GPIO_Init+0x240>
 800629a:	2300      	movs	r3, #0
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	f002 0203 	and.w	r2, r2, #3
 80062a2:	0092      	lsls	r2, r2, #2
 80062a4:	4093      	lsls	r3, r2
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80062ac:	4935      	ldr	r1, [pc, #212]	; (8006384 <HAL_GPIO_Init+0x328>)
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	089b      	lsrs	r3, r3, #2
 80062b2:	3302      	adds	r3, #2
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062ba:	4b3d      	ldr	r3, [pc, #244]	; (80063b0 <HAL_GPIO_Init+0x354>)
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	43db      	mvns	r3, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4013      	ands	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d003      	beq.n	80062de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062de:	4a34      	ldr	r2, [pc, #208]	; (80063b0 <HAL_GPIO_Init+0x354>)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062e4:	4b32      	ldr	r3, [pc, #200]	; (80063b0 <HAL_GPIO_Init+0x354>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006308:	4a29      	ldr	r2, [pc, #164]	; (80063b0 <HAL_GPIO_Init+0x354>)
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800630e:	4b28      	ldr	r3, [pc, #160]	; (80063b0 <HAL_GPIO_Init+0x354>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	43db      	mvns	r3, r3
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4013      	ands	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006332:	4a1f      	ldr	r2, [pc, #124]	; (80063b0 <HAL_GPIO_Init+0x354>)
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006338:	4b1d      	ldr	r3, [pc, #116]	; (80063b0 <HAL_GPIO_Init+0x354>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	43db      	mvns	r3, r3
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	4013      	ands	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800635c:	4a14      	ldr	r2, [pc, #80]	; (80063b0 <HAL_GPIO_Init+0x354>)
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	3301      	adds	r3, #1
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	2b0f      	cmp	r3, #15
 800636c:	f67f ae86 	bls.w	800607c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006370:	bf00      	nop
 8006372:	bf00      	nop
 8006374:	3724      	adds	r7, #36	; 0x24
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40023800 	.word	0x40023800
 8006384:	40013800 	.word	0x40013800
 8006388:	40020000 	.word	0x40020000
 800638c:	40020400 	.word	0x40020400
 8006390:	40020800 	.word	0x40020800
 8006394:	40020c00 	.word	0x40020c00
 8006398:	40021000 	.word	0x40021000
 800639c:	40021400 	.word	0x40021400
 80063a0:	40021800 	.word	0x40021800
 80063a4:	40021c00 	.word	0x40021c00
 80063a8:	40022000 	.word	0x40022000
 80063ac:	40022400 	.word	0x40022400
 80063b0:	40013c00 	.word	0x40013c00

080063b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	887b      	ldrh	r3, [r7, #2]
 80063c6:	4013      	ands	r3, r2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d002      	beq.n	80063d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
 80063d0:	e001      	b.n	80063d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	807b      	strh	r3, [r7, #2]
 80063f0:	4613      	mov	r3, r2
 80063f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063f4:	787b      	ldrb	r3, [r7, #1]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063fa:	887a      	ldrh	r2, [r7, #2]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006400:	e003      	b.n	800640a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006402:	887b      	ldrh	r3, [r7, #2]
 8006404:	041a      	lsls	r2, r3, #16
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	619a      	str	r2, [r3, #24]
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
	...

08006418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006422:	4b08      	ldr	r3, [pc, #32]	; (8006444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	88fb      	ldrh	r3, [r7, #6]
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d006      	beq.n	800643c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800642e:	4a05      	ldr	r2, [pc, #20]	; (8006444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006430:	88fb      	ldrh	r3, [r7, #6]
 8006432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f806 	bl	8006448 <HAL_GPIO_EXTI_Callback>
  }
}
 800643c:	bf00      	nop
 800643e:	3708      	adds	r7, #8
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40013c00 	.word	0x40013c00

08006448 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	4603      	mov	r3, r0
 8006450:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
	...

08006460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d101      	bne.n	8006472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e07f      	b.n	8006572 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d106      	bne.n	800648c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7fb f8d0 	bl	800162c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2224      	movs	r2, #36	; 0x24
 8006490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0201 	bic.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d107      	bne.n	80064da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064d6:	609a      	str	r2, [r3, #8]
 80064d8:	e006      	b.n	80064e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689a      	ldr	r2, [r3, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d104      	bne.n	80064fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6859      	ldr	r1, [r3, #4]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	4b1d      	ldr	r3, [pc, #116]	; (800657c <HAL_I2C_Init+0x11c>)
 8006506:	430b      	orrs	r3, r1
 8006508:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68da      	ldr	r2, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006518:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69d9      	ldr	r1, [r3, #28]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6a1a      	ldr	r2, [r3, #32]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2220      	movs	r2, #32
 800655e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	02008000 	.word	0x02008000

08006580 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b088      	sub	sp, #32
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	461a      	mov	r2, r3
 800658c:	460b      	mov	r3, r1
 800658e:	817b      	strh	r3, [r7, #10]
 8006590:	4613      	mov	r3, r2
 8006592:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b20      	cmp	r3, #32
 800659e:	f040 80da 	bne.w	8006756 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_I2C_Master_Transmit+0x30>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e0d3      	b.n	8006758 <HAL_I2C_Master_Transmit+0x1d8>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065b8:	f7fe fc68 	bl	8004e8c <HAL_GetTick>
 80065bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	2319      	movs	r3, #25
 80065c4:	2201      	movs	r2, #1
 80065c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f9e6 	bl	800699c <I2C_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e0be      	b.n	8006758 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2221      	movs	r2, #33	; 0x21
 80065de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2210      	movs	r2, #16
 80065e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	893a      	ldrh	r2, [r7, #8]
 80065fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006606:	b29b      	uxth	r3, r3
 8006608:	2bff      	cmp	r3, #255	; 0xff
 800660a:	d90e      	bls.n	800662a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	22ff      	movs	r2, #255	; 0xff
 8006610:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006616:	b2da      	uxtb	r2, r3
 8006618:	8979      	ldrh	r1, [r7, #10]
 800661a:	4b51      	ldr	r3, [pc, #324]	; (8006760 <HAL_I2C_Master_Transmit+0x1e0>)
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f000 fbd0 	bl	8006dc8 <I2C_TransferConfig>
 8006628:	e06c      	b.n	8006704 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006638:	b2da      	uxtb	r2, r3
 800663a:	8979      	ldrh	r1, [r7, #10]
 800663c:	4b48      	ldr	r3, [pc, #288]	; (8006760 <HAL_I2C_Master_Transmit+0x1e0>)
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fbbf 	bl	8006dc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800664a:	e05b      	b.n	8006704 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	6a39      	ldr	r1, [r7, #32]
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f9e3 	bl	8006a1c <I2C_WaitOnTXISFlagUntilTimeout>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d001      	beq.n	8006660 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e07b      	b.n	8006758 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667a:	b29b      	uxth	r3, r3
 800667c:	3b01      	subs	r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006688:	3b01      	subs	r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006694:	b29b      	uxth	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d034      	beq.n	8006704 <HAL_I2C_Master_Transmit+0x184>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d130      	bne.n	8006704 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	2200      	movs	r2, #0
 80066aa:	2180      	movs	r1, #128	; 0x80
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 f975 	bl	800699c <I2C_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e04d      	b.n	8006758 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2bff      	cmp	r3, #255	; 0xff
 80066c4:	d90e      	bls.n	80066e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	22ff      	movs	r2, #255	; 0xff
 80066ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	8979      	ldrh	r1, [r7, #10]
 80066d4:	2300      	movs	r3, #0
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f000 fb73 	bl	8006dc8 <I2C_TransferConfig>
 80066e2:	e00f      	b.n	8006704 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f2:	b2da      	uxtb	r2, r3
 80066f4:	8979      	ldrh	r1, [r7, #10]
 80066f6:	2300      	movs	r3, #0
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 fb62 	bl	8006dc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006708:	b29b      	uxth	r3, r3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d19e      	bne.n	800664c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	6a39      	ldr	r1, [r7, #32]
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f000 f9c2 	bl	8006a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d001      	beq.n	8006722 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e01a      	b.n	8006758 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2220      	movs	r2, #32
 8006728:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	6859      	ldr	r1, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	4b0b      	ldr	r3, [pc, #44]	; (8006764 <HAL_I2C_Master_Transmit+0x1e4>)
 8006736:	400b      	ands	r3, r1
 8006738:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	e000      	b.n	8006758 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006756:	2302      	movs	r3, #2
  }
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	80002000 	.word	0x80002000
 8006764:	fe00e800 	.word	0xfe00e800

08006768 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b088      	sub	sp, #32
 800676c:	af02      	add	r7, sp, #8
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	607a      	str	r2, [r7, #4]
 8006772:	461a      	mov	r2, r3
 8006774:	460b      	mov	r3, r1
 8006776:	817b      	strh	r3, [r7, #10]
 8006778:	4613      	mov	r3, r2
 800677a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b20      	cmp	r3, #32
 8006786:	f040 80db 	bne.w	8006940 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_I2C_Master_Receive+0x30>
 8006794:	2302      	movs	r3, #2
 8006796:	e0d4      	b.n	8006942 <HAL_I2C_Master_Receive+0x1da>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067a0:	f7fe fb74 	bl	8004e8c <HAL_GetTick>
 80067a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	2319      	movs	r3, #25
 80067ac:	2201      	movs	r2, #1
 80067ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f8f2 	bl	800699c <I2C_WaitOnFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e0bf      	b.n	8006942 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2222      	movs	r2, #34	; 0x22
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2210      	movs	r2, #16
 80067ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	893a      	ldrh	r2, [r7, #8]
 80067e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2bff      	cmp	r3, #255	; 0xff
 80067f2:	d90e      	bls.n	8006812 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	22ff      	movs	r2, #255	; 0xff
 80067f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	8979      	ldrh	r1, [r7, #10]
 8006802:	4b52      	ldr	r3, [pc, #328]	; (800694c <HAL_I2C_Master_Receive+0x1e4>)
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f000 fadc 	bl	8006dc8 <I2C_TransferConfig>
 8006810:	e06d      	b.n	80068ee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006816:	b29a      	uxth	r2, r3
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006820:	b2da      	uxtb	r2, r3
 8006822:	8979      	ldrh	r1, [r7, #10]
 8006824:	4b49      	ldr	r3, [pc, #292]	; (800694c <HAL_I2C_Master_Receive+0x1e4>)
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 facb 	bl	8006dc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006832:	e05c      	b.n	80068ee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006834:	697a      	ldr	r2, [r7, #20]
 8006836:	6a39      	ldr	r1, [r7, #32]
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f000 f96b 	bl	8006b14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e07c      	b.n	8006942 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	b2d2      	uxtb	r2, r2
 8006854:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	1c5a      	adds	r2, r3, #1
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	b29a      	uxth	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800687e:	b29b      	uxth	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d034      	beq.n	80068ee <HAL_I2C_Master_Receive+0x186>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006888:	2b00      	cmp	r3, #0
 800688a:	d130      	bne.n	80068ee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	2200      	movs	r2, #0
 8006894:	2180      	movs	r1, #128	; 0x80
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f880 	bl	800699c <I2C_WaitOnFlagUntilTimeout>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e04d      	b.n	8006942 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2bff      	cmp	r3, #255	; 0xff
 80068ae:	d90e      	bls.n	80068ce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	22ff      	movs	r2, #255	; 0xff
 80068b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	8979      	ldrh	r1, [r7, #10]
 80068be:	2300      	movs	r3, #0
 80068c0:	9300      	str	r3, [sp, #0]
 80068c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f000 fa7e 	bl	8006dc8 <I2C_TransferConfig>
 80068cc:	e00f      	b.n	80068ee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	8979      	ldrh	r1, [r7, #10]
 80068e0:	2300      	movs	r3, #0
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 fa6d 	bl	8006dc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d19d      	bne.n	8006834 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	6a39      	ldr	r1, [r7, #32]
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 f8cd 	bl	8006a9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e01a      	b.n	8006942 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2220      	movs	r2, #32
 8006912:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	6859      	ldr	r1, [r3, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	4b0c      	ldr	r3, [pc, #48]	; (8006950 <HAL_I2C_Master_Receive+0x1e8>)
 8006920:	400b      	ands	r3, r1
 8006922:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800693c:	2300      	movs	r3, #0
 800693e:	e000      	b.n	8006942 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006940:	2302      	movs	r3, #2
  }
}
 8006942:	4618      	mov	r0, r3
 8006944:	3718      	adds	r7, #24
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	80002400 	.word	0x80002400
 8006950:	fe00e800 	.word	0xfe00e800

08006954 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b02      	cmp	r3, #2
 8006968:	d103      	bne.n	8006972 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2200      	movs	r2, #0
 8006970:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b01      	cmp	r3, #1
 800697e:	d007      	beq.n	8006990 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0201 	orr.w	r2, r2, #1
 800698e:	619a      	str	r2, [r3, #24]
  }
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069ac:	e022      	b.n	80069f4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b4:	d01e      	beq.n	80069f4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b6:	f7fe fa69 	bl	8004e8c <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d302      	bcc.n	80069cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d113      	bne.n	80069f4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069d0:	f043 0220 	orr.w	r2, r3, #32
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e00f      	b.n	8006a14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	4013      	ands	r3, r2
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	bf0c      	ite	eq
 8006a04:	2301      	moveq	r3, #1
 8006a06:	2300      	movne	r3, #0
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d0cd      	beq.n	80069ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a28:	e02c      	b.n	8006a84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f8ea 	bl	8006c08 <I2C_IsErrorOccurred>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e02a      	b.n	8006a94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a44:	d01e      	beq.n	8006a84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a46:	f7fe fa21 	bl	8004e8c <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d302      	bcc.n	8006a5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d113      	bne.n	8006a84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	e007      	b.n	8006a94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d1cb      	bne.n	8006a2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006aa8:	e028      	b.n	8006afc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f8aa 	bl	8006c08 <I2C_IsErrorOccurred>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e026      	b.n	8006b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abe:	f7fe f9e5 	bl	8004e8c <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d113      	bne.n	8006afc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	e007      	b.n	8006b0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	2b20      	cmp	r3, #32
 8006b08:	d1cf      	bne.n	8006aaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b20:	e064      	b.n	8006bec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f000 f86e 	bl	8006c08 <I2C_IsErrorOccurred>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e062      	b.n	8006bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b20      	cmp	r3, #32
 8006b42:	d138      	bne.n	8006bb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	f003 0304 	and.w	r3, r3, #4
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d105      	bne.n	8006b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	e04e      	b.n	8006bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f003 0310 	and.w	r3, r3, #16
 8006b68:	2b10      	cmp	r3, #16
 8006b6a:	d107      	bne.n	8006b7c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2210      	movs	r2, #16
 8006b72:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2204      	movs	r2, #4
 8006b78:	645a      	str	r2, [r3, #68]	; 0x44
 8006b7a:	e002      	b.n	8006b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2220      	movs	r2, #32
 8006b88:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6859      	ldr	r1, [r3, #4]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	4b1b      	ldr	r3, [pc, #108]	; (8006c04 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006b96:	400b      	ands	r3, r1
 8006b98:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e022      	b.n	8006bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb6:	f7fe f969 	bl	8004e8c <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d302      	bcc.n	8006bcc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10f      	bne.n	8006bec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd0:	f043 0220 	orr.w	r2, r3, #32
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e007      	b.n	8006bfc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	f003 0304 	and.w	r3, r3, #4
 8006bf6:	2b04      	cmp	r3, #4
 8006bf8:	d193      	bne.n	8006b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	fe00e800 	.word	0xfe00e800

08006c08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08a      	sub	sp, #40	; 0x28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c22:	2300      	movs	r3, #0
 8006c24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	f003 0310 	and.w	r3, r3, #16
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d068      	beq.n	8006d06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2210      	movs	r2, #16
 8006c3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c3c:	e049      	b.n	8006cd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c44:	d045      	beq.n	8006cd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c46:	f7fe f921 	bl	8004e8c <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d302      	bcc.n	8006c5c <I2C_IsErrorOccurred+0x54>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d13a      	bne.n	8006cd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699b      	ldr	r3, [r3, #24]
 8006c76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d121      	bne.n	8006cc4 <I2C_IsErrorOccurred+0xbc>
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c86:	d01d      	beq.n	8006cc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006c88:	7cfb      	ldrb	r3, [r7, #19]
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d01a      	beq.n	8006cc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685a      	ldr	r2, [r3, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c9e:	f7fe f8f5 	bl	8004e8c <HAL_GetTick>
 8006ca2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ca4:	e00e      	b.n	8006cc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ca6:	f7fe f8f1 	bl	8004e8c <HAL_GetTick>
 8006caa:	4602      	mov	r2, r0
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	2b19      	cmp	r3, #25
 8006cb2:	d907      	bls.n	8006cc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	f043 0320 	orr.w	r3, r3, #32
 8006cba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006cc2:	e006      	b.n	8006cd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	f003 0320 	and.w	r3, r3, #32
 8006cce:	2b20      	cmp	r3, #32
 8006cd0:	d1e9      	bne.n	8006ca6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b20      	cmp	r3, #32
 8006cde:	d003      	beq.n	8006ce8 <I2C_IsErrorOccurred+0xe0>
 8006ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0aa      	beq.n	8006c3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d103      	bne.n	8006cf8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006cf8:	6a3b      	ldr	r3, [r7, #32]
 8006cfa:	f043 0304 	orr.w	r3, r3, #4
 8006cfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00b      	beq.n	8006d52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	f043 0308 	orr.w	r3, r3, #8
 8006d40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00b      	beq.n	8006d74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	f043 0302 	orr.w	r3, r3, #2
 8006d62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006d74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d01c      	beq.n	8006db6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f7ff fde9 	bl	8006954 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6859      	ldr	r1, [r3, #4]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <I2C_IsErrorOccurred+0x1bc>)
 8006d8e:	400b      	ands	r3, r1
 8006d90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2220      	movs	r2, #32
 8006da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3728      	adds	r7, #40	; 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	fe00e800 	.word	0xfe00e800

08006dc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	607b      	str	r3, [r7, #4]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	817b      	strh	r3, [r7, #10]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006dda:	897b      	ldrh	r3, [r7, #10]
 8006ddc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006de0:	7a7b      	ldrb	r3, [r7, #9]
 8006de2:	041b      	lsls	r3, r3, #16
 8006de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006de8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006df6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	6a3b      	ldr	r3, [r7, #32]
 8006e00:	0d5b      	lsrs	r3, r3, #21
 8006e02:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e06:	4b08      	ldr	r3, [pc, #32]	; (8006e28 <I2C_TransferConfig+0x60>)
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	ea02 0103 	and.w	r1, r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	03ff63ff 	.word	0x03ff63ff

08006e2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d138      	bne.n	8006eb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d101      	bne.n	8006e50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	e032      	b.n	8006eb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2224      	movs	r2, #36	; 0x24
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0201 	bic.w	r2, r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6819      	ldr	r1, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0201 	orr.w	r2, r2, #1
 8006e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e000      	b.n	8006eb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006eb4:	2302      	movs	r3, #2
  }
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr

08006ec2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b085      	sub	sp, #20
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b20      	cmp	r3, #32
 8006ed6:	d139      	bne.n	8006f4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d101      	bne.n	8006ee6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e033      	b.n	8006f4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2224      	movs	r2, #36	; 0x24
 8006ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f022 0201 	bic.w	r2, r2, #1
 8006f04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	021b      	lsls	r3, r3, #8
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0201 	orr.w	r2, r2, #1
 8006f36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a04      	ldr	r2, [pc, #16]	; (8006f78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f6a:	6013      	str	r3, [r2, #0]
}
 8006f6c:	bf00      	nop
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40007000 	.word	0x40007000

08006f7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f82:	2300      	movs	r3, #0
 8006f84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f86:	4b23      	ldr	r3, [pc, #140]	; (8007014 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8a:	4a22      	ldr	r2, [pc, #136]	; (8007014 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f90:	6413      	str	r3, [r2, #64]	; 0x40
 8006f92:	4b20      	ldr	r3, [pc, #128]	; (8007014 <HAL_PWREx_EnableOverDrive+0x98>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9a:	603b      	str	r3, [r7, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f9e:	4b1e      	ldr	r3, [pc, #120]	; (8007018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1d      	ldr	r2, [pc, #116]	; (8007018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006faa:	f7fd ff6f 	bl	8004e8c <HAL_GetTick>
 8006fae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006fb0:	e009      	b.n	8006fc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fb2:	f7fd ff6b 	bl	8004e8c <HAL_GetTick>
 8006fb6:	4602      	mov	r2, r0
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	1ad3      	subs	r3, r2, r3
 8006fbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fc0:	d901      	bls.n	8006fc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e022      	b.n	800700c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006fc6:	4b14      	ldr	r3, [pc, #80]	; (8007018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd2:	d1ee      	bne.n	8006fb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006fd4:	4b10      	ldr	r3, [pc, #64]	; (8007018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a0f      	ldr	r2, [pc, #60]	; (8007018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fe0:	f7fd ff54 	bl	8004e8c <HAL_GetTick>
 8006fe4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fe6:	e009      	b.n	8006ffc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fe8:	f7fd ff50 	bl	8004e8c <HAL_GetTick>
 8006fec:	4602      	mov	r2, r0
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	1ad3      	subs	r3, r2, r3
 8006ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ff6:	d901      	bls.n	8006ffc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e007      	b.n	800700c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ffc:	4b06      	ldr	r3, [pc, #24]	; (8007018 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007008:	d1ee      	bne.n	8006fe8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3708      	adds	r7, #8
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40023800 	.word	0x40023800
 8007018:	40007000 	.word	0x40007000

0800701c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007024:	2300      	movs	r3, #0
 8007026:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d101      	bne.n	8007032 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e29b      	b.n	800756a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 8087 	beq.w	800714e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007040:	4b96      	ldr	r3, [pc, #600]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 030c 	and.w	r3, r3, #12
 8007048:	2b04      	cmp	r3, #4
 800704a:	d00c      	beq.n	8007066 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800704c:	4b93      	ldr	r3, [pc, #588]	; (800729c <HAL_RCC_OscConfig+0x280>)
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 030c 	and.w	r3, r3, #12
 8007054:	2b08      	cmp	r3, #8
 8007056:	d112      	bne.n	800707e <HAL_RCC_OscConfig+0x62>
 8007058:	4b90      	ldr	r3, [pc, #576]	; (800729c <HAL_RCC_OscConfig+0x280>)
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007060:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007064:	d10b      	bne.n	800707e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007066:	4b8d      	ldr	r3, [pc, #564]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d06c      	beq.n	800714c <HAL_RCC_OscConfig+0x130>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d168      	bne.n	800714c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e275      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007086:	d106      	bne.n	8007096 <HAL_RCC_OscConfig+0x7a>
 8007088:	4b84      	ldr	r3, [pc, #528]	; (800729c <HAL_RCC_OscConfig+0x280>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a83      	ldr	r2, [pc, #524]	; (800729c <HAL_RCC_OscConfig+0x280>)
 800708e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007092:	6013      	str	r3, [r2, #0]
 8007094:	e02e      	b.n	80070f4 <HAL_RCC_OscConfig+0xd8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10c      	bne.n	80070b8 <HAL_RCC_OscConfig+0x9c>
 800709e:	4b7f      	ldr	r3, [pc, #508]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a7e      	ldr	r2, [pc, #504]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a8:	6013      	str	r3, [r2, #0]
 80070aa:	4b7c      	ldr	r3, [pc, #496]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a7b      	ldr	r2, [pc, #492]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	e01d      	b.n	80070f4 <HAL_RCC_OscConfig+0xd8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070c0:	d10c      	bne.n	80070dc <HAL_RCC_OscConfig+0xc0>
 80070c2:	4b76      	ldr	r3, [pc, #472]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a75      	ldr	r2, [pc, #468]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070cc:	6013      	str	r3, [r2, #0]
 80070ce:	4b73      	ldr	r3, [pc, #460]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a72      	ldr	r2, [pc, #456]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	e00b      	b.n	80070f4 <HAL_RCC_OscConfig+0xd8>
 80070dc:	4b6f      	ldr	r3, [pc, #444]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a6e      	ldr	r2, [pc, #440]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	4b6c      	ldr	r3, [pc, #432]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a6b      	ldr	r2, [pc, #428]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80070ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d013      	beq.n	8007124 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fd fec6 	bl	8004e8c <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007104:	f7fd fec2 	bl	8004e8c <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b64      	cmp	r3, #100	; 0x64
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e229      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007116:	4b61      	ldr	r3, [pc, #388]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f0      	beq.n	8007104 <HAL_RCC_OscConfig+0xe8>
 8007122:	e014      	b.n	800714e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007124:	f7fd feb2 	bl	8004e8c <HAL_GetTick>
 8007128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800712a:	e008      	b.n	800713e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800712c:	f7fd feae 	bl	8004e8c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b64      	cmp	r3, #100	; 0x64
 8007138:	d901      	bls.n	800713e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e215      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800713e:	4b57      	ldr	r3, [pc, #348]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1f0      	bne.n	800712c <HAL_RCC_OscConfig+0x110>
 800714a:	e000      	b.n	800714e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800714c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d069      	beq.n	800722e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800715a:	4b50      	ldr	r3, [pc, #320]	; (800729c <HAL_RCC_OscConfig+0x280>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 030c 	and.w	r3, r3, #12
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007166:	4b4d      	ldr	r3, [pc, #308]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 030c 	and.w	r3, r3, #12
 800716e:	2b08      	cmp	r3, #8
 8007170:	d11c      	bne.n	80071ac <HAL_RCC_OscConfig+0x190>
 8007172:	4b4a      	ldr	r3, [pc, #296]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800717a:	2b00      	cmp	r3, #0
 800717c:	d116      	bne.n	80071ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800717e:	4b47      	ldr	r3, [pc, #284]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d005      	beq.n	8007196 <HAL_RCC_OscConfig+0x17a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d001      	beq.n	8007196 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e1e9      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007196:	4b41      	ldr	r3, [pc, #260]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	00db      	lsls	r3, r3, #3
 80071a4:	493d      	ldr	r1, [pc, #244]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071aa:	e040      	b.n	800722e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d023      	beq.n	80071fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071b4:	4b39      	ldr	r3, [pc, #228]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a38      	ldr	r2, [pc, #224]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071c0:	f7fd fe64 	bl	8004e8c <HAL_GetTick>
 80071c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071c8:	f7fd fe60 	bl	8004e8c <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e1c7      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071da:	4b30      	ldr	r3, [pc, #192]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f0      	beq.n	80071c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071e6:	4b2d      	ldr	r3, [pc, #180]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	4929      	ldr	r1, [pc, #164]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80071f6:	4313      	orrs	r3, r2
 80071f8:	600b      	str	r3, [r1, #0]
 80071fa:	e018      	b.n	800722e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071fc:	4b27      	ldr	r3, [pc, #156]	; (800729c <HAL_RCC_OscConfig+0x280>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a26      	ldr	r2, [pc, #152]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007208:	f7fd fe40 	bl	8004e8c <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007210:	f7fd fe3c 	bl	8004e8c <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e1a3      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007222:	4b1e      	ldr	r3, [pc, #120]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f0      	bne.n	8007210 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0308 	and.w	r3, r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	d038      	beq.n	80072ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d019      	beq.n	8007276 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007242:	4b16      	ldr	r3, [pc, #88]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007246:	4a15      	ldr	r2, [pc, #84]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007248:	f043 0301 	orr.w	r3, r3, #1
 800724c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724e:	f7fd fe1d 	bl	8004e8c <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007254:	e008      	b.n	8007268 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007256:	f7fd fe19 	bl	8004e8c <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	2b02      	cmp	r3, #2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e180      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007268:	4b0c      	ldr	r3, [pc, #48]	; (800729c <HAL_RCC_OscConfig+0x280>)
 800726a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d0f0      	beq.n	8007256 <HAL_RCC_OscConfig+0x23a>
 8007274:	e01a      	b.n	80072ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007276:	4b09      	ldr	r3, [pc, #36]	; (800729c <HAL_RCC_OscConfig+0x280>)
 8007278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800727a:	4a08      	ldr	r2, [pc, #32]	; (800729c <HAL_RCC_OscConfig+0x280>)
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007282:	f7fd fe03 	bl	8004e8c <HAL_GetTick>
 8007286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007288:	e00a      	b.n	80072a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800728a:	f7fd fdff 	bl	8004e8c <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b02      	cmp	r3, #2
 8007296:	d903      	bls.n	80072a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e166      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
 800729c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072a0:	4b92      	ldr	r3, [pc, #584]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80072a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072a4:	f003 0302 	and.w	r3, r3, #2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1ee      	bne.n	800728a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 80a4 	beq.w	8007402 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ba:	4b8c      	ldr	r3, [pc, #560]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10d      	bne.n	80072e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80072c6:	4b89      	ldr	r3, [pc, #548]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80072c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ca:	4a88      	ldr	r2, [pc, #544]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80072cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072d0:	6413      	str	r3, [r2, #64]	; 0x40
 80072d2:	4b86      	ldr	r3, [pc, #536]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072da:	60bb      	str	r3, [r7, #8]
 80072dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072de:	2301      	movs	r3, #1
 80072e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072e2:	4b83      	ldr	r3, [pc, #524]	; (80074f0 <HAL_RCC_OscConfig+0x4d4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d118      	bne.n	8007320 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80072ee:	4b80      	ldr	r3, [pc, #512]	; (80074f0 <HAL_RCC_OscConfig+0x4d4>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a7f      	ldr	r2, [pc, #508]	; (80074f0 <HAL_RCC_OscConfig+0x4d4>)
 80072f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072fa:	f7fd fdc7 	bl	8004e8c <HAL_GetTick>
 80072fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007300:	e008      	b.n	8007314 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007302:	f7fd fdc3 	bl	8004e8c <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b64      	cmp	r3, #100	; 0x64
 800730e:	d901      	bls.n	8007314 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e12a      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007314:	4b76      	ldr	r3, [pc, #472]	; (80074f0 <HAL_RCC_OscConfig+0x4d4>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0f0      	beq.n	8007302 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d106      	bne.n	8007336 <HAL_RCC_OscConfig+0x31a>
 8007328:	4b70      	ldr	r3, [pc, #448]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 800732a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732c:	4a6f      	ldr	r2, [pc, #444]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6713      	str	r3, [r2, #112]	; 0x70
 8007334:	e02d      	b.n	8007392 <HAL_RCC_OscConfig+0x376>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10c      	bne.n	8007358 <HAL_RCC_OscConfig+0x33c>
 800733e:	4b6b      	ldr	r3, [pc, #428]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007342:	4a6a      	ldr	r2, [pc, #424]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007344:	f023 0301 	bic.w	r3, r3, #1
 8007348:	6713      	str	r3, [r2, #112]	; 0x70
 800734a:	4b68      	ldr	r3, [pc, #416]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 800734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734e:	4a67      	ldr	r2, [pc, #412]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007350:	f023 0304 	bic.w	r3, r3, #4
 8007354:	6713      	str	r3, [r2, #112]	; 0x70
 8007356:	e01c      	b.n	8007392 <HAL_RCC_OscConfig+0x376>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b05      	cmp	r3, #5
 800735e:	d10c      	bne.n	800737a <HAL_RCC_OscConfig+0x35e>
 8007360:	4b62      	ldr	r3, [pc, #392]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007364:	4a61      	ldr	r2, [pc, #388]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007366:	f043 0304 	orr.w	r3, r3, #4
 800736a:	6713      	str	r3, [r2, #112]	; 0x70
 800736c:	4b5f      	ldr	r3, [pc, #380]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 800736e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007370:	4a5e      	ldr	r2, [pc, #376]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	6713      	str	r3, [r2, #112]	; 0x70
 8007378:	e00b      	b.n	8007392 <HAL_RCC_OscConfig+0x376>
 800737a:	4b5c      	ldr	r3, [pc, #368]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 800737c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800737e:	4a5b      	ldr	r2, [pc, #364]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007380:	f023 0301 	bic.w	r3, r3, #1
 8007384:	6713      	str	r3, [r2, #112]	; 0x70
 8007386:	4b59      	ldr	r3, [pc, #356]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738a:	4a58      	ldr	r2, [pc, #352]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 800738c:	f023 0304 	bic.w	r3, r3, #4
 8007390:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d015      	beq.n	80073c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800739a:	f7fd fd77 	bl	8004e8c <HAL_GetTick>
 800739e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a0:	e00a      	b.n	80073b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073a2:	f7fd fd73 	bl	8004e8c <HAL_GetTick>
 80073a6:	4602      	mov	r2, r0
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	1ad3      	subs	r3, r2, r3
 80073ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d901      	bls.n	80073b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80073b4:	2303      	movs	r3, #3
 80073b6:	e0d8      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073b8:	4b4c      	ldr	r3, [pc, #304]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0ee      	beq.n	80073a2 <HAL_RCC_OscConfig+0x386>
 80073c4:	e014      	b.n	80073f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073c6:	f7fd fd61 	bl	8004e8c <HAL_GetTick>
 80073ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073cc:	e00a      	b.n	80073e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ce:	f7fd fd5d 	bl	8004e8c <HAL_GetTick>
 80073d2:	4602      	mov	r2, r0
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80073dc:	4293      	cmp	r3, r2
 80073de:	d901      	bls.n	80073e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	e0c2      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073e4:	4b41      	ldr	r3, [pc, #260]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80073e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1ee      	bne.n	80073ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073f0:	7dfb      	ldrb	r3, [r7, #23]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d105      	bne.n	8007402 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f6:	4b3d      	ldr	r3, [pc, #244]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	4a3c      	ldr	r2, [pc, #240]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80073fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007400:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	f000 80ae 	beq.w	8007568 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800740c:	4b37      	ldr	r3, [pc, #220]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f003 030c 	and.w	r3, r3, #12
 8007414:	2b08      	cmp	r3, #8
 8007416:	d06d      	beq.n	80074f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d14b      	bne.n	80074b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007420:	4b32      	ldr	r3, [pc, #200]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a31      	ldr	r2, [pc, #196]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800742a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742c:	f7fd fd2e 	bl	8004e8c <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007434:	f7fd fd2a 	bl	8004e8c <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e091      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007446:	4b29      	ldr	r3, [pc, #164]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1f0      	bne.n	8007434 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	69da      	ldr	r2, [r3, #28]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a1b      	ldr	r3, [r3, #32]
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	019b      	lsls	r3, r3, #6
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007468:	085b      	lsrs	r3, r3, #1
 800746a:	3b01      	subs	r3, #1
 800746c:	041b      	lsls	r3, r3, #16
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	061b      	lsls	r3, r3, #24
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747c:	071b      	lsls	r3, r3, #28
 800747e:	491b      	ldr	r1, [pc, #108]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007480:	4313      	orrs	r3, r2
 8007482:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007484:	4b19      	ldr	r3, [pc, #100]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a18      	ldr	r2, [pc, #96]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 800748a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800748e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007490:	f7fd fcfc 	bl	8004e8c <HAL_GetTick>
 8007494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007496:	e008      	b.n	80074aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007498:	f7fd fcf8 	bl	8004e8c <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	2b02      	cmp	r3, #2
 80074a4:	d901      	bls.n	80074aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80074a6:	2303      	movs	r3, #3
 80074a8:	e05f      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074aa:	4b10      	ldr	r3, [pc, #64]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d0f0      	beq.n	8007498 <HAL_RCC_OscConfig+0x47c>
 80074b6:	e057      	b.n	8007568 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074b8:	4b0c      	ldr	r3, [pc, #48]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a0b      	ldr	r2, [pc, #44]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80074be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c4:	f7fd fce2 	bl	8004e8c <HAL_GetTick>
 80074c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ca:	e008      	b.n	80074de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074cc:	f7fd fcde 	bl	8004e8c <HAL_GetTick>
 80074d0:	4602      	mov	r2, r0
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d901      	bls.n	80074de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	e045      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074de:	4b03      	ldr	r3, [pc, #12]	; (80074ec <HAL_RCC_OscConfig+0x4d0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1f0      	bne.n	80074cc <HAL_RCC_OscConfig+0x4b0>
 80074ea:	e03d      	b.n	8007568 <HAL_RCC_OscConfig+0x54c>
 80074ec:	40023800 	.word	0x40023800
 80074f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80074f4:	4b1f      	ldr	r3, [pc, #124]	; (8007574 <HAL_RCC_OscConfig+0x558>)
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	699b      	ldr	r3, [r3, #24]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d030      	beq.n	8007564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800750c:	429a      	cmp	r2, r3
 800750e:	d129      	bne.n	8007564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800751a:	429a      	cmp	r2, r3
 800751c:	d122      	bne.n	8007564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800751e:	68fa      	ldr	r2, [r7, #12]
 8007520:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007524:	4013      	ands	r3, r2
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800752a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800752c:	4293      	cmp	r3, r2
 800752e:	d119      	bne.n	8007564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753a:	085b      	lsrs	r3, r3, #1
 800753c:	3b01      	subs	r3, #1
 800753e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007540:	429a      	cmp	r2, r3
 8007542:	d10f      	bne.n	8007564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007550:	429a      	cmp	r2, r3
 8007552:	d107      	bne.n	8007564 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007560:	429a      	cmp	r2, r3
 8007562:	d001      	beq.n	8007568 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3718      	adds	r7, #24
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	40023800 	.word	0x40023800

08007578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e0d0      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007590:	4b6a      	ldr	r3, [pc, #424]	; (800773c <HAL_RCC_ClockConfig+0x1c4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	683a      	ldr	r2, [r7, #0]
 800759a:	429a      	cmp	r2, r3
 800759c:	d910      	bls.n	80075c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800759e:	4b67      	ldr	r3, [pc, #412]	; (800773c <HAL_RCC_ClockConfig+0x1c4>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f023 020f 	bic.w	r2, r3, #15
 80075a6:	4965      	ldr	r1, [pc, #404]	; (800773c <HAL_RCC_ClockConfig+0x1c4>)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ae:	4b63      	ldr	r3, [pc, #396]	; (800773c <HAL_RCC_ClockConfig+0x1c4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 030f 	and.w	r3, r3, #15
 80075b6:	683a      	ldr	r2, [r7, #0]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d001      	beq.n	80075c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e0b8      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d020      	beq.n	800760e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075d8:	4b59      	ldr	r3, [pc, #356]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	4a58      	ldr	r2, [pc, #352]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 80075de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0308 	and.w	r3, r3, #8
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d005      	beq.n	80075fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075f0:	4b53      	ldr	r3, [pc, #332]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	4a52      	ldr	r2, [pc, #328]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 80075f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075fc:	4b50      	ldr	r3, [pc, #320]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	494d      	ldr	r1, [pc, #308]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 800760a:	4313      	orrs	r3, r2
 800760c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b00      	cmp	r3, #0
 8007618:	d040      	beq.n	800769c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d107      	bne.n	8007632 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007622:	4b47      	ldr	r3, [pc, #284]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d115      	bne.n	800765a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e07f      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	2b02      	cmp	r3, #2
 8007638:	d107      	bne.n	800764a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800763a:	4b41      	ldr	r3, [pc, #260]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d109      	bne.n	800765a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e073      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800764a:	4b3d      	ldr	r3, [pc, #244]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0302 	and.w	r3, r3, #2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e06b      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800765a:	4b39      	ldr	r3, [pc, #228]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f023 0203 	bic.w	r2, r3, #3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	4936      	ldr	r1, [pc, #216]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 8007668:	4313      	orrs	r3, r2
 800766a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800766c:	f7fd fc0e 	bl	8004e8c <HAL_GetTick>
 8007670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007672:	e00a      	b.n	800768a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007674:	f7fd fc0a 	bl	8004e8c <HAL_GetTick>
 8007678:	4602      	mov	r2, r0
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007682:	4293      	cmp	r3, r2
 8007684:	d901      	bls.n	800768a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007686:	2303      	movs	r3, #3
 8007688:	e053      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768a:	4b2d      	ldr	r3, [pc, #180]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 020c 	and.w	r2, r3, #12
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	429a      	cmp	r2, r3
 800769a:	d1eb      	bne.n	8007674 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800769c:	4b27      	ldr	r3, [pc, #156]	; (800773c <HAL_RCC_ClockConfig+0x1c4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 030f 	and.w	r3, r3, #15
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d210      	bcs.n	80076cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076aa:	4b24      	ldr	r3, [pc, #144]	; (800773c <HAL_RCC_ClockConfig+0x1c4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f023 020f 	bic.w	r2, r3, #15
 80076b2:	4922      	ldr	r1, [pc, #136]	; (800773c <HAL_RCC_ClockConfig+0x1c4>)
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ba:	4b20      	ldr	r3, [pc, #128]	; (800773c <HAL_RCC_ClockConfig+0x1c4>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 030f 	and.w	r3, r3, #15
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d001      	beq.n	80076cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	e032      	b.n	8007732 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 0304 	and.w	r3, r3, #4
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d008      	beq.n	80076ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076d8:	4b19      	ldr	r3, [pc, #100]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	4916      	ldr	r1, [pc, #88]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076f6:	4b12      	ldr	r3, [pc, #72]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	490e      	ldr	r1, [pc, #56]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 8007706:	4313      	orrs	r3, r2
 8007708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800770a:	f000 f821 	bl	8007750 <HAL_RCC_GetSysClockFreq>
 800770e:	4602      	mov	r2, r0
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <HAL_RCC_ClockConfig+0x1c8>)
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	091b      	lsrs	r3, r3, #4
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	490a      	ldr	r1, [pc, #40]	; (8007744 <HAL_RCC_ClockConfig+0x1cc>)
 800771c:	5ccb      	ldrb	r3, [r1, r3]
 800771e:	fa22 f303 	lsr.w	r3, r2, r3
 8007722:	4a09      	ldr	r2, [pc, #36]	; (8007748 <HAL_RCC_ClockConfig+0x1d0>)
 8007724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007726:	4b09      	ldr	r3, [pc, #36]	; (800774c <HAL_RCC_ClockConfig+0x1d4>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4618      	mov	r0, r3
 800772c:	f7fd fb6a 	bl	8004e04 <HAL_InitTick>

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	40023c00 	.word	0x40023c00
 8007740:	40023800 	.word	0x40023800
 8007744:	0800d838 	.word	0x0800d838
 8007748:	200000c4 	.word	0x200000c4
 800774c:	200000cc 	.word	0x200000cc

08007750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007754:	b094      	sub	sp, #80	; 0x50
 8007756:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	647b      	str	r3, [r7, #68]	; 0x44
 800775c:	2300      	movs	r3, #0
 800775e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007760:	2300      	movs	r3, #0
 8007762:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007768:	4b79      	ldr	r3, [pc, #484]	; (8007950 <HAL_RCC_GetSysClockFreq+0x200>)
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	f003 030c 	and.w	r3, r3, #12
 8007770:	2b08      	cmp	r3, #8
 8007772:	d00d      	beq.n	8007790 <HAL_RCC_GetSysClockFreq+0x40>
 8007774:	2b08      	cmp	r3, #8
 8007776:	f200 80e1 	bhi.w	800793c <HAL_RCC_GetSysClockFreq+0x1ec>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <HAL_RCC_GetSysClockFreq+0x34>
 800777e:	2b04      	cmp	r3, #4
 8007780:	d003      	beq.n	800778a <HAL_RCC_GetSysClockFreq+0x3a>
 8007782:	e0db      	b.n	800793c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007784:	4b73      	ldr	r3, [pc, #460]	; (8007954 <HAL_RCC_GetSysClockFreq+0x204>)
 8007786:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007788:	e0db      	b.n	8007942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800778a:	4b73      	ldr	r3, [pc, #460]	; (8007958 <HAL_RCC_GetSysClockFreq+0x208>)
 800778c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800778e:	e0d8      	b.n	8007942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007790:	4b6f      	ldr	r3, [pc, #444]	; (8007950 <HAL_RCC_GetSysClockFreq+0x200>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007798:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800779a:	4b6d      	ldr	r3, [pc, #436]	; (8007950 <HAL_RCC_GetSysClockFreq+0x200>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d063      	beq.n	800786e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077a6:	4b6a      	ldr	r3, [pc, #424]	; (8007950 <HAL_RCC_GetSysClockFreq+0x200>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	099b      	lsrs	r3, r3, #6
 80077ac:	2200      	movs	r2, #0
 80077ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80077b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077b8:	633b      	str	r3, [r7, #48]	; 0x30
 80077ba:	2300      	movs	r3, #0
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
 80077be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80077c2:	4622      	mov	r2, r4
 80077c4:	462b      	mov	r3, r5
 80077c6:	f04f 0000 	mov.w	r0, #0
 80077ca:	f04f 0100 	mov.w	r1, #0
 80077ce:	0159      	lsls	r1, r3, #5
 80077d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077d4:	0150      	lsls	r0, r2, #5
 80077d6:	4602      	mov	r2, r0
 80077d8:	460b      	mov	r3, r1
 80077da:	4621      	mov	r1, r4
 80077dc:	1a51      	subs	r1, r2, r1
 80077de:	6139      	str	r1, [r7, #16]
 80077e0:	4629      	mov	r1, r5
 80077e2:	eb63 0301 	sbc.w	r3, r3, r1
 80077e6:	617b      	str	r3, [r7, #20]
 80077e8:	f04f 0200 	mov.w	r2, #0
 80077ec:	f04f 0300 	mov.w	r3, #0
 80077f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077f4:	4659      	mov	r1, fp
 80077f6:	018b      	lsls	r3, r1, #6
 80077f8:	4651      	mov	r1, sl
 80077fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077fe:	4651      	mov	r1, sl
 8007800:	018a      	lsls	r2, r1, #6
 8007802:	4651      	mov	r1, sl
 8007804:	ebb2 0801 	subs.w	r8, r2, r1
 8007808:	4659      	mov	r1, fp
 800780a:	eb63 0901 	sbc.w	r9, r3, r1
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	f04f 0300 	mov.w	r3, #0
 8007816:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800781a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800781e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007822:	4690      	mov	r8, r2
 8007824:	4699      	mov	r9, r3
 8007826:	4623      	mov	r3, r4
 8007828:	eb18 0303 	adds.w	r3, r8, r3
 800782c:	60bb      	str	r3, [r7, #8]
 800782e:	462b      	mov	r3, r5
 8007830:	eb49 0303 	adc.w	r3, r9, r3
 8007834:	60fb      	str	r3, [r7, #12]
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007842:	4629      	mov	r1, r5
 8007844:	024b      	lsls	r3, r1, #9
 8007846:	4621      	mov	r1, r4
 8007848:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800784c:	4621      	mov	r1, r4
 800784e:	024a      	lsls	r2, r1, #9
 8007850:	4610      	mov	r0, r2
 8007852:	4619      	mov	r1, r3
 8007854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007856:	2200      	movs	r2, #0
 8007858:	62bb      	str	r3, [r7, #40]	; 0x28
 800785a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800785c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007860:	f7f8 fd46 	bl	80002f0 <__aeabi_uldivmod>
 8007864:	4602      	mov	r2, r0
 8007866:	460b      	mov	r3, r1
 8007868:	4613      	mov	r3, r2
 800786a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800786c:	e058      	b.n	8007920 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800786e:	4b38      	ldr	r3, [pc, #224]	; (8007950 <HAL_RCC_GetSysClockFreq+0x200>)
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	099b      	lsrs	r3, r3, #6
 8007874:	2200      	movs	r2, #0
 8007876:	4618      	mov	r0, r3
 8007878:	4611      	mov	r1, r2
 800787a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800787e:	623b      	str	r3, [r7, #32]
 8007880:	2300      	movs	r3, #0
 8007882:	627b      	str	r3, [r7, #36]	; 0x24
 8007884:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007888:	4642      	mov	r2, r8
 800788a:	464b      	mov	r3, r9
 800788c:	f04f 0000 	mov.w	r0, #0
 8007890:	f04f 0100 	mov.w	r1, #0
 8007894:	0159      	lsls	r1, r3, #5
 8007896:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800789a:	0150      	lsls	r0, r2, #5
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	4641      	mov	r1, r8
 80078a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80078a6:	4649      	mov	r1, r9
 80078a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80078ac:	f04f 0200 	mov.w	r2, #0
 80078b0:	f04f 0300 	mov.w	r3, #0
 80078b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078c0:	ebb2 040a 	subs.w	r4, r2, sl
 80078c4:	eb63 050b 	sbc.w	r5, r3, fp
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	f04f 0300 	mov.w	r3, #0
 80078d0:	00eb      	lsls	r3, r5, #3
 80078d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078d6:	00e2      	lsls	r2, r4, #3
 80078d8:	4614      	mov	r4, r2
 80078da:	461d      	mov	r5, r3
 80078dc:	4643      	mov	r3, r8
 80078de:	18e3      	adds	r3, r4, r3
 80078e0:	603b      	str	r3, [r7, #0]
 80078e2:	464b      	mov	r3, r9
 80078e4:	eb45 0303 	adc.w	r3, r5, r3
 80078e8:	607b      	str	r3, [r7, #4]
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	f04f 0300 	mov.w	r3, #0
 80078f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078f6:	4629      	mov	r1, r5
 80078f8:	028b      	lsls	r3, r1, #10
 80078fa:	4621      	mov	r1, r4
 80078fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007900:	4621      	mov	r1, r4
 8007902:	028a      	lsls	r2, r1, #10
 8007904:	4610      	mov	r0, r2
 8007906:	4619      	mov	r1, r3
 8007908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800790a:	2200      	movs	r2, #0
 800790c:	61bb      	str	r3, [r7, #24]
 800790e:	61fa      	str	r2, [r7, #28]
 8007910:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007914:	f7f8 fcec 	bl	80002f0 <__aeabi_uldivmod>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	4613      	mov	r3, r2
 800791e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007920:	4b0b      	ldr	r3, [pc, #44]	; (8007950 <HAL_RCC_GetSysClockFreq+0x200>)
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	0c1b      	lsrs	r3, r3, #16
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	3301      	adds	r3, #1
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007930:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007934:	fbb2 f3f3 	udiv	r3, r2, r3
 8007938:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800793a:	e002      	b.n	8007942 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800793c:	4b05      	ldr	r3, [pc, #20]	; (8007954 <HAL_RCC_GetSysClockFreq+0x204>)
 800793e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007944:	4618      	mov	r0, r3
 8007946:	3750      	adds	r7, #80	; 0x50
 8007948:	46bd      	mov	sp, r7
 800794a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800794e:	bf00      	nop
 8007950:	40023800 	.word	0x40023800
 8007954:	00f42400 	.word	0x00f42400
 8007958:	007a1200 	.word	0x007a1200

0800795c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800795c:	b480      	push	{r7}
 800795e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007960:	4b03      	ldr	r3, [pc, #12]	; (8007970 <HAL_RCC_GetHCLKFreq+0x14>)
 8007962:	681b      	ldr	r3, [r3, #0]
}
 8007964:	4618      	mov	r0, r3
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	200000c4 	.word	0x200000c4

08007974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007978:	f7ff fff0 	bl	800795c <HAL_RCC_GetHCLKFreq>
 800797c:	4602      	mov	r2, r0
 800797e:	4b05      	ldr	r3, [pc, #20]	; (8007994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	0a9b      	lsrs	r3, r3, #10
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	4903      	ldr	r1, [pc, #12]	; (8007998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800798a:	5ccb      	ldrb	r3, [r1, r3]
 800798c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007990:	4618      	mov	r0, r3
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40023800 	.word	0x40023800
 8007998:	0800d848 	.word	0x0800d848

0800799c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079a0:	f7ff ffdc 	bl	800795c <HAL_RCC_GetHCLKFreq>
 80079a4:	4602      	mov	r2, r0
 80079a6:	4b05      	ldr	r3, [pc, #20]	; (80079bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	0b5b      	lsrs	r3, r3, #13
 80079ac:	f003 0307 	and.w	r3, r3, #7
 80079b0:	4903      	ldr	r1, [pc, #12]	; (80079c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079b2:	5ccb      	ldrb	r3, [r1, r3]
 80079b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	40023800 	.word	0x40023800
 80079c0:	0800d848 	.word	0x0800d848

080079c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b088      	sub	sp, #32
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80079cc:	2300      	movs	r3, #0
 80079ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80079d0:	2300      	movs	r3, #0
 80079d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80079d4:	2300      	movs	r3, #0
 80079d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d012      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079ec:	4b69      	ldr	r3, [pc, #420]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	4a68      	ldr	r2, [pc, #416]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80079f6:	6093      	str	r3, [r2, #8]
 80079f8:	4b66      	ldr	r3, [pc, #408]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fa:	689a      	ldr	r2, [r3, #8]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a00:	4964      	ldr	r1, [pc, #400]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d101      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d017      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a1e:	4b5d      	ldr	r3, [pc, #372]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	4959      	ldr	r1, [pc, #356]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a3c:	d101      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d101      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d017      	beq.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a5a:	4b4e      	ldr	r3, [pc, #312]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a68:	494a      	ldr	r1, [pc, #296]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a78:	d101      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a86:	2301      	movs	r3, #1
 8007a88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a96:	2301      	movs	r3, #1
 8007a98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 808b 	beq.w	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007aa8:	4b3a      	ldr	r3, [pc, #232]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aac:	4a39      	ldr	r2, [pc, #228]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab4:	4b37      	ldr	r3, [pc, #220]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007abc:	60bb      	str	r3, [r7, #8]
 8007abe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ac0:	4b35      	ldr	r3, [pc, #212]	; (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a34      	ldr	r2, [pc, #208]	; (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007acc:	f7fd f9de 	bl	8004e8c <HAL_GetTick>
 8007ad0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ad2:	e008      	b.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad4:	f7fd f9da 	bl	8004e8c <HAL_GetTick>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	2b64      	cmp	r3, #100	; 0x64
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e38f      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ae6:	4b2c      	ldr	r3, [pc, #176]	; (8007b98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d0f0      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007af2:	4b28      	ldr	r3, [pc, #160]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007afa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d035      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b0a:	693a      	ldr	r2, [r7, #16]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d02e      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b10:	4b20      	ldr	r3, [pc, #128]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b1a:	4b1e      	ldr	r3, [pc, #120]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1e:	4a1d      	ldr	r2, [pc, #116]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b26:	4b1b      	ldr	r3, [pc, #108]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2a:	4a1a      	ldr	r2, [pc, #104]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b32:	4a18      	ldr	r2, [pc, #96]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b38:	4b16      	ldr	r3, [pc, #88]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3c:	f003 0301 	and.w	r3, r3, #1
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d114      	bne.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b44:	f7fd f9a2 	bl	8004e8c <HAL_GetTick>
 8007b48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b4a:	e00a      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b4c:	f7fd f99e 	bl	8004e8c <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d901      	bls.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e351      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b62:	4b0c      	ldr	r3, [pc, #48]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0ee      	beq.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b7a:	d111      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b7c:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b8a:	400b      	ands	r3, r1
 8007b8c:	4901      	ldr	r1, [pc, #4]	; (8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	608b      	str	r3, [r1, #8]
 8007b92:	e00b      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b94:	40023800 	.word	0x40023800
 8007b98:	40007000 	.word	0x40007000
 8007b9c:	0ffffcff 	.word	0x0ffffcff
 8007ba0:	4bac      	ldr	r3, [pc, #688]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	4aab      	ldr	r2, [pc, #684]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ba6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007baa:	6093      	str	r3, [r2, #8]
 8007bac:	4ba9      	ldr	r3, [pc, #676]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bb8:	49a6      	ldr	r1, [pc, #664]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0310 	and.w	r3, r3, #16
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d010      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bca:	4ba2      	ldr	r3, [pc, #648]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bd0:	4aa0      	ldr	r2, [pc, #640]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007bda:	4b9e      	ldr	r3, [pc, #632]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	499b      	ldr	r1, [pc, #620]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bf8:	4b96      	ldr	r3, [pc, #600]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c06:	4993      	ldr	r1, [pc, #588]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c1a:	4b8e      	ldr	r3, [pc, #568]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c28:	498a      	ldr	r1, [pc, #552]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c3c:	4b85      	ldr	r3, [pc, #532]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c4a:	4982      	ldr	r1, [pc, #520]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c5e:	4b7d      	ldr	r3, [pc, #500]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6c:	4979      	ldr	r1, [pc, #484]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c80:	4b74      	ldr	r3, [pc, #464]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c86:	f023 0203 	bic.w	r2, r3, #3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8e:	4971      	ldr	r1, [pc, #452]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ca2:	4b6c      	ldr	r3, [pc, #432]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca8:	f023 020c 	bic.w	r2, r3, #12
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb0:	4968      	ldr	r1, [pc, #416]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cc4:	4b63      	ldr	r3, [pc, #396]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cd2:	4960      	ldr	r1, [pc, #384]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007ce6:	4b5b      	ldr	r3, [pc, #364]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cf4:	4957      	ldr	r1, [pc, #348]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d08:	4b52      	ldr	r3, [pc, #328]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d16:	494f      	ldr	r1, [pc, #316]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00a      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d2a:	4b4a      	ldr	r3, [pc, #296]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d38:	4946      	ldr	r1, [pc, #280]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d4c:	4b41      	ldr	r3, [pc, #260]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d5a:	493e      	ldr	r1, [pc, #248]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d6e:	4b39      	ldr	r3, [pc, #228]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7c:	4935      	ldr	r1, [pc, #212]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00a      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d90:	4b30      	ldr	r3, [pc, #192]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d9e:	492d      	ldr	r1, [pc, #180]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d011      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007db2:	4b28      	ldr	r3, [pc, #160]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007db8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dc0:	4924      	ldr	r1, [pc, #144]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dd0:	d101      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0308 	and.w	r3, r3, #8
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007de2:	2301      	movs	r3, #1
 8007de4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d00a      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007df2:	4b18      	ldr	r3, [pc, #96]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007df8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e00:	4914      	ldr	r1, [pc, #80]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e02:	4313      	orrs	r3, r2
 8007e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d00b      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e14:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e24:	490b      	ldr	r1, [pc, #44]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00f      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007e38:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e48:	4902      	ldr	r1, [pc, #8]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007e50:	e002      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007e52:	bf00      	nop
 8007e54:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e64:	4b8a      	ldr	r3, [pc, #552]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e6a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e74:	4986      	ldr	r1, [pc, #536]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d00b      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007e88:	4b81      	ldr	r3, [pc, #516]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e98:	497d      	ldr	r1, [pc, #500]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d006      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 80d6 	beq.w	8008060 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007eb4:	4b76      	ldr	r3, [pc, #472]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a75      	ldr	r2, [pc, #468]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007eba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ec0:	f7fc ffe4 	bl	8004e8c <HAL_GetTick>
 8007ec4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ec6:	e008      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ec8:	f7fc ffe0 	bl	8004e8c <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	2b64      	cmp	r3, #100	; 0x64
 8007ed4:	d901      	bls.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ed6:	2303      	movs	r3, #3
 8007ed8:	e195      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007eda:	4b6d      	ldr	r3, [pc, #436]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1f0      	bne.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 0301 	and.w	r3, r3, #1
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d021      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d11d      	bne.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007efa:	4b65      	ldr	r3, [pc, #404]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007efc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f00:	0c1b      	lsrs	r3, r3, #16
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f08:	4b61      	ldr	r3, [pc, #388]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0e:	0e1b      	lsrs	r3, r3, #24
 8007f10:	f003 030f 	and.w	r3, r3, #15
 8007f14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	019a      	lsls	r2, r3, #6
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	041b      	lsls	r3, r3, #16
 8007f20:	431a      	orrs	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	061b      	lsls	r3, r3, #24
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	071b      	lsls	r3, r3, #28
 8007f2e:	4958      	ldr	r1, [pc, #352]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f30:	4313      	orrs	r3, r2
 8007f32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d004      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f4a:	d00a      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d02e      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f60:	d129      	bne.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f62:	4b4b      	ldr	r3, [pc, #300]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f68:	0c1b      	lsrs	r3, r3, #16
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f70:	4b47      	ldr	r3, [pc, #284]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f76:	0f1b      	lsrs	r3, r3, #28
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	019a      	lsls	r2, r3, #6
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	061b      	lsls	r3, r3, #24
 8007f90:	431a      	orrs	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	071b      	lsls	r3, r3, #28
 8007f96:	493e      	ldr	r1, [pc, #248]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f9e:	4b3c      	ldr	r3, [pc, #240]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa4:	f023 021f 	bic.w	r2, r3, #31
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	3b01      	subs	r3, #1
 8007fae:	4938      	ldr	r1, [pc, #224]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d01d      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007fc2:	4b33      	ldr	r3, [pc, #204]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fc8:	0e1b      	lsrs	r3, r3, #24
 8007fca:	f003 030f 	and.w	r3, r3, #15
 8007fce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007fd0:	4b2f      	ldr	r3, [pc, #188]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd6:	0f1b      	lsrs	r3, r3, #28
 8007fd8:	f003 0307 	and.w	r3, r3, #7
 8007fdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	019a      	lsls	r2, r3, #6
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	041b      	lsls	r3, r3, #16
 8007fea:	431a      	orrs	r2, r3
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	061b      	lsls	r3, r3, #24
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	071b      	lsls	r3, r3, #28
 8007ff6:	4926      	ldr	r1, [pc, #152]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d011      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	019a      	lsls	r2, r3, #6
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	041b      	lsls	r3, r3, #16
 8008016:	431a      	orrs	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	061b      	lsls	r3, r3, #24
 800801e:	431a      	orrs	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	071b      	lsls	r3, r3, #28
 8008026:	491a      	ldr	r1, [pc, #104]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008028:	4313      	orrs	r3, r2
 800802a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800802e:	4b18      	ldr	r3, [pc, #96]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a17      	ldr	r2, [pc, #92]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008034:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800803a:	f7fc ff27 	bl	8004e8c <HAL_GetTick>
 800803e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008040:	e008      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008042:	f7fc ff23 	bl	8004e8c <HAL_GetTick>
 8008046:	4602      	mov	r2, r0
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	1ad3      	subs	r3, r2, r3
 800804c:	2b64      	cmp	r3, #100	; 0x64
 800804e:	d901      	bls.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008050:	2303      	movs	r3, #3
 8008052:	e0d8      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0f0      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	2b01      	cmp	r3, #1
 8008064:	f040 80ce 	bne.w	8008204 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008068:	4b09      	ldr	r3, [pc, #36]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a08      	ldr	r2, [pc, #32]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800806e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008072:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008074:	f7fc ff0a 	bl	8004e8c <HAL_GetTick>
 8008078:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800807a:	e00b      	b.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800807c:	f7fc ff06 	bl	8004e8c <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b64      	cmp	r3, #100	; 0x64
 8008088:	d904      	bls.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e0bb      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800808e:	bf00      	nop
 8008090:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008094:	4b5e      	ldr	r3, [pc, #376]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800809c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080a0:	d0ec      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d009      	beq.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d02e      	beq.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d12a      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080ca:	4b51      	ldr	r3, [pc, #324]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d0:	0c1b      	lsrs	r3, r3, #16
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080d8:	4b4d      	ldr	r3, [pc, #308]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080de:	0f1b      	lsrs	r3, r3, #28
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	695b      	ldr	r3, [r3, #20]
 80080ea:	019a      	lsls	r2, r3, #6
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	041b      	lsls	r3, r3, #16
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	699b      	ldr	r3, [r3, #24]
 80080f6:	061b      	lsls	r3, r3, #24
 80080f8:	431a      	orrs	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	071b      	lsls	r3, r3, #28
 80080fe:	4944      	ldr	r1, [pc, #272]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008100:	4313      	orrs	r3, r2
 8008102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008106:	4b42      	ldr	r3, [pc, #264]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008108:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800810c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008114:	3b01      	subs	r3, #1
 8008116:	021b      	lsls	r3, r3, #8
 8008118:	493d      	ldr	r1, [pc, #244]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800811a:	4313      	orrs	r3, r2
 800811c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d022      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008134:	d11d      	bne.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008136:	4b36      	ldr	r3, [pc, #216]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800813c:	0e1b      	lsrs	r3, r3, #24
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008144:	4b32      	ldr	r3, [pc, #200]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814a:	0f1b      	lsrs	r3, r3, #28
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	019a      	lsls	r2, r3, #6
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a1b      	ldr	r3, [r3, #32]
 800815c:	041b      	lsls	r3, r3, #16
 800815e:	431a      	orrs	r2, r3
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	061b      	lsls	r3, r3, #24
 8008164:	431a      	orrs	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	071b      	lsls	r3, r3, #28
 800816a:	4929      	ldr	r1, [pc, #164]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800816c:	4313      	orrs	r3, r2
 800816e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b00      	cmp	r3, #0
 800817c:	d028      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800817e:	4b24      	ldr	r3, [pc, #144]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008184:	0e1b      	lsrs	r3, r3, #24
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800818c:	4b20      	ldr	r3, [pc, #128]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800818e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008192:	0c1b      	lsrs	r3, r3, #16
 8008194:	f003 0303 	and.w	r3, r3, #3
 8008198:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	019a      	lsls	r2, r3, #6
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	041b      	lsls	r3, r3, #16
 80081a4:	431a      	orrs	r2, r3
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	061b      	lsls	r3, r3, #24
 80081aa:	431a      	orrs	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	071b      	lsls	r3, r3, #28
 80081b2:	4917      	ldr	r1, [pc, #92]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80081ba:	4b15      	ldr	r3, [pc, #84]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c8:	4911      	ldr	r1, [pc, #68]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80081d0:	4b0f      	ldr	r3, [pc, #60]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a0e      	ldr	r2, [pc, #56]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081dc:	f7fc fe56 	bl	8004e8c <HAL_GetTick>
 80081e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081e2:	e008      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80081e4:	f7fc fe52 	bl	8004e8c <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	2b64      	cmp	r3, #100	; 0x64
 80081f0:	d901      	bls.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081f2:	2303      	movs	r3, #3
 80081f4:	e007      	b.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081f6:	4b06      	ldr	r3, [pc, #24]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008202:	d1ef      	bne.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3720      	adds	r7, #32
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	40023800 	.word	0x40023800

08008214 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e01c      	b.n	8008260 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	795b      	ldrb	r3, [r3, #5]
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b00      	cmp	r3, #0
 800822e:	d105      	bne.n	800823c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7fb f9d0 	bl	80035dc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f042 0204 	orr.w	r2, r2, #4
 8008250:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	791b      	ldrb	r3, [r3, #4]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d101      	bne.n	8008282 <HAL_RNG_GenerateRandomNumber+0x1a>
 800827e:	2302      	movs	r3, #2
 8008280:	e044      	b.n	800830c <HAL_RNG_GenerateRandomNumber+0xa4>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	795b      	ldrb	r3, [r3, #5]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b01      	cmp	r3, #1
 8008290:	d133      	bne.n	80082fa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2202      	movs	r2, #2
 8008296:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008298:	f7fc fdf8 	bl	8004e8c <HAL_GetTick>
 800829c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800829e:	e018      	b.n	80082d2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80082a0:	f7fc fdf4 	bl	8004e8c <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	2b02      	cmp	r3, #2
 80082ac:	d911      	bls.n	80082d2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d00a      	beq.n	80082d2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2202      	movs	r2, #2
 80082c6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e01c      	b.n	800830c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d1df      	bne.n	80082a0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	689a      	ldr	r2, [r3, #8]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	715a      	strb	r2, [r3, #5]
 80082f8:	e004      	b.n	8008304 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2204      	movs	r2, #4
 80082fe:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	711a      	strb	r2, [r3, #4]

  return status;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	330c      	adds	r3, #12
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff ffa0 	bl	8008268 <HAL_RNG_GenerateRandomNumber>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	e000      	b.n	8008336 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8008334:	2300      	movs	r3, #0
  }
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e09d      	b.n	800848c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	d108      	bne.n	800836a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008360:	d009      	beq.n	8008376 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	61da      	str	r2, [r3, #28]
 8008368:	e005      	b.n	8008376 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2200      	movs	r2, #0
 800837a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d106      	bne.n	8008396 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fb f995 	bl	80036c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2202      	movs	r2, #2
 800839a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083b6:	d902      	bls.n	80083be <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]
 80083bc:	e002      	b.n	80083c4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80083be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80083cc:	d007      	beq.n	80083de <HAL_SPI_Init+0xa0>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80083d6:	d002      	beq.n	80083de <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	691b      	ldr	r3, [r3, #16]
 80083f4:	f003 0302 	and.w	r3, r3, #2
 80083f8:	431a      	orrs	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	f003 0301 	and.w	r3, r3, #1
 8008402:	431a      	orrs	r2, r3
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800840c:	431a      	orrs	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008416:	431a      	orrs	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008420:	ea42 0103 	orr.w	r1, r2, r3
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	430a      	orrs	r2, r1
 8008432:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	0c1b      	lsrs	r3, r3, #16
 800843a:	f003 0204 	and.w	r2, r3, #4
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008442:	f003 0310 	and.w	r3, r3, #16
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800844c:	f003 0308 	and.w	r3, r3, #8
 8008450:	431a      	orrs	r2, r3
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800845a:	ea42 0103 	orr.w	r1, r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	69da      	ldr	r2, [r3, #28]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800847a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	603b      	str	r3, [r7, #0]
 80084a0:	4613      	mov	r3, r2
 80084a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d101      	bne.n	80084b6 <HAL_SPI_Transmit+0x22>
 80084b2:	2302      	movs	r3, #2
 80084b4:	e158      	b.n	8008768 <HAL_SPI_Transmit+0x2d4>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80084be:	f7fc fce5 	bl	8004e8c <HAL_GetTick>
 80084c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80084c4:	88fb      	ldrh	r3, [r7, #6]
 80084c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d002      	beq.n	80084da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80084d4:	2302      	movs	r3, #2
 80084d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084d8:	e13d      	b.n	8008756 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <HAL_SPI_Transmit+0x52>
 80084e0:	88fb      	ldrh	r3, [r7, #6]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d102      	bne.n	80084ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80084ea:	e134      	b.n	8008756 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2203      	movs	r2, #3
 80084f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	88fa      	ldrh	r2, [r7, #6]
 8008504:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	88fa      	ldrh	r2, [r7, #6]
 800850a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008536:	d10f      	bne.n	8008558 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008546:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008556:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008562:	2b40      	cmp	r3, #64	; 0x40
 8008564:	d007      	beq.n	8008576 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800857e:	d94b      	bls.n	8008618 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <HAL_SPI_Transmit+0xfa>
 8008588:	8afb      	ldrh	r3, [r7, #22]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d13e      	bne.n	800860c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008592:	881a      	ldrh	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	1c9a      	adds	r2, r3, #2
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80085b2:	e02b      	b.n	800860c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d112      	bne.n	80085e8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c6:	881a      	ldrh	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d2:	1c9a      	adds	r2, r3, #2
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085e6:	e011      	b.n	800860c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085e8:	f7fc fc50 	bl	8004e8c <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d803      	bhi.n	8008600 <HAL_SPI_Transmit+0x16c>
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085fe:	d102      	bne.n	8008606 <HAL_SPI_Transmit+0x172>
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	77fb      	strb	r3, [r7, #31]
          goto error;
 800860a:	e0a4      	b.n	8008756 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008610:	b29b      	uxth	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1ce      	bne.n	80085b4 <HAL_SPI_Transmit+0x120>
 8008616:	e07c      	b.n	8008712 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d002      	beq.n	8008626 <HAL_SPI_Transmit+0x192>
 8008620:	8afb      	ldrh	r3, [r7, #22]
 8008622:	2b01      	cmp	r3, #1
 8008624:	d170      	bne.n	8008708 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800862a:	b29b      	uxth	r3, r3
 800862c:	2b01      	cmp	r3, #1
 800862e:	d912      	bls.n	8008656 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008634:	881a      	ldrh	r2, [r3, #0]
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	1c9a      	adds	r2, r3, #2
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800864a:	b29b      	uxth	r3, r3
 800864c:	3b02      	subs	r3, #2
 800864e:	b29a      	uxth	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008654:	e058      	b.n	8008708 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	330c      	adds	r3, #12
 8008660:	7812      	ldrb	r2, [r2, #0]
 8008662:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	1c5a      	adds	r2, r3, #1
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008672:	b29b      	uxth	r3, r3
 8008674:	3b01      	subs	r3, #1
 8008676:	b29a      	uxth	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800867c:	e044      	b.n	8008708 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f003 0302 	and.w	r3, r3, #2
 8008688:	2b02      	cmp	r3, #2
 800868a:	d12b      	bne.n	80086e4 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008690:	b29b      	uxth	r3, r3
 8008692:	2b01      	cmp	r3, #1
 8008694:	d912      	bls.n	80086bc <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869a:	881a      	ldrh	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a6:	1c9a      	adds	r2, r3, #2
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	3b02      	subs	r3, #2
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086ba:	e025      	b.n	8008708 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	330c      	adds	r3, #12
 80086c6:	7812      	ldrb	r2, [r2, #0]
 80086c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086d8:	b29b      	uxth	r3, r3
 80086da:	3b01      	subs	r3, #1
 80086dc:	b29a      	uxth	r2, r3
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80086e2:	e011      	b.n	8008708 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80086e4:	f7fc fbd2 	bl	8004e8c <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d803      	bhi.n	80086fc <HAL_SPI_Transmit+0x268>
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086fa:	d102      	bne.n	8008702 <HAL_SPI_Transmit+0x26e>
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d102      	bne.n	8008708 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8008702:	2303      	movs	r3, #3
 8008704:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008706:	e026      	b.n	8008756 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800870c:	b29b      	uxth	r3, r3
 800870e:	2b00      	cmp	r3, #0
 8008710:	d1b5      	bne.n	800867e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008712:	69ba      	ldr	r2, [r7, #24]
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 f948 	bl	80089ac <SPI_EndRxTxTransaction>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2220      	movs	r2, #32
 8008726:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008730:	2300      	movs	r3, #0
 8008732:	613b      	str	r3, [r7, #16]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	613b      	str	r3, [r7, #16]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800874a:	2b00      	cmp	r3, #0
 800874c:	d002      	beq.n	8008754 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	77fb      	strb	r3, [r7, #31]
 8008752:	e000      	b.n	8008756 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8008754:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008766:	7ffb      	ldrb	r3, [r7, #31]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3720      	adds	r7, #32
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b088      	sub	sp, #32
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	4613      	mov	r3, r2
 800877e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008780:	f7fc fb84 	bl	8004e8c <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	1a9b      	subs	r3, r3, r2
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	4413      	add	r3, r2
 800878e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008790:	f7fc fb7c 	bl	8004e8c <HAL_GetTick>
 8008794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008796:	4b39      	ldr	r3, [pc, #228]	; (800887c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	015b      	lsls	r3, r3, #5
 800879c:	0d1b      	lsrs	r3, r3, #20
 800879e:	69fa      	ldr	r2, [r7, #28]
 80087a0:	fb02 f303 	mul.w	r3, r2, r3
 80087a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087a6:	e054      	b.n	8008852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ae:	d050      	beq.n	8008852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087b0:	f7fc fb6c 	bl	8004e8c <HAL_GetTick>
 80087b4:	4602      	mov	r2, r0
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	429a      	cmp	r2, r3
 80087be:	d902      	bls.n	80087c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80087c0:	69fb      	ldr	r3, [r7, #28]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d13d      	bne.n	8008842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087de:	d111      	bne.n	8008804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087e8:	d004      	beq.n	80087f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087f2:	d107      	bne.n	8008804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800880c:	d10f      	bne.n	800882e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800881c:	601a      	str	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800882c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e017      	b.n	8008872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	3b01      	subs	r3, #1
 8008850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	689a      	ldr	r2, [r3, #8]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4013      	ands	r3, r2
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	429a      	cmp	r2, r3
 8008860:	bf0c      	ite	eq
 8008862:	2301      	moveq	r3, #1
 8008864:	2300      	movne	r3, #0
 8008866:	b2db      	uxtb	r3, r3
 8008868:	461a      	mov	r2, r3
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	429a      	cmp	r2, r3
 800886e:	d19b      	bne.n	80087a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	200000c4 	.word	0x200000c4

08008880 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b08a      	sub	sp, #40	; 0x28
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	60b9      	str	r1, [r7, #8]
 800888a:	607a      	str	r2, [r7, #4]
 800888c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800888e:	2300      	movs	r3, #0
 8008890:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008892:	f7fc fafb 	bl	8004e8c <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	1a9b      	subs	r3, r3, r2
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	4413      	add	r3, r2
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80088a2:	f7fc faf3 	bl	8004e8c <HAL_GetTick>
 80088a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	330c      	adds	r3, #12
 80088ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80088b0:	4b3d      	ldr	r3, [pc, #244]	; (80089a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	4613      	mov	r3, r2
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	00da      	lsls	r2, r3, #3
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	0d1b      	lsrs	r3, r3, #20
 80088c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088c2:	fb02 f303 	mul.w	r3, r2, r3
 80088c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80088c8:	e060      	b.n	800898c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80088d0:	d107      	bne.n	80088e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d104      	bne.n	80088e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e8:	d050      	beq.n	800898c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088ea:	f7fc facf 	bl	8004e8c <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	6a3b      	ldr	r3, [r7, #32]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d902      	bls.n	8008900 <SPI_WaitFifoStateUntilTimeout+0x80>
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d13d      	bne.n	800897c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800890e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008918:	d111      	bne.n	800893e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008922:	d004      	beq.n	800892e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892c:	d107      	bne.n	800893e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681a      	ldr	r2, [r3, #0]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800893c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008946:	d10f      	bne.n	8008968 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008966:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2200      	movs	r2, #0
 8008974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008978:	2303      	movs	r3, #3
 800897a:	e010      	b.n	800899e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008982:	2300      	movs	r3, #0
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	3b01      	subs	r3, #1
 800898a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	689a      	ldr	r2, [r3, #8]
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	4013      	ands	r3, r2
 8008996:	687a      	ldr	r2, [r7, #4]
 8008998:	429a      	cmp	r2, r3
 800899a:	d196      	bne.n	80088ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3728      	adds	r7, #40	; 0x28
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	200000c4 	.word	0x200000c4

080089ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	60b9      	str	r1, [r7, #8]
 80089b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff ff5b 	bl	8008880 <SPI_WaitFifoStateUntilTimeout>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d007      	beq.n	80089e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089d4:	f043 0220 	orr.w	r2, r3, #32
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e046      	b.n	8008a6e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80089e0:	4b25      	ldr	r3, [pc, #148]	; (8008a78 <SPI_EndRxTxTransaction+0xcc>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a25      	ldr	r2, [pc, #148]	; (8008a7c <SPI_EndRxTxTransaction+0xd0>)
 80089e6:	fba2 2303 	umull	r2, r3, r2, r3
 80089ea:	0d5b      	lsrs	r3, r3, #21
 80089ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80089f0:	fb02 f303 	mul.w	r3, r2, r3
 80089f4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	685b      	ldr	r3, [r3, #4]
 80089fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089fe:	d112      	bne.n	8008a26 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	9300      	str	r3, [sp, #0]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	2180      	movs	r1, #128	; 0x80
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7ff feb0 	bl	8008770 <SPI_WaitFlagStateUntilTimeout>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d016      	beq.n	8008a44 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a1a:	f043 0220 	orr.w	r2, r3, #32
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e023      	b.n	8008a6e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3c:	2b80      	cmp	r3, #128	; 0x80
 8008a3e:	d0f2      	beq.n	8008a26 <SPI_EndRxTxTransaction+0x7a>
 8008a40:	e000      	b.n	8008a44 <SPI_EndRxTxTransaction+0x98>
        break;
 8008a42:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	9300      	str	r3, [sp, #0]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff ff15 	bl	8008880 <SPI_WaitFifoStateUntilTimeout>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d007      	beq.n	8008a6c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a60:	f043 0220 	orr.w	r2, r3, #32
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e000      	b.n	8008a6e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3718      	adds	r7, #24
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	200000c4 	.word	0x200000c4
 8008a7c:	165e9f81 	.word	0x165e9f81

08008a80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e049      	b.n	8008b26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d106      	bne.n	8008aac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f7fb f9f4 	bl	8003e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3304      	adds	r3, #4
 8008abc:	4619      	mov	r1, r3
 8008abe:	4610      	mov	r0, r2
 8008ac0:	f000 fdb0 	bl	8009624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3708      	adds	r7, #8
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d001      	beq.n	8008b48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e054      	b.n	8008bf2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0201 	orr.w	r2, r2, #1
 8008b5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a26      	ldr	r2, [pc, #152]	; (8008c00 <HAL_TIM_Base_Start_IT+0xd0>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d022      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b72:	d01d      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a22      	ldr	r2, [pc, #136]	; (8008c04 <HAL_TIM_Base_Start_IT+0xd4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d018      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a21      	ldr	r2, [pc, #132]	; (8008c08 <HAL_TIM_Base_Start_IT+0xd8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d013      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a1f      	ldr	r2, [pc, #124]	; (8008c0c <HAL_TIM_Base_Start_IT+0xdc>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00e      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a1e      	ldr	r2, [pc, #120]	; (8008c10 <HAL_TIM_Base_Start_IT+0xe0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d009      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a1c      	ldr	r2, [pc, #112]	; (8008c14 <HAL_TIM_Base_Start_IT+0xe4>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d004      	beq.n	8008bb0 <HAL_TIM_Base_Start_IT+0x80>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a1b      	ldr	r2, [pc, #108]	; (8008c18 <HAL_TIM_Base_Start_IT+0xe8>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d115      	bne.n	8008bdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <HAL_TIM_Base_Start_IT+0xec>)
 8008bb8:	4013      	ands	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2b06      	cmp	r3, #6
 8008bc0:	d015      	beq.n	8008bee <HAL_TIM_Base_Start_IT+0xbe>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc8:	d011      	beq.n	8008bee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	681a      	ldr	r2, [r3, #0]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f042 0201 	orr.w	r2, r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bda:	e008      	b.n	8008bee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f042 0201 	orr.w	r2, r2, #1
 8008bea:	601a      	str	r2, [r3, #0]
 8008bec:	e000      	b.n	8008bf0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
 8008bfe:	bf00      	nop
 8008c00:	40010000 	.word	0x40010000
 8008c04:	40000400 	.word	0x40000400
 8008c08:	40000800 	.word	0x40000800
 8008c0c:	40000c00 	.word	0x40000c00
 8008c10:	40010400 	.word	0x40010400
 8008c14:	40014000 	.word	0x40014000
 8008c18:	40001800 	.word	0x40001800
 8008c1c:	00010007 	.word	0x00010007

08008c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e049      	b.n	8008cc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d106      	bne.n	8008c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f7fb f99a 	bl	8003f80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	4610      	mov	r0, r2
 8008c60:	f000 fce0 	bl	8009624 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d109      	bne.n	8008cf4 <HAL_TIM_PWM_Start+0x24>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	bf14      	ite	ne
 8008cec:	2301      	movne	r3, #1
 8008cee:	2300      	moveq	r3, #0
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	e03c      	b.n	8008d6e <HAL_TIM_PWM_Start+0x9e>
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d109      	bne.n	8008d0e <HAL_TIM_PWM_Start+0x3e>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	bf14      	ite	ne
 8008d06:	2301      	movne	r3, #1
 8008d08:	2300      	moveq	r3, #0
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	e02f      	b.n	8008d6e <HAL_TIM_PWM_Start+0x9e>
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d109      	bne.n	8008d28 <HAL_TIM_PWM_Start+0x58>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	bf14      	ite	ne
 8008d20:	2301      	movne	r3, #1
 8008d22:	2300      	moveq	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	e022      	b.n	8008d6e <HAL_TIM_PWM_Start+0x9e>
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	2b0c      	cmp	r3, #12
 8008d2c:	d109      	bne.n	8008d42 <HAL_TIM_PWM_Start+0x72>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	bf14      	ite	ne
 8008d3a:	2301      	movne	r3, #1
 8008d3c:	2300      	moveq	r3, #0
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	e015      	b.n	8008d6e <HAL_TIM_PWM_Start+0x9e>
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2b10      	cmp	r3, #16
 8008d46:	d109      	bne.n	8008d5c <HAL_TIM_PWM_Start+0x8c>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	bf14      	ite	ne
 8008d54:	2301      	movne	r3, #1
 8008d56:	2300      	moveq	r3, #0
 8008d58:	b2db      	uxtb	r3, r3
 8008d5a:	e008      	b.n	8008d6e <HAL_TIM_PWM_Start+0x9e>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	bf14      	ite	ne
 8008d68:	2301      	movne	r3, #1
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d001      	beq.n	8008d76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e092      	b.n	8008e9c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d104      	bne.n	8008d86 <HAL_TIM_PWM_Start+0xb6>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2202      	movs	r2, #2
 8008d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d84:	e023      	b.n	8008dce <HAL_TIM_PWM_Start+0xfe>
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b04      	cmp	r3, #4
 8008d8a:	d104      	bne.n	8008d96 <HAL_TIM_PWM_Start+0xc6>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d94:	e01b      	b.n	8008dce <HAL_TIM_PWM_Start+0xfe>
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	2b08      	cmp	r3, #8
 8008d9a:	d104      	bne.n	8008da6 <HAL_TIM_PWM_Start+0xd6>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008da4:	e013      	b.n	8008dce <HAL_TIM_PWM_Start+0xfe>
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	2b0c      	cmp	r3, #12
 8008daa:	d104      	bne.n	8008db6 <HAL_TIM_PWM_Start+0xe6>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2202      	movs	r2, #2
 8008db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008db4:	e00b      	b.n	8008dce <HAL_TIM_PWM_Start+0xfe>
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b10      	cmp	r3, #16
 8008dba:	d104      	bne.n	8008dc6 <HAL_TIM_PWM_Start+0xf6>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dc4:	e003      	b.n	8008dce <HAL_TIM_PWM_Start+0xfe>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	6839      	ldr	r1, [r7, #0]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 ffbc 	bl	8009d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a30      	ldr	r2, [pc, #192]	; (8008ea4 <HAL_TIM_PWM_Start+0x1d4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d004      	beq.n	8008df0 <HAL_TIM_PWM_Start+0x120>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a2f      	ldr	r2, [pc, #188]	; (8008ea8 <HAL_TIM_PWM_Start+0x1d8>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d101      	bne.n	8008df4 <HAL_TIM_PWM_Start+0x124>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e000      	b.n	8008df6 <HAL_TIM_PWM_Start+0x126>
 8008df4:	2300      	movs	r3, #0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d007      	beq.n	8008e0a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a25      	ldr	r2, [pc, #148]	; (8008ea4 <HAL_TIM_PWM_Start+0x1d4>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d022      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x18a>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e1c:	d01d      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x18a>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a22      	ldr	r2, [pc, #136]	; (8008eac <HAL_TIM_PWM_Start+0x1dc>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d018      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x18a>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a20      	ldr	r2, [pc, #128]	; (8008eb0 <HAL_TIM_PWM_Start+0x1e0>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d013      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x18a>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a1f      	ldr	r2, [pc, #124]	; (8008eb4 <HAL_TIM_PWM_Start+0x1e4>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d00e      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x18a>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a19      	ldr	r2, [pc, #100]	; (8008ea8 <HAL_TIM_PWM_Start+0x1d8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d009      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x18a>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a1b      	ldr	r2, [pc, #108]	; (8008eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d004      	beq.n	8008e5a <HAL_TIM_PWM_Start+0x18a>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a19      	ldr	r2, [pc, #100]	; (8008ebc <HAL_TIM_PWM_Start+0x1ec>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d115      	bne.n	8008e86 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	689a      	ldr	r2, [r3, #8]
 8008e60:	4b17      	ldr	r3, [pc, #92]	; (8008ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8008e62:	4013      	ands	r3, r2
 8008e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b06      	cmp	r3, #6
 8008e6a:	d015      	beq.n	8008e98 <HAL_TIM_PWM_Start+0x1c8>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e72:	d011      	beq.n	8008e98 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f042 0201 	orr.w	r2, r2, #1
 8008e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e84:	e008      	b.n	8008e98 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0201 	orr.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	e000      	b.n	8008e9a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	40010000 	.word	0x40010000
 8008ea8:	40010400 	.word	0x40010400
 8008eac:	40000400 	.word	0x40000400
 8008eb0:	40000800 	.word	0x40000800
 8008eb4:	40000c00 	.word	0x40000c00
 8008eb8:	40014000 	.word	0x40014000
 8008ebc:	40001800 	.word	0x40001800
 8008ec0:	00010007 	.word	0x00010007

08008ec4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 ff3c 	bl	8009d54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a36      	ldr	r2, [pc, #216]	; (8008fbc <HAL_TIM_PWM_Stop+0xf8>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d004      	beq.n	8008ef0 <HAL_TIM_PWM_Stop+0x2c>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a35      	ldr	r2, [pc, #212]	; (8008fc0 <HAL_TIM_PWM_Stop+0xfc>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d101      	bne.n	8008ef4 <HAL_TIM_PWM_Stop+0x30>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e000      	b.n	8008ef6 <HAL_TIM_PWM_Stop+0x32>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d017      	beq.n	8008f2a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6a1a      	ldr	r2, [r3, #32]
 8008f00:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f04:	4013      	ands	r3, r2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10f      	bne.n	8008f2a <HAL_TIM_PWM_Stop+0x66>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6a1a      	ldr	r2, [r3, #32]
 8008f10:	f240 4344 	movw	r3, #1092	; 0x444
 8008f14:	4013      	ands	r3, r2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d107      	bne.n	8008f2a <HAL_TIM_PWM_Stop+0x66>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6a1a      	ldr	r2, [r3, #32]
 8008f30:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f34:	4013      	ands	r3, r2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10f      	bne.n	8008f5a <HAL_TIM_PWM_Stop+0x96>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6a1a      	ldr	r2, [r3, #32]
 8008f40:	f240 4344 	movw	r3, #1092	; 0x444
 8008f44:	4013      	ands	r3, r2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d107      	bne.n	8008f5a <HAL_TIM_PWM_Stop+0x96>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0201 	bic.w	r2, r2, #1
 8008f58:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d104      	bne.n	8008f6a <HAL_TIM_PWM_Stop+0xa6>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f68:	e023      	b.n	8008fb2 <HAL_TIM_PWM_Stop+0xee>
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	d104      	bne.n	8008f7a <HAL_TIM_PWM_Stop+0xb6>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f78:	e01b      	b.n	8008fb2 <HAL_TIM_PWM_Stop+0xee>
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	2b08      	cmp	r3, #8
 8008f7e:	d104      	bne.n	8008f8a <HAL_TIM_PWM_Stop+0xc6>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f88:	e013      	b.n	8008fb2 <HAL_TIM_PWM_Stop+0xee>
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b0c      	cmp	r3, #12
 8008f8e:	d104      	bne.n	8008f9a <HAL_TIM_PWM_Stop+0xd6>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f98:	e00b      	b.n	8008fb2 <HAL_TIM_PWM_Stop+0xee>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b10      	cmp	r3, #16
 8008f9e:	d104      	bne.n	8008faa <HAL_TIM_PWM_Stop+0xe6>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fa8:	e003      	b.n	8008fb2 <HAL_TIM_PWM_Stop+0xee>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	40010000 	.word	0x40010000
 8008fc0:	40010400 	.word	0x40010400

08008fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d122      	bne.n	8009020 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d11b      	bne.n	8009020 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f06f 0202 	mvn.w	r2, #2
 8008ff0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	699b      	ldr	r3, [r3, #24]
 8008ffe:	f003 0303 	and.w	r3, r3, #3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 faee 	bl	80095e8 <HAL_TIM_IC_CaptureCallback>
 800900c:	e005      	b.n	800901a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fae0 	bl	80095d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 faf1 	bl	80095fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f003 0304 	and.w	r3, r3, #4
 800902a:	2b04      	cmp	r3, #4
 800902c:	d122      	bne.n	8009074 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b04      	cmp	r3, #4
 800903a:	d11b      	bne.n	8009074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0204 	mvn.w	r2, #4
 8009044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2202      	movs	r2, #2
 800904a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fac4 	bl	80095e8 <HAL_TIM_IC_CaptureCallback>
 8009060:	e005      	b.n	800906e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fab6 	bl	80095d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fac7 	bl	80095fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f003 0308 	and.w	r3, r3, #8
 800907e:	2b08      	cmp	r3, #8
 8009080:	d122      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	f003 0308 	and.w	r3, r3, #8
 800908c:	2b08      	cmp	r3, #8
 800908e:	d11b      	bne.n	80090c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f06f 0208 	mvn.w	r2, #8
 8009098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2204      	movs	r2, #4
 800909e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa9a 	bl	80095e8 <HAL_TIM_IC_CaptureCallback>
 80090b4:	e005      	b.n	80090c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fa8c 	bl	80095d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa9d 	bl	80095fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	f003 0310 	and.w	r3, r3, #16
 80090d2:	2b10      	cmp	r3, #16
 80090d4:	d122      	bne.n	800911c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	68db      	ldr	r3, [r3, #12]
 80090dc:	f003 0310 	and.w	r3, r3, #16
 80090e0:	2b10      	cmp	r3, #16
 80090e2:	d11b      	bne.n	800911c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f06f 0210 	mvn.w	r2, #16
 80090ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2208      	movs	r2, #8
 80090f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	69db      	ldr	r3, [r3, #28]
 80090fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa70 	bl	80095e8 <HAL_TIM_IC_CaptureCallback>
 8009108:	e005      	b.n	8009116 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fa62 	bl	80095d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009110:	6878      	ldr	r0, [r7, #4]
 8009112:	f000 fa73 	bl	80095fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b01      	cmp	r3, #1
 8009128:	d10e      	bne.n	8009148 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	f003 0301 	and.w	r3, r3, #1
 8009134:	2b01      	cmp	r3, #1
 8009136:	d107      	bne.n	8009148 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f06f 0201 	mvn.w	r2, #1
 8009140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 fa3c 	bl	80095c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	691b      	ldr	r3, [r3, #16]
 800914e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009152:	2b80      	cmp	r3, #128	; 0x80
 8009154:	d10e      	bne.n	8009174 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009160:	2b80      	cmp	r3, #128	; 0x80
 8009162:	d107      	bne.n	8009174 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800916c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 ff2c 	bl	8009fcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800917e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009182:	d10e      	bne.n	80091a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800918e:	2b80      	cmp	r3, #128	; 0x80
 8009190:	d107      	bne.n	80091a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800919a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 ff1f 	bl	8009fe0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ac:	2b40      	cmp	r3, #64	; 0x40
 80091ae:	d10e      	bne.n	80091ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ba:	2b40      	cmp	r3, #64	; 0x40
 80091bc:	d107      	bne.n	80091ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 fa21 	bl	8009610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	f003 0320 	and.w	r3, r3, #32
 80091d8:	2b20      	cmp	r3, #32
 80091da:	d10e      	bne.n	80091fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f003 0320 	and.w	r3, r3, #32
 80091e6:	2b20      	cmp	r3, #32
 80091e8:	d107      	bne.n	80091fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f06f 0220 	mvn.w	r2, #32
 80091f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 fedf 	bl	8009fb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091fa:	bf00      	nop
 80091fc:	3708      	adds	r7, #8
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b086      	sub	sp, #24
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	60b9      	str	r1, [r7, #8]
 800920e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800921e:	2302      	movs	r3, #2
 8009220:	e0ff      	b.n	8009422 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b14      	cmp	r3, #20
 800922e:	f200 80f0 	bhi.w	8009412 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009232:	a201      	add	r2, pc, #4	; (adr r2, 8009238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009238:	0800928d 	.word	0x0800928d
 800923c:	08009413 	.word	0x08009413
 8009240:	08009413 	.word	0x08009413
 8009244:	08009413 	.word	0x08009413
 8009248:	080092cd 	.word	0x080092cd
 800924c:	08009413 	.word	0x08009413
 8009250:	08009413 	.word	0x08009413
 8009254:	08009413 	.word	0x08009413
 8009258:	0800930f 	.word	0x0800930f
 800925c:	08009413 	.word	0x08009413
 8009260:	08009413 	.word	0x08009413
 8009264:	08009413 	.word	0x08009413
 8009268:	0800934f 	.word	0x0800934f
 800926c:	08009413 	.word	0x08009413
 8009270:	08009413 	.word	0x08009413
 8009274:	08009413 	.word	0x08009413
 8009278:	08009391 	.word	0x08009391
 800927c:	08009413 	.word	0x08009413
 8009280:	08009413 	.word	0x08009413
 8009284:	08009413 	.word	0x08009413
 8009288:	080093d1 	.word	0x080093d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	68b9      	ldr	r1, [r7, #8]
 8009292:	4618      	mov	r0, r3
 8009294:	f000 fa66 	bl	8009764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699a      	ldr	r2, [r3, #24]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f042 0208 	orr.w	r2, r2, #8
 80092a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699a      	ldr	r2, [r3, #24]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0204 	bic.w	r2, r2, #4
 80092b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6999      	ldr	r1, [r3, #24]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	691a      	ldr	r2, [r3, #16]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	619a      	str	r2, [r3, #24]
      break;
 80092ca:	e0a5      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68b9      	ldr	r1, [r7, #8]
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fab8 	bl	8009848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699a      	ldr	r2, [r3, #24]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6999      	ldr	r1, [r3, #24]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	021a      	lsls	r2, r3, #8
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	619a      	str	r2, [r3, #24]
      break;
 800930c:	e084      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	4618      	mov	r0, r3
 8009316:	f000 fb0f 	bl	8009938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	69da      	ldr	r2, [r3, #28]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f042 0208 	orr.w	r2, r2, #8
 8009328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69da      	ldr	r2, [r3, #28]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f022 0204 	bic.w	r2, r2, #4
 8009338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	69d9      	ldr	r1, [r3, #28]
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	691a      	ldr	r2, [r3, #16]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	430a      	orrs	r2, r1
 800934a:	61da      	str	r2, [r3, #28]
      break;
 800934c:	e064      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 fb65 	bl	8009a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	69da      	ldr	r2, [r3, #28]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	69d9      	ldr	r1, [r3, #28]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	691b      	ldr	r3, [r3, #16]
 8009384:	021a      	lsls	r2, r3, #8
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	430a      	orrs	r2, r1
 800938c:	61da      	str	r2, [r3, #28]
      break;
 800938e:	e043      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	4618      	mov	r0, r3
 8009398:	f000 fb9c 	bl	8009ad4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0208 	orr.w	r2, r2, #8
 80093aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0204 	bic.w	r2, r2, #4
 80093ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	691a      	ldr	r2, [r3, #16]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	430a      	orrs	r2, r1
 80093cc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093ce:	e023      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68b9      	ldr	r1, [r7, #8]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fbce 	bl	8009b78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	691b      	ldr	r3, [r3, #16]
 8009406:	021a      	lsls	r2, r3, #8
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009410:	e002      	b.n	8009418 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	75fb      	strb	r3, [r7, #23]
      break;
 8009416:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009420:	7dfb      	ldrb	r3, [r7, #23]
}
 8009422:	4618      	mov	r0, r3
 8009424:	3718      	adds	r7, #24
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}
 800942a:	bf00      	nop

0800942c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009436:	2300      	movs	r3, #0
 8009438:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_TIM_ConfigClockSource+0x1c>
 8009444:	2302      	movs	r3, #2
 8009446:	e0b4      	b.n	80095b2 <HAL_TIM_ConfigClockSource+0x186>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2202      	movs	r2, #2
 8009454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009460:	68ba      	ldr	r2, [r7, #8]
 8009462:	4b56      	ldr	r3, [pc, #344]	; (80095bc <HAL_TIM_ConfigClockSource+0x190>)
 8009464:	4013      	ands	r3, r2
 8009466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800946e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009480:	d03e      	beq.n	8009500 <HAL_TIM_ConfigClockSource+0xd4>
 8009482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009486:	f200 8087 	bhi.w	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 800948a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948e:	f000 8086 	beq.w	800959e <HAL_TIM_ConfigClockSource+0x172>
 8009492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009496:	d87f      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 8009498:	2b70      	cmp	r3, #112	; 0x70
 800949a:	d01a      	beq.n	80094d2 <HAL_TIM_ConfigClockSource+0xa6>
 800949c:	2b70      	cmp	r3, #112	; 0x70
 800949e:	d87b      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094a0:	2b60      	cmp	r3, #96	; 0x60
 80094a2:	d050      	beq.n	8009546 <HAL_TIM_ConfigClockSource+0x11a>
 80094a4:	2b60      	cmp	r3, #96	; 0x60
 80094a6:	d877      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094a8:	2b50      	cmp	r3, #80	; 0x50
 80094aa:	d03c      	beq.n	8009526 <HAL_TIM_ConfigClockSource+0xfa>
 80094ac:	2b50      	cmp	r3, #80	; 0x50
 80094ae:	d873      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094b0:	2b40      	cmp	r3, #64	; 0x40
 80094b2:	d058      	beq.n	8009566 <HAL_TIM_ConfigClockSource+0x13a>
 80094b4:	2b40      	cmp	r3, #64	; 0x40
 80094b6:	d86f      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094b8:	2b30      	cmp	r3, #48	; 0x30
 80094ba:	d064      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x15a>
 80094bc:	2b30      	cmp	r3, #48	; 0x30
 80094be:	d86b      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094c0:	2b20      	cmp	r3, #32
 80094c2:	d060      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x15a>
 80094c4:	2b20      	cmp	r3, #32
 80094c6:	d867      	bhi.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d05c      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x15a>
 80094cc:	2b10      	cmp	r3, #16
 80094ce:	d05a      	beq.n	8009586 <HAL_TIM_ConfigClockSource+0x15a>
 80094d0:	e062      	b.n	8009598 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094e2:	f000 fc17 	bl	8009d14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	609a      	str	r2, [r3, #8]
      break;
 80094fe:	e04f      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009510:	f000 fc00 	bl	8009d14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009522:	609a      	str	r2, [r3, #8]
      break;
 8009524:	e03c      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009532:	461a      	mov	r2, r3
 8009534:	f000 fb74 	bl	8009c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2150      	movs	r1, #80	; 0x50
 800953e:	4618      	mov	r0, r3
 8009540:	f000 fbcd 	bl	8009cde <TIM_ITRx_SetConfig>
      break;
 8009544:	e02c      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009552:	461a      	mov	r2, r3
 8009554:	f000 fb93 	bl	8009c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	2160      	movs	r1, #96	; 0x60
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fbbd 	bl	8009cde <TIM_ITRx_SetConfig>
      break;
 8009564:	e01c      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009572:	461a      	mov	r2, r3
 8009574:	f000 fb54 	bl	8009c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2140      	movs	r1, #64	; 0x40
 800957e:	4618      	mov	r0, r3
 8009580:	f000 fbad 	bl	8009cde <TIM_ITRx_SetConfig>
      break;
 8009584:	e00c      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681a      	ldr	r2, [r3, #0]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4619      	mov	r1, r3
 8009590:	4610      	mov	r0, r2
 8009592:	f000 fba4 	bl	8009cde <TIM_ITRx_SetConfig>
      break;
 8009596:	e003      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	73fb      	strb	r3, [r7, #15]
      break;
 800959c:	e000      	b.n	80095a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800959e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}
 80095ba:	bf00      	nop
 80095bc:	fffeff88 	.word	0xfffeff88

080095c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a40      	ldr	r2, [pc, #256]	; (8009738 <TIM_Base_SetConfig+0x114>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d013      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009642:	d00f      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a3d      	ldr	r2, [pc, #244]	; (800973c <TIM_Base_SetConfig+0x118>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d00b      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a3c      	ldr	r2, [pc, #240]	; (8009740 <TIM_Base_SetConfig+0x11c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d007      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a3b      	ldr	r2, [pc, #236]	; (8009744 <TIM_Base_SetConfig+0x120>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d003      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a3a      	ldr	r2, [pc, #232]	; (8009748 <TIM_Base_SetConfig+0x124>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d108      	bne.n	8009676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a2f      	ldr	r2, [pc, #188]	; (8009738 <TIM_Base_SetConfig+0x114>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d02b      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009684:	d027      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a2c      	ldr	r2, [pc, #176]	; (800973c <TIM_Base_SetConfig+0x118>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d023      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a2b      	ldr	r2, [pc, #172]	; (8009740 <TIM_Base_SetConfig+0x11c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d01f      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a2a      	ldr	r2, [pc, #168]	; (8009744 <TIM_Base_SetConfig+0x120>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d01b      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a29      	ldr	r2, [pc, #164]	; (8009748 <TIM_Base_SetConfig+0x124>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d017      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a28      	ldr	r2, [pc, #160]	; (800974c <TIM_Base_SetConfig+0x128>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d013      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a27      	ldr	r2, [pc, #156]	; (8009750 <TIM_Base_SetConfig+0x12c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00f      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a26      	ldr	r2, [pc, #152]	; (8009754 <TIM_Base_SetConfig+0x130>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00b      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a25      	ldr	r2, [pc, #148]	; (8009758 <TIM_Base_SetConfig+0x134>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d007      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a24      	ldr	r2, [pc, #144]	; (800975c <TIM_Base_SetConfig+0x138>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d003      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a23      	ldr	r2, [pc, #140]	; (8009760 <TIM_Base_SetConfig+0x13c>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d108      	bne.n	80096e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	689a      	ldr	r2, [r3, #8]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a0a      	ldr	r2, [pc, #40]	; (8009738 <TIM_Base_SetConfig+0x114>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d003      	beq.n	800971c <TIM_Base_SetConfig+0xf8>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a0c      	ldr	r2, [pc, #48]	; (8009748 <TIM_Base_SetConfig+0x124>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d103      	bne.n	8009724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	691a      	ldr	r2, [r3, #16]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	615a      	str	r2, [r3, #20]
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	40010000 	.word	0x40010000
 800973c:	40000400 	.word	0x40000400
 8009740:	40000800 	.word	0x40000800
 8009744:	40000c00 	.word	0x40000c00
 8009748:	40010400 	.word	0x40010400
 800974c:	40014000 	.word	0x40014000
 8009750:	40014400 	.word	0x40014400
 8009754:	40014800 	.word	0x40014800
 8009758:	40001800 	.word	0x40001800
 800975c:	40001c00 	.word	0x40001c00
 8009760:	40002000 	.word	0x40002000

08009764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	f023 0201 	bic.w	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4b2b      	ldr	r3, [pc, #172]	; (800983c <TIM_OC1_SetConfig+0xd8>)
 8009790:	4013      	ands	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0303 	bic.w	r3, r3, #3
 800979a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f023 0302 	bic.w	r3, r3, #2
 80097ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a21      	ldr	r2, [pc, #132]	; (8009840 <TIM_OC1_SetConfig+0xdc>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d003      	beq.n	80097c8 <TIM_OC1_SetConfig+0x64>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a20      	ldr	r2, [pc, #128]	; (8009844 <TIM_OC1_SetConfig+0xe0>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d10c      	bne.n	80097e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f023 0308 	bic.w	r3, r3, #8
 80097ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f023 0304 	bic.w	r3, r3, #4
 80097e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a16      	ldr	r2, [pc, #88]	; (8009840 <TIM_OC1_SetConfig+0xdc>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d003      	beq.n	80097f2 <TIM_OC1_SetConfig+0x8e>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a15      	ldr	r2, [pc, #84]	; (8009844 <TIM_OC1_SetConfig+0xe0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d111      	bne.n	8009816 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	4313      	orrs	r3, r2
 800980a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	4313      	orrs	r3, r2
 8009814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	621a      	str	r2, [r3, #32]
}
 8009830:	bf00      	nop
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	fffeff8f 	.word	0xfffeff8f
 8009840:	40010000 	.word	0x40010000
 8009844:	40010400 	.word	0x40010400

08009848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	f023 0210 	bic.w	r2, r3, #16
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4b2e      	ldr	r3, [pc, #184]	; (800992c <TIM_OC2_SetConfig+0xe4>)
 8009874:	4013      	ands	r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800987e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	4313      	orrs	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f023 0320 	bic.w	r3, r3, #32
 8009892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	4313      	orrs	r3, r2
 800989e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a23      	ldr	r2, [pc, #140]	; (8009930 <TIM_OC2_SetConfig+0xe8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_OC2_SetConfig+0x68>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a22      	ldr	r2, [pc, #136]	; (8009934 <TIM_OC2_SetConfig+0xec>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10d      	bne.n	80098cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a18      	ldr	r2, [pc, #96]	; (8009930 <TIM_OC2_SetConfig+0xe8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d003      	beq.n	80098dc <TIM_OC2_SetConfig+0x94>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a17      	ldr	r2, [pc, #92]	; (8009934 <TIM_OC2_SetConfig+0xec>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d113      	bne.n	8009904 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	4313      	orrs	r3, r2
 8009902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	621a      	str	r2, [r3, #32]
}
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	feff8fff 	.word	0xfeff8fff
 8009930:	40010000 	.word	0x40010000
 8009934:	40010400 	.word	0x40010400

08009938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	4b2d      	ldr	r3, [pc, #180]	; (8009a18 <TIM_OC3_SetConfig+0xe0>)
 8009964:	4013      	ands	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0303 	bic.w	r3, r3, #3
 800996e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	021b      	lsls	r3, r3, #8
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	4313      	orrs	r3, r2
 800998c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a22      	ldr	r2, [pc, #136]	; (8009a1c <TIM_OC3_SetConfig+0xe4>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d003      	beq.n	800999e <TIM_OC3_SetConfig+0x66>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a21      	ldr	r2, [pc, #132]	; (8009a20 <TIM_OC3_SetConfig+0xe8>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d10d      	bne.n	80099ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	021b      	lsls	r3, r3, #8
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a17      	ldr	r2, [pc, #92]	; (8009a1c <TIM_OC3_SetConfig+0xe4>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d003      	beq.n	80099ca <TIM_OC3_SetConfig+0x92>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a16      	ldr	r2, [pc, #88]	; (8009a20 <TIM_OC3_SetConfig+0xe8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d113      	bne.n	80099f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	621a      	str	r2, [r3, #32]
}
 8009a0c:	bf00      	nop
 8009a0e:	371c      	adds	r7, #28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	fffeff8f 	.word	0xfffeff8f
 8009a1c:	40010000 	.word	0x40010000
 8009a20:	40010400 	.word	0x40010400

08009a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	4b1e      	ldr	r3, [pc, #120]	; (8009ac8 <TIM_OC4_SetConfig+0xa4>)
 8009a50:	4013      	ands	r3, r2
 8009a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	021b      	lsls	r3, r3, #8
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	031b      	lsls	r3, r3, #12
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a13      	ldr	r2, [pc, #76]	; (8009acc <TIM_OC4_SetConfig+0xa8>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d003      	beq.n	8009a8c <TIM_OC4_SetConfig+0x68>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a12      	ldr	r2, [pc, #72]	; (8009ad0 <TIM_OC4_SetConfig+0xac>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d109      	bne.n	8009aa0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	019b      	lsls	r3, r3, #6
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	621a      	str	r2, [r3, #32]
}
 8009aba:	bf00      	nop
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	feff8fff 	.word	0xfeff8fff
 8009acc:	40010000 	.word	0x40010000
 8009ad0:	40010400 	.word	0x40010400

08009ad4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	4b1b      	ldr	r3, [pc, #108]	; (8009b6c <TIM_OC5_SetConfig+0x98>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a12      	ldr	r2, [pc, #72]	; (8009b70 <TIM_OC5_SetConfig+0x9c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d003      	beq.n	8009b32 <TIM_OC5_SetConfig+0x5e>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a11      	ldr	r2, [pc, #68]	; (8009b74 <TIM_OC5_SetConfig+0xa0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d109      	bne.n	8009b46 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	621a      	str	r2, [r3, #32]
}
 8009b60:	bf00      	nop
 8009b62:	371c      	adds	r7, #28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	fffeff8f 	.word	0xfffeff8f
 8009b70:	40010000 	.word	0x40010000
 8009b74:	40010400 	.word	0x40010400

08009b78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4b1c      	ldr	r3, [pc, #112]	; (8009c14 <TIM_OC6_SetConfig+0x9c>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	051b      	lsls	r3, r3, #20
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a13      	ldr	r2, [pc, #76]	; (8009c18 <TIM_OC6_SetConfig+0xa0>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d003      	beq.n	8009bd8 <TIM_OC6_SetConfig+0x60>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a12      	ldr	r2, [pc, #72]	; (8009c1c <TIM_OC6_SetConfig+0xa4>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d109      	bne.n	8009bec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	029b      	lsls	r3, r3, #10
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	621a      	str	r2, [r3, #32]
}
 8009c06:	bf00      	nop
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	feff8fff 	.word	0xfeff8fff
 8009c18:	40010000 	.word	0x40010000
 8009c1c:	40010400 	.word	0x40010400

08009c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	f023 0201 	bic.w	r2, r3, #1
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f023 030a 	bic.w	r3, r3, #10
 8009c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	621a      	str	r2, [r3, #32]
}
 8009c72:	bf00      	nop
 8009c74:	371c      	adds	r7, #28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b087      	sub	sp, #28
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	60b9      	str	r1, [r7, #8]
 8009c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	f023 0210 	bic.w	r2, r3, #16
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	031b      	lsls	r3, r3, #12
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	621a      	str	r2, [r3, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b085      	sub	sp, #20
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	f043 0307 	orr.w	r3, r3, #7
 8009d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	609a      	str	r2, [r3, #8]
}
 8009d08:	bf00      	nop
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	021a      	lsls	r2, r3, #8
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	431a      	orrs	r2, r3
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	609a      	str	r2, [r3, #8]
}
 8009d48:	bf00      	nop
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f003 031f 	and.w	r3, r3, #31
 8009d66:	2201      	movs	r2, #1
 8009d68:	fa02 f303 	lsl.w	r3, r2, r3
 8009d6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6a1a      	ldr	r2, [r3, #32]
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	43db      	mvns	r3, r3
 8009d76:	401a      	ands	r2, r3
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6a1a      	ldr	r2, [r3, #32]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	f003 031f 	and.w	r3, r3, #31
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	fa01 f303 	lsl.w	r3, r1, r3
 8009d8c:	431a      	orrs	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	621a      	str	r2, [r3, #32]
}
 8009d92:	bf00      	nop
 8009d94:	371c      	adds	r7, #28
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
	...

08009da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	d101      	bne.n	8009db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009db4:	2302      	movs	r3, #2
 8009db6:	e06d      	b.n	8009e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	4a30      	ldr	r2, [pc, #192]	; (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d004      	beq.n	8009dec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a2f      	ldr	r2, [pc, #188]	; (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009de8:	4293      	cmp	r3, r2
 8009dea:	d108      	bne.n	8009dfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009df2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a20      	ldr	r2, [pc, #128]	; (8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d022      	beq.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e2a:	d01d      	beq.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a1d      	ldr	r2, [pc, #116]	; (8009ea8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d018      	beq.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a1c      	ldr	r2, [pc, #112]	; (8009eac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d013      	beq.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a1a      	ldr	r2, [pc, #104]	; (8009eb0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d00e      	beq.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a15      	ldr	r2, [pc, #84]	; (8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d009      	beq.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a16      	ldr	r2, [pc, #88]	; (8009eb4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d004      	beq.n	8009e68 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a15      	ldr	r2, [pc, #84]	; (8009eb8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d10c      	bne.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr
 8009ea0:	40010000 	.word	0x40010000
 8009ea4:	40010400 	.word	0x40010400
 8009ea8:	40000400 	.word	0x40000400
 8009eac:	40000800 	.word	0x40000800
 8009eb0:	40000c00 	.word	0x40000c00
 8009eb4:	40014000 	.word	0x40014000
 8009eb8:	40001800 	.word	0x40001800

08009ebc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d101      	bne.n	8009ed8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ed4:	2302      	movs	r3, #2
 8009ed6:	e065      	b.n	8009fa4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	4313      	orrs	r3, r2
 8009eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	691b      	ldr	r3, [r3, #16]
 8009f22:	4313      	orrs	r3, r2
 8009f24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	695b      	ldr	r3, [r3, #20]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	699b      	ldr	r3, [r3, #24]
 8009f4c:	041b      	lsls	r3, r3, #16
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a16      	ldr	r2, [pc, #88]	; (8009fb0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d004      	beq.n	8009f66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a14      	ldr	r2, [pc, #80]	; (8009fb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d115      	bne.n	8009f92 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f70:	051b      	lsls	r3, r3, #20
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3714      	adds	r7, #20
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr
 8009fb0:	40010000 	.word	0x40010000
 8009fb4:	40010400 	.word	0x40010400

08009fb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009fd4:	bf00      	nop
 8009fd6:	370c      	adds	r7, #12
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr

08009fe0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fe8:	bf00      	nop
 8009fea:	370c      	adds	r7, #12
 8009fec:	46bd      	mov	sp, r7
 8009fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff2:	4770      	bx	lr

08009ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b082      	sub	sp, #8
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d101      	bne.n	800a006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e040      	b.n	800a088 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d106      	bne.n	800a01c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7fa f8b0 	bl	800417c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2224      	movs	r2, #36	; 0x24
 800a020:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f022 0201 	bic.w	r2, r2, #1
 800a030:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 f8b0 	bl	800a198 <UART_SetConfig>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d101      	bne.n	800a042 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a03e:	2301      	movs	r3, #1
 800a040:	e022      	b.n	800a088 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	d002      	beq.n	800a050 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fb08 	bl	800a660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685a      	ldr	r2, [r3, #4]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a05e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689a      	ldr	r2, [r3, #8]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a06e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f042 0201 	orr.w	r2, r2, #1
 800a07e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fb8f 	bl	800a7a4 <UART_CheckIdleState>
 800a086:	4603      	mov	r3, r0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b08a      	sub	sp, #40	; 0x28
 800a094:	af02      	add	r7, sp, #8
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	603b      	str	r3, [r7, #0]
 800a09c:	4613      	mov	r3, r2
 800a09e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0a4:	2b20      	cmp	r3, #32
 800a0a6:	d171      	bne.n	800a18c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <HAL_UART_Transmit+0x24>
 800a0ae:	88fb      	ldrh	r3, [r7, #6]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d101      	bne.n	800a0b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e06a      	b.n	800a18e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2221      	movs	r2, #33	; 0x21
 800a0c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a0c6:	f7fa fee1 	bl	8004e8c <HAL_GetTick>
 800a0ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	88fa      	ldrh	r2, [r7, #6]
 800a0d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	88fa      	ldrh	r2, [r7, #6]
 800a0d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e4:	d108      	bne.n	800a0f8 <HAL_UART_Transmit+0x68>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d104      	bne.n	800a0f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	61bb      	str	r3, [r7, #24]
 800a0f6:	e003      	b.n	800a100 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a100:	e02c      	b.n	800a15c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2200      	movs	r2, #0
 800a10a:	2180      	movs	r1, #128	; 0x80
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 fb96 	bl	800a83e <UART_WaitOnFlagUntilTimeout>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d001      	beq.n	800a11c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e038      	b.n	800a18e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10b      	bne.n	800a13a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	881b      	ldrh	r3, [r3, #0]
 800a126:	461a      	mov	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a130:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	3302      	adds	r3, #2
 800a136:	61bb      	str	r3, [r7, #24]
 800a138:	e007      	b.n	800a14a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	781a      	ldrb	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	3301      	adds	r3, #1
 800a148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a150:	b29b      	uxth	r3, r3
 800a152:	3b01      	subs	r3, #1
 800a154:	b29a      	uxth	r2, r3
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a162:	b29b      	uxth	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1cc      	bne.n	800a102 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	2200      	movs	r2, #0
 800a170:	2140      	movs	r1, #64	; 0x40
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f000 fb63 	bl	800a83e <UART_WaitOnFlagUntilTimeout>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e005      	b.n	800a18e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2220      	movs	r2, #32
 800a186:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	e000      	b.n	800a18e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a18c:	2302      	movs	r3, #2
  }
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3720      	adds	r7, #32
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b088      	sub	sp, #32
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	431a      	orrs	r2, r3
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	4ba6      	ldr	r3, [pc, #664]	; (800a45c <UART_SetConfig+0x2c4>)
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	6812      	ldr	r2, [r2, #0]
 800a1ca:	6979      	ldr	r1, [r7, #20]
 800a1cc:	430b      	orrs	r3, r1
 800a1ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	68da      	ldr	r2, [r3, #12]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	430a      	orrs	r2, r1
 800a208:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a94      	ldr	r2, [pc, #592]	; (800a460 <UART_SetConfig+0x2c8>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d120      	bne.n	800a256 <UART_SetConfig+0xbe>
 800a214:	4b93      	ldr	r3, [pc, #588]	; (800a464 <UART_SetConfig+0x2cc>)
 800a216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a21a:	f003 0303 	and.w	r3, r3, #3
 800a21e:	2b03      	cmp	r3, #3
 800a220:	d816      	bhi.n	800a250 <UART_SetConfig+0xb8>
 800a222:	a201      	add	r2, pc, #4	; (adr r2, 800a228 <UART_SetConfig+0x90>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a239 	.word	0x0800a239
 800a22c:	0800a245 	.word	0x0800a245
 800a230:	0800a23f 	.word	0x0800a23f
 800a234:	0800a24b 	.word	0x0800a24b
 800a238:	2301      	movs	r3, #1
 800a23a:	77fb      	strb	r3, [r7, #31]
 800a23c:	e150      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a23e:	2302      	movs	r3, #2
 800a240:	77fb      	strb	r3, [r7, #31]
 800a242:	e14d      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a244:	2304      	movs	r3, #4
 800a246:	77fb      	strb	r3, [r7, #31]
 800a248:	e14a      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a24a:	2308      	movs	r3, #8
 800a24c:	77fb      	strb	r3, [r7, #31]
 800a24e:	e147      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a250:	2310      	movs	r3, #16
 800a252:	77fb      	strb	r3, [r7, #31]
 800a254:	e144      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a83      	ldr	r2, [pc, #524]	; (800a468 <UART_SetConfig+0x2d0>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d132      	bne.n	800a2c6 <UART_SetConfig+0x12e>
 800a260:	4b80      	ldr	r3, [pc, #512]	; (800a464 <UART_SetConfig+0x2cc>)
 800a262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a266:	f003 030c 	and.w	r3, r3, #12
 800a26a:	2b0c      	cmp	r3, #12
 800a26c:	d828      	bhi.n	800a2c0 <UART_SetConfig+0x128>
 800a26e:	a201      	add	r2, pc, #4	; (adr r2, 800a274 <UART_SetConfig+0xdc>)
 800a270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a274:	0800a2a9 	.word	0x0800a2a9
 800a278:	0800a2c1 	.word	0x0800a2c1
 800a27c:	0800a2c1 	.word	0x0800a2c1
 800a280:	0800a2c1 	.word	0x0800a2c1
 800a284:	0800a2b5 	.word	0x0800a2b5
 800a288:	0800a2c1 	.word	0x0800a2c1
 800a28c:	0800a2c1 	.word	0x0800a2c1
 800a290:	0800a2c1 	.word	0x0800a2c1
 800a294:	0800a2af 	.word	0x0800a2af
 800a298:	0800a2c1 	.word	0x0800a2c1
 800a29c:	0800a2c1 	.word	0x0800a2c1
 800a2a0:	0800a2c1 	.word	0x0800a2c1
 800a2a4:	0800a2bb 	.word	0x0800a2bb
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	77fb      	strb	r3, [r7, #31]
 800a2ac:	e118      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	77fb      	strb	r3, [r7, #31]
 800a2b2:	e115      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a2b4:	2304      	movs	r3, #4
 800a2b6:	77fb      	strb	r3, [r7, #31]
 800a2b8:	e112      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a2ba:	2308      	movs	r3, #8
 800a2bc:	77fb      	strb	r3, [r7, #31]
 800a2be:	e10f      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a2c0:	2310      	movs	r3, #16
 800a2c2:	77fb      	strb	r3, [r7, #31]
 800a2c4:	e10c      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a68      	ldr	r2, [pc, #416]	; (800a46c <UART_SetConfig+0x2d4>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d120      	bne.n	800a312 <UART_SetConfig+0x17a>
 800a2d0:	4b64      	ldr	r3, [pc, #400]	; (800a464 <UART_SetConfig+0x2cc>)
 800a2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a2da:	2b30      	cmp	r3, #48	; 0x30
 800a2dc:	d013      	beq.n	800a306 <UART_SetConfig+0x16e>
 800a2de:	2b30      	cmp	r3, #48	; 0x30
 800a2e0:	d814      	bhi.n	800a30c <UART_SetConfig+0x174>
 800a2e2:	2b20      	cmp	r3, #32
 800a2e4:	d009      	beq.n	800a2fa <UART_SetConfig+0x162>
 800a2e6:	2b20      	cmp	r3, #32
 800a2e8:	d810      	bhi.n	800a30c <UART_SetConfig+0x174>
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <UART_SetConfig+0x15c>
 800a2ee:	2b10      	cmp	r3, #16
 800a2f0:	d006      	beq.n	800a300 <UART_SetConfig+0x168>
 800a2f2:	e00b      	b.n	800a30c <UART_SetConfig+0x174>
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	77fb      	strb	r3, [r7, #31]
 800a2f8:	e0f2      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	77fb      	strb	r3, [r7, #31]
 800a2fe:	e0ef      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a300:	2304      	movs	r3, #4
 800a302:	77fb      	strb	r3, [r7, #31]
 800a304:	e0ec      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a306:	2308      	movs	r3, #8
 800a308:	77fb      	strb	r3, [r7, #31]
 800a30a:	e0e9      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a30c:	2310      	movs	r3, #16
 800a30e:	77fb      	strb	r3, [r7, #31]
 800a310:	e0e6      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a56      	ldr	r2, [pc, #344]	; (800a470 <UART_SetConfig+0x2d8>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d120      	bne.n	800a35e <UART_SetConfig+0x1c6>
 800a31c:	4b51      	ldr	r3, [pc, #324]	; (800a464 <UART_SetConfig+0x2cc>)
 800a31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a322:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a326:	2bc0      	cmp	r3, #192	; 0xc0
 800a328:	d013      	beq.n	800a352 <UART_SetConfig+0x1ba>
 800a32a:	2bc0      	cmp	r3, #192	; 0xc0
 800a32c:	d814      	bhi.n	800a358 <UART_SetConfig+0x1c0>
 800a32e:	2b80      	cmp	r3, #128	; 0x80
 800a330:	d009      	beq.n	800a346 <UART_SetConfig+0x1ae>
 800a332:	2b80      	cmp	r3, #128	; 0x80
 800a334:	d810      	bhi.n	800a358 <UART_SetConfig+0x1c0>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <UART_SetConfig+0x1a8>
 800a33a:	2b40      	cmp	r3, #64	; 0x40
 800a33c:	d006      	beq.n	800a34c <UART_SetConfig+0x1b4>
 800a33e:	e00b      	b.n	800a358 <UART_SetConfig+0x1c0>
 800a340:	2300      	movs	r3, #0
 800a342:	77fb      	strb	r3, [r7, #31]
 800a344:	e0cc      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a346:	2302      	movs	r3, #2
 800a348:	77fb      	strb	r3, [r7, #31]
 800a34a:	e0c9      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a34c:	2304      	movs	r3, #4
 800a34e:	77fb      	strb	r3, [r7, #31]
 800a350:	e0c6      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a352:	2308      	movs	r3, #8
 800a354:	77fb      	strb	r3, [r7, #31]
 800a356:	e0c3      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a358:	2310      	movs	r3, #16
 800a35a:	77fb      	strb	r3, [r7, #31]
 800a35c:	e0c0      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a44      	ldr	r2, [pc, #272]	; (800a474 <UART_SetConfig+0x2dc>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d125      	bne.n	800a3b4 <UART_SetConfig+0x21c>
 800a368:	4b3e      	ldr	r3, [pc, #248]	; (800a464 <UART_SetConfig+0x2cc>)
 800a36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a36e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a372:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a376:	d017      	beq.n	800a3a8 <UART_SetConfig+0x210>
 800a378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a37c:	d817      	bhi.n	800a3ae <UART_SetConfig+0x216>
 800a37e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a382:	d00b      	beq.n	800a39c <UART_SetConfig+0x204>
 800a384:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a388:	d811      	bhi.n	800a3ae <UART_SetConfig+0x216>
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d003      	beq.n	800a396 <UART_SetConfig+0x1fe>
 800a38e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a392:	d006      	beq.n	800a3a2 <UART_SetConfig+0x20a>
 800a394:	e00b      	b.n	800a3ae <UART_SetConfig+0x216>
 800a396:	2300      	movs	r3, #0
 800a398:	77fb      	strb	r3, [r7, #31]
 800a39a:	e0a1      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a39c:	2302      	movs	r3, #2
 800a39e:	77fb      	strb	r3, [r7, #31]
 800a3a0:	e09e      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a3a2:	2304      	movs	r3, #4
 800a3a4:	77fb      	strb	r3, [r7, #31]
 800a3a6:	e09b      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a3a8:	2308      	movs	r3, #8
 800a3aa:	77fb      	strb	r3, [r7, #31]
 800a3ac:	e098      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a3ae:	2310      	movs	r3, #16
 800a3b0:	77fb      	strb	r3, [r7, #31]
 800a3b2:	e095      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a2f      	ldr	r2, [pc, #188]	; (800a478 <UART_SetConfig+0x2e0>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d125      	bne.n	800a40a <UART_SetConfig+0x272>
 800a3be:	4b29      	ldr	r3, [pc, #164]	; (800a464 <UART_SetConfig+0x2cc>)
 800a3c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a3c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3cc:	d017      	beq.n	800a3fe <UART_SetConfig+0x266>
 800a3ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3d2:	d817      	bhi.n	800a404 <UART_SetConfig+0x26c>
 800a3d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3d8:	d00b      	beq.n	800a3f2 <UART_SetConfig+0x25a>
 800a3da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3de:	d811      	bhi.n	800a404 <UART_SetConfig+0x26c>
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d003      	beq.n	800a3ec <UART_SetConfig+0x254>
 800a3e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3e8:	d006      	beq.n	800a3f8 <UART_SetConfig+0x260>
 800a3ea:	e00b      	b.n	800a404 <UART_SetConfig+0x26c>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	77fb      	strb	r3, [r7, #31]
 800a3f0:	e076      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	77fb      	strb	r3, [r7, #31]
 800a3f6:	e073      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a3f8:	2304      	movs	r3, #4
 800a3fa:	77fb      	strb	r3, [r7, #31]
 800a3fc:	e070      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a3fe:	2308      	movs	r3, #8
 800a400:	77fb      	strb	r3, [r7, #31]
 800a402:	e06d      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a404:	2310      	movs	r3, #16
 800a406:	77fb      	strb	r3, [r7, #31]
 800a408:	e06a      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a1b      	ldr	r2, [pc, #108]	; (800a47c <UART_SetConfig+0x2e4>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d138      	bne.n	800a486 <UART_SetConfig+0x2ee>
 800a414:	4b13      	ldr	r3, [pc, #76]	; (800a464 <UART_SetConfig+0x2cc>)
 800a416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a41e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a422:	d017      	beq.n	800a454 <UART_SetConfig+0x2bc>
 800a424:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a428:	d82a      	bhi.n	800a480 <UART_SetConfig+0x2e8>
 800a42a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a42e:	d00b      	beq.n	800a448 <UART_SetConfig+0x2b0>
 800a430:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a434:	d824      	bhi.n	800a480 <UART_SetConfig+0x2e8>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <UART_SetConfig+0x2aa>
 800a43a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a43e:	d006      	beq.n	800a44e <UART_SetConfig+0x2b6>
 800a440:	e01e      	b.n	800a480 <UART_SetConfig+0x2e8>
 800a442:	2300      	movs	r3, #0
 800a444:	77fb      	strb	r3, [r7, #31]
 800a446:	e04b      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a448:	2302      	movs	r3, #2
 800a44a:	77fb      	strb	r3, [r7, #31]
 800a44c:	e048      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a44e:	2304      	movs	r3, #4
 800a450:	77fb      	strb	r3, [r7, #31]
 800a452:	e045      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a454:	2308      	movs	r3, #8
 800a456:	77fb      	strb	r3, [r7, #31]
 800a458:	e042      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a45a:	bf00      	nop
 800a45c:	efff69f3 	.word	0xefff69f3
 800a460:	40011000 	.word	0x40011000
 800a464:	40023800 	.word	0x40023800
 800a468:	40004400 	.word	0x40004400
 800a46c:	40004800 	.word	0x40004800
 800a470:	40004c00 	.word	0x40004c00
 800a474:	40005000 	.word	0x40005000
 800a478:	40011400 	.word	0x40011400
 800a47c:	40007800 	.word	0x40007800
 800a480:	2310      	movs	r3, #16
 800a482:	77fb      	strb	r3, [r7, #31]
 800a484:	e02c      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a72      	ldr	r2, [pc, #456]	; (800a654 <UART_SetConfig+0x4bc>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d125      	bne.n	800a4dc <UART_SetConfig+0x344>
 800a490:	4b71      	ldr	r3, [pc, #452]	; (800a658 <UART_SetConfig+0x4c0>)
 800a492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a496:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a49a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a49e:	d017      	beq.n	800a4d0 <UART_SetConfig+0x338>
 800a4a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a4a4:	d817      	bhi.n	800a4d6 <UART_SetConfig+0x33e>
 800a4a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4aa:	d00b      	beq.n	800a4c4 <UART_SetConfig+0x32c>
 800a4ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4b0:	d811      	bhi.n	800a4d6 <UART_SetConfig+0x33e>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d003      	beq.n	800a4be <UART_SetConfig+0x326>
 800a4b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4ba:	d006      	beq.n	800a4ca <UART_SetConfig+0x332>
 800a4bc:	e00b      	b.n	800a4d6 <UART_SetConfig+0x33e>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	77fb      	strb	r3, [r7, #31]
 800a4c2:	e00d      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a4c4:	2302      	movs	r3, #2
 800a4c6:	77fb      	strb	r3, [r7, #31]
 800a4c8:	e00a      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a4ca:	2304      	movs	r3, #4
 800a4cc:	77fb      	strb	r3, [r7, #31]
 800a4ce:	e007      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a4d0:	2308      	movs	r3, #8
 800a4d2:	77fb      	strb	r3, [r7, #31]
 800a4d4:	e004      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a4d6:	2310      	movs	r3, #16
 800a4d8:	77fb      	strb	r3, [r7, #31]
 800a4da:	e001      	b.n	800a4e0 <UART_SetConfig+0x348>
 800a4dc:	2310      	movs	r3, #16
 800a4de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4e8:	d15b      	bne.n	800a5a2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a4ea:	7ffb      	ldrb	r3, [r7, #31]
 800a4ec:	2b08      	cmp	r3, #8
 800a4ee:	d828      	bhi.n	800a542 <UART_SetConfig+0x3aa>
 800a4f0:	a201      	add	r2, pc, #4	; (adr r2, 800a4f8 <UART_SetConfig+0x360>)
 800a4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f6:	bf00      	nop
 800a4f8:	0800a51d 	.word	0x0800a51d
 800a4fc:	0800a525 	.word	0x0800a525
 800a500:	0800a52d 	.word	0x0800a52d
 800a504:	0800a543 	.word	0x0800a543
 800a508:	0800a533 	.word	0x0800a533
 800a50c:	0800a543 	.word	0x0800a543
 800a510:	0800a543 	.word	0x0800a543
 800a514:	0800a543 	.word	0x0800a543
 800a518:	0800a53b 	.word	0x0800a53b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a51c:	f7fd fa2a 	bl	8007974 <HAL_RCC_GetPCLK1Freq>
 800a520:	61b8      	str	r0, [r7, #24]
        break;
 800a522:	e013      	b.n	800a54c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a524:	f7fd fa3a 	bl	800799c <HAL_RCC_GetPCLK2Freq>
 800a528:	61b8      	str	r0, [r7, #24]
        break;
 800a52a:	e00f      	b.n	800a54c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a52c:	4b4b      	ldr	r3, [pc, #300]	; (800a65c <UART_SetConfig+0x4c4>)
 800a52e:	61bb      	str	r3, [r7, #24]
        break;
 800a530:	e00c      	b.n	800a54c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a532:	f7fd f90d 	bl	8007750 <HAL_RCC_GetSysClockFreq>
 800a536:	61b8      	str	r0, [r7, #24]
        break;
 800a538:	e008      	b.n	800a54c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a53a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a53e:	61bb      	str	r3, [r7, #24]
        break;
 800a540:	e004      	b.n	800a54c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	77bb      	strb	r3, [r7, #30]
        break;
 800a54a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d074      	beq.n	800a63c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	005a      	lsls	r2, r3, #1
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	085b      	lsrs	r3, r3, #1
 800a55c:	441a      	add	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	fbb2 f3f3 	udiv	r3, r2, r3
 800a566:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	2b0f      	cmp	r3, #15
 800a56c:	d916      	bls.n	800a59c <UART_SetConfig+0x404>
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a574:	d212      	bcs.n	800a59c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	f023 030f 	bic.w	r3, r3, #15
 800a57e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	085b      	lsrs	r3, r3, #1
 800a584:	b29b      	uxth	r3, r3
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	89fb      	ldrh	r3, [r7, #14]
 800a58e:	4313      	orrs	r3, r2
 800a590:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	89fa      	ldrh	r2, [r7, #14]
 800a598:	60da      	str	r2, [r3, #12]
 800a59a:	e04f      	b.n	800a63c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a59c:	2301      	movs	r3, #1
 800a59e:	77bb      	strb	r3, [r7, #30]
 800a5a0:	e04c      	b.n	800a63c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5a2:	7ffb      	ldrb	r3, [r7, #31]
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d828      	bhi.n	800a5fa <UART_SetConfig+0x462>
 800a5a8:	a201      	add	r2, pc, #4	; (adr r2, 800a5b0 <UART_SetConfig+0x418>)
 800a5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ae:	bf00      	nop
 800a5b0:	0800a5d5 	.word	0x0800a5d5
 800a5b4:	0800a5dd 	.word	0x0800a5dd
 800a5b8:	0800a5e5 	.word	0x0800a5e5
 800a5bc:	0800a5fb 	.word	0x0800a5fb
 800a5c0:	0800a5eb 	.word	0x0800a5eb
 800a5c4:	0800a5fb 	.word	0x0800a5fb
 800a5c8:	0800a5fb 	.word	0x0800a5fb
 800a5cc:	0800a5fb 	.word	0x0800a5fb
 800a5d0:	0800a5f3 	.word	0x0800a5f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5d4:	f7fd f9ce 	bl	8007974 <HAL_RCC_GetPCLK1Freq>
 800a5d8:	61b8      	str	r0, [r7, #24]
        break;
 800a5da:	e013      	b.n	800a604 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5dc:	f7fd f9de 	bl	800799c <HAL_RCC_GetPCLK2Freq>
 800a5e0:	61b8      	str	r0, [r7, #24]
        break;
 800a5e2:	e00f      	b.n	800a604 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5e4:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <UART_SetConfig+0x4c4>)
 800a5e6:	61bb      	str	r3, [r7, #24]
        break;
 800a5e8:	e00c      	b.n	800a604 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5ea:	f7fd f8b1 	bl	8007750 <HAL_RCC_GetSysClockFreq>
 800a5ee:	61b8      	str	r0, [r7, #24]
        break;
 800a5f0:	e008      	b.n	800a604 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5f6:	61bb      	str	r3, [r7, #24]
        break;
 800a5f8:	e004      	b.n	800a604 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	77bb      	strb	r3, [r7, #30]
        break;
 800a602:	bf00      	nop
    }

    if (pclk != 0U)
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d018      	beq.n	800a63c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	085a      	lsrs	r2, r3, #1
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	441a      	add	r2, r3
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	fbb2 f3f3 	udiv	r3, r2, r3
 800a61c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	2b0f      	cmp	r3, #15
 800a622:	d909      	bls.n	800a638 <UART_SetConfig+0x4a0>
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a62a:	d205      	bcs.n	800a638 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	b29a      	uxth	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	60da      	str	r2, [r3, #12]
 800a636:	e001      	b.n	800a63c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a648:	7fbb      	ldrb	r3, [r7, #30]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3720      	adds	r7, #32
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	40007c00 	.word	0x40007c00
 800a658:	40023800 	.word	0x40023800
 800a65c:	00f42400 	.word	0x00f42400

0800a660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00a      	beq.n	800a68a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	f003 0302 	and.w	r3, r3, #2
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d00a      	beq.n	800a6ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	430a      	orrs	r2, r1
 800a6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d2:	f003 0308 	and.w	r3, r3, #8
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00a      	beq.n	800a6f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	430a      	orrs	r2, r1
 800a6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	f003 0310 	and.w	r3, r3, #16
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00a      	beq.n	800a712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a716:	f003 0320 	and.w	r3, r3, #32
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00a      	beq.n	800a734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	430a      	orrs	r2, r1
 800a732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d01a      	beq.n	800a776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	430a      	orrs	r2, r1
 800a754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a75e:	d10a      	bne.n	800a776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	430a      	orrs	r2, r1
 800a774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00a      	beq.n	800a798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	430a      	orrs	r2, r1
 800a796:	605a      	str	r2, [r3, #4]
  }
}
 800a798:	bf00      	nop
 800a79a:	370c      	adds	r7, #12
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr

0800a7a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b086      	sub	sp, #24
 800a7a8:	af02      	add	r7, sp, #8
 800a7aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7b4:	f7fa fb6a 	bl	8004e8c <HAL_GetTick>
 800a7b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0308 	and.w	r3, r3, #8
 800a7c4:	2b08      	cmp	r3, #8
 800a7c6:	d10e      	bne.n	800a7e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 f831 	bl	800a83e <UART_WaitOnFlagUntilTimeout>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e027      	b.n	800a836 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b04      	cmp	r3, #4
 800a7f2:	d10e      	bne.n	800a812 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f81b 	bl	800a83e <UART_WaitOnFlagUntilTimeout>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a80e:	2303      	movs	r3, #3
 800a810:	e011      	b.n	800a836 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2220      	movs	r2, #32
 800a816:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2220      	movs	r2, #32
 800a81c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3710      	adds	r7, #16
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b09c      	sub	sp, #112	; 0x70
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	60b9      	str	r1, [r7, #8]
 800a848:	603b      	str	r3, [r7, #0]
 800a84a:	4613      	mov	r3, r2
 800a84c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a84e:	e0a7      	b.n	800a9a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a852:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a856:	f000 80a3 	beq.w	800a9a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a85a:	f7fa fb17 	bl	8004e8c <HAL_GetTick>
 800a85e:	4602      	mov	r2, r0
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a866:	429a      	cmp	r2, r3
 800a868:	d302      	bcc.n	800a870 <UART_WaitOnFlagUntilTimeout+0x32>
 800a86a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d13f      	bne.n	800a8f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a878:	e853 3f00 	ldrex	r3, [r3]
 800a87c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a880:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a884:	667b      	str	r3, [r7, #100]	; 0x64
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	461a      	mov	r2, r3
 800a88c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a88e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a890:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a892:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a894:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a896:	e841 2300 	strex	r3, r2, [r1]
 800a89a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a89c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1e6      	bne.n	800a870 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3308      	adds	r3, #8
 800a8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b4:	f023 0301 	bic.w	r3, r3, #1
 800a8b8:	663b      	str	r3, [r7, #96]	; 0x60
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	3308      	adds	r3, #8
 800a8c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a8c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a8c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8ca:	e841 2300 	strex	r3, r2, [r1]
 800a8ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a8d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1e5      	bne.n	800a8a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2220      	movs	r2, #32
 800a8da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2220      	movs	r2, #32
 800a8e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a8ec:	2303      	movs	r3, #3
 800a8ee:	e068      	b.n	800a9c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0304 	and.w	r3, r3, #4
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d050      	beq.n	800a9a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	69db      	ldr	r3, [r3, #28]
 800a904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a90c:	d148      	bne.n	800a9a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a916:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a92c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a936:	637b      	str	r3, [r7, #52]	; 0x34
 800a938:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a93c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e6      	bne.n	800a918 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	3308      	adds	r3, #8
 800a950:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	e853 3f00 	ldrex	r3, [r3]
 800a958:	613b      	str	r3, [r7, #16]
   return(result);
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	f023 0301 	bic.w	r3, r3, #1
 800a960:	66bb      	str	r3, [r7, #104]	; 0x68
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3308      	adds	r3, #8
 800a968:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a96a:	623a      	str	r2, [r7, #32]
 800a96c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96e:	69f9      	ldr	r1, [r7, #28]
 800a970:	6a3a      	ldr	r2, [r7, #32]
 800a972:	e841 2300 	strex	r3, r2, [r1]
 800a976:	61bb      	str	r3, [r7, #24]
   return(result);
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1e5      	bne.n	800a94a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2220      	movs	r2, #32
 800a982:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2220      	movs	r2, #32
 800a988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2220      	movs	r2, #32
 800a990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a99c:	2303      	movs	r3, #3
 800a99e:	e010      	b.n	800a9c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	69da      	ldr	r2, [r3, #28]
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	4013      	ands	r3, r2
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	bf0c      	ite	eq
 800a9b0:	2301      	moveq	r3, #1
 800a9b2:	2300      	movne	r3, #0
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	79fb      	ldrb	r3, [r7, #7]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	f43f af48 	beq.w	800a850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3770      	adds	r7, #112	; 0x70
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <__cvt>:
 800a9ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9cc:	ed2d 8b02 	vpush	{d8}
 800a9d0:	eeb0 8b40 	vmov.f64	d8, d0
 800a9d4:	b085      	sub	sp, #20
 800a9d6:	4617      	mov	r7, r2
 800a9d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a9da:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a9dc:	ee18 2a90 	vmov	r2, s17
 800a9e0:	f025 0520 	bic.w	r5, r5, #32
 800a9e4:	2a00      	cmp	r2, #0
 800a9e6:	bfb6      	itet	lt
 800a9e8:	222d      	movlt	r2, #45	; 0x2d
 800a9ea:	2200      	movge	r2, #0
 800a9ec:	eeb1 8b40 	vneglt.f64	d8, d0
 800a9f0:	2d46      	cmp	r5, #70	; 0x46
 800a9f2:	460c      	mov	r4, r1
 800a9f4:	701a      	strb	r2, [r3, #0]
 800a9f6:	d004      	beq.n	800aa02 <__cvt+0x38>
 800a9f8:	2d45      	cmp	r5, #69	; 0x45
 800a9fa:	d100      	bne.n	800a9fe <__cvt+0x34>
 800a9fc:	3401      	adds	r4, #1
 800a9fe:	2102      	movs	r1, #2
 800aa00:	e000      	b.n	800aa04 <__cvt+0x3a>
 800aa02:	2103      	movs	r1, #3
 800aa04:	ab03      	add	r3, sp, #12
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	ab02      	add	r3, sp, #8
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	4622      	mov	r2, r4
 800aa0e:	4633      	mov	r3, r6
 800aa10:	eeb0 0b48 	vmov.f64	d0, d8
 800aa14:	f000 fe78 	bl	800b708 <_dtoa_r>
 800aa18:	2d47      	cmp	r5, #71	; 0x47
 800aa1a:	d101      	bne.n	800aa20 <__cvt+0x56>
 800aa1c:	07fb      	lsls	r3, r7, #31
 800aa1e:	d51a      	bpl.n	800aa56 <__cvt+0x8c>
 800aa20:	2d46      	cmp	r5, #70	; 0x46
 800aa22:	eb00 0204 	add.w	r2, r0, r4
 800aa26:	d10c      	bne.n	800aa42 <__cvt+0x78>
 800aa28:	7803      	ldrb	r3, [r0, #0]
 800aa2a:	2b30      	cmp	r3, #48	; 0x30
 800aa2c:	d107      	bne.n	800aa3e <__cvt+0x74>
 800aa2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa36:	bf1c      	itt	ne
 800aa38:	f1c4 0401 	rsbne	r4, r4, #1
 800aa3c:	6034      	strne	r4, [r6, #0]
 800aa3e:	6833      	ldr	r3, [r6, #0]
 800aa40:	441a      	add	r2, r3
 800aa42:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa4a:	bf08      	it	eq
 800aa4c:	9203      	streq	r2, [sp, #12]
 800aa4e:	2130      	movs	r1, #48	; 0x30
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d307      	bcc.n	800aa66 <__cvt+0x9c>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa5a:	1a1b      	subs	r3, r3, r0
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	b005      	add	sp, #20
 800aa60:	ecbd 8b02 	vpop	{d8}
 800aa64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa66:	1c5c      	adds	r4, r3, #1
 800aa68:	9403      	str	r4, [sp, #12]
 800aa6a:	7019      	strb	r1, [r3, #0]
 800aa6c:	e7f0      	b.n	800aa50 <__cvt+0x86>

0800aa6e <__exponent>:
 800aa6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa70:	4603      	mov	r3, r0
 800aa72:	2900      	cmp	r1, #0
 800aa74:	bfb8      	it	lt
 800aa76:	4249      	neglt	r1, r1
 800aa78:	f803 2b02 	strb.w	r2, [r3], #2
 800aa7c:	bfb4      	ite	lt
 800aa7e:	222d      	movlt	r2, #45	; 0x2d
 800aa80:	222b      	movge	r2, #43	; 0x2b
 800aa82:	2909      	cmp	r1, #9
 800aa84:	7042      	strb	r2, [r0, #1]
 800aa86:	dd2a      	ble.n	800aade <__exponent+0x70>
 800aa88:	f10d 0207 	add.w	r2, sp, #7
 800aa8c:	4617      	mov	r7, r2
 800aa8e:	260a      	movs	r6, #10
 800aa90:	4694      	mov	ip, r2
 800aa92:	fb91 f5f6 	sdiv	r5, r1, r6
 800aa96:	fb06 1415 	mls	r4, r6, r5, r1
 800aa9a:	3430      	adds	r4, #48	; 0x30
 800aa9c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800aaa0:	460c      	mov	r4, r1
 800aaa2:	2c63      	cmp	r4, #99	; 0x63
 800aaa4:	f102 32ff 	add.w	r2, r2, #4294967295
 800aaa8:	4629      	mov	r1, r5
 800aaaa:	dcf1      	bgt.n	800aa90 <__exponent+0x22>
 800aaac:	3130      	adds	r1, #48	; 0x30
 800aaae:	f1ac 0402 	sub.w	r4, ip, #2
 800aab2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800aab6:	1c41      	adds	r1, r0, #1
 800aab8:	4622      	mov	r2, r4
 800aaba:	42ba      	cmp	r2, r7
 800aabc:	d30a      	bcc.n	800aad4 <__exponent+0x66>
 800aabe:	f10d 0209 	add.w	r2, sp, #9
 800aac2:	eba2 020c 	sub.w	r2, r2, ip
 800aac6:	42bc      	cmp	r4, r7
 800aac8:	bf88      	it	hi
 800aaca:	2200      	movhi	r2, #0
 800aacc:	4413      	add	r3, r2
 800aace:	1a18      	subs	r0, r3, r0
 800aad0:	b003      	add	sp, #12
 800aad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aad4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aad8:	f801 5f01 	strb.w	r5, [r1, #1]!
 800aadc:	e7ed      	b.n	800aaba <__exponent+0x4c>
 800aade:	2330      	movs	r3, #48	; 0x30
 800aae0:	3130      	adds	r1, #48	; 0x30
 800aae2:	7083      	strb	r3, [r0, #2]
 800aae4:	70c1      	strb	r1, [r0, #3]
 800aae6:	1d03      	adds	r3, r0, #4
 800aae8:	e7f1      	b.n	800aace <__exponent+0x60>
 800aaea:	0000      	movs	r0, r0
 800aaec:	0000      	movs	r0, r0
	...

0800aaf0 <_printf_float>:
 800aaf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaf4:	b08b      	sub	sp, #44	; 0x2c
 800aaf6:	460c      	mov	r4, r1
 800aaf8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800aafc:	4616      	mov	r6, r2
 800aafe:	461f      	mov	r7, r3
 800ab00:	4605      	mov	r5, r0
 800ab02:	f000 fd01 	bl	800b508 <_localeconv_r>
 800ab06:	f8d0 b000 	ldr.w	fp, [r0]
 800ab0a:	4658      	mov	r0, fp
 800ab0c:	f7f5 fbe8 	bl	80002e0 <strlen>
 800ab10:	2300      	movs	r3, #0
 800ab12:	9308      	str	r3, [sp, #32]
 800ab14:	f8d8 3000 	ldr.w	r3, [r8]
 800ab18:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ab1c:	6822      	ldr	r2, [r4, #0]
 800ab1e:	3307      	adds	r3, #7
 800ab20:	f023 0307 	bic.w	r3, r3, #7
 800ab24:	f103 0108 	add.w	r1, r3, #8
 800ab28:	f8c8 1000 	str.w	r1, [r8]
 800ab2c:	ed93 0b00 	vldr	d0, [r3]
 800ab30:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800ad90 <_printf_float+0x2a0>
 800ab34:	eeb0 7bc0 	vabs.f64	d7, d0
 800ab38:	eeb4 7b46 	vcmp.f64	d7, d6
 800ab3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab40:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800ab44:	4682      	mov	sl, r0
 800ab46:	dd24      	ble.n	800ab92 <_printf_float+0xa2>
 800ab48:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ab4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab50:	d502      	bpl.n	800ab58 <_printf_float+0x68>
 800ab52:	232d      	movs	r3, #45	; 0x2d
 800ab54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab58:	498f      	ldr	r1, [pc, #572]	; (800ad98 <_printf_float+0x2a8>)
 800ab5a:	4b90      	ldr	r3, [pc, #576]	; (800ad9c <_printf_float+0x2ac>)
 800ab5c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ab60:	bf94      	ite	ls
 800ab62:	4688      	movls	r8, r1
 800ab64:	4698      	movhi	r8, r3
 800ab66:	2303      	movs	r3, #3
 800ab68:	6123      	str	r3, [r4, #16]
 800ab6a:	f022 0204 	bic.w	r2, r2, #4
 800ab6e:	2300      	movs	r3, #0
 800ab70:	6022      	str	r2, [r4, #0]
 800ab72:	9304      	str	r3, [sp, #16]
 800ab74:	9700      	str	r7, [sp, #0]
 800ab76:	4633      	mov	r3, r6
 800ab78:	aa09      	add	r2, sp, #36	; 0x24
 800ab7a:	4621      	mov	r1, r4
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	f000 f9d1 	bl	800af24 <_printf_common>
 800ab82:	3001      	adds	r0, #1
 800ab84:	f040 808a 	bne.w	800ac9c <_printf_float+0x1ac>
 800ab88:	f04f 30ff 	mov.w	r0, #4294967295
 800ab8c:	b00b      	add	sp, #44	; 0x2c
 800ab8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab92:	eeb4 0b40 	vcmp.f64	d0, d0
 800ab96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9a:	d709      	bvc.n	800abb0 <_printf_float+0xc0>
 800ab9c:	ee10 3a90 	vmov	r3, s1
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfbc      	itt	lt
 800aba4:	232d      	movlt	r3, #45	; 0x2d
 800aba6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800abaa:	497d      	ldr	r1, [pc, #500]	; (800ada0 <_printf_float+0x2b0>)
 800abac:	4b7d      	ldr	r3, [pc, #500]	; (800ada4 <_printf_float+0x2b4>)
 800abae:	e7d5      	b.n	800ab5c <_printf_float+0x6c>
 800abb0:	6863      	ldr	r3, [r4, #4]
 800abb2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800abb6:	9104      	str	r1, [sp, #16]
 800abb8:	1c59      	adds	r1, r3, #1
 800abba:	d13c      	bne.n	800ac36 <_printf_float+0x146>
 800abbc:	2306      	movs	r3, #6
 800abbe:	6063      	str	r3, [r4, #4]
 800abc0:	2300      	movs	r3, #0
 800abc2:	9303      	str	r3, [sp, #12]
 800abc4:	ab08      	add	r3, sp, #32
 800abc6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800abca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abce:	ab07      	add	r3, sp, #28
 800abd0:	6861      	ldr	r1, [r4, #4]
 800abd2:	9300      	str	r3, [sp, #0]
 800abd4:	6022      	str	r2, [r4, #0]
 800abd6:	f10d 031b 	add.w	r3, sp, #27
 800abda:	4628      	mov	r0, r5
 800abdc:	f7ff fef5 	bl	800a9ca <__cvt>
 800abe0:	9b04      	ldr	r3, [sp, #16]
 800abe2:	9907      	ldr	r1, [sp, #28]
 800abe4:	2b47      	cmp	r3, #71	; 0x47
 800abe6:	4680      	mov	r8, r0
 800abe8:	d108      	bne.n	800abfc <_printf_float+0x10c>
 800abea:	1cc8      	adds	r0, r1, #3
 800abec:	db02      	blt.n	800abf4 <_printf_float+0x104>
 800abee:	6863      	ldr	r3, [r4, #4]
 800abf0:	4299      	cmp	r1, r3
 800abf2:	dd41      	ble.n	800ac78 <_printf_float+0x188>
 800abf4:	f1a9 0902 	sub.w	r9, r9, #2
 800abf8:	fa5f f989 	uxtb.w	r9, r9
 800abfc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ac00:	d820      	bhi.n	800ac44 <_printf_float+0x154>
 800ac02:	3901      	subs	r1, #1
 800ac04:	464a      	mov	r2, r9
 800ac06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ac0a:	9107      	str	r1, [sp, #28]
 800ac0c:	f7ff ff2f 	bl	800aa6e <__exponent>
 800ac10:	9a08      	ldr	r2, [sp, #32]
 800ac12:	9004      	str	r0, [sp, #16]
 800ac14:	1813      	adds	r3, r2, r0
 800ac16:	2a01      	cmp	r2, #1
 800ac18:	6123      	str	r3, [r4, #16]
 800ac1a:	dc02      	bgt.n	800ac22 <_printf_float+0x132>
 800ac1c:	6822      	ldr	r2, [r4, #0]
 800ac1e:	07d2      	lsls	r2, r2, #31
 800ac20:	d501      	bpl.n	800ac26 <_printf_float+0x136>
 800ac22:	3301      	adds	r3, #1
 800ac24:	6123      	str	r3, [r4, #16]
 800ac26:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0a2      	beq.n	800ab74 <_printf_float+0x84>
 800ac2e:	232d      	movs	r3, #45	; 0x2d
 800ac30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac34:	e79e      	b.n	800ab74 <_printf_float+0x84>
 800ac36:	9904      	ldr	r1, [sp, #16]
 800ac38:	2947      	cmp	r1, #71	; 0x47
 800ac3a:	d1c1      	bne.n	800abc0 <_printf_float+0xd0>
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1bf      	bne.n	800abc0 <_printf_float+0xd0>
 800ac40:	2301      	movs	r3, #1
 800ac42:	e7bc      	b.n	800abbe <_printf_float+0xce>
 800ac44:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800ac48:	d118      	bne.n	800ac7c <_printf_float+0x18c>
 800ac4a:	2900      	cmp	r1, #0
 800ac4c:	6863      	ldr	r3, [r4, #4]
 800ac4e:	dd0b      	ble.n	800ac68 <_printf_float+0x178>
 800ac50:	6121      	str	r1, [r4, #16]
 800ac52:	b913      	cbnz	r3, 800ac5a <_printf_float+0x16a>
 800ac54:	6822      	ldr	r2, [r4, #0]
 800ac56:	07d0      	lsls	r0, r2, #31
 800ac58:	d502      	bpl.n	800ac60 <_printf_float+0x170>
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	440b      	add	r3, r1
 800ac5e:	6123      	str	r3, [r4, #16]
 800ac60:	2300      	movs	r3, #0
 800ac62:	65a1      	str	r1, [r4, #88]	; 0x58
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	e7de      	b.n	800ac26 <_printf_float+0x136>
 800ac68:	b913      	cbnz	r3, 800ac70 <_printf_float+0x180>
 800ac6a:	6822      	ldr	r2, [r4, #0]
 800ac6c:	07d2      	lsls	r2, r2, #31
 800ac6e:	d501      	bpl.n	800ac74 <_printf_float+0x184>
 800ac70:	3302      	adds	r3, #2
 800ac72:	e7f4      	b.n	800ac5e <_printf_float+0x16e>
 800ac74:	2301      	movs	r3, #1
 800ac76:	e7f2      	b.n	800ac5e <_printf_float+0x16e>
 800ac78:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ac7c:	9b08      	ldr	r3, [sp, #32]
 800ac7e:	4299      	cmp	r1, r3
 800ac80:	db05      	blt.n	800ac8e <_printf_float+0x19e>
 800ac82:	6823      	ldr	r3, [r4, #0]
 800ac84:	6121      	str	r1, [r4, #16]
 800ac86:	07d8      	lsls	r0, r3, #31
 800ac88:	d5ea      	bpl.n	800ac60 <_printf_float+0x170>
 800ac8a:	1c4b      	adds	r3, r1, #1
 800ac8c:	e7e7      	b.n	800ac5e <_printf_float+0x16e>
 800ac8e:	2900      	cmp	r1, #0
 800ac90:	bfd4      	ite	le
 800ac92:	f1c1 0202 	rsble	r2, r1, #2
 800ac96:	2201      	movgt	r2, #1
 800ac98:	4413      	add	r3, r2
 800ac9a:	e7e0      	b.n	800ac5e <_printf_float+0x16e>
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	055a      	lsls	r2, r3, #21
 800aca0:	d407      	bmi.n	800acb2 <_printf_float+0x1c2>
 800aca2:	6923      	ldr	r3, [r4, #16]
 800aca4:	4642      	mov	r2, r8
 800aca6:	4631      	mov	r1, r6
 800aca8:	4628      	mov	r0, r5
 800acaa:	47b8      	blx	r7
 800acac:	3001      	adds	r0, #1
 800acae:	d12a      	bne.n	800ad06 <_printf_float+0x216>
 800acb0:	e76a      	b.n	800ab88 <_printf_float+0x98>
 800acb2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800acb6:	f240 80e0 	bls.w	800ae7a <_printf_float+0x38a>
 800acba:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800acbe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800acc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acc6:	d133      	bne.n	800ad30 <_printf_float+0x240>
 800acc8:	4a37      	ldr	r2, [pc, #220]	; (800ada8 <_printf_float+0x2b8>)
 800acca:	2301      	movs	r3, #1
 800accc:	4631      	mov	r1, r6
 800acce:	4628      	mov	r0, r5
 800acd0:	47b8      	blx	r7
 800acd2:	3001      	adds	r0, #1
 800acd4:	f43f af58 	beq.w	800ab88 <_printf_float+0x98>
 800acd8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800acdc:	429a      	cmp	r2, r3
 800acde:	db02      	blt.n	800ace6 <_printf_float+0x1f6>
 800ace0:	6823      	ldr	r3, [r4, #0]
 800ace2:	07d8      	lsls	r0, r3, #31
 800ace4:	d50f      	bpl.n	800ad06 <_printf_float+0x216>
 800ace6:	4653      	mov	r3, sl
 800ace8:	465a      	mov	r2, fp
 800acea:	4631      	mov	r1, r6
 800acec:	4628      	mov	r0, r5
 800acee:	47b8      	blx	r7
 800acf0:	3001      	adds	r0, #1
 800acf2:	f43f af49 	beq.w	800ab88 <_printf_float+0x98>
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	f104 091a 	add.w	r9, r4, #26
 800acfe:	9b08      	ldr	r3, [sp, #32]
 800ad00:	3b01      	subs	r3, #1
 800ad02:	4543      	cmp	r3, r8
 800ad04:	dc09      	bgt.n	800ad1a <_printf_float+0x22a>
 800ad06:	6823      	ldr	r3, [r4, #0]
 800ad08:	079b      	lsls	r3, r3, #30
 800ad0a:	f100 8106 	bmi.w	800af1a <_printf_float+0x42a>
 800ad0e:	68e0      	ldr	r0, [r4, #12]
 800ad10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad12:	4298      	cmp	r0, r3
 800ad14:	bfb8      	it	lt
 800ad16:	4618      	movlt	r0, r3
 800ad18:	e738      	b.n	800ab8c <_printf_float+0x9c>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	464a      	mov	r2, r9
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b8      	blx	r7
 800ad24:	3001      	adds	r0, #1
 800ad26:	f43f af2f 	beq.w	800ab88 <_printf_float+0x98>
 800ad2a:	f108 0801 	add.w	r8, r8, #1
 800ad2e:	e7e6      	b.n	800acfe <_printf_float+0x20e>
 800ad30:	9b07      	ldr	r3, [sp, #28]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	dc3a      	bgt.n	800adac <_printf_float+0x2bc>
 800ad36:	4a1c      	ldr	r2, [pc, #112]	; (800ada8 <_printf_float+0x2b8>)
 800ad38:	2301      	movs	r3, #1
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	47b8      	blx	r7
 800ad40:	3001      	adds	r0, #1
 800ad42:	f43f af21 	beq.w	800ab88 <_printf_float+0x98>
 800ad46:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	d102      	bne.n	800ad54 <_printf_float+0x264>
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	07d9      	lsls	r1, r3, #31
 800ad52:	d5d8      	bpl.n	800ad06 <_printf_float+0x216>
 800ad54:	4653      	mov	r3, sl
 800ad56:	465a      	mov	r2, fp
 800ad58:	4631      	mov	r1, r6
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	47b8      	blx	r7
 800ad5e:	3001      	adds	r0, #1
 800ad60:	f43f af12 	beq.w	800ab88 <_printf_float+0x98>
 800ad64:	f04f 0900 	mov.w	r9, #0
 800ad68:	f104 0a1a 	add.w	sl, r4, #26
 800ad6c:	9b07      	ldr	r3, [sp, #28]
 800ad6e:	425b      	negs	r3, r3
 800ad70:	454b      	cmp	r3, r9
 800ad72:	dc01      	bgt.n	800ad78 <_printf_float+0x288>
 800ad74:	9b08      	ldr	r3, [sp, #32]
 800ad76:	e795      	b.n	800aca4 <_printf_float+0x1b4>
 800ad78:	2301      	movs	r3, #1
 800ad7a:	4652      	mov	r2, sl
 800ad7c:	4631      	mov	r1, r6
 800ad7e:	4628      	mov	r0, r5
 800ad80:	47b8      	blx	r7
 800ad82:	3001      	adds	r0, #1
 800ad84:	f43f af00 	beq.w	800ab88 <_printf_float+0x98>
 800ad88:	f109 0901 	add.w	r9, r9, #1
 800ad8c:	e7ee      	b.n	800ad6c <_printf_float+0x27c>
 800ad8e:	bf00      	nop
 800ad90:	ffffffff 	.word	0xffffffff
 800ad94:	7fefffff 	.word	0x7fefffff
 800ad98:	0800da98 	.word	0x0800da98
 800ad9c:	0800da9c 	.word	0x0800da9c
 800ada0:	0800daa0 	.word	0x0800daa0
 800ada4:	0800daa4 	.word	0x0800daa4
 800ada8:	0800daa8 	.word	0x0800daa8
 800adac:	9a08      	ldr	r2, [sp, #32]
 800adae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adb0:	429a      	cmp	r2, r3
 800adb2:	bfa8      	it	ge
 800adb4:	461a      	movge	r2, r3
 800adb6:	2a00      	cmp	r2, #0
 800adb8:	4691      	mov	r9, r2
 800adba:	dc38      	bgt.n	800ae2e <_printf_float+0x33e>
 800adbc:	2300      	movs	r3, #0
 800adbe:	9305      	str	r3, [sp, #20]
 800adc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adc4:	f104 021a 	add.w	r2, r4, #26
 800adc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800adca:	9905      	ldr	r1, [sp, #20]
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	eba3 0309 	sub.w	r3, r3, r9
 800add2:	428b      	cmp	r3, r1
 800add4:	dc33      	bgt.n	800ae3e <_printf_float+0x34e>
 800add6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800adda:	429a      	cmp	r2, r3
 800addc:	db3c      	blt.n	800ae58 <_printf_float+0x368>
 800adde:	6823      	ldr	r3, [r4, #0]
 800ade0:	07da      	lsls	r2, r3, #31
 800ade2:	d439      	bmi.n	800ae58 <_printf_float+0x368>
 800ade4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800ade8:	eba2 0903 	sub.w	r9, r2, r3
 800adec:	9b04      	ldr	r3, [sp, #16]
 800adee:	1ad2      	subs	r2, r2, r3
 800adf0:	4591      	cmp	r9, r2
 800adf2:	bfa8      	it	ge
 800adf4:	4691      	movge	r9, r2
 800adf6:	f1b9 0f00 	cmp.w	r9, #0
 800adfa:	dc35      	bgt.n	800ae68 <_printf_float+0x378>
 800adfc:	f04f 0800 	mov.w	r8, #0
 800ae00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae04:	f104 0a1a 	add.w	sl, r4, #26
 800ae08:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ae0c:	1a9b      	subs	r3, r3, r2
 800ae0e:	eba3 0309 	sub.w	r3, r3, r9
 800ae12:	4543      	cmp	r3, r8
 800ae14:	f77f af77 	ble.w	800ad06 <_printf_float+0x216>
 800ae18:	2301      	movs	r3, #1
 800ae1a:	4652      	mov	r2, sl
 800ae1c:	4631      	mov	r1, r6
 800ae1e:	4628      	mov	r0, r5
 800ae20:	47b8      	blx	r7
 800ae22:	3001      	adds	r0, #1
 800ae24:	f43f aeb0 	beq.w	800ab88 <_printf_float+0x98>
 800ae28:	f108 0801 	add.w	r8, r8, #1
 800ae2c:	e7ec      	b.n	800ae08 <_printf_float+0x318>
 800ae2e:	4613      	mov	r3, r2
 800ae30:	4631      	mov	r1, r6
 800ae32:	4642      	mov	r2, r8
 800ae34:	4628      	mov	r0, r5
 800ae36:	47b8      	blx	r7
 800ae38:	3001      	adds	r0, #1
 800ae3a:	d1bf      	bne.n	800adbc <_printf_float+0x2cc>
 800ae3c:	e6a4      	b.n	800ab88 <_printf_float+0x98>
 800ae3e:	2301      	movs	r3, #1
 800ae40:	4631      	mov	r1, r6
 800ae42:	4628      	mov	r0, r5
 800ae44:	9204      	str	r2, [sp, #16]
 800ae46:	47b8      	blx	r7
 800ae48:	3001      	adds	r0, #1
 800ae4a:	f43f ae9d 	beq.w	800ab88 <_printf_float+0x98>
 800ae4e:	9b05      	ldr	r3, [sp, #20]
 800ae50:	9a04      	ldr	r2, [sp, #16]
 800ae52:	3301      	adds	r3, #1
 800ae54:	9305      	str	r3, [sp, #20]
 800ae56:	e7b7      	b.n	800adc8 <_printf_float+0x2d8>
 800ae58:	4653      	mov	r3, sl
 800ae5a:	465a      	mov	r2, fp
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4628      	mov	r0, r5
 800ae60:	47b8      	blx	r7
 800ae62:	3001      	adds	r0, #1
 800ae64:	d1be      	bne.n	800ade4 <_printf_float+0x2f4>
 800ae66:	e68f      	b.n	800ab88 <_printf_float+0x98>
 800ae68:	9a04      	ldr	r2, [sp, #16]
 800ae6a:	464b      	mov	r3, r9
 800ae6c:	4442      	add	r2, r8
 800ae6e:	4631      	mov	r1, r6
 800ae70:	4628      	mov	r0, r5
 800ae72:	47b8      	blx	r7
 800ae74:	3001      	adds	r0, #1
 800ae76:	d1c1      	bne.n	800adfc <_printf_float+0x30c>
 800ae78:	e686      	b.n	800ab88 <_printf_float+0x98>
 800ae7a:	9a08      	ldr	r2, [sp, #32]
 800ae7c:	2a01      	cmp	r2, #1
 800ae7e:	dc01      	bgt.n	800ae84 <_printf_float+0x394>
 800ae80:	07db      	lsls	r3, r3, #31
 800ae82:	d537      	bpl.n	800aef4 <_printf_float+0x404>
 800ae84:	2301      	movs	r3, #1
 800ae86:	4642      	mov	r2, r8
 800ae88:	4631      	mov	r1, r6
 800ae8a:	4628      	mov	r0, r5
 800ae8c:	47b8      	blx	r7
 800ae8e:	3001      	adds	r0, #1
 800ae90:	f43f ae7a 	beq.w	800ab88 <_printf_float+0x98>
 800ae94:	4653      	mov	r3, sl
 800ae96:	465a      	mov	r2, fp
 800ae98:	4631      	mov	r1, r6
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	47b8      	blx	r7
 800ae9e:	3001      	adds	r0, #1
 800aea0:	f43f ae72 	beq.w	800ab88 <_printf_float+0x98>
 800aea4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800aea8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aeac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeb0:	9b08      	ldr	r3, [sp, #32]
 800aeb2:	d01a      	beq.n	800aeea <_printf_float+0x3fa>
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	f108 0201 	add.w	r2, r8, #1
 800aeba:	4631      	mov	r1, r6
 800aebc:	4628      	mov	r0, r5
 800aebe:	47b8      	blx	r7
 800aec0:	3001      	adds	r0, #1
 800aec2:	d10e      	bne.n	800aee2 <_printf_float+0x3f2>
 800aec4:	e660      	b.n	800ab88 <_printf_float+0x98>
 800aec6:	2301      	movs	r3, #1
 800aec8:	464a      	mov	r2, r9
 800aeca:	4631      	mov	r1, r6
 800aecc:	4628      	mov	r0, r5
 800aece:	47b8      	blx	r7
 800aed0:	3001      	adds	r0, #1
 800aed2:	f43f ae59 	beq.w	800ab88 <_printf_float+0x98>
 800aed6:	f108 0801 	add.w	r8, r8, #1
 800aeda:	9b08      	ldr	r3, [sp, #32]
 800aedc:	3b01      	subs	r3, #1
 800aede:	4543      	cmp	r3, r8
 800aee0:	dcf1      	bgt.n	800aec6 <_printf_float+0x3d6>
 800aee2:	9b04      	ldr	r3, [sp, #16]
 800aee4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aee8:	e6dd      	b.n	800aca6 <_printf_float+0x1b6>
 800aeea:	f04f 0800 	mov.w	r8, #0
 800aeee:	f104 091a 	add.w	r9, r4, #26
 800aef2:	e7f2      	b.n	800aeda <_printf_float+0x3ea>
 800aef4:	2301      	movs	r3, #1
 800aef6:	4642      	mov	r2, r8
 800aef8:	e7df      	b.n	800aeba <_printf_float+0x3ca>
 800aefa:	2301      	movs	r3, #1
 800aefc:	464a      	mov	r2, r9
 800aefe:	4631      	mov	r1, r6
 800af00:	4628      	mov	r0, r5
 800af02:	47b8      	blx	r7
 800af04:	3001      	adds	r0, #1
 800af06:	f43f ae3f 	beq.w	800ab88 <_printf_float+0x98>
 800af0a:	f108 0801 	add.w	r8, r8, #1
 800af0e:	68e3      	ldr	r3, [r4, #12]
 800af10:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af12:	1a5b      	subs	r3, r3, r1
 800af14:	4543      	cmp	r3, r8
 800af16:	dcf0      	bgt.n	800aefa <_printf_float+0x40a>
 800af18:	e6f9      	b.n	800ad0e <_printf_float+0x21e>
 800af1a:	f04f 0800 	mov.w	r8, #0
 800af1e:	f104 0919 	add.w	r9, r4, #25
 800af22:	e7f4      	b.n	800af0e <_printf_float+0x41e>

0800af24 <_printf_common>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	4616      	mov	r6, r2
 800af2a:	4699      	mov	r9, r3
 800af2c:	688a      	ldr	r2, [r1, #8]
 800af2e:	690b      	ldr	r3, [r1, #16]
 800af30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af34:	4293      	cmp	r3, r2
 800af36:	bfb8      	it	lt
 800af38:	4613      	movlt	r3, r2
 800af3a:	6033      	str	r3, [r6, #0]
 800af3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af40:	4607      	mov	r7, r0
 800af42:	460c      	mov	r4, r1
 800af44:	b10a      	cbz	r2, 800af4a <_printf_common+0x26>
 800af46:	3301      	adds	r3, #1
 800af48:	6033      	str	r3, [r6, #0]
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	0699      	lsls	r1, r3, #26
 800af4e:	bf42      	ittt	mi
 800af50:	6833      	ldrmi	r3, [r6, #0]
 800af52:	3302      	addmi	r3, #2
 800af54:	6033      	strmi	r3, [r6, #0]
 800af56:	6825      	ldr	r5, [r4, #0]
 800af58:	f015 0506 	ands.w	r5, r5, #6
 800af5c:	d106      	bne.n	800af6c <_printf_common+0x48>
 800af5e:	f104 0a19 	add.w	sl, r4, #25
 800af62:	68e3      	ldr	r3, [r4, #12]
 800af64:	6832      	ldr	r2, [r6, #0]
 800af66:	1a9b      	subs	r3, r3, r2
 800af68:	42ab      	cmp	r3, r5
 800af6a:	dc26      	bgt.n	800afba <_printf_common+0x96>
 800af6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af70:	1e13      	subs	r3, r2, #0
 800af72:	6822      	ldr	r2, [r4, #0]
 800af74:	bf18      	it	ne
 800af76:	2301      	movne	r3, #1
 800af78:	0692      	lsls	r2, r2, #26
 800af7a:	d42b      	bmi.n	800afd4 <_printf_common+0xb0>
 800af7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af80:	4649      	mov	r1, r9
 800af82:	4638      	mov	r0, r7
 800af84:	47c0      	blx	r8
 800af86:	3001      	adds	r0, #1
 800af88:	d01e      	beq.n	800afc8 <_printf_common+0xa4>
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	6922      	ldr	r2, [r4, #16]
 800af8e:	f003 0306 	and.w	r3, r3, #6
 800af92:	2b04      	cmp	r3, #4
 800af94:	bf02      	ittt	eq
 800af96:	68e5      	ldreq	r5, [r4, #12]
 800af98:	6833      	ldreq	r3, [r6, #0]
 800af9a:	1aed      	subeq	r5, r5, r3
 800af9c:	68a3      	ldr	r3, [r4, #8]
 800af9e:	bf0c      	ite	eq
 800afa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afa4:	2500      	movne	r5, #0
 800afa6:	4293      	cmp	r3, r2
 800afa8:	bfc4      	itt	gt
 800afaa:	1a9b      	subgt	r3, r3, r2
 800afac:	18ed      	addgt	r5, r5, r3
 800afae:	2600      	movs	r6, #0
 800afb0:	341a      	adds	r4, #26
 800afb2:	42b5      	cmp	r5, r6
 800afb4:	d11a      	bne.n	800afec <_printf_common+0xc8>
 800afb6:	2000      	movs	r0, #0
 800afb8:	e008      	b.n	800afcc <_printf_common+0xa8>
 800afba:	2301      	movs	r3, #1
 800afbc:	4652      	mov	r2, sl
 800afbe:	4649      	mov	r1, r9
 800afc0:	4638      	mov	r0, r7
 800afc2:	47c0      	blx	r8
 800afc4:	3001      	adds	r0, #1
 800afc6:	d103      	bne.n	800afd0 <_printf_common+0xac>
 800afc8:	f04f 30ff 	mov.w	r0, #4294967295
 800afcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd0:	3501      	adds	r5, #1
 800afd2:	e7c6      	b.n	800af62 <_printf_common+0x3e>
 800afd4:	18e1      	adds	r1, r4, r3
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	2030      	movs	r0, #48	; 0x30
 800afda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afde:	4422      	add	r2, r4
 800afe0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800afe4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800afe8:	3302      	adds	r3, #2
 800afea:	e7c7      	b.n	800af7c <_printf_common+0x58>
 800afec:	2301      	movs	r3, #1
 800afee:	4622      	mov	r2, r4
 800aff0:	4649      	mov	r1, r9
 800aff2:	4638      	mov	r0, r7
 800aff4:	47c0      	blx	r8
 800aff6:	3001      	adds	r0, #1
 800aff8:	d0e6      	beq.n	800afc8 <_printf_common+0xa4>
 800affa:	3601      	adds	r6, #1
 800affc:	e7d9      	b.n	800afb2 <_printf_common+0x8e>
	...

0800b000 <_printf_i>:
 800b000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b004:	7e0f      	ldrb	r7, [r1, #24]
 800b006:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b008:	2f78      	cmp	r7, #120	; 0x78
 800b00a:	4691      	mov	r9, r2
 800b00c:	4680      	mov	r8, r0
 800b00e:	460c      	mov	r4, r1
 800b010:	469a      	mov	sl, r3
 800b012:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b016:	d807      	bhi.n	800b028 <_printf_i+0x28>
 800b018:	2f62      	cmp	r7, #98	; 0x62
 800b01a:	d80a      	bhi.n	800b032 <_printf_i+0x32>
 800b01c:	2f00      	cmp	r7, #0
 800b01e:	f000 80d4 	beq.w	800b1ca <_printf_i+0x1ca>
 800b022:	2f58      	cmp	r7, #88	; 0x58
 800b024:	f000 80c0 	beq.w	800b1a8 <_printf_i+0x1a8>
 800b028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b02c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b030:	e03a      	b.n	800b0a8 <_printf_i+0xa8>
 800b032:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b036:	2b15      	cmp	r3, #21
 800b038:	d8f6      	bhi.n	800b028 <_printf_i+0x28>
 800b03a:	a101      	add	r1, pc, #4	; (adr r1, 800b040 <_printf_i+0x40>)
 800b03c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b040:	0800b099 	.word	0x0800b099
 800b044:	0800b0ad 	.word	0x0800b0ad
 800b048:	0800b029 	.word	0x0800b029
 800b04c:	0800b029 	.word	0x0800b029
 800b050:	0800b029 	.word	0x0800b029
 800b054:	0800b029 	.word	0x0800b029
 800b058:	0800b0ad 	.word	0x0800b0ad
 800b05c:	0800b029 	.word	0x0800b029
 800b060:	0800b029 	.word	0x0800b029
 800b064:	0800b029 	.word	0x0800b029
 800b068:	0800b029 	.word	0x0800b029
 800b06c:	0800b1b1 	.word	0x0800b1b1
 800b070:	0800b0d9 	.word	0x0800b0d9
 800b074:	0800b16b 	.word	0x0800b16b
 800b078:	0800b029 	.word	0x0800b029
 800b07c:	0800b029 	.word	0x0800b029
 800b080:	0800b1d3 	.word	0x0800b1d3
 800b084:	0800b029 	.word	0x0800b029
 800b088:	0800b0d9 	.word	0x0800b0d9
 800b08c:	0800b029 	.word	0x0800b029
 800b090:	0800b029 	.word	0x0800b029
 800b094:	0800b173 	.word	0x0800b173
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	1d1a      	adds	r2, r3, #4
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	602a      	str	r2, [r5, #0]
 800b0a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e09f      	b.n	800b1ec <_printf_i+0x1ec>
 800b0ac:	6820      	ldr	r0, [r4, #0]
 800b0ae:	682b      	ldr	r3, [r5, #0]
 800b0b0:	0607      	lsls	r7, r0, #24
 800b0b2:	f103 0104 	add.w	r1, r3, #4
 800b0b6:	6029      	str	r1, [r5, #0]
 800b0b8:	d501      	bpl.n	800b0be <_printf_i+0xbe>
 800b0ba:	681e      	ldr	r6, [r3, #0]
 800b0bc:	e003      	b.n	800b0c6 <_printf_i+0xc6>
 800b0be:	0646      	lsls	r6, r0, #25
 800b0c0:	d5fb      	bpl.n	800b0ba <_printf_i+0xba>
 800b0c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0c6:	2e00      	cmp	r6, #0
 800b0c8:	da03      	bge.n	800b0d2 <_printf_i+0xd2>
 800b0ca:	232d      	movs	r3, #45	; 0x2d
 800b0cc:	4276      	negs	r6, r6
 800b0ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0d2:	485a      	ldr	r0, [pc, #360]	; (800b23c <_printf_i+0x23c>)
 800b0d4:	230a      	movs	r3, #10
 800b0d6:	e012      	b.n	800b0fe <_printf_i+0xfe>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	6820      	ldr	r0, [r4, #0]
 800b0dc:	1d19      	adds	r1, r3, #4
 800b0de:	6029      	str	r1, [r5, #0]
 800b0e0:	0605      	lsls	r5, r0, #24
 800b0e2:	d501      	bpl.n	800b0e8 <_printf_i+0xe8>
 800b0e4:	681e      	ldr	r6, [r3, #0]
 800b0e6:	e002      	b.n	800b0ee <_printf_i+0xee>
 800b0e8:	0641      	lsls	r1, r0, #25
 800b0ea:	d5fb      	bpl.n	800b0e4 <_printf_i+0xe4>
 800b0ec:	881e      	ldrh	r6, [r3, #0]
 800b0ee:	4853      	ldr	r0, [pc, #332]	; (800b23c <_printf_i+0x23c>)
 800b0f0:	2f6f      	cmp	r7, #111	; 0x6f
 800b0f2:	bf0c      	ite	eq
 800b0f4:	2308      	moveq	r3, #8
 800b0f6:	230a      	movne	r3, #10
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b0fe:	6865      	ldr	r5, [r4, #4]
 800b100:	60a5      	str	r5, [r4, #8]
 800b102:	2d00      	cmp	r5, #0
 800b104:	bfa2      	ittt	ge
 800b106:	6821      	ldrge	r1, [r4, #0]
 800b108:	f021 0104 	bicge.w	r1, r1, #4
 800b10c:	6021      	strge	r1, [r4, #0]
 800b10e:	b90e      	cbnz	r6, 800b114 <_printf_i+0x114>
 800b110:	2d00      	cmp	r5, #0
 800b112:	d04b      	beq.n	800b1ac <_printf_i+0x1ac>
 800b114:	4615      	mov	r5, r2
 800b116:	fbb6 f1f3 	udiv	r1, r6, r3
 800b11a:	fb03 6711 	mls	r7, r3, r1, r6
 800b11e:	5dc7      	ldrb	r7, [r0, r7]
 800b120:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b124:	4637      	mov	r7, r6
 800b126:	42bb      	cmp	r3, r7
 800b128:	460e      	mov	r6, r1
 800b12a:	d9f4      	bls.n	800b116 <_printf_i+0x116>
 800b12c:	2b08      	cmp	r3, #8
 800b12e:	d10b      	bne.n	800b148 <_printf_i+0x148>
 800b130:	6823      	ldr	r3, [r4, #0]
 800b132:	07de      	lsls	r6, r3, #31
 800b134:	d508      	bpl.n	800b148 <_printf_i+0x148>
 800b136:	6923      	ldr	r3, [r4, #16]
 800b138:	6861      	ldr	r1, [r4, #4]
 800b13a:	4299      	cmp	r1, r3
 800b13c:	bfde      	ittt	le
 800b13e:	2330      	movle	r3, #48	; 0x30
 800b140:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b144:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b148:	1b52      	subs	r2, r2, r5
 800b14a:	6122      	str	r2, [r4, #16]
 800b14c:	f8cd a000 	str.w	sl, [sp]
 800b150:	464b      	mov	r3, r9
 800b152:	aa03      	add	r2, sp, #12
 800b154:	4621      	mov	r1, r4
 800b156:	4640      	mov	r0, r8
 800b158:	f7ff fee4 	bl	800af24 <_printf_common>
 800b15c:	3001      	adds	r0, #1
 800b15e:	d14a      	bne.n	800b1f6 <_printf_i+0x1f6>
 800b160:	f04f 30ff 	mov.w	r0, #4294967295
 800b164:	b004      	add	sp, #16
 800b166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16a:	6823      	ldr	r3, [r4, #0]
 800b16c:	f043 0320 	orr.w	r3, r3, #32
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	4833      	ldr	r0, [pc, #204]	; (800b240 <_printf_i+0x240>)
 800b174:	2778      	movs	r7, #120	; 0x78
 800b176:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b17a:	6823      	ldr	r3, [r4, #0]
 800b17c:	6829      	ldr	r1, [r5, #0]
 800b17e:	061f      	lsls	r7, r3, #24
 800b180:	f851 6b04 	ldr.w	r6, [r1], #4
 800b184:	d402      	bmi.n	800b18c <_printf_i+0x18c>
 800b186:	065f      	lsls	r7, r3, #25
 800b188:	bf48      	it	mi
 800b18a:	b2b6      	uxthmi	r6, r6
 800b18c:	07df      	lsls	r7, r3, #31
 800b18e:	bf48      	it	mi
 800b190:	f043 0320 	orrmi.w	r3, r3, #32
 800b194:	6029      	str	r1, [r5, #0]
 800b196:	bf48      	it	mi
 800b198:	6023      	strmi	r3, [r4, #0]
 800b19a:	b91e      	cbnz	r6, 800b1a4 <_printf_i+0x1a4>
 800b19c:	6823      	ldr	r3, [r4, #0]
 800b19e:	f023 0320 	bic.w	r3, r3, #32
 800b1a2:	6023      	str	r3, [r4, #0]
 800b1a4:	2310      	movs	r3, #16
 800b1a6:	e7a7      	b.n	800b0f8 <_printf_i+0xf8>
 800b1a8:	4824      	ldr	r0, [pc, #144]	; (800b23c <_printf_i+0x23c>)
 800b1aa:	e7e4      	b.n	800b176 <_printf_i+0x176>
 800b1ac:	4615      	mov	r5, r2
 800b1ae:	e7bd      	b.n	800b12c <_printf_i+0x12c>
 800b1b0:	682b      	ldr	r3, [r5, #0]
 800b1b2:	6826      	ldr	r6, [r4, #0]
 800b1b4:	6961      	ldr	r1, [r4, #20]
 800b1b6:	1d18      	adds	r0, r3, #4
 800b1b8:	6028      	str	r0, [r5, #0]
 800b1ba:	0635      	lsls	r5, r6, #24
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	d501      	bpl.n	800b1c4 <_printf_i+0x1c4>
 800b1c0:	6019      	str	r1, [r3, #0]
 800b1c2:	e002      	b.n	800b1ca <_printf_i+0x1ca>
 800b1c4:	0670      	lsls	r0, r6, #25
 800b1c6:	d5fb      	bpl.n	800b1c0 <_printf_i+0x1c0>
 800b1c8:	8019      	strh	r1, [r3, #0]
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	6123      	str	r3, [r4, #16]
 800b1ce:	4615      	mov	r5, r2
 800b1d0:	e7bc      	b.n	800b14c <_printf_i+0x14c>
 800b1d2:	682b      	ldr	r3, [r5, #0]
 800b1d4:	1d1a      	adds	r2, r3, #4
 800b1d6:	602a      	str	r2, [r5, #0]
 800b1d8:	681d      	ldr	r5, [r3, #0]
 800b1da:	6862      	ldr	r2, [r4, #4]
 800b1dc:	2100      	movs	r1, #0
 800b1de:	4628      	mov	r0, r5
 800b1e0:	f7f5 f82e 	bl	8000240 <memchr>
 800b1e4:	b108      	cbz	r0, 800b1ea <_printf_i+0x1ea>
 800b1e6:	1b40      	subs	r0, r0, r5
 800b1e8:	6060      	str	r0, [r4, #4]
 800b1ea:	6863      	ldr	r3, [r4, #4]
 800b1ec:	6123      	str	r3, [r4, #16]
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1f4:	e7aa      	b.n	800b14c <_printf_i+0x14c>
 800b1f6:	6923      	ldr	r3, [r4, #16]
 800b1f8:	462a      	mov	r2, r5
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	4640      	mov	r0, r8
 800b1fe:	47d0      	blx	sl
 800b200:	3001      	adds	r0, #1
 800b202:	d0ad      	beq.n	800b160 <_printf_i+0x160>
 800b204:	6823      	ldr	r3, [r4, #0]
 800b206:	079b      	lsls	r3, r3, #30
 800b208:	d413      	bmi.n	800b232 <_printf_i+0x232>
 800b20a:	68e0      	ldr	r0, [r4, #12]
 800b20c:	9b03      	ldr	r3, [sp, #12]
 800b20e:	4298      	cmp	r0, r3
 800b210:	bfb8      	it	lt
 800b212:	4618      	movlt	r0, r3
 800b214:	e7a6      	b.n	800b164 <_printf_i+0x164>
 800b216:	2301      	movs	r3, #1
 800b218:	4632      	mov	r2, r6
 800b21a:	4649      	mov	r1, r9
 800b21c:	4640      	mov	r0, r8
 800b21e:	47d0      	blx	sl
 800b220:	3001      	adds	r0, #1
 800b222:	d09d      	beq.n	800b160 <_printf_i+0x160>
 800b224:	3501      	adds	r5, #1
 800b226:	68e3      	ldr	r3, [r4, #12]
 800b228:	9903      	ldr	r1, [sp, #12]
 800b22a:	1a5b      	subs	r3, r3, r1
 800b22c:	42ab      	cmp	r3, r5
 800b22e:	dcf2      	bgt.n	800b216 <_printf_i+0x216>
 800b230:	e7eb      	b.n	800b20a <_printf_i+0x20a>
 800b232:	2500      	movs	r5, #0
 800b234:	f104 0619 	add.w	r6, r4, #25
 800b238:	e7f5      	b.n	800b226 <_printf_i+0x226>
 800b23a:	bf00      	nop
 800b23c:	0800daaa 	.word	0x0800daaa
 800b240:	0800dabb 	.word	0x0800dabb

0800b244 <std>:
 800b244:	2300      	movs	r3, #0
 800b246:	b510      	push	{r4, lr}
 800b248:	4604      	mov	r4, r0
 800b24a:	e9c0 3300 	strd	r3, r3, [r0]
 800b24e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b252:	6083      	str	r3, [r0, #8]
 800b254:	8181      	strh	r1, [r0, #12]
 800b256:	6643      	str	r3, [r0, #100]	; 0x64
 800b258:	81c2      	strh	r2, [r0, #14]
 800b25a:	6183      	str	r3, [r0, #24]
 800b25c:	4619      	mov	r1, r3
 800b25e:	2208      	movs	r2, #8
 800b260:	305c      	adds	r0, #92	; 0x5c
 800b262:	f000 f948 	bl	800b4f6 <memset>
 800b266:	4b0d      	ldr	r3, [pc, #52]	; (800b29c <std+0x58>)
 800b268:	6263      	str	r3, [r4, #36]	; 0x24
 800b26a:	4b0d      	ldr	r3, [pc, #52]	; (800b2a0 <std+0x5c>)
 800b26c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b26e:	4b0d      	ldr	r3, [pc, #52]	; (800b2a4 <std+0x60>)
 800b270:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b272:	4b0d      	ldr	r3, [pc, #52]	; (800b2a8 <std+0x64>)
 800b274:	6323      	str	r3, [r4, #48]	; 0x30
 800b276:	4b0d      	ldr	r3, [pc, #52]	; (800b2ac <std+0x68>)
 800b278:	6224      	str	r4, [r4, #32]
 800b27a:	429c      	cmp	r4, r3
 800b27c:	d006      	beq.n	800b28c <std+0x48>
 800b27e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b282:	4294      	cmp	r4, r2
 800b284:	d002      	beq.n	800b28c <std+0x48>
 800b286:	33d0      	adds	r3, #208	; 0xd0
 800b288:	429c      	cmp	r4, r3
 800b28a:	d105      	bne.n	800b298 <std+0x54>
 800b28c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b294:	f000 b9ac 	b.w	800b5f0 <__retarget_lock_init_recursive>
 800b298:	bd10      	pop	{r4, pc}
 800b29a:	bf00      	nop
 800b29c:	0800b471 	.word	0x0800b471
 800b2a0:	0800b493 	.word	0x0800b493
 800b2a4:	0800b4cb 	.word	0x0800b4cb
 800b2a8:	0800b4ef 	.word	0x0800b4ef
 800b2ac:	200008a8 	.word	0x200008a8

0800b2b0 <stdio_exit_handler>:
 800b2b0:	4a02      	ldr	r2, [pc, #8]	; (800b2bc <stdio_exit_handler+0xc>)
 800b2b2:	4903      	ldr	r1, [pc, #12]	; (800b2c0 <stdio_exit_handler+0x10>)
 800b2b4:	4803      	ldr	r0, [pc, #12]	; (800b2c4 <stdio_exit_handler+0x14>)
 800b2b6:	f000 b869 	b.w	800b38c <_fwalk_sglue>
 800b2ba:	bf00      	nop
 800b2bc:	200000d4 	.word	0x200000d4
 800b2c0:	0800ce95 	.word	0x0800ce95
 800b2c4:	200000e0 	.word	0x200000e0

0800b2c8 <cleanup_stdio>:
 800b2c8:	6841      	ldr	r1, [r0, #4]
 800b2ca:	4b0c      	ldr	r3, [pc, #48]	; (800b2fc <cleanup_stdio+0x34>)
 800b2cc:	4299      	cmp	r1, r3
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	d001      	beq.n	800b2d8 <cleanup_stdio+0x10>
 800b2d4:	f001 fdde 	bl	800ce94 <_fflush_r>
 800b2d8:	68a1      	ldr	r1, [r4, #8]
 800b2da:	4b09      	ldr	r3, [pc, #36]	; (800b300 <cleanup_stdio+0x38>)
 800b2dc:	4299      	cmp	r1, r3
 800b2de:	d002      	beq.n	800b2e6 <cleanup_stdio+0x1e>
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f001 fdd7 	bl	800ce94 <_fflush_r>
 800b2e6:	68e1      	ldr	r1, [r4, #12]
 800b2e8:	4b06      	ldr	r3, [pc, #24]	; (800b304 <cleanup_stdio+0x3c>)
 800b2ea:	4299      	cmp	r1, r3
 800b2ec:	d004      	beq.n	800b2f8 <cleanup_stdio+0x30>
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f4:	f001 bdce 	b.w	800ce94 <_fflush_r>
 800b2f8:	bd10      	pop	{r4, pc}
 800b2fa:	bf00      	nop
 800b2fc:	200008a8 	.word	0x200008a8
 800b300:	20000910 	.word	0x20000910
 800b304:	20000978 	.word	0x20000978

0800b308 <global_stdio_init.part.0>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <global_stdio_init.part.0+0x30>)
 800b30c:	4c0b      	ldr	r4, [pc, #44]	; (800b33c <global_stdio_init.part.0+0x34>)
 800b30e:	4a0c      	ldr	r2, [pc, #48]	; (800b340 <global_stdio_init.part.0+0x38>)
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	4620      	mov	r0, r4
 800b314:	2200      	movs	r2, #0
 800b316:	2104      	movs	r1, #4
 800b318:	f7ff ff94 	bl	800b244 <std>
 800b31c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b320:	2201      	movs	r2, #1
 800b322:	2109      	movs	r1, #9
 800b324:	f7ff ff8e 	bl	800b244 <std>
 800b328:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b32c:	2202      	movs	r2, #2
 800b32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b332:	2112      	movs	r1, #18
 800b334:	f7ff bf86 	b.w	800b244 <std>
 800b338:	200009e0 	.word	0x200009e0
 800b33c:	200008a8 	.word	0x200008a8
 800b340:	0800b2b1 	.word	0x0800b2b1

0800b344 <__sfp_lock_acquire>:
 800b344:	4801      	ldr	r0, [pc, #4]	; (800b34c <__sfp_lock_acquire+0x8>)
 800b346:	f000 b954 	b.w	800b5f2 <__retarget_lock_acquire_recursive>
 800b34a:	bf00      	nop
 800b34c:	200009e9 	.word	0x200009e9

0800b350 <__sfp_lock_release>:
 800b350:	4801      	ldr	r0, [pc, #4]	; (800b358 <__sfp_lock_release+0x8>)
 800b352:	f000 b94f 	b.w	800b5f4 <__retarget_lock_release_recursive>
 800b356:	bf00      	nop
 800b358:	200009e9 	.word	0x200009e9

0800b35c <__sinit>:
 800b35c:	b510      	push	{r4, lr}
 800b35e:	4604      	mov	r4, r0
 800b360:	f7ff fff0 	bl	800b344 <__sfp_lock_acquire>
 800b364:	6a23      	ldr	r3, [r4, #32]
 800b366:	b11b      	cbz	r3, 800b370 <__sinit+0x14>
 800b368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b36c:	f7ff bff0 	b.w	800b350 <__sfp_lock_release>
 800b370:	4b04      	ldr	r3, [pc, #16]	; (800b384 <__sinit+0x28>)
 800b372:	6223      	str	r3, [r4, #32]
 800b374:	4b04      	ldr	r3, [pc, #16]	; (800b388 <__sinit+0x2c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1f5      	bne.n	800b368 <__sinit+0xc>
 800b37c:	f7ff ffc4 	bl	800b308 <global_stdio_init.part.0>
 800b380:	e7f2      	b.n	800b368 <__sinit+0xc>
 800b382:	bf00      	nop
 800b384:	0800b2c9 	.word	0x0800b2c9
 800b388:	200009e0 	.word	0x200009e0

0800b38c <_fwalk_sglue>:
 800b38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b390:	4607      	mov	r7, r0
 800b392:	4688      	mov	r8, r1
 800b394:	4614      	mov	r4, r2
 800b396:	2600      	movs	r6, #0
 800b398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b39c:	f1b9 0901 	subs.w	r9, r9, #1
 800b3a0:	d505      	bpl.n	800b3ae <_fwalk_sglue+0x22>
 800b3a2:	6824      	ldr	r4, [r4, #0]
 800b3a4:	2c00      	cmp	r4, #0
 800b3a6:	d1f7      	bne.n	800b398 <_fwalk_sglue+0xc>
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ae:	89ab      	ldrh	r3, [r5, #12]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d907      	bls.n	800b3c4 <_fwalk_sglue+0x38>
 800b3b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	d003      	beq.n	800b3c4 <_fwalk_sglue+0x38>
 800b3bc:	4629      	mov	r1, r5
 800b3be:	4638      	mov	r0, r7
 800b3c0:	47c0      	blx	r8
 800b3c2:	4306      	orrs	r6, r0
 800b3c4:	3568      	adds	r5, #104	; 0x68
 800b3c6:	e7e9      	b.n	800b39c <_fwalk_sglue+0x10>

0800b3c8 <sniprintf>:
 800b3c8:	b40c      	push	{r2, r3}
 800b3ca:	b530      	push	{r4, r5, lr}
 800b3cc:	4b17      	ldr	r3, [pc, #92]	; (800b42c <sniprintf+0x64>)
 800b3ce:	1e0c      	subs	r4, r1, #0
 800b3d0:	681d      	ldr	r5, [r3, #0]
 800b3d2:	b09d      	sub	sp, #116	; 0x74
 800b3d4:	da08      	bge.n	800b3e8 <sniprintf+0x20>
 800b3d6:	238b      	movs	r3, #139	; 0x8b
 800b3d8:	602b      	str	r3, [r5, #0]
 800b3da:	f04f 30ff 	mov.w	r0, #4294967295
 800b3de:	b01d      	add	sp, #116	; 0x74
 800b3e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3e4:	b002      	add	sp, #8
 800b3e6:	4770      	bx	lr
 800b3e8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b3ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b3f0:	bf14      	ite	ne
 800b3f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b3f6:	4623      	moveq	r3, r4
 800b3f8:	9304      	str	r3, [sp, #16]
 800b3fa:	9307      	str	r3, [sp, #28]
 800b3fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b400:	9002      	str	r0, [sp, #8]
 800b402:	9006      	str	r0, [sp, #24]
 800b404:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b408:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b40a:	ab21      	add	r3, sp, #132	; 0x84
 800b40c:	a902      	add	r1, sp, #8
 800b40e:	4628      	mov	r0, r5
 800b410:	9301      	str	r3, [sp, #4]
 800b412:	f001 fbbb 	bl	800cb8c <_svfiprintf_r>
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	bfbc      	itt	lt
 800b41a:	238b      	movlt	r3, #139	; 0x8b
 800b41c:	602b      	strlt	r3, [r5, #0]
 800b41e:	2c00      	cmp	r4, #0
 800b420:	d0dd      	beq.n	800b3de <sniprintf+0x16>
 800b422:	9b02      	ldr	r3, [sp, #8]
 800b424:	2200      	movs	r2, #0
 800b426:	701a      	strb	r2, [r3, #0]
 800b428:	e7d9      	b.n	800b3de <sniprintf+0x16>
 800b42a:	bf00      	nop
 800b42c:	2000012c 	.word	0x2000012c

0800b430 <siprintf>:
 800b430:	b40e      	push	{r1, r2, r3}
 800b432:	b500      	push	{lr}
 800b434:	b09c      	sub	sp, #112	; 0x70
 800b436:	ab1d      	add	r3, sp, #116	; 0x74
 800b438:	9002      	str	r0, [sp, #8]
 800b43a:	9006      	str	r0, [sp, #24]
 800b43c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b440:	4809      	ldr	r0, [pc, #36]	; (800b468 <siprintf+0x38>)
 800b442:	9107      	str	r1, [sp, #28]
 800b444:	9104      	str	r1, [sp, #16]
 800b446:	4909      	ldr	r1, [pc, #36]	; (800b46c <siprintf+0x3c>)
 800b448:	f853 2b04 	ldr.w	r2, [r3], #4
 800b44c:	9105      	str	r1, [sp, #20]
 800b44e:	6800      	ldr	r0, [r0, #0]
 800b450:	9301      	str	r3, [sp, #4]
 800b452:	a902      	add	r1, sp, #8
 800b454:	f001 fb9a 	bl	800cb8c <_svfiprintf_r>
 800b458:	9b02      	ldr	r3, [sp, #8]
 800b45a:	2200      	movs	r2, #0
 800b45c:	701a      	strb	r2, [r3, #0]
 800b45e:	b01c      	add	sp, #112	; 0x70
 800b460:	f85d eb04 	ldr.w	lr, [sp], #4
 800b464:	b003      	add	sp, #12
 800b466:	4770      	bx	lr
 800b468:	2000012c 	.word	0x2000012c
 800b46c:	ffff0208 	.word	0xffff0208

0800b470 <__sread>:
 800b470:	b510      	push	{r4, lr}
 800b472:	460c      	mov	r4, r1
 800b474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b478:	f000 f86c 	bl	800b554 <_read_r>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	bfab      	itete	ge
 800b480:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b482:	89a3      	ldrhlt	r3, [r4, #12]
 800b484:	181b      	addge	r3, r3, r0
 800b486:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b48a:	bfac      	ite	ge
 800b48c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b48e:	81a3      	strhlt	r3, [r4, #12]
 800b490:	bd10      	pop	{r4, pc}

0800b492 <__swrite>:
 800b492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b496:	461f      	mov	r7, r3
 800b498:	898b      	ldrh	r3, [r1, #12]
 800b49a:	05db      	lsls	r3, r3, #23
 800b49c:	4605      	mov	r5, r0
 800b49e:	460c      	mov	r4, r1
 800b4a0:	4616      	mov	r6, r2
 800b4a2:	d505      	bpl.n	800b4b0 <__swrite+0x1e>
 800b4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f000 f840 	bl	800b530 <_lseek_r>
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	4632      	mov	r2, r6
 800b4be:	463b      	mov	r3, r7
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4c6:	f000 b857 	b.w	800b578 <_write_r>

0800b4ca <__sseek>:
 800b4ca:	b510      	push	{r4, lr}
 800b4cc:	460c      	mov	r4, r1
 800b4ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d2:	f000 f82d 	bl	800b530 <_lseek_r>
 800b4d6:	1c43      	adds	r3, r0, #1
 800b4d8:	89a3      	ldrh	r3, [r4, #12]
 800b4da:	bf15      	itete	ne
 800b4dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4e6:	81a3      	strheq	r3, [r4, #12]
 800b4e8:	bf18      	it	ne
 800b4ea:	81a3      	strhne	r3, [r4, #12]
 800b4ec:	bd10      	pop	{r4, pc}

0800b4ee <__sclose>:
 800b4ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4f2:	f000 b80d 	b.w	800b510 <_close_r>

0800b4f6 <memset>:
 800b4f6:	4402      	add	r2, r0
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d100      	bne.n	800b500 <memset+0xa>
 800b4fe:	4770      	bx	lr
 800b500:	f803 1b01 	strb.w	r1, [r3], #1
 800b504:	e7f9      	b.n	800b4fa <memset+0x4>
	...

0800b508 <_localeconv_r>:
 800b508:	4800      	ldr	r0, [pc, #0]	; (800b50c <_localeconv_r+0x4>)
 800b50a:	4770      	bx	lr
 800b50c:	20000220 	.word	0x20000220

0800b510 <_close_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d06      	ldr	r5, [pc, #24]	; (800b52c <_close_r+0x1c>)
 800b514:	2300      	movs	r3, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	602b      	str	r3, [r5, #0]
 800b51c:	f7f8 f9c7 	bl	80038ae <_close>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_close_r+0x1a>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_close_r+0x1a>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	200009e4 	.word	0x200009e4

0800b530 <_lseek_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4d07      	ldr	r5, [pc, #28]	; (800b550 <_lseek_r+0x20>)
 800b534:	4604      	mov	r4, r0
 800b536:	4608      	mov	r0, r1
 800b538:	4611      	mov	r1, r2
 800b53a:	2200      	movs	r2, #0
 800b53c:	602a      	str	r2, [r5, #0]
 800b53e:	461a      	mov	r2, r3
 800b540:	f7f8 f9dc 	bl	80038fc <_lseek>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_lseek_r+0x1e>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_lseek_r+0x1e>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	200009e4 	.word	0x200009e4

0800b554 <_read_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4d07      	ldr	r5, [pc, #28]	; (800b574 <_read_r+0x20>)
 800b558:	4604      	mov	r4, r0
 800b55a:	4608      	mov	r0, r1
 800b55c:	4611      	mov	r1, r2
 800b55e:	2200      	movs	r2, #0
 800b560:	602a      	str	r2, [r5, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	f7f8 f96a 	bl	800383c <_read>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d102      	bne.n	800b572 <_read_r+0x1e>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	b103      	cbz	r3, 800b572 <_read_r+0x1e>
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	bd38      	pop	{r3, r4, r5, pc}
 800b574:	200009e4 	.word	0x200009e4

0800b578 <_write_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4d07      	ldr	r5, [pc, #28]	; (800b598 <_write_r+0x20>)
 800b57c:	4604      	mov	r4, r0
 800b57e:	4608      	mov	r0, r1
 800b580:	4611      	mov	r1, r2
 800b582:	2200      	movs	r2, #0
 800b584:	602a      	str	r2, [r5, #0]
 800b586:	461a      	mov	r2, r3
 800b588:	f7f8 f975 	bl	8003876 <_write>
 800b58c:	1c43      	adds	r3, r0, #1
 800b58e:	d102      	bne.n	800b596 <_write_r+0x1e>
 800b590:	682b      	ldr	r3, [r5, #0]
 800b592:	b103      	cbz	r3, 800b596 <_write_r+0x1e>
 800b594:	6023      	str	r3, [r4, #0]
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	200009e4 	.word	0x200009e4

0800b59c <__errno>:
 800b59c:	4b01      	ldr	r3, [pc, #4]	; (800b5a4 <__errno+0x8>)
 800b59e:	6818      	ldr	r0, [r3, #0]
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	2000012c 	.word	0x2000012c

0800b5a8 <__libc_init_array>:
 800b5a8:	b570      	push	{r4, r5, r6, lr}
 800b5aa:	4d0d      	ldr	r5, [pc, #52]	; (800b5e0 <__libc_init_array+0x38>)
 800b5ac:	4c0d      	ldr	r4, [pc, #52]	; (800b5e4 <__libc_init_array+0x3c>)
 800b5ae:	1b64      	subs	r4, r4, r5
 800b5b0:	10a4      	asrs	r4, r4, #2
 800b5b2:	2600      	movs	r6, #0
 800b5b4:	42a6      	cmp	r6, r4
 800b5b6:	d109      	bne.n	800b5cc <__libc_init_array+0x24>
 800b5b8:	4d0b      	ldr	r5, [pc, #44]	; (800b5e8 <__libc_init_array+0x40>)
 800b5ba:	4c0c      	ldr	r4, [pc, #48]	; (800b5ec <__libc_init_array+0x44>)
 800b5bc:	f002 f80e 	bl	800d5dc <_init>
 800b5c0:	1b64      	subs	r4, r4, r5
 800b5c2:	10a4      	asrs	r4, r4, #2
 800b5c4:	2600      	movs	r6, #0
 800b5c6:	42a6      	cmp	r6, r4
 800b5c8:	d105      	bne.n	800b5d6 <__libc_init_array+0x2e>
 800b5ca:	bd70      	pop	{r4, r5, r6, pc}
 800b5cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5d0:	4798      	blx	r3
 800b5d2:	3601      	adds	r6, #1
 800b5d4:	e7ee      	b.n	800b5b4 <__libc_init_array+0xc>
 800b5d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5da:	4798      	blx	r3
 800b5dc:	3601      	adds	r6, #1
 800b5de:	e7f2      	b.n	800b5c6 <__libc_init_array+0x1e>
 800b5e0:	0800de14 	.word	0x0800de14
 800b5e4:	0800de14 	.word	0x0800de14
 800b5e8:	0800de14 	.word	0x0800de14
 800b5ec:	0800de18 	.word	0x0800de18

0800b5f0 <__retarget_lock_init_recursive>:
 800b5f0:	4770      	bx	lr

0800b5f2 <__retarget_lock_acquire_recursive>:
 800b5f2:	4770      	bx	lr

0800b5f4 <__retarget_lock_release_recursive>:
 800b5f4:	4770      	bx	lr

0800b5f6 <quorem>:
 800b5f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fa:	6903      	ldr	r3, [r0, #16]
 800b5fc:	690c      	ldr	r4, [r1, #16]
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	4607      	mov	r7, r0
 800b602:	db7e      	blt.n	800b702 <quorem+0x10c>
 800b604:	3c01      	subs	r4, #1
 800b606:	f101 0814 	add.w	r8, r1, #20
 800b60a:	f100 0514 	add.w	r5, r0, #20
 800b60e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b612:	9301      	str	r3, [sp, #4]
 800b614:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b61c:	3301      	adds	r3, #1
 800b61e:	429a      	cmp	r2, r3
 800b620:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b624:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b628:	fbb2 f6f3 	udiv	r6, r2, r3
 800b62c:	d331      	bcc.n	800b692 <quorem+0x9c>
 800b62e:	f04f 0e00 	mov.w	lr, #0
 800b632:	4640      	mov	r0, r8
 800b634:	46ac      	mov	ip, r5
 800b636:	46f2      	mov	sl, lr
 800b638:	f850 2b04 	ldr.w	r2, [r0], #4
 800b63c:	b293      	uxth	r3, r2
 800b63e:	fb06 e303 	mla	r3, r6, r3, lr
 800b642:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b646:	0c1a      	lsrs	r2, r3, #16
 800b648:	b29b      	uxth	r3, r3
 800b64a:	ebaa 0303 	sub.w	r3, sl, r3
 800b64e:	f8dc a000 	ldr.w	sl, [ip]
 800b652:	fa13 f38a 	uxtah	r3, r3, sl
 800b656:	fb06 220e 	mla	r2, r6, lr, r2
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	9b00      	ldr	r3, [sp, #0]
 800b65e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b662:	b292      	uxth	r2, r2
 800b664:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b668:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b66c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b670:	4581      	cmp	r9, r0
 800b672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b676:	f84c 3b04 	str.w	r3, [ip], #4
 800b67a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b67e:	d2db      	bcs.n	800b638 <quorem+0x42>
 800b680:	f855 300b 	ldr.w	r3, [r5, fp]
 800b684:	b92b      	cbnz	r3, 800b692 <quorem+0x9c>
 800b686:	9b01      	ldr	r3, [sp, #4]
 800b688:	3b04      	subs	r3, #4
 800b68a:	429d      	cmp	r5, r3
 800b68c:	461a      	mov	r2, r3
 800b68e:	d32c      	bcc.n	800b6ea <quorem+0xf4>
 800b690:	613c      	str	r4, [r7, #16]
 800b692:	4638      	mov	r0, r7
 800b694:	f001 f920 	bl	800c8d8 <__mcmp>
 800b698:	2800      	cmp	r0, #0
 800b69a:	db22      	blt.n	800b6e2 <quorem+0xec>
 800b69c:	3601      	adds	r6, #1
 800b69e:	4629      	mov	r1, r5
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6a6:	f8d1 c000 	ldr.w	ip, [r1]
 800b6aa:	b293      	uxth	r3, r2
 800b6ac:	1ac3      	subs	r3, r0, r3
 800b6ae:	0c12      	lsrs	r2, r2, #16
 800b6b0:	fa13 f38c 	uxtah	r3, r3, ip
 800b6b4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b6b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6c2:	45c1      	cmp	r9, r8
 800b6c4:	f841 3b04 	str.w	r3, [r1], #4
 800b6c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b6cc:	d2e9      	bcs.n	800b6a2 <quorem+0xac>
 800b6ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6d6:	b922      	cbnz	r2, 800b6e2 <quorem+0xec>
 800b6d8:	3b04      	subs	r3, #4
 800b6da:	429d      	cmp	r5, r3
 800b6dc:	461a      	mov	r2, r3
 800b6de:	d30a      	bcc.n	800b6f6 <quorem+0x100>
 800b6e0:	613c      	str	r4, [r7, #16]
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	b003      	add	sp, #12
 800b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ea:	6812      	ldr	r2, [r2, #0]
 800b6ec:	3b04      	subs	r3, #4
 800b6ee:	2a00      	cmp	r2, #0
 800b6f0:	d1ce      	bne.n	800b690 <quorem+0x9a>
 800b6f2:	3c01      	subs	r4, #1
 800b6f4:	e7c9      	b.n	800b68a <quorem+0x94>
 800b6f6:	6812      	ldr	r2, [r2, #0]
 800b6f8:	3b04      	subs	r3, #4
 800b6fa:	2a00      	cmp	r2, #0
 800b6fc:	d1f0      	bne.n	800b6e0 <quorem+0xea>
 800b6fe:	3c01      	subs	r4, #1
 800b700:	e7eb      	b.n	800b6da <quorem+0xe4>
 800b702:	2000      	movs	r0, #0
 800b704:	e7ee      	b.n	800b6e4 <quorem+0xee>
	...

0800b708 <_dtoa_r>:
 800b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b70c:	ed2d 8b02 	vpush	{d8}
 800b710:	69c5      	ldr	r5, [r0, #28]
 800b712:	b091      	sub	sp, #68	; 0x44
 800b714:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b718:	ec59 8b10 	vmov	r8, r9, d0
 800b71c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b71e:	9106      	str	r1, [sp, #24]
 800b720:	4606      	mov	r6, r0
 800b722:	9208      	str	r2, [sp, #32]
 800b724:	930c      	str	r3, [sp, #48]	; 0x30
 800b726:	b975      	cbnz	r5, 800b746 <_dtoa_r+0x3e>
 800b728:	2010      	movs	r0, #16
 800b72a:	f000 fda5 	bl	800c278 <malloc>
 800b72e:	4602      	mov	r2, r0
 800b730:	61f0      	str	r0, [r6, #28]
 800b732:	b920      	cbnz	r0, 800b73e <_dtoa_r+0x36>
 800b734:	4ba6      	ldr	r3, [pc, #664]	; (800b9d0 <_dtoa_r+0x2c8>)
 800b736:	21ef      	movs	r1, #239	; 0xef
 800b738:	48a6      	ldr	r0, [pc, #664]	; (800b9d4 <_dtoa_r+0x2cc>)
 800b73a:	f001 fc0b 	bl	800cf54 <__assert_func>
 800b73e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b742:	6005      	str	r5, [r0, #0]
 800b744:	60c5      	str	r5, [r0, #12]
 800b746:	69f3      	ldr	r3, [r6, #28]
 800b748:	6819      	ldr	r1, [r3, #0]
 800b74a:	b151      	cbz	r1, 800b762 <_dtoa_r+0x5a>
 800b74c:	685a      	ldr	r2, [r3, #4]
 800b74e:	604a      	str	r2, [r1, #4]
 800b750:	2301      	movs	r3, #1
 800b752:	4093      	lsls	r3, r2
 800b754:	608b      	str	r3, [r1, #8]
 800b756:	4630      	mov	r0, r6
 800b758:	f000 fe82 	bl	800c460 <_Bfree>
 800b75c:	69f3      	ldr	r3, [r6, #28]
 800b75e:	2200      	movs	r2, #0
 800b760:	601a      	str	r2, [r3, #0]
 800b762:	f1b9 0300 	subs.w	r3, r9, #0
 800b766:	bfbb      	ittet	lt
 800b768:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b76c:	9303      	strlt	r3, [sp, #12]
 800b76e:	2300      	movge	r3, #0
 800b770:	2201      	movlt	r2, #1
 800b772:	bfac      	ite	ge
 800b774:	6023      	strge	r3, [r4, #0]
 800b776:	6022      	strlt	r2, [r4, #0]
 800b778:	4b97      	ldr	r3, [pc, #604]	; (800b9d8 <_dtoa_r+0x2d0>)
 800b77a:	9c03      	ldr	r4, [sp, #12]
 800b77c:	43a3      	bics	r3, r4
 800b77e:	d11c      	bne.n	800b7ba <_dtoa_r+0xb2>
 800b780:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b782:	f242 730f 	movw	r3, #9999	; 0x270f
 800b786:	6013      	str	r3, [r2, #0]
 800b788:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b78c:	ea53 0308 	orrs.w	r3, r3, r8
 800b790:	f000 84fb 	beq.w	800c18a <_dtoa_r+0xa82>
 800b794:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b796:	b963      	cbnz	r3, 800b7b2 <_dtoa_r+0xaa>
 800b798:	4b90      	ldr	r3, [pc, #576]	; (800b9dc <_dtoa_r+0x2d4>)
 800b79a:	e020      	b.n	800b7de <_dtoa_r+0xd6>
 800b79c:	4b90      	ldr	r3, [pc, #576]	; (800b9e0 <_dtoa_r+0x2d8>)
 800b79e:	9301      	str	r3, [sp, #4]
 800b7a0:	3308      	adds	r3, #8
 800b7a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	9801      	ldr	r0, [sp, #4]
 800b7a8:	b011      	add	sp, #68	; 0x44
 800b7aa:	ecbd 8b02 	vpop	{d8}
 800b7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7b2:	4b8a      	ldr	r3, [pc, #552]	; (800b9dc <_dtoa_r+0x2d4>)
 800b7b4:	9301      	str	r3, [sp, #4]
 800b7b6:	3303      	adds	r3, #3
 800b7b8:	e7f3      	b.n	800b7a2 <_dtoa_r+0x9a>
 800b7ba:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b7be:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7c6:	d10c      	bne.n	800b7e2 <_dtoa_r+0xda>
 800b7c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	6013      	str	r3, [r2, #0]
 800b7ce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f000 84d7 	beq.w	800c184 <_dtoa_r+0xa7c>
 800b7d6:	4b83      	ldr	r3, [pc, #524]	; (800b9e4 <_dtoa_r+0x2dc>)
 800b7d8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b7da:	6013      	str	r3, [r2, #0]
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	9301      	str	r3, [sp, #4]
 800b7e0:	e7e1      	b.n	800b7a6 <_dtoa_r+0x9e>
 800b7e2:	aa0e      	add	r2, sp, #56	; 0x38
 800b7e4:	a90f      	add	r1, sp, #60	; 0x3c
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	eeb0 0b48 	vmov.f64	d0, d8
 800b7ec:	f001 f91a 	bl	800ca24 <__d2b>
 800b7f0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800b7f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d046      	beq.n	800b88a <_dtoa_r+0x182>
 800b7fc:	eeb0 7b48 	vmov.f64	d7, d8
 800b800:	ee18 1a90 	vmov	r1, s17
 800b804:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b808:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b80c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b810:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b814:	2000      	movs	r0, #0
 800b816:	ee07 1a90 	vmov	s15, r1
 800b81a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800b81e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b9b8 <_dtoa_r+0x2b0>
 800b822:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b826:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b9c0 <_dtoa_r+0x2b8>
 800b82a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b82e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b9c8 <_dtoa_r+0x2c0>
 800b832:	ee07 3a90 	vmov	s15, r3
 800b836:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b83a:	eeb0 7b46 	vmov.f64	d7, d6
 800b83e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b842:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b846:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b84e:	ee16 ba90 	vmov	fp, s13
 800b852:	9009      	str	r0, [sp, #36]	; 0x24
 800b854:	d508      	bpl.n	800b868 <_dtoa_r+0x160>
 800b856:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b85a:	eeb4 6b47 	vcmp.f64	d6, d7
 800b85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b862:	bf18      	it	ne
 800b864:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b868:	f1bb 0f16 	cmp.w	fp, #22
 800b86c:	d82b      	bhi.n	800b8c6 <_dtoa_r+0x1be>
 800b86e:	495e      	ldr	r1, [pc, #376]	; (800b9e8 <_dtoa_r+0x2e0>)
 800b870:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b874:	ed91 7b00 	vldr	d7, [r1]
 800b878:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b87c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b880:	d501      	bpl.n	800b886 <_dtoa_r+0x17e>
 800b882:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b886:	2100      	movs	r1, #0
 800b888:	e01e      	b.n	800b8c8 <_dtoa_r+0x1c0>
 800b88a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b88c:	4413      	add	r3, r2
 800b88e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800b892:	2920      	cmp	r1, #32
 800b894:	bfc1      	itttt	gt
 800b896:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800b89a:	408c      	lslgt	r4, r1
 800b89c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800b8a0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800b8a4:	bfd6      	itet	le
 800b8a6:	f1c1 0120 	rsble	r1, r1, #32
 800b8aa:	4321      	orrgt	r1, r4
 800b8ac:	fa08 f101 	lslle.w	r1, r8, r1
 800b8b0:	ee07 1a90 	vmov	s15, r1
 800b8b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	ee17 1a90 	vmov	r1, s15
 800b8be:	2001      	movs	r0, #1
 800b8c0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b8c4:	e7a7      	b.n	800b816 <_dtoa_r+0x10e>
 800b8c6:	2101      	movs	r1, #1
 800b8c8:	1ad2      	subs	r2, r2, r3
 800b8ca:	1e53      	subs	r3, r2, #1
 800b8cc:	9305      	str	r3, [sp, #20]
 800b8ce:	bf45      	ittet	mi
 800b8d0:	f1c2 0301 	rsbmi	r3, r2, #1
 800b8d4:	9304      	strmi	r3, [sp, #16]
 800b8d6:	2300      	movpl	r3, #0
 800b8d8:	2300      	movmi	r3, #0
 800b8da:	bf4c      	ite	mi
 800b8dc:	9305      	strmi	r3, [sp, #20]
 800b8de:	9304      	strpl	r3, [sp, #16]
 800b8e0:	f1bb 0f00 	cmp.w	fp, #0
 800b8e4:	910b      	str	r1, [sp, #44]	; 0x2c
 800b8e6:	db18      	blt.n	800b91a <_dtoa_r+0x212>
 800b8e8:	9b05      	ldr	r3, [sp, #20]
 800b8ea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b8ee:	445b      	add	r3, fp
 800b8f0:	9305      	str	r3, [sp, #20]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9a06      	ldr	r2, [sp, #24]
 800b8f6:	2a09      	cmp	r2, #9
 800b8f8:	d848      	bhi.n	800b98c <_dtoa_r+0x284>
 800b8fa:	2a05      	cmp	r2, #5
 800b8fc:	bfc4      	itt	gt
 800b8fe:	3a04      	subgt	r2, #4
 800b900:	9206      	strgt	r2, [sp, #24]
 800b902:	9a06      	ldr	r2, [sp, #24]
 800b904:	f1a2 0202 	sub.w	r2, r2, #2
 800b908:	bfcc      	ite	gt
 800b90a:	2400      	movgt	r4, #0
 800b90c:	2401      	movle	r4, #1
 800b90e:	2a03      	cmp	r2, #3
 800b910:	d847      	bhi.n	800b9a2 <_dtoa_r+0x29a>
 800b912:	e8df f002 	tbb	[pc, r2]
 800b916:	2d0b      	.short	0x2d0b
 800b918:	392b      	.short	0x392b
 800b91a:	9b04      	ldr	r3, [sp, #16]
 800b91c:	2200      	movs	r2, #0
 800b91e:	eba3 030b 	sub.w	r3, r3, fp
 800b922:	9304      	str	r3, [sp, #16]
 800b924:	920a      	str	r2, [sp, #40]	; 0x28
 800b926:	f1cb 0300 	rsb	r3, fp, #0
 800b92a:	e7e3      	b.n	800b8f4 <_dtoa_r+0x1ec>
 800b92c:	2200      	movs	r2, #0
 800b92e:	9207      	str	r2, [sp, #28]
 800b930:	9a08      	ldr	r2, [sp, #32]
 800b932:	2a00      	cmp	r2, #0
 800b934:	dc38      	bgt.n	800b9a8 <_dtoa_r+0x2a0>
 800b936:	f04f 0a01 	mov.w	sl, #1
 800b93a:	46d1      	mov	r9, sl
 800b93c:	4652      	mov	r2, sl
 800b93e:	f8cd a020 	str.w	sl, [sp, #32]
 800b942:	69f7      	ldr	r7, [r6, #28]
 800b944:	2100      	movs	r1, #0
 800b946:	2004      	movs	r0, #4
 800b948:	f100 0c14 	add.w	ip, r0, #20
 800b94c:	4594      	cmp	ip, r2
 800b94e:	d930      	bls.n	800b9b2 <_dtoa_r+0x2aa>
 800b950:	6079      	str	r1, [r7, #4]
 800b952:	4630      	mov	r0, r6
 800b954:	930d      	str	r3, [sp, #52]	; 0x34
 800b956:	f000 fd43 	bl	800c3e0 <_Balloc>
 800b95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b95c:	9001      	str	r0, [sp, #4]
 800b95e:	4602      	mov	r2, r0
 800b960:	2800      	cmp	r0, #0
 800b962:	d145      	bne.n	800b9f0 <_dtoa_r+0x2e8>
 800b964:	4b21      	ldr	r3, [pc, #132]	; (800b9ec <_dtoa_r+0x2e4>)
 800b966:	f240 11af 	movw	r1, #431	; 0x1af
 800b96a:	e6e5      	b.n	800b738 <_dtoa_r+0x30>
 800b96c:	2201      	movs	r2, #1
 800b96e:	e7de      	b.n	800b92e <_dtoa_r+0x226>
 800b970:	2200      	movs	r2, #0
 800b972:	9207      	str	r2, [sp, #28]
 800b974:	9a08      	ldr	r2, [sp, #32]
 800b976:	eb0b 0a02 	add.w	sl, fp, r2
 800b97a:	f10a 0901 	add.w	r9, sl, #1
 800b97e:	464a      	mov	r2, r9
 800b980:	2a01      	cmp	r2, #1
 800b982:	bfb8      	it	lt
 800b984:	2201      	movlt	r2, #1
 800b986:	e7dc      	b.n	800b942 <_dtoa_r+0x23a>
 800b988:	2201      	movs	r2, #1
 800b98a:	e7f2      	b.n	800b972 <_dtoa_r+0x26a>
 800b98c:	2401      	movs	r4, #1
 800b98e:	2200      	movs	r2, #0
 800b990:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b994:	f04f 3aff 	mov.w	sl, #4294967295
 800b998:	2100      	movs	r1, #0
 800b99a:	46d1      	mov	r9, sl
 800b99c:	2212      	movs	r2, #18
 800b99e:	9108      	str	r1, [sp, #32]
 800b9a0:	e7cf      	b.n	800b942 <_dtoa_r+0x23a>
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	9207      	str	r2, [sp, #28]
 800b9a6:	e7f5      	b.n	800b994 <_dtoa_r+0x28c>
 800b9a8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b9ac:	46d1      	mov	r9, sl
 800b9ae:	4652      	mov	r2, sl
 800b9b0:	e7c7      	b.n	800b942 <_dtoa_r+0x23a>
 800b9b2:	3101      	adds	r1, #1
 800b9b4:	0040      	lsls	r0, r0, #1
 800b9b6:	e7c7      	b.n	800b948 <_dtoa_r+0x240>
 800b9b8:	636f4361 	.word	0x636f4361
 800b9bc:	3fd287a7 	.word	0x3fd287a7
 800b9c0:	8b60c8b3 	.word	0x8b60c8b3
 800b9c4:	3fc68a28 	.word	0x3fc68a28
 800b9c8:	509f79fb 	.word	0x509f79fb
 800b9cc:	3fd34413 	.word	0x3fd34413
 800b9d0:	0800dad9 	.word	0x0800dad9
 800b9d4:	0800daf0 	.word	0x0800daf0
 800b9d8:	7ff00000 	.word	0x7ff00000
 800b9dc:	0800dad5 	.word	0x0800dad5
 800b9e0:	0800dacc 	.word	0x0800dacc
 800b9e4:	0800daa9 	.word	0x0800daa9
 800b9e8:	0800dbe0 	.word	0x0800dbe0
 800b9ec:	0800db48 	.word	0x0800db48
 800b9f0:	69f2      	ldr	r2, [r6, #28]
 800b9f2:	9901      	ldr	r1, [sp, #4]
 800b9f4:	6011      	str	r1, [r2, #0]
 800b9f6:	f1b9 0f0e 	cmp.w	r9, #14
 800b9fa:	d86c      	bhi.n	800bad6 <_dtoa_r+0x3ce>
 800b9fc:	2c00      	cmp	r4, #0
 800b9fe:	d06a      	beq.n	800bad6 <_dtoa_r+0x3ce>
 800ba00:	f1bb 0f00 	cmp.w	fp, #0
 800ba04:	f340 80a0 	ble.w	800bb48 <_dtoa_r+0x440>
 800ba08:	4ac1      	ldr	r2, [pc, #772]	; (800bd10 <_dtoa_r+0x608>)
 800ba0a:	f00b 010f 	and.w	r1, fp, #15
 800ba0e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ba12:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ba16:	ed92 7b00 	vldr	d7, [r2]
 800ba1a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ba1e:	f000 8087 	beq.w	800bb30 <_dtoa_r+0x428>
 800ba22:	49bc      	ldr	r1, [pc, #752]	; (800bd14 <_dtoa_r+0x60c>)
 800ba24:	ed91 6b08 	vldr	d6, [r1, #32]
 800ba28:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ba2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ba30:	f002 020f 	and.w	r2, r2, #15
 800ba34:	2103      	movs	r1, #3
 800ba36:	48b7      	ldr	r0, [pc, #732]	; (800bd14 <_dtoa_r+0x60c>)
 800ba38:	2a00      	cmp	r2, #0
 800ba3a:	d17b      	bne.n	800bb34 <_dtoa_r+0x42c>
 800ba3c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba40:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ba44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ba4e:	2a00      	cmp	r2, #0
 800ba50:	f000 80a0 	beq.w	800bb94 <_dtoa_r+0x48c>
 800ba54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ba58:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ba5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba60:	f140 8098 	bpl.w	800bb94 <_dtoa_r+0x48c>
 800ba64:	f1b9 0f00 	cmp.w	r9, #0
 800ba68:	f000 8094 	beq.w	800bb94 <_dtoa_r+0x48c>
 800ba6c:	f1ba 0f00 	cmp.w	sl, #0
 800ba70:	dd2f      	ble.n	800bad2 <_dtoa_r+0x3ca>
 800ba72:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ba76:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ba7a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba7e:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ba82:	3101      	adds	r1, #1
 800ba84:	4654      	mov	r4, sl
 800ba86:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ba8a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ba8e:	ee07 1a90 	vmov	s15, r1
 800ba92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ba96:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ba9a:	ee15 7a90 	vmov	r7, s11
 800ba9e:	ec51 0b15 	vmov	r0, r1, d5
 800baa2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800baa6:	2c00      	cmp	r4, #0
 800baa8:	d177      	bne.n	800bb9a <_dtoa_r+0x492>
 800baaa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800baae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bab2:	ec41 0b17 	vmov	d7, r0, r1
 800bab6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800baba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babe:	f300 826a 	bgt.w	800bf96 <_dtoa_r+0x88e>
 800bac2:	eeb1 7b47 	vneg.f64	d7, d7
 800bac6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800baca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bace:	f100 8260 	bmi.w	800bf92 <_dtoa_r+0x88a>
 800bad2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bad6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bad8:	2a00      	cmp	r2, #0
 800bada:	f2c0 811d 	blt.w	800bd18 <_dtoa_r+0x610>
 800bade:	f1bb 0f0e 	cmp.w	fp, #14
 800bae2:	f300 8119 	bgt.w	800bd18 <_dtoa_r+0x610>
 800bae6:	4b8a      	ldr	r3, [pc, #552]	; (800bd10 <_dtoa_r+0x608>)
 800bae8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800baec:	ed93 6b00 	vldr	d6, [r3]
 800baf0:	9b08      	ldr	r3, [sp, #32]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f280 80b7 	bge.w	800bc66 <_dtoa_r+0x55e>
 800baf8:	f1b9 0f00 	cmp.w	r9, #0
 800bafc:	f300 80b3 	bgt.w	800bc66 <_dtoa_r+0x55e>
 800bb00:	f040 8246 	bne.w	800bf90 <_dtoa_r+0x888>
 800bb04:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bb08:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bb0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb18:	464c      	mov	r4, r9
 800bb1a:	464f      	mov	r7, r9
 800bb1c:	f280 821c 	bge.w	800bf58 <_dtoa_r+0x850>
 800bb20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bb24:	2331      	movs	r3, #49	; 0x31
 800bb26:	f808 3b01 	strb.w	r3, [r8], #1
 800bb2a:	f10b 0b01 	add.w	fp, fp, #1
 800bb2e:	e218      	b.n	800bf62 <_dtoa_r+0x85a>
 800bb30:	2102      	movs	r1, #2
 800bb32:	e780      	b.n	800ba36 <_dtoa_r+0x32e>
 800bb34:	07d4      	lsls	r4, r2, #31
 800bb36:	d504      	bpl.n	800bb42 <_dtoa_r+0x43a>
 800bb38:	ed90 6b00 	vldr	d6, [r0]
 800bb3c:	3101      	adds	r1, #1
 800bb3e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb42:	1052      	asrs	r2, r2, #1
 800bb44:	3008      	adds	r0, #8
 800bb46:	e777      	b.n	800ba38 <_dtoa_r+0x330>
 800bb48:	d022      	beq.n	800bb90 <_dtoa_r+0x488>
 800bb4a:	f1cb 0200 	rsb	r2, fp, #0
 800bb4e:	4970      	ldr	r1, [pc, #448]	; (800bd10 <_dtoa_r+0x608>)
 800bb50:	f002 000f 	and.w	r0, r2, #15
 800bb54:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800bb58:	ed91 7b00 	vldr	d7, [r1]
 800bb5c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800bb60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb64:	486b      	ldr	r0, [pc, #428]	; (800bd14 <_dtoa_r+0x60c>)
 800bb66:	1112      	asrs	r2, r2, #4
 800bb68:	2400      	movs	r4, #0
 800bb6a:	2102      	movs	r1, #2
 800bb6c:	b92a      	cbnz	r2, 800bb7a <_dtoa_r+0x472>
 800bb6e:	2c00      	cmp	r4, #0
 800bb70:	f43f af6a 	beq.w	800ba48 <_dtoa_r+0x340>
 800bb74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb78:	e766      	b.n	800ba48 <_dtoa_r+0x340>
 800bb7a:	07d7      	lsls	r7, r2, #31
 800bb7c:	d505      	bpl.n	800bb8a <_dtoa_r+0x482>
 800bb7e:	ed90 6b00 	vldr	d6, [r0]
 800bb82:	3101      	adds	r1, #1
 800bb84:	2401      	movs	r4, #1
 800bb86:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bb8a:	1052      	asrs	r2, r2, #1
 800bb8c:	3008      	adds	r0, #8
 800bb8e:	e7ed      	b.n	800bb6c <_dtoa_r+0x464>
 800bb90:	2102      	movs	r1, #2
 800bb92:	e759      	b.n	800ba48 <_dtoa_r+0x340>
 800bb94:	465a      	mov	r2, fp
 800bb96:	464c      	mov	r4, r9
 800bb98:	e775      	b.n	800ba86 <_dtoa_r+0x37e>
 800bb9a:	ec41 0b17 	vmov	d7, r0, r1
 800bb9e:	495c      	ldr	r1, [pc, #368]	; (800bd10 <_dtoa_r+0x608>)
 800bba0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800bba4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800bba8:	9901      	ldr	r1, [sp, #4]
 800bbaa:	440c      	add	r4, r1
 800bbac:	9907      	ldr	r1, [sp, #28]
 800bbae:	b351      	cbz	r1, 800bc06 <_dtoa_r+0x4fe>
 800bbb0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bbb4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bbb8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bbbc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bbc0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bbc4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bbc8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bbcc:	ee14 1a90 	vmov	r1, s9
 800bbd0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bbd4:	3130      	adds	r1, #48	; 0x30
 800bbd6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bbda:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe2:	f808 1b01 	strb.w	r1, [r8], #1
 800bbe6:	d439      	bmi.n	800bc5c <_dtoa_r+0x554>
 800bbe8:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bbec:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bbf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf4:	d472      	bmi.n	800bcdc <_dtoa_r+0x5d4>
 800bbf6:	45a0      	cmp	r8, r4
 800bbf8:	f43f af6b 	beq.w	800bad2 <_dtoa_r+0x3ca>
 800bbfc:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bc00:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc04:	e7e0      	b.n	800bbc8 <_dtoa_r+0x4c0>
 800bc06:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc0a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bc0e:	4620      	mov	r0, r4
 800bc10:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bc14:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bc18:	ee14 1a90 	vmov	r1, s9
 800bc1c:	3130      	adds	r1, #48	; 0x30
 800bc1e:	f808 1b01 	strb.w	r1, [r8], #1
 800bc22:	45a0      	cmp	r8, r4
 800bc24:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bc28:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bc2c:	d118      	bne.n	800bc60 <_dtoa_r+0x558>
 800bc2e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bc32:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bc36:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3e:	dc4d      	bgt.n	800bcdc <_dtoa_r+0x5d4>
 800bc40:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bc44:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4c:	f57f af41 	bpl.w	800bad2 <_dtoa_r+0x3ca>
 800bc50:	4680      	mov	r8, r0
 800bc52:	3801      	subs	r0, #1
 800bc54:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800bc58:	2b30      	cmp	r3, #48	; 0x30
 800bc5a:	d0f9      	beq.n	800bc50 <_dtoa_r+0x548>
 800bc5c:	4693      	mov	fp, r2
 800bc5e:	e02a      	b.n	800bcb6 <_dtoa_r+0x5ae>
 800bc60:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bc64:	e7d6      	b.n	800bc14 <_dtoa_r+0x50c>
 800bc66:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc6a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bc6e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bc72:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bc76:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bc7a:	ee15 3a10 	vmov	r3, s10
 800bc7e:	3330      	adds	r3, #48	; 0x30
 800bc80:	f808 3b01 	strb.w	r3, [r8], #1
 800bc84:	9b01      	ldr	r3, [sp, #4]
 800bc86:	eba8 0303 	sub.w	r3, r8, r3
 800bc8a:	4599      	cmp	r9, r3
 800bc8c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bc90:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bc94:	d133      	bne.n	800bcfe <_dtoa_r+0x5f6>
 800bc96:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bc9a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca2:	dc1a      	bgt.n	800bcda <_dtoa_r+0x5d2>
 800bca4:	eeb4 7b46 	vcmp.f64	d7, d6
 800bca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcac:	d103      	bne.n	800bcb6 <_dtoa_r+0x5ae>
 800bcae:	ee15 3a10 	vmov	r3, s10
 800bcb2:	07d9      	lsls	r1, r3, #31
 800bcb4:	d411      	bmi.n	800bcda <_dtoa_r+0x5d2>
 800bcb6:	4629      	mov	r1, r5
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f000 fbd1 	bl	800c460 <_Bfree>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcc2:	f888 3000 	strb.w	r3, [r8]
 800bcc6:	f10b 0301 	add.w	r3, fp, #1
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f43f ad69 	beq.w	800b7a6 <_dtoa_r+0x9e>
 800bcd4:	f8c3 8000 	str.w	r8, [r3]
 800bcd8:	e565      	b.n	800b7a6 <_dtoa_r+0x9e>
 800bcda:	465a      	mov	r2, fp
 800bcdc:	4643      	mov	r3, r8
 800bcde:	4698      	mov	r8, r3
 800bce0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800bce4:	2939      	cmp	r1, #57	; 0x39
 800bce6:	d106      	bne.n	800bcf6 <_dtoa_r+0x5ee>
 800bce8:	9901      	ldr	r1, [sp, #4]
 800bcea:	4299      	cmp	r1, r3
 800bcec:	d1f7      	bne.n	800bcde <_dtoa_r+0x5d6>
 800bcee:	9801      	ldr	r0, [sp, #4]
 800bcf0:	2130      	movs	r1, #48	; 0x30
 800bcf2:	3201      	adds	r2, #1
 800bcf4:	7001      	strb	r1, [r0, #0]
 800bcf6:	7819      	ldrb	r1, [r3, #0]
 800bcf8:	3101      	adds	r1, #1
 800bcfa:	7019      	strb	r1, [r3, #0]
 800bcfc:	e7ae      	b.n	800bc5c <_dtoa_r+0x554>
 800bcfe:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bd02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd0a:	d1b2      	bne.n	800bc72 <_dtoa_r+0x56a>
 800bd0c:	e7d3      	b.n	800bcb6 <_dtoa_r+0x5ae>
 800bd0e:	bf00      	nop
 800bd10:	0800dbe0 	.word	0x0800dbe0
 800bd14:	0800dbb8 	.word	0x0800dbb8
 800bd18:	9907      	ldr	r1, [sp, #28]
 800bd1a:	2900      	cmp	r1, #0
 800bd1c:	f000 80d0 	beq.w	800bec0 <_dtoa_r+0x7b8>
 800bd20:	9906      	ldr	r1, [sp, #24]
 800bd22:	2901      	cmp	r1, #1
 800bd24:	f300 80b4 	bgt.w	800be90 <_dtoa_r+0x788>
 800bd28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd2a:	2900      	cmp	r1, #0
 800bd2c:	f000 80ac 	beq.w	800be88 <_dtoa_r+0x780>
 800bd30:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bd34:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bd38:	461c      	mov	r4, r3
 800bd3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bd3c:	9b04      	ldr	r3, [sp, #16]
 800bd3e:	4413      	add	r3, r2
 800bd40:	9304      	str	r3, [sp, #16]
 800bd42:	9b05      	ldr	r3, [sp, #20]
 800bd44:	2101      	movs	r1, #1
 800bd46:	4413      	add	r3, r2
 800bd48:	4630      	mov	r0, r6
 800bd4a:	9305      	str	r3, [sp, #20]
 800bd4c:	f000 fc3e 	bl	800c5cc <__i2b>
 800bd50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd52:	4607      	mov	r7, r0
 800bd54:	f1b8 0f00 	cmp.w	r8, #0
 800bd58:	d00d      	beq.n	800bd76 <_dtoa_r+0x66e>
 800bd5a:	9a05      	ldr	r2, [sp, #20]
 800bd5c:	2a00      	cmp	r2, #0
 800bd5e:	dd0a      	ble.n	800bd76 <_dtoa_r+0x66e>
 800bd60:	4542      	cmp	r2, r8
 800bd62:	9904      	ldr	r1, [sp, #16]
 800bd64:	bfa8      	it	ge
 800bd66:	4642      	movge	r2, r8
 800bd68:	1a89      	subs	r1, r1, r2
 800bd6a:	9104      	str	r1, [sp, #16]
 800bd6c:	9905      	ldr	r1, [sp, #20]
 800bd6e:	eba8 0802 	sub.w	r8, r8, r2
 800bd72:	1a8a      	subs	r2, r1, r2
 800bd74:	9205      	str	r2, [sp, #20]
 800bd76:	b303      	cbz	r3, 800bdba <_dtoa_r+0x6b2>
 800bd78:	9a07      	ldr	r2, [sp, #28]
 800bd7a:	2a00      	cmp	r2, #0
 800bd7c:	f000 80a5 	beq.w	800beca <_dtoa_r+0x7c2>
 800bd80:	2c00      	cmp	r4, #0
 800bd82:	dd13      	ble.n	800bdac <_dtoa_r+0x6a4>
 800bd84:	4639      	mov	r1, r7
 800bd86:	4622      	mov	r2, r4
 800bd88:	4630      	mov	r0, r6
 800bd8a:	930d      	str	r3, [sp, #52]	; 0x34
 800bd8c:	f000 fcde 	bl	800c74c <__pow5mult>
 800bd90:	462a      	mov	r2, r5
 800bd92:	4601      	mov	r1, r0
 800bd94:	4607      	mov	r7, r0
 800bd96:	4630      	mov	r0, r6
 800bd98:	f000 fc2e 	bl	800c5f8 <__multiply>
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	9009      	str	r0, [sp, #36]	; 0x24
 800bda0:	4630      	mov	r0, r6
 800bda2:	f000 fb5d 	bl	800c460 <_Bfree>
 800bda6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bda8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdaa:	4615      	mov	r5, r2
 800bdac:	1b1a      	subs	r2, r3, r4
 800bdae:	d004      	beq.n	800bdba <_dtoa_r+0x6b2>
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f000 fcca 	bl	800c74c <__pow5mult>
 800bdb8:	4605      	mov	r5, r0
 800bdba:	2101      	movs	r1, #1
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	f000 fc05 	bl	800c5cc <__i2b>
 800bdc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	f340 8081 	ble.w	800bece <_dtoa_r+0x7c6>
 800bdcc:	461a      	mov	r2, r3
 800bdce:	4601      	mov	r1, r0
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	f000 fcbb 	bl	800c74c <__pow5mult>
 800bdd6:	9b06      	ldr	r3, [sp, #24]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	4604      	mov	r4, r0
 800bddc:	dd7a      	ble.n	800bed4 <_dtoa_r+0x7cc>
 800bdde:	2300      	movs	r3, #0
 800bde0:	9309      	str	r3, [sp, #36]	; 0x24
 800bde2:	6922      	ldr	r2, [r4, #16]
 800bde4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bde8:	6910      	ldr	r0, [r2, #16]
 800bdea:	f000 fba1 	bl	800c530 <__hi0bits>
 800bdee:	f1c0 0020 	rsb	r0, r0, #32
 800bdf2:	9b05      	ldr	r3, [sp, #20]
 800bdf4:	4418      	add	r0, r3
 800bdf6:	f010 001f 	ands.w	r0, r0, #31
 800bdfa:	f000 8093 	beq.w	800bf24 <_dtoa_r+0x81c>
 800bdfe:	f1c0 0220 	rsb	r2, r0, #32
 800be02:	2a04      	cmp	r2, #4
 800be04:	f340 8085 	ble.w	800bf12 <_dtoa_r+0x80a>
 800be08:	9b04      	ldr	r3, [sp, #16]
 800be0a:	f1c0 001c 	rsb	r0, r0, #28
 800be0e:	4403      	add	r3, r0
 800be10:	9304      	str	r3, [sp, #16]
 800be12:	9b05      	ldr	r3, [sp, #20]
 800be14:	4480      	add	r8, r0
 800be16:	4403      	add	r3, r0
 800be18:	9305      	str	r3, [sp, #20]
 800be1a:	9b04      	ldr	r3, [sp, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	dd05      	ble.n	800be2c <_dtoa_r+0x724>
 800be20:	4629      	mov	r1, r5
 800be22:	461a      	mov	r2, r3
 800be24:	4630      	mov	r0, r6
 800be26:	f000 fceb 	bl	800c800 <__lshift>
 800be2a:	4605      	mov	r5, r0
 800be2c:	9b05      	ldr	r3, [sp, #20]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	dd05      	ble.n	800be3e <_dtoa_r+0x736>
 800be32:	4621      	mov	r1, r4
 800be34:	461a      	mov	r2, r3
 800be36:	4630      	mov	r0, r6
 800be38:	f000 fce2 	bl	800c800 <__lshift>
 800be3c:	4604      	mov	r4, r0
 800be3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be40:	2b00      	cmp	r3, #0
 800be42:	d071      	beq.n	800bf28 <_dtoa_r+0x820>
 800be44:	4621      	mov	r1, r4
 800be46:	4628      	mov	r0, r5
 800be48:	f000 fd46 	bl	800c8d8 <__mcmp>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	da6b      	bge.n	800bf28 <_dtoa_r+0x820>
 800be50:	2300      	movs	r3, #0
 800be52:	4629      	mov	r1, r5
 800be54:	220a      	movs	r2, #10
 800be56:	4630      	mov	r0, r6
 800be58:	f000 fb24 	bl	800c4a4 <__multadd>
 800be5c:	9b07      	ldr	r3, [sp, #28]
 800be5e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800be62:	4605      	mov	r5, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 8197 	beq.w	800c198 <_dtoa_r+0xa90>
 800be6a:	4639      	mov	r1, r7
 800be6c:	2300      	movs	r3, #0
 800be6e:	220a      	movs	r2, #10
 800be70:	4630      	mov	r0, r6
 800be72:	f000 fb17 	bl	800c4a4 <__multadd>
 800be76:	f1ba 0f00 	cmp.w	sl, #0
 800be7a:	4607      	mov	r7, r0
 800be7c:	f300 8093 	bgt.w	800bfa6 <_dtoa_r+0x89e>
 800be80:	9b06      	ldr	r3, [sp, #24]
 800be82:	2b02      	cmp	r3, #2
 800be84:	dc57      	bgt.n	800bf36 <_dtoa_r+0x82e>
 800be86:	e08e      	b.n	800bfa6 <_dtoa_r+0x89e>
 800be88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be8e:	e751      	b.n	800bd34 <_dtoa_r+0x62c>
 800be90:	f109 34ff 	add.w	r4, r9, #4294967295
 800be94:	42a3      	cmp	r3, r4
 800be96:	bfbf      	itttt	lt
 800be98:	1ae2      	sublt	r2, r4, r3
 800be9a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800be9c:	189b      	addlt	r3, r3, r2
 800be9e:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bea0:	bfae      	itee	ge
 800bea2:	1b1c      	subge	r4, r3, r4
 800bea4:	4623      	movlt	r3, r4
 800bea6:	2400      	movlt	r4, #0
 800bea8:	f1b9 0f00 	cmp.w	r9, #0
 800beac:	bfb5      	itete	lt
 800beae:	9a04      	ldrlt	r2, [sp, #16]
 800beb0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800beb4:	eba2 0809 	sublt.w	r8, r2, r9
 800beb8:	464a      	movge	r2, r9
 800beba:	bfb8      	it	lt
 800bebc:	2200      	movlt	r2, #0
 800bebe:	e73c      	b.n	800bd3a <_dtoa_r+0x632>
 800bec0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bec4:	9f07      	ldr	r7, [sp, #28]
 800bec6:	461c      	mov	r4, r3
 800bec8:	e744      	b.n	800bd54 <_dtoa_r+0x64c>
 800beca:	461a      	mov	r2, r3
 800becc:	e770      	b.n	800bdb0 <_dtoa_r+0x6a8>
 800bece:	9b06      	ldr	r3, [sp, #24]
 800bed0:	2b01      	cmp	r3, #1
 800bed2:	dc18      	bgt.n	800bf06 <_dtoa_r+0x7fe>
 800bed4:	9b02      	ldr	r3, [sp, #8]
 800bed6:	b9b3      	cbnz	r3, 800bf06 <_dtoa_r+0x7fe>
 800bed8:	9b03      	ldr	r3, [sp, #12]
 800beda:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bede:	b9a2      	cbnz	r2, 800bf0a <_dtoa_r+0x802>
 800bee0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bee4:	0d12      	lsrs	r2, r2, #20
 800bee6:	0512      	lsls	r2, r2, #20
 800bee8:	b18a      	cbz	r2, 800bf0e <_dtoa_r+0x806>
 800beea:	9b04      	ldr	r3, [sp, #16]
 800beec:	3301      	adds	r3, #1
 800beee:	9304      	str	r3, [sp, #16]
 800bef0:	9b05      	ldr	r3, [sp, #20]
 800bef2:	3301      	adds	r3, #1
 800bef4:	9305      	str	r3, [sp, #20]
 800bef6:	2301      	movs	r3, #1
 800bef8:	9309      	str	r3, [sp, #36]	; 0x24
 800befa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800befc:	2b00      	cmp	r3, #0
 800befe:	f47f af70 	bne.w	800bde2 <_dtoa_r+0x6da>
 800bf02:	2001      	movs	r0, #1
 800bf04:	e775      	b.n	800bdf2 <_dtoa_r+0x6ea>
 800bf06:	2300      	movs	r3, #0
 800bf08:	e7f6      	b.n	800bef8 <_dtoa_r+0x7f0>
 800bf0a:	9b02      	ldr	r3, [sp, #8]
 800bf0c:	e7f4      	b.n	800bef8 <_dtoa_r+0x7f0>
 800bf0e:	9209      	str	r2, [sp, #36]	; 0x24
 800bf10:	e7f3      	b.n	800befa <_dtoa_r+0x7f2>
 800bf12:	d082      	beq.n	800be1a <_dtoa_r+0x712>
 800bf14:	9b04      	ldr	r3, [sp, #16]
 800bf16:	321c      	adds	r2, #28
 800bf18:	4413      	add	r3, r2
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	9b05      	ldr	r3, [sp, #20]
 800bf1e:	4490      	add	r8, r2
 800bf20:	4413      	add	r3, r2
 800bf22:	e779      	b.n	800be18 <_dtoa_r+0x710>
 800bf24:	4602      	mov	r2, r0
 800bf26:	e7f5      	b.n	800bf14 <_dtoa_r+0x80c>
 800bf28:	f1b9 0f00 	cmp.w	r9, #0
 800bf2c:	dc36      	bgt.n	800bf9c <_dtoa_r+0x894>
 800bf2e:	9b06      	ldr	r3, [sp, #24]
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	dd33      	ble.n	800bf9c <_dtoa_r+0x894>
 800bf34:	46ca      	mov	sl, r9
 800bf36:	f1ba 0f00 	cmp.w	sl, #0
 800bf3a:	d10d      	bne.n	800bf58 <_dtoa_r+0x850>
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	4653      	mov	r3, sl
 800bf40:	2205      	movs	r2, #5
 800bf42:	4630      	mov	r0, r6
 800bf44:	f000 faae 	bl	800c4a4 <__multadd>
 800bf48:	4601      	mov	r1, r0
 800bf4a:	4604      	mov	r4, r0
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	f000 fcc3 	bl	800c8d8 <__mcmp>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	f73f ade4 	bgt.w	800bb20 <_dtoa_r+0x418>
 800bf58:	9b08      	ldr	r3, [sp, #32]
 800bf5a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bf5e:	ea6f 0b03 	mvn.w	fp, r3
 800bf62:	f04f 0900 	mov.w	r9, #0
 800bf66:	4621      	mov	r1, r4
 800bf68:	4630      	mov	r0, r6
 800bf6a:	f000 fa79 	bl	800c460 <_Bfree>
 800bf6e:	2f00      	cmp	r7, #0
 800bf70:	f43f aea1 	beq.w	800bcb6 <_dtoa_r+0x5ae>
 800bf74:	f1b9 0f00 	cmp.w	r9, #0
 800bf78:	d005      	beq.n	800bf86 <_dtoa_r+0x87e>
 800bf7a:	45b9      	cmp	r9, r7
 800bf7c:	d003      	beq.n	800bf86 <_dtoa_r+0x87e>
 800bf7e:	4649      	mov	r1, r9
 800bf80:	4630      	mov	r0, r6
 800bf82:	f000 fa6d 	bl	800c460 <_Bfree>
 800bf86:	4639      	mov	r1, r7
 800bf88:	4630      	mov	r0, r6
 800bf8a:	f000 fa69 	bl	800c460 <_Bfree>
 800bf8e:	e692      	b.n	800bcb6 <_dtoa_r+0x5ae>
 800bf90:	2400      	movs	r4, #0
 800bf92:	4627      	mov	r7, r4
 800bf94:	e7e0      	b.n	800bf58 <_dtoa_r+0x850>
 800bf96:	4693      	mov	fp, r2
 800bf98:	4627      	mov	r7, r4
 800bf9a:	e5c1      	b.n	800bb20 <_dtoa_r+0x418>
 800bf9c:	9b07      	ldr	r3, [sp, #28]
 800bf9e:	46ca      	mov	sl, r9
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f000 8100 	beq.w	800c1a6 <_dtoa_r+0xa9e>
 800bfa6:	f1b8 0f00 	cmp.w	r8, #0
 800bfaa:	dd05      	ble.n	800bfb8 <_dtoa_r+0x8b0>
 800bfac:	4639      	mov	r1, r7
 800bfae:	4642      	mov	r2, r8
 800bfb0:	4630      	mov	r0, r6
 800bfb2:	f000 fc25 	bl	800c800 <__lshift>
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d05d      	beq.n	800c07a <_dtoa_r+0x972>
 800bfbe:	6879      	ldr	r1, [r7, #4]
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f000 fa0d 	bl	800c3e0 <_Balloc>
 800bfc6:	4680      	mov	r8, r0
 800bfc8:	b928      	cbnz	r0, 800bfd6 <_dtoa_r+0x8ce>
 800bfca:	4b82      	ldr	r3, [pc, #520]	; (800c1d4 <_dtoa_r+0xacc>)
 800bfcc:	4602      	mov	r2, r0
 800bfce:	f240 21ef 	movw	r1, #751	; 0x2ef
 800bfd2:	f7ff bbb1 	b.w	800b738 <_dtoa_r+0x30>
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	3202      	adds	r2, #2
 800bfda:	0092      	lsls	r2, r2, #2
 800bfdc:	f107 010c 	add.w	r1, r7, #12
 800bfe0:	300c      	adds	r0, #12
 800bfe2:	f000 ffa9 	bl	800cf38 <memcpy>
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	4641      	mov	r1, r8
 800bfea:	4630      	mov	r0, r6
 800bfec:	f000 fc08 	bl	800c800 <__lshift>
 800bff0:	9b01      	ldr	r3, [sp, #4]
 800bff2:	3301      	adds	r3, #1
 800bff4:	9304      	str	r3, [sp, #16]
 800bff6:	9b01      	ldr	r3, [sp, #4]
 800bff8:	4453      	add	r3, sl
 800bffa:	9308      	str	r3, [sp, #32]
 800bffc:	9b02      	ldr	r3, [sp, #8]
 800bffe:	f003 0301 	and.w	r3, r3, #1
 800c002:	46b9      	mov	r9, r7
 800c004:	9307      	str	r3, [sp, #28]
 800c006:	4607      	mov	r7, r0
 800c008:	9b04      	ldr	r3, [sp, #16]
 800c00a:	4621      	mov	r1, r4
 800c00c:	3b01      	subs	r3, #1
 800c00e:	4628      	mov	r0, r5
 800c010:	9302      	str	r3, [sp, #8]
 800c012:	f7ff faf0 	bl	800b5f6 <quorem>
 800c016:	4603      	mov	r3, r0
 800c018:	3330      	adds	r3, #48	; 0x30
 800c01a:	9005      	str	r0, [sp, #20]
 800c01c:	4649      	mov	r1, r9
 800c01e:	4628      	mov	r0, r5
 800c020:	9309      	str	r3, [sp, #36]	; 0x24
 800c022:	f000 fc59 	bl	800c8d8 <__mcmp>
 800c026:	463a      	mov	r2, r7
 800c028:	4682      	mov	sl, r0
 800c02a:	4621      	mov	r1, r4
 800c02c:	4630      	mov	r0, r6
 800c02e:	f000 fc6f 	bl	800c910 <__mdiff>
 800c032:	68c2      	ldr	r2, [r0, #12]
 800c034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c036:	4680      	mov	r8, r0
 800c038:	bb0a      	cbnz	r2, 800c07e <_dtoa_r+0x976>
 800c03a:	4601      	mov	r1, r0
 800c03c:	4628      	mov	r0, r5
 800c03e:	f000 fc4b 	bl	800c8d8 <__mcmp>
 800c042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c044:	4602      	mov	r2, r0
 800c046:	4641      	mov	r1, r8
 800c048:	4630      	mov	r0, r6
 800c04a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800c04e:	f000 fa07 	bl	800c460 <_Bfree>
 800c052:	9b06      	ldr	r3, [sp, #24]
 800c054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c056:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800c05a:	ea43 0102 	orr.w	r1, r3, r2
 800c05e:	9b07      	ldr	r3, [sp, #28]
 800c060:	4319      	orrs	r1, r3
 800c062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c064:	d10d      	bne.n	800c082 <_dtoa_r+0x97a>
 800c066:	2b39      	cmp	r3, #57	; 0x39
 800c068:	d029      	beq.n	800c0be <_dtoa_r+0x9b6>
 800c06a:	f1ba 0f00 	cmp.w	sl, #0
 800c06e:	dd01      	ble.n	800c074 <_dtoa_r+0x96c>
 800c070:	9b05      	ldr	r3, [sp, #20]
 800c072:	3331      	adds	r3, #49	; 0x31
 800c074:	9a02      	ldr	r2, [sp, #8]
 800c076:	7013      	strb	r3, [r2, #0]
 800c078:	e775      	b.n	800bf66 <_dtoa_r+0x85e>
 800c07a:	4638      	mov	r0, r7
 800c07c:	e7b8      	b.n	800bff0 <_dtoa_r+0x8e8>
 800c07e:	2201      	movs	r2, #1
 800c080:	e7e1      	b.n	800c046 <_dtoa_r+0x93e>
 800c082:	f1ba 0f00 	cmp.w	sl, #0
 800c086:	db06      	blt.n	800c096 <_dtoa_r+0x98e>
 800c088:	9906      	ldr	r1, [sp, #24]
 800c08a:	ea41 0a0a 	orr.w	sl, r1, sl
 800c08e:	9907      	ldr	r1, [sp, #28]
 800c090:	ea5a 0a01 	orrs.w	sl, sl, r1
 800c094:	d120      	bne.n	800c0d8 <_dtoa_r+0x9d0>
 800c096:	2a00      	cmp	r2, #0
 800c098:	ddec      	ble.n	800c074 <_dtoa_r+0x96c>
 800c09a:	4629      	mov	r1, r5
 800c09c:	2201      	movs	r2, #1
 800c09e:	4630      	mov	r0, r6
 800c0a0:	9304      	str	r3, [sp, #16]
 800c0a2:	f000 fbad 	bl	800c800 <__lshift>
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4605      	mov	r5, r0
 800c0aa:	f000 fc15 	bl	800c8d8 <__mcmp>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	9b04      	ldr	r3, [sp, #16]
 800c0b2:	dc02      	bgt.n	800c0ba <_dtoa_r+0x9b2>
 800c0b4:	d1de      	bne.n	800c074 <_dtoa_r+0x96c>
 800c0b6:	07da      	lsls	r2, r3, #31
 800c0b8:	d5dc      	bpl.n	800c074 <_dtoa_r+0x96c>
 800c0ba:	2b39      	cmp	r3, #57	; 0x39
 800c0bc:	d1d8      	bne.n	800c070 <_dtoa_r+0x968>
 800c0be:	9a02      	ldr	r2, [sp, #8]
 800c0c0:	2339      	movs	r3, #57	; 0x39
 800c0c2:	7013      	strb	r3, [r2, #0]
 800c0c4:	4643      	mov	r3, r8
 800c0c6:	4698      	mov	r8, r3
 800c0c8:	3b01      	subs	r3, #1
 800c0ca:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c0ce:	2a39      	cmp	r2, #57	; 0x39
 800c0d0:	d051      	beq.n	800c176 <_dtoa_r+0xa6e>
 800c0d2:	3201      	adds	r2, #1
 800c0d4:	701a      	strb	r2, [r3, #0]
 800c0d6:	e746      	b.n	800bf66 <_dtoa_r+0x85e>
 800c0d8:	2a00      	cmp	r2, #0
 800c0da:	dd03      	ble.n	800c0e4 <_dtoa_r+0x9dc>
 800c0dc:	2b39      	cmp	r3, #57	; 0x39
 800c0de:	d0ee      	beq.n	800c0be <_dtoa_r+0x9b6>
 800c0e0:	3301      	adds	r3, #1
 800c0e2:	e7c7      	b.n	800c074 <_dtoa_r+0x96c>
 800c0e4:	9a04      	ldr	r2, [sp, #16]
 800c0e6:	9908      	ldr	r1, [sp, #32]
 800c0e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c0ec:	428a      	cmp	r2, r1
 800c0ee:	d02b      	beq.n	800c148 <_dtoa_r+0xa40>
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	220a      	movs	r2, #10
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f000 f9d4 	bl	800c4a4 <__multadd>
 800c0fc:	45b9      	cmp	r9, r7
 800c0fe:	4605      	mov	r5, r0
 800c100:	f04f 0300 	mov.w	r3, #0
 800c104:	f04f 020a 	mov.w	r2, #10
 800c108:	4649      	mov	r1, r9
 800c10a:	4630      	mov	r0, r6
 800c10c:	d107      	bne.n	800c11e <_dtoa_r+0xa16>
 800c10e:	f000 f9c9 	bl	800c4a4 <__multadd>
 800c112:	4681      	mov	r9, r0
 800c114:	4607      	mov	r7, r0
 800c116:	9b04      	ldr	r3, [sp, #16]
 800c118:	3301      	adds	r3, #1
 800c11a:	9304      	str	r3, [sp, #16]
 800c11c:	e774      	b.n	800c008 <_dtoa_r+0x900>
 800c11e:	f000 f9c1 	bl	800c4a4 <__multadd>
 800c122:	4639      	mov	r1, r7
 800c124:	4681      	mov	r9, r0
 800c126:	2300      	movs	r3, #0
 800c128:	220a      	movs	r2, #10
 800c12a:	4630      	mov	r0, r6
 800c12c:	f000 f9ba 	bl	800c4a4 <__multadd>
 800c130:	4607      	mov	r7, r0
 800c132:	e7f0      	b.n	800c116 <_dtoa_r+0xa0e>
 800c134:	f1ba 0f00 	cmp.w	sl, #0
 800c138:	9a01      	ldr	r2, [sp, #4]
 800c13a:	bfcc      	ite	gt
 800c13c:	46d0      	movgt	r8, sl
 800c13e:	f04f 0801 	movle.w	r8, #1
 800c142:	4490      	add	r8, r2
 800c144:	f04f 0900 	mov.w	r9, #0
 800c148:	4629      	mov	r1, r5
 800c14a:	2201      	movs	r2, #1
 800c14c:	4630      	mov	r0, r6
 800c14e:	9302      	str	r3, [sp, #8]
 800c150:	f000 fb56 	bl	800c800 <__lshift>
 800c154:	4621      	mov	r1, r4
 800c156:	4605      	mov	r5, r0
 800c158:	f000 fbbe 	bl	800c8d8 <__mcmp>
 800c15c:	2800      	cmp	r0, #0
 800c15e:	dcb1      	bgt.n	800c0c4 <_dtoa_r+0x9bc>
 800c160:	d102      	bne.n	800c168 <_dtoa_r+0xa60>
 800c162:	9b02      	ldr	r3, [sp, #8]
 800c164:	07db      	lsls	r3, r3, #31
 800c166:	d4ad      	bmi.n	800c0c4 <_dtoa_r+0x9bc>
 800c168:	4643      	mov	r3, r8
 800c16a:	4698      	mov	r8, r3
 800c16c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c170:	2a30      	cmp	r2, #48	; 0x30
 800c172:	d0fa      	beq.n	800c16a <_dtoa_r+0xa62>
 800c174:	e6f7      	b.n	800bf66 <_dtoa_r+0x85e>
 800c176:	9a01      	ldr	r2, [sp, #4]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d1a4      	bne.n	800c0c6 <_dtoa_r+0x9be>
 800c17c:	f10b 0b01 	add.w	fp, fp, #1
 800c180:	2331      	movs	r3, #49	; 0x31
 800c182:	e778      	b.n	800c076 <_dtoa_r+0x96e>
 800c184:	4b14      	ldr	r3, [pc, #80]	; (800c1d8 <_dtoa_r+0xad0>)
 800c186:	f7ff bb2a 	b.w	800b7de <_dtoa_r+0xd6>
 800c18a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f47f ab05 	bne.w	800b79c <_dtoa_r+0x94>
 800c192:	4b12      	ldr	r3, [pc, #72]	; (800c1dc <_dtoa_r+0xad4>)
 800c194:	f7ff bb23 	b.w	800b7de <_dtoa_r+0xd6>
 800c198:	f1ba 0f00 	cmp.w	sl, #0
 800c19c:	dc03      	bgt.n	800c1a6 <_dtoa_r+0xa9e>
 800c19e:	9b06      	ldr	r3, [sp, #24]
 800c1a0:	2b02      	cmp	r3, #2
 800c1a2:	f73f aec8 	bgt.w	800bf36 <_dtoa_r+0x82e>
 800c1a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	f7ff fa22 	bl	800b5f6 <quorem>
 800c1b2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c1b6:	f808 3b01 	strb.w	r3, [r8], #1
 800c1ba:	9a01      	ldr	r2, [sp, #4]
 800c1bc:	eba8 0202 	sub.w	r2, r8, r2
 800c1c0:	4592      	cmp	sl, r2
 800c1c2:	ddb7      	ble.n	800c134 <_dtoa_r+0xa2c>
 800c1c4:	4629      	mov	r1, r5
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	220a      	movs	r2, #10
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	f000 f96a 	bl	800c4a4 <__multadd>
 800c1d0:	4605      	mov	r5, r0
 800c1d2:	e7ea      	b.n	800c1aa <_dtoa_r+0xaa2>
 800c1d4:	0800db48 	.word	0x0800db48
 800c1d8:	0800daa8 	.word	0x0800daa8
 800c1dc:	0800dacc 	.word	0x0800dacc

0800c1e0 <_free_r>:
 800c1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1e2:	2900      	cmp	r1, #0
 800c1e4:	d044      	beq.n	800c270 <_free_r+0x90>
 800c1e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1ea:	9001      	str	r0, [sp, #4]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	f1a1 0404 	sub.w	r4, r1, #4
 800c1f2:	bfb8      	it	lt
 800c1f4:	18e4      	addlt	r4, r4, r3
 800c1f6:	f000 f8e7 	bl	800c3c8 <__malloc_lock>
 800c1fa:	4a1e      	ldr	r2, [pc, #120]	; (800c274 <_free_r+0x94>)
 800c1fc:	9801      	ldr	r0, [sp, #4]
 800c1fe:	6813      	ldr	r3, [r2, #0]
 800c200:	b933      	cbnz	r3, 800c210 <_free_r+0x30>
 800c202:	6063      	str	r3, [r4, #4]
 800c204:	6014      	str	r4, [r2, #0]
 800c206:	b003      	add	sp, #12
 800c208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c20c:	f000 b8e2 	b.w	800c3d4 <__malloc_unlock>
 800c210:	42a3      	cmp	r3, r4
 800c212:	d908      	bls.n	800c226 <_free_r+0x46>
 800c214:	6825      	ldr	r5, [r4, #0]
 800c216:	1961      	adds	r1, r4, r5
 800c218:	428b      	cmp	r3, r1
 800c21a:	bf01      	itttt	eq
 800c21c:	6819      	ldreq	r1, [r3, #0]
 800c21e:	685b      	ldreq	r3, [r3, #4]
 800c220:	1949      	addeq	r1, r1, r5
 800c222:	6021      	streq	r1, [r4, #0]
 800c224:	e7ed      	b.n	800c202 <_free_r+0x22>
 800c226:	461a      	mov	r2, r3
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	b10b      	cbz	r3, 800c230 <_free_r+0x50>
 800c22c:	42a3      	cmp	r3, r4
 800c22e:	d9fa      	bls.n	800c226 <_free_r+0x46>
 800c230:	6811      	ldr	r1, [r2, #0]
 800c232:	1855      	adds	r5, r2, r1
 800c234:	42a5      	cmp	r5, r4
 800c236:	d10b      	bne.n	800c250 <_free_r+0x70>
 800c238:	6824      	ldr	r4, [r4, #0]
 800c23a:	4421      	add	r1, r4
 800c23c:	1854      	adds	r4, r2, r1
 800c23e:	42a3      	cmp	r3, r4
 800c240:	6011      	str	r1, [r2, #0]
 800c242:	d1e0      	bne.n	800c206 <_free_r+0x26>
 800c244:	681c      	ldr	r4, [r3, #0]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	6053      	str	r3, [r2, #4]
 800c24a:	440c      	add	r4, r1
 800c24c:	6014      	str	r4, [r2, #0]
 800c24e:	e7da      	b.n	800c206 <_free_r+0x26>
 800c250:	d902      	bls.n	800c258 <_free_r+0x78>
 800c252:	230c      	movs	r3, #12
 800c254:	6003      	str	r3, [r0, #0]
 800c256:	e7d6      	b.n	800c206 <_free_r+0x26>
 800c258:	6825      	ldr	r5, [r4, #0]
 800c25a:	1961      	adds	r1, r4, r5
 800c25c:	428b      	cmp	r3, r1
 800c25e:	bf04      	itt	eq
 800c260:	6819      	ldreq	r1, [r3, #0]
 800c262:	685b      	ldreq	r3, [r3, #4]
 800c264:	6063      	str	r3, [r4, #4]
 800c266:	bf04      	itt	eq
 800c268:	1949      	addeq	r1, r1, r5
 800c26a:	6021      	streq	r1, [r4, #0]
 800c26c:	6054      	str	r4, [r2, #4]
 800c26e:	e7ca      	b.n	800c206 <_free_r+0x26>
 800c270:	b003      	add	sp, #12
 800c272:	bd30      	pop	{r4, r5, pc}
 800c274:	200009ec 	.word	0x200009ec

0800c278 <malloc>:
 800c278:	4b02      	ldr	r3, [pc, #8]	; (800c284 <malloc+0xc>)
 800c27a:	4601      	mov	r1, r0
 800c27c:	6818      	ldr	r0, [r3, #0]
 800c27e:	f000 b823 	b.w	800c2c8 <_malloc_r>
 800c282:	bf00      	nop
 800c284:	2000012c 	.word	0x2000012c

0800c288 <sbrk_aligned>:
 800c288:	b570      	push	{r4, r5, r6, lr}
 800c28a:	4e0e      	ldr	r6, [pc, #56]	; (800c2c4 <sbrk_aligned+0x3c>)
 800c28c:	460c      	mov	r4, r1
 800c28e:	6831      	ldr	r1, [r6, #0]
 800c290:	4605      	mov	r5, r0
 800c292:	b911      	cbnz	r1, 800c29a <sbrk_aligned+0x12>
 800c294:	f000 fe40 	bl	800cf18 <_sbrk_r>
 800c298:	6030      	str	r0, [r6, #0]
 800c29a:	4621      	mov	r1, r4
 800c29c:	4628      	mov	r0, r5
 800c29e:	f000 fe3b 	bl	800cf18 <_sbrk_r>
 800c2a2:	1c43      	adds	r3, r0, #1
 800c2a4:	d00a      	beq.n	800c2bc <sbrk_aligned+0x34>
 800c2a6:	1cc4      	adds	r4, r0, #3
 800c2a8:	f024 0403 	bic.w	r4, r4, #3
 800c2ac:	42a0      	cmp	r0, r4
 800c2ae:	d007      	beq.n	800c2c0 <sbrk_aligned+0x38>
 800c2b0:	1a21      	subs	r1, r4, r0
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f000 fe30 	bl	800cf18 <_sbrk_r>
 800c2b8:	3001      	adds	r0, #1
 800c2ba:	d101      	bne.n	800c2c0 <sbrk_aligned+0x38>
 800c2bc:	f04f 34ff 	mov.w	r4, #4294967295
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	200009f0 	.word	0x200009f0

0800c2c8 <_malloc_r>:
 800c2c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2cc:	1ccd      	adds	r5, r1, #3
 800c2ce:	f025 0503 	bic.w	r5, r5, #3
 800c2d2:	3508      	adds	r5, #8
 800c2d4:	2d0c      	cmp	r5, #12
 800c2d6:	bf38      	it	cc
 800c2d8:	250c      	movcc	r5, #12
 800c2da:	2d00      	cmp	r5, #0
 800c2dc:	4607      	mov	r7, r0
 800c2de:	db01      	blt.n	800c2e4 <_malloc_r+0x1c>
 800c2e0:	42a9      	cmp	r1, r5
 800c2e2:	d905      	bls.n	800c2f0 <_malloc_r+0x28>
 800c2e4:	230c      	movs	r3, #12
 800c2e6:	603b      	str	r3, [r7, #0]
 800c2e8:	2600      	movs	r6, #0
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c3c4 <_malloc_r+0xfc>
 800c2f4:	f000 f868 	bl	800c3c8 <__malloc_lock>
 800c2f8:	f8d8 3000 	ldr.w	r3, [r8]
 800c2fc:	461c      	mov	r4, r3
 800c2fe:	bb5c      	cbnz	r4, 800c358 <_malloc_r+0x90>
 800c300:	4629      	mov	r1, r5
 800c302:	4638      	mov	r0, r7
 800c304:	f7ff ffc0 	bl	800c288 <sbrk_aligned>
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	4604      	mov	r4, r0
 800c30c:	d155      	bne.n	800c3ba <_malloc_r+0xf2>
 800c30e:	f8d8 4000 	ldr.w	r4, [r8]
 800c312:	4626      	mov	r6, r4
 800c314:	2e00      	cmp	r6, #0
 800c316:	d145      	bne.n	800c3a4 <_malloc_r+0xdc>
 800c318:	2c00      	cmp	r4, #0
 800c31a:	d048      	beq.n	800c3ae <_malloc_r+0xe6>
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	4631      	mov	r1, r6
 800c320:	4638      	mov	r0, r7
 800c322:	eb04 0903 	add.w	r9, r4, r3
 800c326:	f000 fdf7 	bl	800cf18 <_sbrk_r>
 800c32a:	4581      	cmp	r9, r0
 800c32c:	d13f      	bne.n	800c3ae <_malloc_r+0xe6>
 800c32e:	6821      	ldr	r1, [r4, #0]
 800c330:	1a6d      	subs	r5, r5, r1
 800c332:	4629      	mov	r1, r5
 800c334:	4638      	mov	r0, r7
 800c336:	f7ff ffa7 	bl	800c288 <sbrk_aligned>
 800c33a:	3001      	adds	r0, #1
 800c33c:	d037      	beq.n	800c3ae <_malloc_r+0xe6>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	442b      	add	r3, r5
 800c342:	6023      	str	r3, [r4, #0]
 800c344:	f8d8 3000 	ldr.w	r3, [r8]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d038      	beq.n	800c3be <_malloc_r+0xf6>
 800c34c:	685a      	ldr	r2, [r3, #4]
 800c34e:	42a2      	cmp	r2, r4
 800c350:	d12b      	bne.n	800c3aa <_malloc_r+0xe2>
 800c352:	2200      	movs	r2, #0
 800c354:	605a      	str	r2, [r3, #4]
 800c356:	e00f      	b.n	800c378 <_malloc_r+0xb0>
 800c358:	6822      	ldr	r2, [r4, #0]
 800c35a:	1b52      	subs	r2, r2, r5
 800c35c:	d41f      	bmi.n	800c39e <_malloc_r+0xd6>
 800c35e:	2a0b      	cmp	r2, #11
 800c360:	d917      	bls.n	800c392 <_malloc_r+0xca>
 800c362:	1961      	adds	r1, r4, r5
 800c364:	42a3      	cmp	r3, r4
 800c366:	6025      	str	r5, [r4, #0]
 800c368:	bf18      	it	ne
 800c36a:	6059      	strne	r1, [r3, #4]
 800c36c:	6863      	ldr	r3, [r4, #4]
 800c36e:	bf08      	it	eq
 800c370:	f8c8 1000 	streq.w	r1, [r8]
 800c374:	5162      	str	r2, [r4, r5]
 800c376:	604b      	str	r3, [r1, #4]
 800c378:	4638      	mov	r0, r7
 800c37a:	f104 060b 	add.w	r6, r4, #11
 800c37e:	f000 f829 	bl	800c3d4 <__malloc_unlock>
 800c382:	f026 0607 	bic.w	r6, r6, #7
 800c386:	1d23      	adds	r3, r4, #4
 800c388:	1af2      	subs	r2, r6, r3
 800c38a:	d0ae      	beq.n	800c2ea <_malloc_r+0x22>
 800c38c:	1b9b      	subs	r3, r3, r6
 800c38e:	50a3      	str	r3, [r4, r2]
 800c390:	e7ab      	b.n	800c2ea <_malloc_r+0x22>
 800c392:	42a3      	cmp	r3, r4
 800c394:	6862      	ldr	r2, [r4, #4]
 800c396:	d1dd      	bne.n	800c354 <_malloc_r+0x8c>
 800c398:	f8c8 2000 	str.w	r2, [r8]
 800c39c:	e7ec      	b.n	800c378 <_malloc_r+0xb0>
 800c39e:	4623      	mov	r3, r4
 800c3a0:	6864      	ldr	r4, [r4, #4]
 800c3a2:	e7ac      	b.n	800c2fe <_malloc_r+0x36>
 800c3a4:	4634      	mov	r4, r6
 800c3a6:	6876      	ldr	r6, [r6, #4]
 800c3a8:	e7b4      	b.n	800c314 <_malloc_r+0x4c>
 800c3aa:	4613      	mov	r3, r2
 800c3ac:	e7cc      	b.n	800c348 <_malloc_r+0x80>
 800c3ae:	230c      	movs	r3, #12
 800c3b0:	603b      	str	r3, [r7, #0]
 800c3b2:	4638      	mov	r0, r7
 800c3b4:	f000 f80e 	bl	800c3d4 <__malloc_unlock>
 800c3b8:	e797      	b.n	800c2ea <_malloc_r+0x22>
 800c3ba:	6025      	str	r5, [r4, #0]
 800c3bc:	e7dc      	b.n	800c378 <_malloc_r+0xb0>
 800c3be:	605b      	str	r3, [r3, #4]
 800c3c0:	deff      	udf	#255	; 0xff
 800c3c2:	bf00      	nop
 800c3c4:	200009ec 	.word	0x200009ec

0800c3c8 <__malloc_lock>:
 800c3c8:	4801      	ldr	r0, [pc, #4]	; (800c3d0 <__malloc_lock+0x8>)
 800c3ca:	f7ff b912 	b.w	800b5f2 <__retarget_lock_acquire_recursive>
 800c3ce:	bf00      	nop
 800c3d0:	200009e8 	.word	0x200009e8

0800c3d4 <__malloc_unlock>:
 800c3d4:	4801      	ldr	r0, [pc, #4]	; (800c3dc <__malloc_unlock+0x8>)
 800c3d6:	f7ff b90d 	b.w	800b5f4 <__retarget_lock_release_recursive>
 800c3da:	bf00      	nop
 800c3dc:	200009e8 	.word	0x200009e8

0800c3e0 <_Balloc>:
 800c3e0:	b570      	push	{r4, r5, r6, lr}
 800c3e2:	69c6      	ldr	r6, [r0, #28]
 800c3e4:	4604      	mov	r4, r0
 800c3e6:	460d      	mov	r5, r1
 800c3e8:	b976      	cbnz	r6, 800c408 <_Balloc+0x28>
 800c3ea:	2010      	movs	r0, #16
 800c3ec:	f7ff ff44 	bl	800c278 <malloc>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	61e0      	str	r0, [r4, #28]
 800c3f4:	b920      	cbnz	r0, 800c400 <_Balloc+0x20>
 800c3f6:	4b18      	ldr	r3, [pc, #96]	; (800c458 <_Balloc+0x78>)
 800c3f8:	4818      	ldr	r0, [pc, #96]	; (800c45c <_Balloc+0x7c>)
 800c3fa:	216b      	movs	r1, #107	; 0x6b
 800c3fc:	f000 fdaa 	bl	800cf54 <__assert_func>
 800c400:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c404:	6006      	str	r6, [r0, #0]
 800c406:	60c6      	str	r6, [r0, #12]
 800c408:	69e6      	ldr	r6, [r4, #28]
 800c40a:	68f3      	ldr	r3, [r6, #12]
 800c40c:	b183      	cbz	r3, 800c430 <_Balloc+0x50>
 800c40e:	69e3      	ldr	r3, [r4, #28]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c416:	b9b8      	cbnz	r0, 800c448 <_Balloc+0x68>
 800c418:	2101      	movs	r1, #1
 800c41a:	fa01 f605 	lsl.w	r6, r1, r5
 800c41e:	1d72      	adds	r2, r6, #5
 800c420:	0092      	lsls	r2, r2, #2
 800c422:	4620      	mov	r0, r4
 800c424:	f000 fdb4 	bl	800cf90 <_calloc_r>
 800c428:	b160      	cbz	r0, 800c444 <_Balloc+0x64>
 800c42a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c42e:	e00e      	b.n	800c44e <_Balloc+0x6e>
 800c430:	2221      	movs	r2, #33	; 0x21
 800c432:	2104      	movs	r1, #4
 800c434:	4620      	mov	r0, r4
 800c436:	f000 fdab 	bl	800cf90 <_calloc_r>
 800c43a:	69e3      	ldr	r3, [r4, #28]
 800c43c:	60f0      	str	r0, [r6, #12]
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1e4      	bne.n	800c40e <_Balloc+0x2e>
 800c444:	2000      	movs	r0, #0
 800c446:	bd70      	pop	{r4, r5, r6, pc}
 800c448:	6802      	ldr	r2, [r0, #0]
 800c44a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c44e:	2300      	movs	r3, #0
 800c450:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c454:	e7f7      	b.n	800c446 <_Balloc+0x66>
 800c456:	bf00      	nop
 800c458:	0800dad9 	.word	0x0800dad9
 800c45c:	0800db59 	.word	0x0800db59

0800c460 <_Bfree>:
 800c460:	b570      	push	{r4, r5, r6, lr}
 800c462:	69c6      	ldr	r6, [r0, #28]
 800c464:	4605      	mov	r5, r0
 800c466:	460c      	mov	r4, r1
 800c468:	b976      	cbnz	r6, 800c488 <_Bfree+0x28>
 800c46a:	2010      	movs	r0, #16
 800c46c:	f7ff ff04 	bl	800c278 <malloc>
 800c470:	4602      	mov	r2, r0
 800c472:	61e8      	str	r0, [r5, #28]
 800c474:	b920      	cbnz	r0, 800c480 <_Bfree+0x20>
 800c476:	4b09      	ldr	r3, [pc, #36]	; (800c49c <_Bfree+0x3c>)
 800c478:	4809      	ldr	r0, [pc, #36]	; (800c4a0 <_Bfree+0x40>)
 800c47a:	218f      	movs	r1, #143	; 0x8f
 800c47c:	f000 fd6a 	bl	800cf54 <__assert_func>
 800c480:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c484:	6006      	str	r6, [r0, #0]
 800c486:	60c6      	str	r6, [r0, #12]
 800c488:	b13c      	cbz	r4, 800c49a <_Bfree+0x3a>
 800c48a:	69eb      	ldr	r3, [r5, #28]
 800c48c:	6862      	ldr	r2, [r4, #4]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c494:	6021      	str	r1, [r4, #0]
 800c496:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c49a:	bd70      	pop	{r4, r5, r6, pc}
 800c49c:	0800dad9 	.word	0x0800dad9
 800c4a0:	0800db59 	.word	0x0800db59

0800c4a4 <__multadd>:
 800c4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a8:	690d      	ldr	r5, [r1, #16]
 800c4aa:	4607      	mov	r7, r0
 800c4ac:	460c      	mov	r4, r1
 800c4ae:	461e      	mov	r6, r3
 800c4b0:	f101 0c14 	add.w	ip, r1, #20
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	f8dc 3000 	ldr.w	r3, [ip]
 800c4ba:	b299      	uxth	r1, r3
 800c4bc:	fb02 6101 	mla	r1, r2, r1, r6
 800c4c0:	0c1e      	lsrs	r6, r3, #16
 800c4c2:	0c0b      	lsrs	r3, r1, #16
 800c4c4:	fb02 3306 	mla	r3, r2, r6, r3
 800c4c8:	b289      	uxth	r1, r1
 800c4ca:	3001      	adds	r0, #1
 800c4cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c4d0:	4285      	cmp	r5, r0
 800c4d2:	f84c 1b04 	str.w	r1, [ip], #4
 800c4d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c4da:	dcec      	bgt.n	800c4b6 <__multadd+0x12>
 800c4dc:	b30e      	cbz	r6, 800c522 <__multadd+0x7e>
 800c4de:	68a3      	ldr	r3, [r4, #8]
 800c4e0:	42ab      	cmp	r3, r5
 800c4e2:	dc19      	bgt.n	800c518 <__multadd+0x74>
 800c4e4:	6861      	ldr	r1, [r4, #4]
 800c4e6:	4638      	mov	r0, r7
 800c4e8:	3101      	adds	r1, #1
 800c4ea:	f7ff ff79 	bl	800c3e0 <_Balloc>
 800c4ee:	4680      	mov	r8, r0
 800c4f0:	b928      	cbnz	r0, 800c4fe <__multadd+0x5a>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	4b0c      	ldr	r3, [pc, #48]	; (800c528 <__multadd+0x84>)
 800c4f6:	480d      	ldr	r0, [pc, #52]	; (800c52c <__multadd+0x88>)
 800c4f8:	21ba      	movs	r1, #186	; 0xba
 800c4fa:	f000 fd2b 	bl	800cf54 <__assert_func>
 800c4fe:	6922      	ldr	r2, [r4, #16]
 800c500:	3202      	adds	r2, #2
 800c502:	f104 010c 	add.w	r1, r4, #12
 800c506:	0092      	lsls	r2, r2, #2
 800c508:	300c      	adds	r0, #12
 800c50a:	f000 fd15 	bl	800cf38 <memcpy>
 800c50e:	4621      	mov	r1, r4
 800c510:	4638      	mov	r0, r7
 800c512:	f7ff ffa5 	bl	800c460 <_Bfree>
 800c516:	4644      	mov	r4, r8
 800c518:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c51c:	3501      	adds	r5, #1
 800c51e:	615e      	str	r6, [r3, #20]
 800c520:	6125      	str	r5, [r4, #16]
 800c522:	4620      	mov	r0, r4
 800c524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c528:	0800db48 	.word	0x0800db48
 800c52c:	0800db59 	.word	0x0800db59

0800c530 <__hi0bits>:
 800c530:	0c03      	lsrs	r3, r0, #16
 800c532:	041b      	lsls	r3, r3, #16
 800c534:	b9d3      	cbnz	r3, 800c56c <__hi0bits+0x3c>
 800c536:	0400      	lsls	r0, r0, #16
 800c538:	2310      	movs	r3, #16
 800c53a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c53e:	bf04      	itt	eq
 800c540:	0200      	lsleq	r0, r0, #8
 800c542:	3308      	addeq	r3, #8
 800c544:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c548:	bf04      	itt	eq
 800c54a:	0100      	lsleq	r0, r0, #4
 800c54c:	3304      	addeq	r3, #4
 800c54e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c552:	bf04      	itt	eq
 800c554:	0080      	lsleq	r0, r0, #2
 800c556:	3302      	addeq	r3, #2
 800c558:	2800      	cmp	r0, #0
 800c55a:	db05      	blt.n	800c568 <__hi0bits+0x38>
 800c55c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c560:	f103 0301 	add.w	r3, r3, #1
 800c564:	bf08      	it	eq
 800c566:	2320      	moveq	r3, #32
 800c568:	4618      	mov	r0, r3
 800c56a:	4770      	bx	lr
 800c56c:	2300      	movs	r3, #0
 800c56e:	e7e4      	b.n	800c53a <__hi0bits+0xa>

0800c570 <__lo0bits>:
 800c570:	6803      	ldr	r3, [r0, #0]
 800c572:	f013 0207 	ands.w	r2, r3, #7
 800c576:	d00c      	beq.n	800c592 <__lo0bits+0x22>
 800c578:	07d9      	lsls	r1, r3, #31
 800c57a:	d422      	bmi.n	800c5c2 <__lo0bits+0x52>
 800c57c:	079a      	lsls	r2, r3, #30
 800c57e:	bf49      	itett	mi
 800c580:	085b      	lsrmi	r3, r3, #1
 800c582:	089b      	lsrpl	r3, r3, #2
 800c584:	6003      	strmi	r3, [r0, #0]
 800c586:	2201      	movmi	r2, #1
 800c588:	bf5c      	itt	pl
 800c58a:	6003      	strpl	r3, [r0, #0]
 800c58c:	2202      	movpl	r2, #2
 800c58e:	4610      	mov	r0, r2
 800c590:	4770      	bx	lr
 800c592:	b299      	uxth	r1, r3
 800c594:	b909      	cbnz	r1, 800c59a <__lo0bits+0x2a>
 800c596:	0c1b      	lsrs	r3, r3, #16
 800c598:	2210      	movs	r2, #16
 800c59a:	b2d9      	uxtb	r1, r3
 800c59c:	b909      	cbnz	r1, 800c5a2 <__lo0bits+0x32>
 800c59e:	3208      	adds	r2, #8
 800c5a0:	0a1b      	lsrs	r3, r3, #8
 800c5a2:	0719      	lsls	r1, r3, #28
 800c5a4:	bf04      	itt	eq
 800c5a6:	091b      	lsreq	r3, r3, #4
 800c5a8:	3204      	addeq	r2, #4
 800c5aa:	0799      	lsls	r1, r3, #30
 800c5ac:	bf04      	itt	eq
 800c5ae:	089b      	lsreq	r3, r3, #2
 800c5b0:	3202      	addeq	r2, #2
 800c5b2:	07d9      	lsls	r1, r3, #31
 800c5b4:	d403      	bmi.n	800c5be <__lo0bits+0x4e>
 800c5b6:	085b      	lsrs	r3, r3, #1
 800c5b8:	f102 0201 	add.w	r2, r2, #1
 800c5bc:	d003      	beq.n	800c5c6 <__lo0bits+0x56>
 800c5be:	6003      	str	r3, [r0, #0]
 800c5c0:	e7e5      	b.n	800c58e <__lo0bits+0x1e>
 800c5c2:	2200      	movs	r2, #0
 800c5c4:	e7e3      	b.n	800c58e <__lo0bits+0x1e>
 800c5c6:	2220      	movs	r2, #32
 800c5c8:	e7e1      	b.n	800c58e <__lo0bits+0x1e>
	...

0800c5cc <__i2b>:
 800c5cc:	b510      	push	{r4, lr}
 800c5ce:	460c      	mov	r4, r1
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	f7ff ff05 	bl	800c3e0 <_Balloc>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	b928      	cbnz	r0, 800c5e6 <__i2b+0x1a>
 800c5da:	4b05      	ldr	r3, [pc, #20]	; (800c5f0 <__i2b+0x24>)
 800c5dc:	4805      	ldr	r0, [pc, #20]	; (800c5f4 <__i2b+0x28>)
 800c5de:	f240 1145 	movw	r1, #325	; 0x145
 800c5e2:	f000 fcb7 	bl	800cf54 <__assert_func>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	6144      	str	r4, [r0, #20]
 800c5ea:	6103      	str	r3, [r0, #16]
 800c5ec:	bd10      	pop	{r4, pc}
 800c5ee:	bf00      	nop
 800c5f0:	0800db48 	.word	0x0800db48
 800c5f4:	0800db59 	.word	0x0800db59

0800c5f8 <__multiply>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	4691      	mov	r9, r2
 800c5fe:	690a      	ldr	r2, [r1, #16]
 800c600:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c604:	429a      	cmp	r2, r3
 800c606:	bfb8      	it	lt
 800c608:	460b      	movlt	r3, r1
 800c60a:	460c      	mov	r4, r1
 800c60c:	bfbc      	itt	lt
 800c60e:	464c      	movlt	r4, r9
 800c610:	4699      	movlt	r9, r3
 800c612:	6927      	ldr	r7, [r4, #16]
 800c614:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c618:	68a3      	ldr	r3, [r4, #8]
 800c61a:	6861      	ldr	r1, [r4, #4]
 800c61c:	eb07 060a 	add.w	r6, r7, sl
 800c620:	42b3      	cmp	r3, r6
 800c622:	b085      	sub	sp, #20
 800c624:	bfb8      	it	lt
 800c626:	3101      	addlt	r1, #1
 800c628:	f7ff feda 	bl	800c3e0 <_Balloc>
 800c62c:	b930      	cbnz	r0, 800c63c <__multiply+0x44>
 800c62e:	4602      	mov	r2, r0
 800c630:	4b44      	ldr	r3, [pc, #272]	; (800c744 <__multiply+0x14c>)
 800c632:	4845      	ldr	r0, [pc, #276]	; (800c748 <__multiply+0x150>)
 800c634:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800c638:	f000 fc8c 	bl	800cf54 <__assert_func>
 800c63c:	f100 0514 	add.w	r5, r0, #20
 800c640:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c644:	462b      	mov	r3, r5
 800c646:	2200      	movs	r2, #0
 800c648:	4543      	cmp	r3, r8
 800c64a:	d321      	bcc.n	800c690 <__multiply+0x98>
 800c64c:	f104 0314 	add.w	r3, r4, #20
 800c650:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c654:	f109 0314 	add.w	r3, r9, #20
 800c658:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c65c:	9202      	str	r2, [sp, #8]
 800c65e:	1b3a      	subs	r2, r7, r4
 800c660:	3a15      	subs	r2, #21
 800c662:	f022 0203 	bic.w	r2, r2, #3
 800c666:	3204      	adds	r2, #4
 800c668:	f104 0115 	add.w	r1, r4, #21
 800c66c:	428f      	cmp	r7, r1
 800c66e:	bf38      	it	cc
 800c670:	2204      	movcc	r2, #4
 800c672:	9201      	str	r2, [sp, #4]
 800c674:	9a02      	ldr	r2, [sp, #8]
 800c676:	9303      	str	r3, [sp, #12]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d80c      	bhi.n	800c696 <__multiply+0x9e>
 800c67c:	2e00      	cmp	r6, #0
 800c67e:	dd03      	ble.n	800c688 <__multiply+0x90>
 800c680:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c684:	2b00      	cmp	r3, #0
 800c686:	d05b      	beq.n	800c740 <__multiply+0x148>
 800c688:	6106      	str	r6, [r0, #16]
 800c68a:	b005      	add	sp, #20
 800c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c690:	f843 2b04 	str.w	r2, [r3], #4
 800c694:	e7d8      	b.n	800c648 <__multiply+0x50>
 800c696:	f8b3 a000 	ldrh.w	sl, [r3]
 800c69a:	f1ba 0f00 	cmp.w	sl, #0
 800c69e:	d024      	beq.n	800c6ea <__multiply+0xf2>
 800c6a0:	f104 0e14 	add.w	lr, r4, #20
 800c6a4:	46a9      	mov	r9, r5
 800c6a6:	f04f 0c00 	mov.w	ip, #0
 800c6aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c6ae:	f8d9 1000 	ldr.w	r1, [r9]
 800c6b2:	fa1f fb82 	uxth.w	fp, r2
 800c6b6:	b289      	uxth	r1, r1
 800c6b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800c6bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c6c0:	f8d9 2000 	ldr.w	r2, [r9]
 800c6c4:	4461      	add	r1, ip
 800c6c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c6ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800c6ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c6d2:	b289      	uxth	r1, r1
 800c6d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c6d8:	4577      	cmp	r7, lr
 800c6da:	f849 1b04 	str.w	r1, [r9], #4
 800c6de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c6e2:	d8e2      	bhi.n	800c6aa <__multiply+0xb2>
 800c6e4:	9a01      	ldr	r2, [sp, #4]
 800c6e6:	f845 c002 	str.w	ip, [r5, r2]
 800c6ea:	9a03      	ldr	r2, [sp, #12]
 800c6ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	f1b9 0f00 	cmp.w	r9, #0
 800c6f6:	d021      	beq.n	800c73c <__multiply+0x144>
 800c6f8:	6829      	ldr	r1, [r5, #0]
 800c6fa:	f104 0c14 	add.w	ip, r4, #20
 800c6fe:	46ae      	mov	lr, r5
 800c700:	f04f 0a00 	mov.w	sl, #0
 800c704:	f8bc b000 	ldrh.w	fp, [ip]
 800c708:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c70c:	fb09 220b 	mla	r2, r9, fp, r2
 800c710:	4452      	add	r2, sl
 800c712:	b289      	uxth	r1, r1
 800c714:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c718:	f84e 1b04 	str.w	r1, [lr], #4
 800c71c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800c720:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c724:	f8be 1000 	ldrh.w	r1, [lr]
 800c728:	fb09 110a 	mla	r1, r9, sl, r1
 800c72c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800c730:	4567      	cmp	r7, ip
 800c732:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c736:	d8e5      	bhi.n	800c704 <__multiply+0x10c>
 800c738:	9a01      	ldr	r2, [sp, #4]
 800c73a:	50a9      	str	r1, [r5, r2]
 800c73c:	3504      	adds	r5, #4
 800c73e:	e799      	b.n	800c674 <__multiply+0x7c>
 800c740:	3e01      	subs	r6, #1
 800c742:	e79b      	b.n	800c67c <__multiply+0x84>
 800c744:	0800db48 	.word	0x0800db48
 800c748:	0800db59 	.word	0x0800db59

0800c74c <__pow5mult>:
 800c74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c750:	4615      	mov	r5, r2
 800c752:	f012 0203 	ands.w	r2, r2, #3
 800c756:	4606      	mov	r6, r0
 800c758:	460f      	mov	r7, r1
 800c75a:	d007      	beq.n	800c76c <__pow5mult+0x20>
 800c75c:	4c25      	ldr	r4, [pc, #148]	; (800c7f4 <__pow5mult+0xa8>)
 800c75e:	3a01      	subs	r2, #1
 800c760:	2300      	movs	r3, #0
 800c762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c766:	f7ff fe9d 	bl	800c4a4 <__multadd>
 800c76a:	4607      	mov	r7, r0
 800c76c:	10ad      	asrs	r5, r5, #2
 800c76e:	d03d      	beq.n	800c7ec <__pow5mult+0xa0>
 800c770:	69f4      	ldr	r4, [r6, #28]
 800c772:	b97c      	cbnz	r4, 800c794 <__pow5mult+0x48>
 800c774:	2010      	movs	r0, #16
 800c776:	f7ff fd7f 	bl	800c278 <malloc>
 800c77a:	4602      	mov	r2, r0
 800c77c:	61f0      	str	r0, [r6, #28]
 800c77e:	b928      	cbnz	r0, 800c78c <__pow5mult+0x40>
 800c780:	4b1d      	ldr	r3, [pc, #116]	; (800c7f8 <__pow5mult+0xac>)
 800c782:	481e      	ldr	r0, [pc, #120]	; (800c7fc <__pow5mult+0xb0>)
 800c784:	f240 11b3 	movw	r1, #435	; 0x1b3
 800c788:	f000 fbe4 	bl	800cf54 <__assert_func>
 800c78c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c790:	6004      	str	r4, [r0, #0]
 800c792:	60c4      	str	r4, [r0, #12]
 800c794:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800c798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c79c:	b94c      	cbnz	r4, 800c7b2 <__pow5mult+0x66>
 800c79e:	f240 2171 	movw	r1, #625	; 0x271
 800c7a2:	4630      	mov	r0, r6
 800c7a4:	f7ff ff12 	bl	800c5cc <__i2b>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c7ae:	4604      	mov	r4, r0
 800c7b0:	6003      	str	r3, [r0, #0]
 800c7b2:	f04f 0900 	mov.w	r9, #0
 800c7b6:	07eb      	lsls	r3, r5, #31
 800c7b8:	d50a      	bpl.n	800c7d0 <__pow5mult+0x84>
 800c7ba:	4639      	mov	r1, r7
 800c7bc:	4622      	mov	r2, r4
 800c7be:	4630      	mov	r0, r6
 800c7c0:	f7ff ff1a 	bl	800c5f8 <__multiply>
 800c7c4:	4639      	mov	r1, r7
 800c7c6:	4680      	mov	r8, r0
 800c7c8:	4630      	mov	r0, r6
 800c7ca:	f7ff fe49 	bl	800c460 <_Bfree>
 800c7ce:	4647      	mov	r7, r8
 800c7d0:	106d      	asrs	r5, r5, #1
 800c7d2:	d00b      	beq.n	800c7ec <__pow5mult+0xa0>
 800c7d4:	6820      	ldr	r0, [r4, #0]
 800c7d6:	b938      	cbnz	r0, 800c7e8 <__pow5mult+0x9c>
 800c7d8:	4622      	mov	r2, r4
 800c7da:	4621      	mov	r1, r4
 800c7dc:	4630      	mov	r0, r6
 800c7de:	f7ff ff0b 	bl	800c5f8 <__multiply>
 800c7e2:	6020      	str	r0, [r4, #0]
 800c7e4:	f8c0 9000 	str.w	r9, [r0]
 800c7e8:	4604      	mov	r4, r0
 800c7ea:	e7e4      	b.n	800c7b6 <__pow5mult+0x6a>
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7f2:	bf00      	nop
 800c7f4:	0800dca8 	.word	0x0800dca8
 800c7f8:	0800dad9 	.word	0x0800dad9
 800c7fc:	0800db59 	.word	0x0800db59

0800c800 <__lshift>:
 800c800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c804:	460c      	mov	r4, r1
 800c806:	6849      	ldr	r1, [r1, #4]
 800c808:	6923      	ldr	r3, [r4, #16]
 800c80a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c80e:	68a3      	ldr	r3, [r4, #8]
 800c810:	4607      	mov	r7, r0
 800c812:	4691      	mov	r9, r2
 800c814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c818:	f108 0601 	add.w	r6, r8, #1
 800c81c:	42b3      	cmp	r3, r6
 800c81e:	db0b      	blt.n	800c838 <__lshift+0x38>
 800c820:	4638      	mov	r0, r7
 800c822:	f7ff fddd 	bl	800c3e0 <_Balloc>
 800c826:	4605      	mov	r5, r0
 800c828:	b948      	cbnz	r0, 800c83e <__lshift+0x3e>
 800c82a:	4602      	mov	r2, r0
 800c82c:	4b28      	ldr	r3, [pc, #160]	; (800c8d0 <__lshift+0xd0>)
 800c82e:	4829      	ldr	r0, [pc, #164]	; (800c8d4 <__lshift+0xd4>)
 800c830:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800c834:	f000 fb8e 	bl	800cf54 <__assert_func>
 800c838:	3101      	adds	r1, #1
 800c83a:	005b      	lsls	r3, r3, #1
 800c83c:	e7ee      	b.n	800c81c <__lshift+0x1c>
 800c83e:	2300      	movs	r3, #0
 800c840:	f100 0114 	add.w	r1, r0, #20
 800c844:	f100 0210 	add.w	r2, r0, #16
 800c848:	4618      	mov	r0, r3
 800c84a:	4553      	cmp	r3, sl
 800c84c:	db33      	blt.n	800c8b6 <__lshift+0xb6>
 800c84e:	6920      	ldr	r0, [r4, #16]
 800c850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c854:	f104 0314 	add.w	r3, r4, #20
 800c858:	f019 091f 	ands.w	r9, r9, #31
 800c85c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c864:	d02b      	beq.n	800c8be <__lshift+0xbe>
 800c866:	f1c9 0e20 	rsb	lr, r9, #32
 800c86a:	468a      	mov	sl, r1
 800c86c:	2200      	movs	r2, #0
 800c86e:	6818      	ldr	r0, [r3, #0]
 800c870:	fa00 f009 	lsl.w	r0, r0, r9
 800c874:	4310      	orrs	r0, r2
 800c876:	f84a 0b04 	str.w	r0, [sl], #4
 800c87a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c87e:	459c      	cmp	ip, r3
 800c880:	fa22 f20e 	lsr.w	r2, r2, lr
 800c884:	d8f3      	bhi.n	800c86e <__lshift+0x6e>
 800c886:	ebac 0304 	sub.w	r3, ip, r4
 800c88a:	3b15      	subs	r3, #21
 800c88c:	f023 0303 	bic.w	r3, r3, #3
 800c890:	3304      	adds	r3, #4
 800c892:	f104 0015 	add.w	r0, r4, #21
 800c896:	4584      	cmp	ip, r0
 800c898:	bf38      	it	cc
 800c89a:	2304      	movcc	r3, #4
 800c89c:	50ca      	str	r2, [r1, r3]
 800c89e:	b10a      	cbz	r2, 800c8a4 <__lshift+0xa4>
 800c8a0:	f108 0602 	add.w	r6, r8, #2
 800c8a4:	3e01      	subs	r6, #1
 800c8a6:	4638      	mov	r0, r7
 800c8a8:	612e      	str	r6, [r5, #16]
 800c8aa:	4621      	mov	r1, r4
 800c8ac:	f7ff fdd8 	bl	800c460 <_Bfree>
 800c8b0:	4628      	mov	r0, r5
 800c8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	e7c5      	b.n	800c84a <__lshift+0x4a>
 800c8be:	3904      	subs	r1, #4
 800c8c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c8c8:	459c      	cmp	ip, r3
 800c8ca:	d8f9      	bhi.n	800c8c0 <__lshift+0xc0>
 800c8cc:	e7ea      	b.n	800c8a4 <__lshift+0xa4>
 800c8ce:	bf00      	nop
 800c8d0:	0800db48 	.word	0x0800db48
 800c8d4:	0800db59 	.word	0x0800db59

0800c8d8 <__mcmp>:
 800c8d8:	b530      	push	{r4, r5, lr}
 800c8da:	6902      	ldr	r2, [r0, #16]
 800c8dc:	690c      	ldr	r4, [r1, #16]
 800c8de:	1b12      	subs	r2, r2, r4
 800c8e0:	d10e      	bne.n	800c900 <__mcmp+0x28>
 800c8e2:	f100 0314 	add.w	r3, r0, #20
 800c8e6:	3114      	adds	r1, #20
 800c8e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c8ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c8f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c8f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c8f8:	42a5      	cmp	r5, r4
 800c8fa:	d003      	beq.n	800c904 <__mcmp+0x2c>
 800c8fc:	d305      	bcc.n	800c90a <__mcmp+0x32>
 800c8fe:	2201      	movs	r2, #1
 800c900:	4610      	mov	r0, r2
 800c902:	bd30      	pop	{r4, r5, pc}
 800c904:	4283      	cmp	r3, r0
 800c906:	d3f3      	bcc.n	800c8f0 <__mcmp+0x18>
 800c908:	e7fa      	b.n	800c900 <__mcmp+0x28>
 800c90a:	f04f 32ff 	mov.w	r2, #4294967295
 800c90e:	e7f7      	b.n	800c900 <__mcmp+0x28>

0800c910 <__mdiff>:
 800c910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	460c      	mov	r4, r1
 800c916:	4606      	mov	r6, r0
 800c918:	4611      	mov	r1, r2
 800c91a:	4620      	mov	r0, r4
 800c91c:	4690      	mov	r8, r2
 800c91e:	f7ff ffdb 	bl	800c8d8 <__mcmp>
 800c922:	1e05      	subs	r5, r0, #0
 800c924:	d110      	bne.n	800c948 <__mdiff+0x38>
 800c926:	4629      	mov	r1, r5
 800c928:	4630      	mov	r0, r6
 800c92a:	f7ff fd59 	bl	800c3e0 <_Balloc>
 800c92e:	b930      	cbnz	r0, 800c93e <__mdiff+0x2e>
 800c930:	4b3a      	ldr	r3, [pc, #232]	; (800ca1c <__mdiff+0x10c>)
 800c932:	4602      	mov	r2, r0
 800c934:	f240 2137 	movw	r1, #567	; 0x237
 800c938:	4839      	ldr	r0, [pc, #228]	; (800ca20 <__mdiff+0x110>)
 800c93a:	f000 fb0b 	bl	800cf54 <__assert_func>
 800c93e:	2301      	movs	r3, #1
 800c940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c948:	bfa4      	itt	ge
 800c94a:	4643      	movge	r3, r8
 800c94c:	46a0      	movge	r8, r4
 800c94e:	4630      	mov	r0, r6
 800c950:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c954:	bfa6      	itte	ge
 800c956:	461c      	movge	r4, r3
 800c958:	2500      	movge	r5, #0
 800c95a:	2501      	movlt	r5, #1
 800c95c:	f7ff fd40 	bl	800c3e0 <_Balloc>
 800c960:	b920      	cbnz	r0, 800c96c <__mdiff+0x5c>
 800c962:	4b2e      	ldr	r3, [pc, #184]	; (800ca1c <__mdiff+0x10c>)
 800c964:	4602      	mov	r2, r0
 800c966:	f240 2145 	movw	r1, #581	; 0x245
 800c96a:	e7e5      	b.n	800c938 <__mdiff+0x28>
 800c96c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c970:	6926      	ldr	r6, [r4, #16]
 800c972:	60c5      	str	r5, [r0, #12]
 800c974:	f104 0914 	add.w	r9, r4, #20
 800c978:	f108 0514 	add.w	r5, r8, #20
 800c97c:	f100 0e14 	add.w	lr, r0, #20
 800c980:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c984:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c988:	f108 0210 	add.w	r2, r8, #16
 800c98c:	46f2      	mov	sl, lr
 800c98e:	2100      	movs	r1, #0
 800c990:	f859 3b04 	ldr.w	r3, [r9], #4
 800c994:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c998:	fa11 f88b 	uxtah	r8, r1, fp
 800c99c:	b299      	uxth	r1, r3
 800c99e:	0c1b      	lsrs	r3, r3, #16
 800c9a0:	eba8 0801 	sub.w	r8, r8, r1
 800c9a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c9a8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c9ac:	fa1f f888 	uxth.w	r8, r8
 800c9b0:	1419      	asrs	r1, r3, #16
 800c9b2:	454e      	cmp	r6, r9
 800c9b4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c9b8:	f84a 3b04 	str.w	r3, [sl], #4
 800c9bc:	d8e8      	bhi.n	800c990 <__mdiff+0x80>
 800c9be:	1b33      	subs	r3, r6, r4
 800c9c0:	3b15      	subs	r3, #21
 800c9c2:	f023 0303 	bic.w	r3, r3, #3
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	3415      	adds	r4, #21
 800c9ca:	42a6      	cmp	r6, r4
 800c9cc:	bf38      	it	cc
 800c9ce:	2304      	movcc	r3, #4
 800c9d0:	441d      	add	r5, r3
 800c9d2:	4473      	add	r3, lr
 800c9d4:	469e      	mov	lr, r3
 800c9d6:	462e      	mov	r6, r5
 800c9d8:	4566      	cmp	r6, ip
 800c9da:	d30e      	bcc.n	800c9fa <__mdiff+0xea>
 800c9dc:	f10c 0203 	add.w	r2, ip, #3
 800c9e0:	1b52      	subs	r2, r2, r5
 800c9e2:	f022 0203 	bic.w	r2, r2, #3
 800c9e6:	3d03      	subs	r5, #3
 800c9e8:	45ac      	cmp	ip, r5
 800c9ea:	bf38      	it	cc
 800c9ec:	2200      	movcc	r2, #0
 800c9ee:	4413      	add	r3, r2
 800c9f0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c9f4:	b17a      	cbz	r2, 800ca16 <__mdiff+0x106>
 800c9f6:	6107      	str	r7, [r0, #16]
 800c9f8:	e7a4      	b.n	800c944 <__mdiff+0x34>
 800c9fa:	f856 8b04 	ldr.w	r8, [r6], #4
 800c9fe:	fa11 f288 	uxtah	r2, r1, r8
 800ca02:	1414      	asrs	r4, r2, #16
 800ca04:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ca08:	b292      	uxth	r2, r2
 800ca0a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ca0e:	f84e 2b04 	str.w	r2, [lr], #4
 800ca12:	1421      	asrs	r1, r4, #16
 800ca14:	e7e0      	b.n	800c9d8 <__mdiff+0xc8>
 800ca16:	3f01      	subs	r7, #1
 800ca18:	e7ea      	b.n	800c9f0 <__mdiff+0xe0>
 800ca1a:	bf00      	nop
 800ca1c:	0800db48 	.word	0x0800db48
 800ca20:	0800db59 	.word	0x0800db59

0800ca24 <__d2b>:
 800ca24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca28:	460f      	mov	r7, r1
 800ca2a:	2101      	movs	r1, #1
 800ca2c:	ec59 8b10 	vmov	r8, r9, d0
 800ca30:	4616      	mov	r6, r2
 800ca32:	f7ff fcd5 	bl	800c3e0 <_Balloc>
 800ca36:	4604      	mov	r4, r0
 800ca38:	b930      	cbnz	r0, 800ca48 <__d2b+0x24>
 800ca3a:	4602      	mov	r2, r0
 800ca3c:	4b24      	ldr	r3, [pc, #144]	; (800cad0 <__d2b+0xac>)
 800ca3e:	4825      	ldr	r0, [pc, #148]	; (800cad4 <__d2b+0xb0>)
 800ca40:	f240 310f 	movw	r1, #783	; 0x30f
 800ca44:	f000 fa86 	bl	800cf54 <__assert_func>
 800ca48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ca4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ca50:	bb2d      	cbnz	r5, 800ca9e <__d2b+0x7a>
 800ca52:	9301      	str	r3, [sp, #4]
 800ca54:	f1b8 0300 	subs.w	r3, r8, #0
 800ca58:	d026      	beq.n	800caa8 <__d2b+0x84>
 800ca5a:	4668      	mov	r0, sp
 800ca5c:	9300      	str	r3, [sp, #0]
 800ca5e:	f7ff fd87 	bl	800c570 <__lo0bits>
 800ca62:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ca66:	b1e8      	cbz	r0, 800caa4 <__d2b+0x80>
 800ca68:	f1c0 0320 	rsb	r3, r0, #32
 800ca6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca70:	430b      	orrs	r3, r1
 800ca72:	40c2      	lsrs	r2, r0
 800ca74:	6163      	str	r3, [r4, #20]
 800ca76:	9201      	str	r2, [sp, #4]
 800ca78:	9b01      	ldr	r3, [sp, #4]
 800ca7a:	61a3      	str	r3, [r4, #24]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	bf14      	ite	ne
 800ca80:	2202      	movne	r2, #2
 800ca82:	2201      	moveq	r2, #1
 800ca84:	6122      	str	r2, [r4, #16]
 800ca86:	b1bd      	cbz	r5, 800cab8 <__d2b+0x94>
 800ca88:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca8c:	4405      	add	r5, r0
 800ca8e:	603d      	str	r5, [r7, #0]
 800ca90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca94:	6030      	str	r0, [r6, #0]
 800ca96:	4620      	mov	r0, r4
 800ca98:	b003      	add	sp, #12
 800ca9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800caa2:	e7d6      	b.n	800ca52 <__d2b+0x2e>
 800caa4:	6161      	str	r1, [r4, #20]
 800caa6:	e7e7      	b.n	800ca78 <__d2b+0x54>
 800caa8:	a801      	add	r0, sp, #4
 800caaa:	f7ff fd61 	bl	800c570 <__lo0bits>
 800caae:	9b01      	ldr	r3, [sp, #4]
 800cab0:	6163      	str	r3, [r4, #20]
 800cab2:	3020      	adds	r0, #32
 800cab4:	2201      	movs	r2, #1
 800cab6:	e7e5      	b.n	800ca84 <__d2b+0x60>
 800cab8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cabc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cac0:	6038      	str	r0, [r7, #0]
 800cac2:	6918      	ldr	r0, [r3, #16]
 800cac4:	f7ff fd34 	bl	800c530 <__hi0bits>
 800cac8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cacc:	e7e2      	b.n	800ca94 <__d2b+0x70>
 800cace:	bf00      	nop
 800cad0:	0800db48 	.word	0x0800db48
 800cad4:	0800db59 	.word	0x0800db59

0800cad8 <__ssputs_r>:
 800cad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cadc:	688e      	ldr	r6, [r1, #8]
 800cade:	461f      	mov	r7, r3
 800cae0:	42be      	cmp	r6, r7
 800cae2:	680b      	ldr	r3, [r1, #0]
 800cae4:	4682      	mov	sl, r0
 800cae6:	460c      	mov	r4, r1
 800cae8:	4690      	mov	r8, r2
 800caea:	d82c      	bhi.n	800cb46 <__ssputs_r+0x6e>
 800caec:	898a      	ldrh	r2, [r1, #12]
 800caee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800caf2:	d026      	beq.n	800cb42 <__ssputs_r+0x6a>
 800caf4:	6965      	ldr	r5, [r4, #20]
 800caf6:	6909      	ldr	r1, [r1, #16]
 800caf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cafc:	eba3 0901 	sub.w	r9, r3, r1
 800cb00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb04:	1c7b      	adds	r3, r7, #1
 800cb06:	444b      	add	r3, r9
 800cb08:	106d      	asrs	r5, r5, #1
 800cb0a:	429d      	cmp	r5, r3
 800cb0c:	bf38      	it	cc
 800cb0e:	461d      	movcc	r5, r3
 800cb10:	0553      	lsls	r3, r2, #21
 800cb12:	d527      	bpl.n	800cb64 <__ssputs_r+0x8c>
 800cb14:	4629      	mov	r1, r5
 800cb16:	f7ff fbd7 	bl	800c2c8 <_malloc_r>
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	b360      	cbz	r0, 800cb78 <__ssputs_r+0xa0>
 800cb1e:	6921      	ldr	r1, [r4, #16]
 800cb20:	464a      	mov	r2, r9
 800cb22:	f000 fa09 	bl	800cf38 <memcpy>
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cb2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb30:	81a3      	strh	r3, [r4, #12]
 800cb32:	6126      	str	r6, [r4, #16]
 800cb34:	6165      	str	r5, [r4, #20]
 800cb36:	444e      	add	r6, r9
 800cb38:	eba5 0509 	sub.w	r5, r5, r9
 800cb3c:	6026      	str	r6, [r4, #0]
 800cb3e:	60a5      	str	r5, [r4, #8]
 800cb40:	463e      	mov	r6, r7
 800cb42:	42be      	cmp	r6, r7
 800cb44:	d900      	bls.n	800cb48 <__ssputs_r+0x70>
 800cb46:	463e      	mov	r6, r7
 800cb48:	6820      	ldr	r0, [r4, #0]
 800cb4a:	4632      	mov	r2, r6
 800cb4c:	4641      	mov	r1, r8
 800cb4e:	f000 f9c9 	bl	800cee4 <memmove>
 800cb52:	68a3      	ldr	r3, [r4, #8]
 800cb54:	1b9b      	subs	r3, r3, r6
 800cb56:	60a3      	str	r3, [r4, #8]
 800cb58:	6823      	ldr	r3, [r4, #0]
 800cb5a:	4433      	add	r3, r6
 800cb5c:	6023      	str	r3, [r4, #0]
 800cb5e:	2000      	movs	r0, #0
 800cb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb64:	462a      	mov	r2, r5
 800cb66:	f000 fa3b 	bl	800cfe0 <_realloc_r>
 800cb6a:	4606      	mov	r6, r0
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d1e0      	bne.n	800cb32 <__ssputs_r+0x5a>
 800cb70:	6921      	ldr	r1, [r4, #16]
 800cb72:	4650      	mov	r0, sl
 800cb74:	f7ff fb34 	bl	800c1e0 <_free_r>
 800cb78:	230c      	movs	r3, #12
 800cb7a:	f8ca 3000 	str.w	r3, [sl]
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb84:	81a3      	strh	r3, [r4, #12]
 800cb86:	f04f 30ff 	mov.w	r0, #4294967295
 800cb8a:	e7e9      	b.n	800cb60 <__ssputs_r+0x88>

0800cb8c <_svfiprintf_r>:
 800cb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb90:	4698      	mov	r8, r3
 800cb92:	898b      	ldrh	r3, [r1, #12]
 800cb94:	061b      	lsls	r3, r3, #24
 800cb96:	b09d      	sub	sp, #116	; 0x74
 800cb98:	4607      	mov	r7, r0
 800cb9a:	460d      	mov	r5, r1
 800cb9c:	4614      	mov	r4, r2
 800cb9e:	d50e      	bpl.n	800cbbe <_svfiprintf_r+0x32>
 800cba0:	690b      	ldr	r3, [r1, #16]
 800cba2:	b963      	cbnz	r3, 800cbbe <_svfiprintf_r+0x32>
 800cba4:	2140      	movs	r1, #64	; 0x40
 800cba6:	f7ff fb8f 	bl	800c2c8 <_malloc_r>
 800cbaa:	6028      	str	r0, [r5, #0]
 800cbac:	6128      	str	r0, [r5, #16]
 800cbae:	b920      	cbnz	r0, 800cbba <_svfiprintf_r+0x2e>
 800cbb0:	230c      	movs	r3, #12
 800cbb2:	603b      	str	r3, [r7, #0]
 800cbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb8:	e0d0      	b.n	800cd5c <_svfiprintf_r+0x1d0>
 800cbba:	2340      	movs	r3, #64	; 0x40
 800cbbc:	616b      	str	r3, [r5, #20]
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	9309      	str	r3, [sp, #36]	; 0x24
 800cbc2:	2320      	movs	r3, #32
 800cbc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cbc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800cbcc:	2330      	movs	r3, #48	; 0x30
 800cbce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cd74 <_svfiprintf_r+0x1e8>
 800cbd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cbd6:	f04f 0901 	mov.w	r9, #1
 800cbda:	4623      	mov	r3, r4
 800cbdc:	469a      	mov	sl, r3
 800cbde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cbe2:	b10a      	cbz	r2, 800cbe8 <_svfiprintf_r+0x5c>
 800cbe4:	2a25      	cmp	r2, #37	; 0x25
 800cbe6:	d1f9      	bne.n	800cbdc <_svfiprintf_r+0x50>
 800cbe8:	ebba 0b04 	subs.w	fp, sl, r4
 800cbec:	d00b      	beq.n	800cc06 <_svfiprintf_r+0x7a>
 800cbee:	465b      	mov	r3, fp
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	4629      	mov	r1, r5
 800cbf4:	4638      	mov	r0, r7
 800cbf6:	f7ff ff6f 	bl	800cad8 <__ssputs_r>
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	f000 80a9 	beq.w	800cd52 <_svfiprintf_r+0x1c6>
 800cc00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc02:	445a      	add	r2, fp
 800cc04:	9209      	str	r2, [sp, #36]	; 0x24
 800cc06:	f89a 3000 	ldrb.w	r3, [sl]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	f000 80a1 	beq.w	800cd52 <_svfiprintf_r+0x1c6>
 800cc10:	2300      	movs	r3, #0
 800cc12:	f04f 32ff 	mov.w	r2, #4294967295
 800cc16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc1a:	f10a 0a01 	add.w	sl, sl, #1
 800cc1e:	9304      	str	r3, [sp, #16]
 800cc20:	9307      	str	r3, [sp, #28]
 800cc22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc26:	931a      	str	r3, [sp, #104]	; 0x68
 800cc28:	4654      	mov	r4, sl
 800cc2a:	2205      	movs	r2, #5
 800cc2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc30:	4850      	ldr	r0, [pc, #320]	; (800cd74 <_svfiprintf_r+0x1e8>)
 800cc32:	f7f3 fb05 	bl	8000240 <memchr>
 800cc36:	9a04      	ldr	r2, [sp, #16]
 800cc38:	b9d8      	cbnz	r0, 800cc72 <_svfiprintf_r+0xe6>
 800cc3a:	06d0      	lsls	r0, r2, #27
 800cc3c:	bf44      	itt	mi
 800cc3e:	2320      	movmi	r3, #32
 800cc40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc44:	0711      	lsls	r1, r2, #28
 800cc46:	bf44      	itt	mi
 800cc48:	232b      	movmi	r3, #43	; 0x2b
 800cc4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cc4e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc52:	2b2a      	cmp	r3, #42	; 0x2a
 800cc54:	d015      	beq.n	800cc82 <_svfiprintf_r+0xf6>
 800cc56:	9a07      	ldr	r2, [sp, #28]
 800cc58:	4654      	mov	r4, sl
 800cc5a:	2000      	movs	r0, #0
 800cc5c:	f04f 0c0a 	mov.w	ip, #10
 800cc60:	4621      	mov	r1, r4
 800cc62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc66:	3b30      	subs	r3, #48	; 0x30
 800cc68:	2b09      	cmp	r3, #9
 800cc6a:	d94d      	bls.n	800cd08 <_svfiprintf_r+0x17c>
 800cc6c:	b1b0      	cbz	r0, 800cc9c <_svfiprintf_r+0x110>
 800cc6e:	9207      	str	r2, [sp, #28]
 800cc70:	e014      	b.n	800cc9c <_svfiprintf_r+0x110>
 800cc72:	eba0 0308 	sub.w	r3, r0, r8
 800cc76:	fa09 f303 	lsl.w	r3, r9, r3
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	9304      	str	r3, [sp, #16]
 800cc7e:	46a2      	mov	sl, r4
 800cc80:	e7d2      	b.n	800cc28 <_svfiprintf_r+0x9c>
 800cc82:	9b03      	ldr	r3, [sp, #12]
 800cc84:	1d19      	adds	r1, r3, #4
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	9103      	str	r1, [sp, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	bfbb      	ittet	lt
 800cc8e:	425b      	neglt	r3, r3
 800cc90:	f042 0202 	orrlt.w	r2, r2, #2
 800cc94:	9307      	strge	r3, [sp, #28]
 800cc96:	9307      	strlt	r3, [sp, #28]
 800cc98:	bfb8      	it	lt
 800cc9a:	9204      	strlt	r2, [sp, #16]
 800cc9c:	7823      	ldrb	r3, [r4, #0]
 800cc9e:	2b2e      	cmp	r3, #46	; 0x2e
 800cca0:	d10c      	bne.n	800ccbc <_svfiprintf_r+0x130>
 800cca2:	7863      	ldrb	r3, [r4, #1]
 800cca4:	2b2a      	cmp	r3, #42	; 0x2a
 800cca6:	d134      	bne.n	800cd12 <_svfiprintf_r+0x186>
 800cca8:	9b03      	ldr	r3, [sp, #12]
 800ccaa:	1d1a      	adds	r2, r3, #4
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	9203      	str	r2, [sp, #12]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	bfb8      	it	lt
 800ccb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800ccb8:	3402      	adds	r4, #2
 800ccba:	9305      	str	r3, [sp, #20]
 800ccbc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cd84 <_svfiprintf_r+0x1f8>
 800ccc0:	7821      	ldrb	r1, [r4, #0]
 800ccc2:	2203      	movs	r2, #3
 800ccc4:	4650      	mov	r0, sl
 800ccc6:	f7f3 fabb 	bl	8000240 <memchr>
 800ccca:	b138      	cbz	r0, 800ccdc <_svfiprintf_r+0x150>
 800cccc:	9b04      	ldr	r3, [sp, #16]
 800ccce:	eba0 000a 	sub.w	r0, r0, sl
 800ccd2:	2240      	movs	r2, #64	; 0x40
 800ccd4:	4082      	lsls	r2, r0
 800ccd6:	4313      	orrs	r3, r2
 800ccd8:	3401      	adds	r4, #1
 800ccda:	9304      	str	r3, [sp, #16]
 800ccdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cce0:	4825      	ldr	r0, [pc, #148]	; (800cd78 <_svfiprintf_r+0x1ec>)
 800cce2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cce6:	2206      	movs	r2, #6
 800cce8:	f7f3 faaa 	bl	8000240 <memchr>
 800ccec:	2800      	cmp	r0, #0
 800ccee:	d038      	beq.n	800cd62 <_svfiprintf_r+0x1d6>
 800ccf0:	4b22      	ldr	r3, [pc, #136]	; (800cd7c <_svfiprintf_r+0x1f0>)
 800ccf2:	bb1b      	cbnz	r3, 800cd3c <_svfiprintf_r+0x1b0>
 800ccf4:	9b03      	ldr	r3, [sp, #12]
 800ccf6:	3307      	adds	r3, #7
 800ccf8:	f023 0307 	bic.w	r3, r3, #7
 800ccfc:	3308      	adds	r3, #8
 800ccfe:	9303      	str	r3, [sp, #12]
 800cd00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd02:	4433      	add	r3, r6
 800cd04:	9309      	str	r3, [sp, #36]	; 0x24
 800cd06:	e768      	b.n	800cbda <_svfiprintf_r+0x4e>
 800cd08:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	2001      	movs	r0, #1
 800cd10:	e7a6      	b.n	800cc60 <_svfiprintf_r+0xd4>
 800cd12:	2300      	movs	r3, #0
 800cd14:	3401      	adds	r4, #1
 800cd16:	9305      	str	r3, [sp, #20]
 800cd18:	4619      	mov	r1, r3
 800cd1a:	f04f 0c0a 	mov.w	ip, #10
 800cd1e:	4620      	mov	r0, r4
 800cd20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd24:	3a30      	subs	r2, #48	; 0x30
 800cd26:	2a09      	cmp	r2, #9
 800cd28:	d903      	bls.n	800cd32 <_svfiprintf_r+0x1a6>
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d0c6      	beq.n	800ccbc <_svfiprintf_r+0x130>
 800cd2e:	9105      	str	r1, [sp, #20]
 800cd30:	e7c4      	b.n	800ccbc <_svfiprintf_r+0x130>
 800cd32:	fb0c 2101 	mla	r1, ip, r1, r2
 800cd36:	4604      	mov	r4, r0
 800cd38:	2301      	movs	r3, #1
 800cd3a:	e7f0      	b.n	800cd1e <_svfiprintf_r+0x192>
 800cd3c:	ab03      	add	r3, sp, #12
 800cd3e:	9300      	str	r3, [sp, #0]
 800cd40:	462a      	mov	r2, r5
 800cd42:	4b0f      	ldr	r3, [pc, #60]	; (800cd80 <_svfiprintf_r+0x1f4>)
 800cd44:	a904      	add	r1, sp, #16
 800cd46:	4638      	mov	r0, r7
 800cd48:	f7fd fed2 	bl	800aaf0 <_printf_float>
 800cd4c:	1c42      	adds	r2, r0, #1
 800cd4e:	4606      	mov	r6, r0
 800cd50:	d1d6      	bne.n	800cd00 <_svfiprintf_r+0x174>
 800cd52:	89ab      	ldrh	r3, [r5, #12]
 800cd54:	065b      	lsls	r3, r3, #25
 800cd56:	f53f af2d 	bmi.w	800cbb4 <_svfiprintf_r+0x28>
 800cd5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd5c:	b01d      	add	sp, #116	; 0x74
 800cd5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd62:	ab03      	add	r3, sp, #12
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	462a      	mov	r2, r5
 800cd68:	4b05      	ldr	r3, [pc, #20]	; (800cd80 <_svfiprintf_r+0x1f4>)
 800cd6a:	a904      	add	r1, sp, #16
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	f7fe f947 	bl	800b000 <_printf_i>
 800cd72:	e7eb      	b.n	800cd4c <_svfiprintf_r+0x1c0>
 800cd74:	0800dcb4 	.word	0x0800dcb4
 800cd78:	0800dcbe 	.word	0x0800dcbe
 800cd7c:	0800aaf1 	.word	0x0800aaf1
 800cd80:	0800cad9 	.word	0x0800cad9
 800cd84:	0800dcba 	.word	0x0800dcba

0800cd88 <__sflush_r>:
 800cd88:	898a      	ldrh	r2, [r1, #12]
 800cd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd8e:	4605      	mov	r5, r0
 800cd90:	0710      	lsls	r0, r2, #28
 800cd92:	460c      	mov	r4, r1
 800cd94:	d458      	bmi.n	800ce48 <__sflush_r+0xc0>
 800cd96:	684b      	ldr	r3, [r1, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	dc05      	bgt.n	800cda8 <__sflush_r+0x20>
 800cd9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dc02      	bgt.n	800cda8 <__sflush_r+0x20>
 800cda2:	2000      	movs	r0, #0
 800cda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cda8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdaa:	2e00      	cmp	r6, #0
 800cdac:	d0f9      	beq.n	800cda2 <__sflush_r+0x1a>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cdb4:	682f      	ldr	r7, [r5, #0]
 800cdb6:	6a21      	ldr	r1, [r4, #32]
 800cdb8:	602b      	str	r3, [r5, #0]
 800cdba:	d032      	beq.n	800ce22 <__sflush_r+0x9a>
 800cdbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cdbe:	89a3      	ldrh	r3, [r4, #12]
 800cdc0:	075a      	lsls	r2, r3, #29
 800cdc2:	d505      	bpl.n	800cdd0 <__sflush_r+0x48>
 800cdc4:	6863      	ldr	r3, [r4, #4]
 800cdc6:	1ac0      	subs	r0, r0, r3
 800cdc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cdca:	b10b      	cbz	r3, 800cdd0 <__sflush_r+0x48>
 800cdcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cdce:	1ac0      	subs	r0, r0, r3
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	4602      	mov	r2, r0
 800cdd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cdd6:	6a21      	ldr	r1, [r4, #32]
 800cdd8:	4628      	mov	r0, r5
 800cdda:	47b0      	blx	r6
 800cddc:	1c43      	adds	r3, r0, #1
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	d106      	bne.n	800cdf0 <__sflush_r+0x68>
 800cde2:	6829      	ldr	r1, [r5, #0]
 800cde4:	291d      	cmp	r1, #29
 800cde6:	d82b      	bhi.n	800ce40 <__sflush_r+0xb8>
 800cde8:	4a29      	ldr	r2, [pc, #164]	; (800ce90 <__sflush_r+0x108>)
 800cdea:	410a      	asrs	r2, r1
 800cdec:	07d6      	lsls	r6, r2, #31
 800cdee:	d427      	bmi.n	800ce40 <__sflush_r+0xb8>
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	6062      	str	r2, [r4, #4]
 800cdf4:	04d9      	lsls	r1, r3, #19
 800cdf6:	6922      	ldr	r2, [r4, #16]
 800cdf8:	6022      	str	r2, [r4, #0]
 800cdfa:	d504      	bpl.n	800ce06 <__sflush_r+0x7e>
 800cdfc:	1c42      	adds	r2, r0, #1
 800cdfe:	d101      	bne.n	800ce04 <__sflush_r+0x7c>
 800ce00:	682b      	ldr	r3, [r5, #0]
 800ce02:	b903      	cbnz	r3, 800ce06 <__sflush_r+0x7e>
 800ce04:	6560      	str	r0, [r4, #84]	; 0x54
 800ce06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce08:	602f      	str	r7, [r5, #0]
 800ce0a:	2900      	cmp	r1, #0
 800ce0c:	d0c9      	beq.n	800cda2 <__sflush_r+0x1a>
 800ce0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce12:	4299      	cmp	r1, r3
 800ce14:	d002      	beq.n	800ce1c <__sflush_r+0x94>
 800ce16:	4628      	mov	r0, r5
 800ce18:	f7ff f9e2 	bl	800c1e0 <_free_r>
 800ce1c:	2000      	movs	r0, #0
 800ce1e:	6360      	str	r0, [r4, #52]	; 0x34
 800ce20:	e7c0      	b.n	800cda4 <__sflush_r+0x1c>
 800ce22:	2301      	movs	r3, #1
 800ce24:	4628      	mov	r0, r5
 800ce26:	47b0      	blx	r6
 800ce28:	1c41      	adds	r1, r0, #1
 800ce2a:	d1c8      	bne.n	800cdbe <__sflush_r+0x36>
 800ce2c:	682b      	ldr	r3, [r5, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d0c5      	beq.n	800cdbe <__sflush_r+0x36>
 800ce32:	2b1d      	cmp	r3, #29
 800ce34:	d001      	beq.n	800ce3a <__sflush_r+0xb2>
 800ce36:	2b16      	cmp	r3, #22
 800ce38:	d101      	bne.n	800ce3e <__sflush_r+0xb6>
 800ce3a:	602f      	str	r7, [r5, #0]
 800ce3c:	e7b1      	b.n	800cda2 <__sflush_r+0x1a>
 800ce3e:	89a3      	ldrh	r3, [r4, #12]
 800ce40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce44:	81a3      	strh	r3, [r4, #12]
 800ce46:	e7ad      	b.n	800cda4 <__sflush_r+0x1c>
 800ce48:	690f      	ldr	r7, [r1, #16]
 800ce4a:	2f00      	cmp	r7, #0
 800ce4c:	d0a9      	beq.n	800cda2 <__sflush_r+0x1a>
 800ce4e:	0793      	lsls	r3, r2, #30
 800ce50:	680e      	ldr	r6, [r1, #0]
 800ce52:	bf08      	it	eq
 800ce54:	694b      	ldreq	r3, [r1, #20]
 800ce56:	600f      	str	r7, [r1, #0]
 800ce58:	bf18      	it	ne
 800ce5a:	2300      	movne	r3, #0
 800ce5c:	eba6 0807 	sub.w	r8, r6, r7
 800ce60:	608b      	str	r3, [r1, #8]
 800ce62:	f1b8 0f00 	cmp.w	r8, #0
 800ce66:	dd9c      	ble.n	800cda2 <__sflush_r+0x1a>
 800ce68:	6a21      	ldr	r1, [r4, #32]
 800ce6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce6c:	4643      	mov	r3, r8
 800ce6e:	463a      	mov	r2, r7
 800ce70:	4628      	mov	r0, r5
 800ce72:	47b0      	blx	r6
 800ce74:	2800      	cmp	r0, #0
 800ce76:	dc06      	bgt.n	800ce86 <__sflush_r+0xfe>
 800ce78:	89a3      	ldrh	r3, [r4, #12]
 800ce7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce7e:	81a3      	strh	r3, [r4, #12]
 800ce80:	f04f 30ff 	mov.w	r0, #4294967295
 800ce84:	e78e      	b.n	800cda4 <__sflush_r+0x1c>
 800ce86:	4407      	add	r7, r0
 800ce88:	eba8 0800 	sub.w	r8, r8, r0
 800ce8c:	e7e9      	b.n	800ce62 <__sflush_r+0xda>
 800ce8e:	bf00      	nop
 800ce90:	dfbffffe 	.word	0xdfbffffe

0800ce94 <_fflush_r>:
 800ce94:	b538      	push	{r3, r4, r5, lr}
 800ce96:	690b      	ldr	r3, [r1, #16]
 800ce98:	4605      	mov	r5, r0
 800ce9a:	460c      	mov	r4, r1
 800ce9c:	b913      	cbnz	r3, 800cea4 <_fflush_r+0x10>
 800ce9e:	2500      	movs	r5, #0
 800cea0:	4628      	mov	r0, r5
 800cea2:	bd38      	pop	{r3, r4, r5, pc}
 800cea4:	b118      	cbz	r0, 800ceae <_fflush_r+0x1a>
 800cea6:	6a03      	ldr	r3, [r0, #32]
 800cea8:	b90b      	cbnz	r3, 800ceae <_fflush_r+0x1a>
 800ceaa:	f7fe fa57 	bl	800b35c <__sinit>
 800ceae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0f3      	beq.n	800ce9e <_fflush_r+0xa>
 800ceb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ceb8:	07d0      	lsls	r0, r2, #31
 800ceba:	d404      	bmi.n	800cec6 <_fflush_r+0x32>
 800cebc:	0599      	lsls	r1, r3, #22
 800cebe:	d402      	bmi.n	800cec6 <_fflush_r+0x32>
 800cec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cec2:	f7fe fb96 	bl	800b5f2 <__retarget_lock_acquire_recursive>
 800cec6:	4628      	mov	r0, r5
 800cec8:	4621      	mov	r1, r4
 800ceca:	f7ff ff5d 	bl	800cd88 <__sflush_r>
 800cece:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ced0:	07da      	lsls	r2, r3, #31
 800ced2:	4605      	mov	r5, r0
 800ced4:	d4e4      	bmi.n	800cea0 <_fflush_r+0xc>
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	059b      	lsls	r3, r3, #22
 800ceda:	d4e1      	bmi.n	800cea0 <_fflush_r+0xc>
 800cedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cede:	f7fe fb89 	bl	800b5f4 <__retarget_lock_release_recursive>
 800cee2:	e7dd      	b.n	800cea0 <_fflush_r+0xc>

0800cee4 <memmove>:
 800cee4:	4288      	cmp	r0, r1
 800cee6:	b510      	push	{r4, lr}
 800cee8:	eb01 0402 	add.w	r4, r1, r2
 800ceec:	d902      	bls.n	800cef4 <memmove+0x10>
 800ceee:	4284      	cmp	r4, r0
 800cef0:	4623      	mov	r3, r4
 800cef2:	d807      	bhi.n	800cf04 <memmove+0x20>
 800cef4:	1e43      	subs	r3, r0, #1
 800cef6:	42a1      	cmp	r1, r4
 800cef8:	d008      	beq.n	800cf0c <memmove+0x28>
 800cefa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cefe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf02:	e7f8      	b.n	800cef6 <memmove+0x12>
 800cf04:	4402      	add	r2, r0
 800cf06:	4601      	mov	r1, r0
 800cf08:	428a      	cmp	r2, r1
 800cf0a:	d100      	bne.n	800cf0e <memmove+0x2a>
 800cf0c:	bd10      	pop	{r4, pc}
 800cf0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf16:	e7f7      	b.n	800cf08 <memmove+0x24>

0800cf18 <_sbrk_r>:
 800cf18:	b538      	push	{r3, r4, r5, lr}
 800cf1a:	4d06      	ldr	r5, [pc, #24]	; (800cf34 <_sbrk_r+0x1c>)
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	4604      	mov	r4, r0
 800cf20:	4608      	mov	r0, r1
 800cf22:	602b      	str	r3, [r5, #0]
 800cf24:	f7f6 fcf8 	bl	8003918 <_sbrk>
 800cf28:	1c43      	adds	r3, r0, #1
 800cf2a:	d102      	bne.n	800cf32 <_sbrk_r+0x1a>
 800cf2c:	682b      	ldr	r3, [r5, #0]
 800cf2e:	b103      	cbz	r3, 800cf32 <_sbrk_r+0x1a>
 800cf30:	6023      	str	r3, [r4, #0]
 800cf32:	bd38      	pop	{r3, r4, r5, pc}
 800cf34:	200009e4 	.word	0x200009e4

0800cf38 <memcpy>:
 800cf38:	440a      	add	r2, r1
 800cf3a:	4291      	cmp	r1, r2
 800cf3c:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf40:	d100      	bne.n	800cf44 <memcpy+0xc>
 800cf42:	4770      	bx	lr
 800cf44:	b510      	push	{r4, lr}
 800cf46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf4e:	4291      	cmp	r1, r2
 800cf50:	d1f9      	bne.n	800cf46 <memcpy+0xe>
 800cf52:	bd10      	pop	{r4, pc}

0800cf54 <__assert_func>:
 800cf54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf56:	4614      	mov	r4, r2
 800cf58:	461a      	mov	r2, r3
 800cf5a:	4b09      	ldr	r3, [pc, #36]	; (800cf80 <__assert_func+0x2c>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4605      	mov	r5, r0
 800cf60:	68d8      	ldr	r0, [r3, #12]
 800cf62:	b14c      	cbz	r4, 800cf78 <__assert_func+0x24>
 800cf64:	4b07      	ldr	r3, [pc, #28]	; (800cf84 <__assert_func+0x30>)
 800cf66:	9100      	str	r1, [sp, #0]
 800cf68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cf6c:	4906      	ldr	r1, [pc, #24]	; (800cf88 <__assert_func+0x34>)
 800cf6e:	462b      	mov	r3, r5
 800cf70:	f000 f872 	bl	800d058 <fiprintf>
 800cf74:	f000 f882 	bl	800d07c <abort>
 800cf78:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <__assert_func+0x38>)
 800cf7a:	461c      	mov	r4, r3
 800cf7c:	e7f3      	b.n	800cf66 <__assert_func+0x12>
 800cf7e:	bf00      	nop
 800cf80:	2000012c 	.word	0x2000012c
 800cf84:	0800dccf 	.word	0x0800dccf
 800cf88:	0800dcdc 	.word	0x0800dcdc
 800cf8c:	0800dd0a 	.word	0x0800dd0a

0800cf90 <_calloc_r>:
 800cf90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf92:	fba1 2402 	umull	r2, r4, r1, r2
 800cf96:	b94c      	cbnz	r4, 800cfac <_calloc_r+0x1c>
 800cf98:	4611      	mov	r1, r2
 800cf9a:	9201      	str	r2, [sp, #4]
 800cf9c:	f7ff f994 	bl	800c2c8 <_malloc_r>
 800cfa0:	9a01      	ldr	r2, [sp, #4]
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	b930      	cbnz	r0, 800cfb4 <_calloc_r+0x24>
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	b003      	add	sp, #12
 800cfaa:	bd30      	pop	{r4, r5, pc}
 800cfac:	220c      	movs	r2, #12
 800cfae:	6002      	str	r2, [r0, #0]
 800cfb0:	2500      	movs	r5, #0
 800cfb2:	e7f8      	b.n	800cfa6 <_calloc_r+0x16>
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	f7fe fa9e 	bl	800b4f6 <memset>
 800cfba:	e7f4      	b.n	800cfa6 <_calloc_r+0x16>

0800cfbc <__ascii_mbtowc>:
 800cfbc:	b082      	sub	sp, #8
 800cfbe:	b901      	cbnz	r1, 800cfc2 <__ascii_mbtowc+0x6>
 800cfc0:	a901      	add	r1, sp, #4
 800cfc2:	b142      	cbz	r2, 800cfd6 <__ascii_mbtowc+0x1a>
 800cfc4:	b14b      	cbz	r3, 800cfda <__ascii_mbtowc+0x1e>
 800cfc6:	7813      	ldrb	r3, [r2, #0]
 800cfc8:	600b      	str	r3, [r1, #0]
 800cfca:	7812      	ldrb	r2, [r2, #0]
 800cfcc:	1e10      	subs	r0, r2, #0
 800cfce:	bf18      	it	ne
 800cfd0:	2001      	movne	r0, #1
 800cfd2:	b002      	add	sp, #8
 800cfd4:	4770      	bx	lr
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	e7fb      	b.n	800cfd2 <__ascii_mbtowc+0x16>
 800cfda:	f06f 0001 	mvn.w	r0, #1
 800cfde:	e7f8      	b.n	800cfd2 <__ascii_mbtowc+0x16>

0800cfe0 <_realloc_r>:
 800cfe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe4:	4680      	mov	r8, r0
 800cfe6:	4614      	mov	r4, r2
 800cfe8:	460e      	mov	r6, r1
 800cfea:	b921      	cbnz	r1, 800cff6 <_realloc_r+0x16>
 800cfec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cff0:	4611      	mov	r1, r2
 800cff2:	f7ff b969 	b.w	800c2c8 <_malloc_r>
 800cff6:	b92a      	cbnz	r2, 800d004 <_realloc_r+0x24>
 800cff8:	f7ff f8f2 	bl	800c1e0 <_free_r>
 800cffc:	4625      	mov	r5, r4
 800cffe:	4628      	mov	r0, r5
 800d000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d004:	f000 f841 	bl	800d08a <_malloc_usable_size_r>
 800d008:	4284      	cmp	r4, r0
 800d00a:	4607      	mov	r7, r0
 800d00c:	d802      	bhi.n	800d014 <_realloc_r+0x34>
 800d00e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d012:	d812      	bhi.n	800d03a <_realloc_r+0x5a>
 800d014:	4621      	mov	r1, r4
 800d016:	4640      	mov	r0, r8
 800d018:	f7ff f956 	bl	800c2c8 <_malloc_r>
 800d01c:	4605      	mov	r5, r0
 800d01e:	2800      	cmp	r0, #0
 800d020:	d0ed      	beq.n	800cffe <_realloc_r+0x1e>
 800d022:	42bc      	cmp	r4, r7
 800d024:	4622      	mov	r2, r4
 800d026:	4631      	mov	r1, r6
 800d028:	bf28      	it	cs
 800d02a:	463a      	movcs	r2, r7
 800d02c:	f7ff ff84 	bl	800cf38 <memcpy>
 800d030:	4631      	mov	r1, r6
 800d032:	4640      	mov	r0, r8
 800d034:	f7ff f8d4 	bl	800c1e0 <_free_r>
 800d038:	e7e1      	b.n	800cffe <_realloc_r+0x1e>
 800d03a:	4635      	mov	r5, r6
 800d03c:	e7df      	b.n	800cffe <_realloc_r+0x1e>

0800d03e <__ascii_wctomb>:
 800d03e:	b149      	cbz	r1, 800d054 <__ascii_wctomb+0x16>
 800d040:	2aff      	cmp	r2, #255	; 0xff
 800d042:	bf85      	ittet	hi
 800d044:	238a      	movhi	r3, #138	; 0x8a
 800d046:	6003      	strhi	r3, [r0, #0]
 800d048:	700a      	strbls	r2, [r1, #0]
 800d04a:	f04f 30ff 	movhi.w	r0, #4294967295
 800d04e:	bf98      	it	ls
 800d050:	2001      	movls	r0, #1
 800d052:	4770      	bx	lr
 800d054:	4608      	mov	r0, r1
 800d056:	4770      	bx	lr

0800d058 <fiprintf>:
 800d058:	b40e      	push	{r1, r2, r3}
 800d05a:	b503      	push	{r0, r1, lr}
 800d05c:	4601      	mov	r1, r0
 800d05e:	ab03      	add	r3, sp, #12
 800d060:	4805      	ldr	r0, [pc, #20]	; (800d078 <fiprintf+0x20>)
 800d062:	f853 2b04 	ldr.w	r2, [r3], #4
 800d066:	6800      	ldr	r0, [r0, #0]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	f000 f83f 	bl	800d0ec <_vfiprintf_r>
 800d06e:	b002      	add	sp, #8
 800d070:	f85d eb04 	ldr.w	lr, [sp], #4
 800d074:	b003      	add	sp, #12
 800d076:	4770      	bx	lr
 800d078:	2000012c 	.word	0x2000012c

0800d07c <abort>:
 800d07c:	b508      	push	{r3, lr}
 800d07e:	2006      	movs	r0, #6
 800d080:	f000 fa0c 	bl	800d49c <raise>
 800d084:	2001      	movs	r0, #1
 800d086:	f7f6 fbcf 	bl	8003828 <_exit>

0800d08a <_malloc_usable_size_r>:
 800d08a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d08e:	1f18      	subs	r0, r3, #4
 800d090:	2b00      	cmp	r3, #0
 800d092:	bfbc      	itt	lt
 800d094:	580b      	ldrlt	r3, [r1, r0]
 800d096:	18c0      	addlt	r0, r0, r3
 800d098:	4770      	bx	lr

0800d09a <__sfputc_r>:
 800d09a:	6893      	ldr	r3, [r2, #8]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	b410      	push	{r4}
 800d0a2:	6093      	str	r3, [r2, #8]
 800d0a4:	da08      	bge.n	800d0b8 <__sfputc_r+0x1e>
 800d0a6:	6994      	ldr	r4, [r2, #24]
 800d0a8:	42a3      	cmp	r3, r4
 800d0aa:	db01      	blt.n	800d0b0 <__sfputc_r+0x16>
 800d0ac:	290a      	cmp	r1, #10
 800d0ae:	d103      	bne.n	800d0b8 <__sfputc_r+0x1e>
 800d0b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0b4:	f000 b934 	b.w	800d320 <__swbuf_r>
 800d0b8:	6813      	ldr	r3, [r2, #0]
 800d0ba:	1c58      	adds	r0, r3, #1
 800d0bc:	6010      	str	r0, [r2, #0]
 800d0be:	7019      	strb	r1, [r3, #0]
 800d0c0:	4608      	mov	r0, r1
 800d0c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d0c6:	4770      	bx	lr

0800d0c8 <__sfputs_r>:
 800d0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	460f      	mov	r7, r1
 800d0ce:	4614      	mov	r4, r2
 800d0d0:	18d5      	adds	r5, r2, r3
 800d0d2:	42ac      	cmp	r4, r5
 800d0d4:	d101      	bne.n	800d0da <__sfputs_r+0x12>
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	e007      	b.n	800d0ea <__sfputs_r+0x22>
 800d0da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0de:	463a      	mov	r2, r7
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7ff ffda 	bl	800d09a <__sfputc_r>
 800d0e6:	1c43      	adds	r3, r0, #1
 800d0e8:	d1f3      	bne.n	800d0d2 <__sfputs_r+0xa>
 800d0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d0ec <_vfiprintf_r>:
 800d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	460d      	mov	r5, r1
 800d0f2:	b09d      	sub	sp, #116	; 0x74
 800d0f4:	4614      	mov	r4, r2
 800d0f6:	4698      	mov	r8, r3
 800d0f8:	4606      	mov	r6, r0
 800d0fa:	b118      	cbz	r0, 800d104 <_vfiprintf_r+0x18>
 800d0fc:	6a03      	ldr	r3, [r0, #32]
 800d0fe:	b90b      	cbnz	r3, 800d104 <_vfiprintf_r+0x18>
 800d100:	f7fe f92c 	bl	800b35c <__sinit>
 800d104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d106:	07d9      	lsls	r1, r3, #31
 800d108:	d405      	bmi.n	800d116 <_vfiprintf_r+0x2a>
 800d10a:	89ab      	ldrh	r3, [r5, #12]
 800d10c:	059a      	lsls	r2, r3, #22
 800d10e:	d402      	bmi.n	800d116 <_vfiprintf_r+0x2a>
 800d110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d112:	f7fe fa6e 	bl	800b5f2 <__retarget_lock_acquire_recursive>
 800d116:	89ab      	ldrh	r3, [r5, #12]
 800d118:	071b      	lsls	r3, r3, #28
 800d11a:	d501      	bpl.n	800d120 <_vfiprintf_r+0x34>
 800d11c:	692b      	ldr	r3, [r5, #16]
 800d11e:	b99b      	cbnz	r3, 800d148 <_vfiprintf_r+0x5c>
 800d120:	4629      	mov	r1, r5
 800d122:	4630      	mov	r0, r6
 800d124:	f000 f93a 	bl	800d39c <__swsetup_r>
 800d128:	b170      	cbz	r0, 800d148 <_vfiprintf_r+0x5c>
 800d12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d12c:	07dc      	lsls	r4, r3, #31
 800d12e:	d504      	bpl.n	800d13a <_vfiprintf_r+0x4e>
 800d130:	f04f 30ff 	mov.w	r0, #4294967295
 800d134:	b01d      	add	sp, #116	; 0x74
 800d136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13a:	89ab      	ldrh	r3, [r5, #12]
 800d13c:	0598      	lsls	r0, r3, #22
 800d13e:	d4f7      	bmi.n	800d130 <_vfiprintf_r+0x44>
 800d140:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d142:	f7fe fa57 	bl	800b5f4 <__retarget_lock_release_recursive>
 800d146:	e7f3      	b.n	800d130 <_vfiprintf_r+0x44>
 800d148:	2300      	movs	r3, #0
 800d14a:	9309      	str	r3, [sp, #36]	; 0x24
 800d14c:	2320      	movs	r3, #32
 800d14e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d152:	f8cd 800c 	str.w	r8, [sp, #12]
 800d156:	2330      	movs	r3, #48	; 0x30
 800d158:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d30c <_vfiprintf_r+0x220>
 800d15c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d160:	f04f 0901 	mov.w	r9, #1
 800d164:	4623      	mov	r3, r4
 800d166:	469a      	mov	sl, r3
 800d168:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d16c:	b10a      	cbz	r2, 800d172 <_vfiprintf_r+0x86>
 800d16e:	2a25      	cmp	r2, #37	; 0x25
 800d170:	d1f9      	bne.n	800d166 <_vfiprintf_r+0x7a>
 800d172:	ebba 0b04 	subs.w	fp, sl, r4
 800d176:	d00b      	beq.n	800d190 <_vfiprintf_r+0xa4>
 800d178:	465b      	mov	r3, fp
 800d17a:	4622      	mov	r2, r4
 800d17c:	4629      	mov	r1, r5
 800d17e:	4630      	mov	r0, r6
 800d180:	f7ff ffa2 	bl	800d0c8 <__sfputs_r>
 800d184:	3001      	adds	r0, #1
 800d186:	f000 80a9 	beq.w	800d2dc <_vfiprintf_r+0x1f0>
 800d18a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d18c:	445a      	add	r2, fp
 800d18e:	9209      	str	r2, [sp, #36]	; 0x24
 800d190:	f89a 3000 	ldrb.w	r3, [sl]
 800d194:	2b00      	cmp	r3, #0
 800d196:	f000 80a1 	beq.w	800d2dc <_vfiprintf_r+0x1f0>
 800d19a:	2300      	movs	r3, #0
 800d19c:	f04f 32ff 	mov.w	r2, #4294967295
 800d1a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1a4:	f10a 0a01 	add.w	sl, sl, #1
 800d1a8:	9304      	str	r3, [sp, #16]
 800d1aa:	9307      	str	r3, [sp, #28]
 800d1ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d1b0:	931a      	str	r3, [sp, #104]	; 0x68
 800d1b2:	4654      	mov	r4, sl
 800d1b4:	2205      	movs	r2, #5
 800d1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ba:	4854      	ldr	r0, [pc, #336]	; (800d30c <_vfiprintf_r+0x220>)
 800d1bc:	f7f3 f840 	bl	8000240 <memchr>
 800d1c0:	9a04      	ldr	r2, [sp, #16]
 800d1c2:	b9d8      	cbnz	r0, 800d1fc <_vfiprintf_r+0x110>
 800d1c4:	06d1      	lsls	r1, r2, #27
 800d1c6:	bf44      	itt	mi
 800d1c8:	2320      	movmi	r3, #32
 800d1ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ce:	0713      	lsls	r3, r2, #28
 800d1d0:	bf44      	itt	mi
 800d1d2:	232b      	movmi	r3, #43	; 0x2b
 800d1d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d1dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d1de:	d015      	beq.n	800d20c <_vfiprintf_r+0x120>
 800d1e0:	9a07      	ldr	r2, [sp, #28]
 800d1e2:	4654      	mov	r4, sl
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	f04f 0c0a 	mov.w	ip, #10
 800d1ea:	4621      	mov	r1, r4
 800d1ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1f0:	3b30      	subs	r3, #48	; 0x30
 800d1f2:	2b09      	cmp	r3, #9
 800d1f4:	d94d      	bls.n	800d292 <_vfiprintf_r+0x1a6>
 800d1f6:	b1b0      	cbz	r0, 800d226 <_vfiprintf_r+0x13a>
 800d1f8:	9207      	str	r2, [sp, #28]
 800d1fa:	e014      	b.n	800d226 <_vfiprintf_r+0x13a>
 800d1fc:	eba0 0308 	sub.w	r3, r0, r8
 800d200:	fa09 f303 	lsl.w	r3, r9, r3
 800d204:	4313      	orrs	r3, r2
 800d206:	9304      	str	r3, [sp, #16]
 800d208:	46a2      	mov	sl, r4
 800d20a:	e7d2      	b.n	800d1b2 <_vfiprintf_r+0xc6>
 800d20c:	9b03      	ldr	r3, [sp, #12]
 800d20e:	1d19      	adds	r1, r3, #4
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	9103      	str	r1, [sp, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	bfbb      	ittet	lt
 800d218:	425b      	neglt	r3, r3
 800d21a:	f042 0202 	orrlt.w	r2, r2, #2
 800d21e:	9307      	strge	r3, [sp, #28]
 800d220:	9307      	strlt	r3, [sp, #28]
 800d222:	bfb8      	it	lt
 800d224:	9204      	strlt	r2, [sp, #16]
 800d226:	7823      	ldrb	r3, [r4, #0]
 800d228:	2b2e      	cmp	r3, #46	; 0x2e
 800d22a:	d10c      	bne.n	800d246 <_vfiprintf_r+0x15a>
 800d22c:	7863      	ldrb	r3, [r4, #1]
 800d22e:	2b2a      	cmp	r3, #42	; 0x2a
 800d230:	d134      	bne.n	800d29c <_vfiprintf_r+0x1b0>
 800d232:	9b03      	ldr	r3, [sp, #12]
 800d234:	1d1a      	adds	r2, r3, #4
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	9203      	str	r2, [sp, #12]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	bfb8      	it	lt
 800d23e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d242:	3402      	adds	r4, #2
 800d244:	9305      	str	r3, [sp, #20]
 800d246:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d31c <_vfiprintf_r+0x230>
 800d24a:	7821      	ldrb	r1, [r4, #0]
 800d24c:	2203      	movs	r2, #3
 800d24e:	4650      	mov	r0, sl
 800d250:	f7f2 fff6 	bl	8000240 <memchr>
 800d254:	b138      	cbz	r0, 800d266 <_vfiprintf_r+0x17a>
 800d256:	9b04      	ldr	r3, [sp, #16]
 800d258:	eba0 000a 	sub.w	r0, r0, sl
 800d25c:	2240      	movs	r2, #64	; 0x40
 800d25e:	4082      	lsls	r2, r0
 800d260:	4313      	orrs	r3, r2
 800d262:	3401      	adds	r4, #1
 800d264:	9304      	str	r3, [sp, #16]
 800d266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d26a:	4829      	ldr	r0, [pc, #164]	; (800d310 <_vfiprintf_r+0x224>)
 800d26c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d270:	2206      	movs	r2, #6
 800d272:	f7f2 ffe5 	bl	8000240 <memchr>
 800d276:	2800      	cmp	r0, #0
 800d278:	d03f      	beq.n	800d2fa <_vfiprintf_r+0x20e>
 800d27a:	4b26      	ldr	r3, [pc, #152]	; (800d314 <_vfiprintf_r+0x228>)
 800d27c:	bb1b      	cbnz	r3, 800d2c6 <_vfiprintf_r+0x1da>
 800d27e:	9b03      	ldr	r3, [sp, #12]
 800d280:	3307      	adds	r3, #7
 800d282:	f023 0307 	bic.w	r3, r3, #7
 800d286:	3308      	adds	r3, #8
 800d288:	9303      	str	r3, [sp, #12]
 800d28a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d28c:	443b      	add	r3, r7
 800d28e:	9309      	str	r3, [sp, #36]	; 0x24
 800d290:	e768      	b.n	800d164 <_vfiprintf_r+0x78>
 800d292:	fb0c 3202 	mla	r2, ip, r2, r3
 800d296:	460c      	mov	r4, r1
 800d298:	2001      	movs	r0, #1
 800d29a:	e7a6      	b.n	800d1ea <_vfiprintf_r+0xfe>
 800d29c:	2300      	movs	r3, #0
 800d29e:	3401      	adds	r4, #1
 800d2a0:	9305      	str	r3, [sp, #20]
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	f04f 0c0a 	mov.w	ip, #10
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2ae:	3a30      	subs	r2, #48	; 0x30
 800d2b0:	2a09      	cmp	r2, #9
 800d2b2:	d903      	bls.n	800d2bc <_vfiprintf_r+0x1d0>
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d0c6      	beq.n	800d246 <_vfiprintf_r+0x15a>
 800d2b8:	9105      	str	r1, [sp, #20]
 800d2ba:	e7c4      	b.n	800d246 <_vfiprintf_r+0x15a>
 800d2bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2c0:	4604      	mov	r4, r0
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e7f0      	b.n	800d2a8 <_vfiprintf_r+0x1bc>
 800d2c6:	ab03      	add	r3, sp, #12
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	462a      	mov	r2, r5
 800d2cc:	4b12      	ldr	r3, [pc, #72]	; (800d318 <_vfiprintf_r+0x22c>)
 800d2ce:	a904      	add	r1, sp, #16
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	f7fd fc0d 	bl	800aaf0 <_printf_float>
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	1c78      	adds	r0, r7, #1
 800d2da:	d1d6      	bne.n	800d28a <_vfiprintf_r+0x19e>
 800d2dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2de:	07d9      	lsls	r1, r3, #31
 800d2e0:	d405      	bmi.n	800d2ee <_vfiprintf_r+0x202>
 800d2e2:	89ab      	ldrh	r3, [r5, #12]
 800d2e4:	059a      	lsls	r2, r3, #22
 800d2e6:	d402      	bmi.n	800d2ee <_vfiprintf_r+0x202>
 800d2e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2ea:	f7fe f983 	bl	800b5f4 <__retarget_lock_release_recursive>
 800d2ee:	89ab      	ldrh	r3, [r5, #12]
 800d2f0:	065b      	lsls	r3, r3, #25
 800d2f2:	f53f af1d 	bmi.w	800d130 <_vfiprintf_r+0x44>
 800d2f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2f8:	e71c      	b.n	800d134 <_vfiprintf_r+0x48>
 800d2fa:	ab03      	add	r3, sp, #12
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	462a      	mov	r2, r5
 800d300:	4b05      	ldr	r3, [pc, #20]	; (800d318 <_vfiprintf_r+0x22c>)
 800d302:	a904      	add	r1, sp, #16
 800d304:	4630      	mov	r0, r6
 800d306:	f7fd fe7b 	bl	800b000 <_printf_i>
 800d30a:	e7e4      	b.n	800d2d6 <_vfiprintf_r+0x1ea>
 800d30c:	0800dcb4 	.word	0x0800dcb4
 800d310:	0800dcbe 	.word	0x0800dcbe
 800d314:	0800aaf1 	.word	0x0800aaf1
 800d318:	0800d0c9 	.word	0x0800d0c9
 800d31c:	0800dcba 	.word	0x0800dcba

0800d320 <__swbuf_r>:
 800d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d322:	460e      	mov	r6, r1
 800d324:	4614      	mov	r4, r2
 800d326:	4605      	mov	r5, r0
 800d328:	b118      	cbz	r0, 800d332 <__swbuf_r+0x12>
 800d32a:	6a03      	ldr	r3, [r0, #32]
 800d32c:	b90b      	cbnz	r3, 800d332 <__swbuf_r+0x12>
 800d32e:	f7fe f815 	bl	800b35c <__sinit>
 800d332:	69a3      	ldr	r3, [r4, #24]
 800d334:	60a3      	str	r3, [r4, #8]
 800d336:	89a3      	ldrh	r3, [r4, #12]
 800d338:	071a      	lsls	r2, r3, #28
 800d33a:	d525      	bpl.n	800d388 <__swbuf_r+0x68>
 800d33c:	6923      	ldr	r3, [r4, #16]
 800d33e:	b31b      	cbz	r3, 800d388 <__swbuf_r+0x68>
 800d340:	6823      	ldr	r3, [r4, #0]
 800d342:	6922      	ldr	r2, [r4, #16]
 800d344:	1a98      	subs	r0, r3, r2
 800d346:	6963      	ldr	r3, [r4, #20]
 800d348:	b2f6      	uxtb	r6, r6
 800d34a:	4283      	cmp	r3, r0
 800d34c:	4637      	mov	r7, r6
 800d34e:	dc04      	bgt.n	800d35a <__swbuf_r+0x3a>
 800d350:	4621      	mov	r1, r4
 800d352:	4628      	mov	r0, r5
 800d354:	f7ff fd9e 	bl	800ce94 <_fflush_r>
 800d358:	b9e0      	cbnz	r0, 800d394 <__swbuf_r+0x74>
 800d35a:	68a3      	ldr	r3, [r4, #8]
 800d35c:	3b01      	subs	r3, #1
 800d35e:	60a3      	str	r3, [r4, #8]
 800d360:	6823      	ldr	r3, [r4, #0]
 800d362:	1c5a      	adds	r2, r3, #1
 800d364:	6022      	str	r2, [r4, #0]
 800d366:	701e      	strb	r6, [r3, #0]
 800d368:	6962      	ldr	r2, [r4, #20]
 800d36a:	1c43      	adds	r3, r0, #1
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d004      	beq.n	800d37a <__swbuf_r+0x5a>
 800d370:	89a3      	ldrh	r3, [r4, #12]
 800d372:	07db      	lsls	r3, r3, #31
 800d374:	d506      	bpl.n	800d384 <__swbuf_r+0x64>
 800d376:	2e0a      	cmp	r6, #10
 800d378:	d104      	bne.n	800d384 <__swbuf_r+0x64>
 800d37a:	4621      	mov	r1, r4
 800d37c:	4628      	mov	r0, r5
 800d37e:	f7ff fd89 	bl	800ce94 <_fflush_r>
 800d382:	b938      	cbnz	r0, 800d394 <__swbuf_r+0x74>
 800d384:	4638      	mov	r0, r7
 800d386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d388:	4621      	mov	r1, r4
 800d38a:	4628      	mov	r0, r5
 800d38c:	f000 f806 	bl	800d39c <__swsetup_r>
 800d390:	2800      	cmp	r0, #0
 800d392:	d0d5      	beq.n	800d340 <__swbuf_r+0x20>
 800d394:	f04f 37ff 	mov.w	r7, #4294967295
 800d398:	e7f4      	b.n	800d384 <__swbuf_r+0x64>
	...

0800d39c <__swsetup_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4b2a      	ldr	r3, [pc, #168]	; (800d448 <__swsetup_r+0xac>)
 800d3a0:	4605      	mov	r5, r0
 800d3a2:	6818      	ldr	r0, [r3, #0]
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	b118      	cbz	r0, 800d3b0 <__swsetup_r+0x14>
 800d3a8:	6a03      	ldr	r3, [r0, #32]
 800d3aa:	b90b      	cbnz	r3, 800d3b0 <__swsetup_r+0x14>
 800d3ac:	f7fd ffd6 	bl	800b35c <__sinit>
 800d3b0:	89a3      	ldrh	r3, [r4, #12]
 800d3b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d3b6:	0718      	lsls	r0, r3, #28
 800d3b8:	d422      	bmi.n	800d400 <__swsetup_r+0x64>
 800d3ba:	06d9      	lsls	r1, r3, #27
 800d3bc:	d407      	bmi.n	800d3ce <__swsetup_r+0x32>
 800d3be:	2309      	movs	r3, #9
 800d3c0:	602b      	str	r3, [r5, #0]
 800d3c2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d3c6:	81a3      	strh	r3, [r4, #12]
 800d3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3cc:	e034      	b.n	800d438 <__swsetup_r+0x9c>
 800d3ce:	0758      	lsls	r0, r3, #29
 800d3d0:	d512      	bpl.n	800d3f8 <__swsetup_r+0x5c>
 800d3d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3d4:	b141      	cbz	r1, 800d3e8 <__swsetup_r+0x4c>
 800d3d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3da:	4299      	cmp	r1, r3
 800d3dc:	d002      	beq.n	800d3e4 <__swsetup_r+0x48>
 800d3de:	4628      	mov	r0, r5
 800d3e0:	f7fe fefe 	bl	800c1e0 <_free_r>
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	6363      	str	r3, [r4, #52]	; 0x34
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d3ee:	81a3      	strh	r3, [r4, #12]
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	6063      	str	r3, [r4, #4]
 800d3f4:	6923      	ldr	r3, [r4, #16]
 800d3f6:	6023      	str	r3, [r4, #0]
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	f043 0308 	orr.w	r3, r3, #8
 800d3fe:	81a3      	strh	r3, [r4, #12]
 800d400:	6923      	ldr	r3, [r4, #16]
 800d402:	b94b      	cbnz	r3, 800d418 <__swsetup_r+0x7c>
 800d404:	89a3      	ldrh	r3, [r4, #12]
 800d406:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d40a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d40e:	d003      	beq.n	800d418 <__swsetup_r+0x7c>
 800d410:	4621      	mov	r1, r4
 800d412:	4628      	mov	r0, r5
 800d414:	f000 f884 	bl	800d520 <__smakebuf_r>
 800d418:	89a0      	ldrh	r0, [r4, #12]
 800d41a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d41e:	f010 0301 	ands.w	r3, r0, #1
 800d422:	d00a      	beq.n	800d43a <__swsetup_r+0x9e>
 800d424:	2300      	movs	r3, #0
 800d426:	60a3      	str	r3, [r4, #8]
 800d428:	6963      	ldr	r3, [r4, #20]
 800d42a:	425b      	negs	r3, r3
 800d42c:	61a3      	str	r3, [r4, #24]
 800d42e:	6923      	ldr	r3, [r4, #16]
 800d430:	b943      	cbnz	r3, 800d444 <__swsetup_r+0xa8>
 800d432:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d436:	d1c4      	bne.n	800d3c2 <__swsetup_r+0x26>
 800d438:	bd38      	pop	{r3, r4, r5, pc}
 800d43a:	0781      	lsls	r1, r0, #30
 800d43c:	bf58      	it	pl
 800d43e:	6963      	ldrpl	r3, [r4, #20]
 800d440:	60a3      	str	r3, [r4, #8]
 800d442:	e7f4      	b.n	800d42e <__swsetup_r+0x92>
 800d444:	2000      	movs	r0, #0
 800d446:	e7f7      	b.n	800d438 <__swsetup_r+0x9c>
 800d448:	2000012c 	.word	0x2000012c

0800d44c <_raise_r>:
 800d44c:	291f      	cmp	r1, #31
 800d44e:	b538      	push	{r3, r4, r5, lr}
 800d450:	4604      	mov	r4, r0
 800d452:	460d      	mov	r5, r1
 800d454:	d904      	bls.n	800d460 <_raise_r+0x14>
 800d456:	2316      	movs	r3, #22
 800d458:	6003      	str	r3, [r0, #0]
 800d45a:	f04f 30ff 	mov.w	r0, #4294967295
 800d45e:	bd38      	pop	{r3, r4, r5, pc}
 800d460:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d462:	b112      	cbz	r2, 800d46a <_raise_r+0x1e>
 800d464:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d468:	b94b      	cbnz	r3, 800d47e <_raise_r+0x32>
 800d46a:	4620      	mov	r0, r4
 800d46c:	f000 f830 	bl	800d4d0 <_getpid_r>
 800d470:	462a      	mov	r2, r5
 800d472:	4601      	mov	r1, r0
 800d474:	4620      	mov	r0, r4
 800d476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d47a:	f000 b817 	b.w	800d4ac <_kill_r>
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d00a      	beq.n	800d498 <_raise_r+0x4c>
 800d482:	1c59      	adds	r1, r3, #1
 800d484:	d103      	bne.n	800d48e <_raise_r+0x42>
 800d486:	2316      	movs	r3, #22
 800d488:	6003      	str	r3, [r0, #0]
 800d48a:	2001      	movs	r0, #1
 800d48c:	e7e7      	b.n	800d45e <_raise_r+0x12>
 800d48e:	2400      	movs	r4, #0
 800d490:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d494:	4628      	mov	r0, r5
 800d496:	4798      	blx	r3
 800d498:	2000      	movs	r0, #0
 800d49a:	e7e0      	b.n	800d45e <_raise_r+0x12>

0800d49c <raise>:
 800d49c:	4b02      	ldr	r3, [pc, #8]	; (800d4a8 <raise+0xc>)
 800d49e:	4601      	mov	r1, r0
 800d4a0:	6818      	ldr	r0, [r3, #0]
 800d4a2:	f7ff bfd3 	b.w	800d44c <_raise_r>
 800d4a6:	bf00      	nop
 800d4a8:	2000012c 	.word	0x2000012c

0800d4ac <_kill_r>:
 800d4ac:	b538      	push	{r3, r4, r5, lr}
 800d4ae:	4d07      	ldr	r5, [pc, #28]	; (800d4cc <_kill_r+0x20>)
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	4604      	mov	r4, r0
 800d4b4:	4608      	mov	r0, r1
 800d4b6:	4611      	mov	r1, r2
 800d4b8:	602b      	str	r3, [r5, #0]
 800d4ba:	f7f6 f9a5 	bl	8003808 <_kill>
 800d4be:	1c43      	adds	r3, r0, #1
 800d4c0:	d102      	bne.n	800d4c8 <_kill_r+0x1c>
 800d4c2:	682b      	ldr	r3, [r5, #0]
 800d4c4:	b103      	cbz	r3, 800d4c8 <_kill_r+0x1c>
 800d4c6:	6023      	str	r3, [r4, #0]
 800d4c8:	bd38      	pop	{r3, r4, r5, pc}
 800d4ca:	bf00      	nop
 800d4cc:	200009e4 	.word	0x200009e4

0800d4d0 <_getpid_r>:
 800d4d0:	f7f6 b992 	b.w	80037f8 <_getpid>

0800d4d4 <__swhatbuf_r>:
 800d4d4:	b570      	push	{r4, r5, r6, lr}
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4dc:	2900      	cmp	r1, #0
 800d4de:	b096      	sub	sp, #88	; 0x58
 800d4e0:	4615      	mov	r5, r2
 800d4e2:	461e      	mov	r6, r3
 800d4e4:	da0d      	bge.n	800d502 <__swhatbuf_r+0x2e>
 800d4e6:	89a3      	ldrh	r3, [r4, #12]
 800d4e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d4ec:	f04f 0100 	mov.w	r1, #0
 800d4f0:	bf0c      	ite	eq
 800d4f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d4f6:	2340      	movne	r3, #64	; 0x40
 800d4f8:	2000      	movs	r0, #0
 800d4fa:	6031      	str	r1, [r6, #0]
 800d4fc:	602b      	str	r3, [r5, #0]
 800d4fe:	b016      	add	sp, #88	; 0x58
 800d500:	bd70      	pop	{r4, r5, r6, pc}
 800d502:	466a      	mov	r2, sp
 800d504:	f000 f848 	bl	800d598 <_fstat_r>
 800d508:	2800      	cmp	r0, #0
 800d50a:	dbec      	blt.n	800d4e6 <__swhatbuf_r+0x12>
 800d50c:	9901      	ldr	r1, [sp, #4]
 800d50e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d512:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d516:	4259      	negs	r1, r3
 800d518:	4159      	adcs	r1, r3
 800d51a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d51e:	e7eb      	b.n	800d4f8 <__swhatbuf_r+0x24>

0800d520 <__smakebuf_r>:
 800d520:	898b      	ldrh	r3, [r1, #12]
 800d522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d524:	079d      	lsls	r5, r3, #30
 800d526:	4606      	mov	r6, r0
 800d528:	460c      	mov	r4, r1
 800d52a:	d507      	bpl.n	800d53c <__smakebuf_r+0x1c>
 800d52c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d530:	6023      	str	r3, [r4, #0]
 800d532:	6123      	str	r3, [r4, #16]
 800d534:	2301      	movs	r3, #1
 800d536:	6163      	str	r3, [r4, #20]
 800d538:	b002      	add	sp, #8
 800d53a:	bd70      	pop	{r4, r5, r6, pc}
 800d53c:	ab01      	add	r3, sp, #4
 800d53e:	466a      	mov	r2, sp
 800d540:	f7ff ffc8 	bl	800d4d4 <__swhatbuf_r>
 800d544:	9900      	ldr	r1, [sp, #0]
 800d546:	4605      	mov	r5, r0
 800d548:	4630      	mov	r0, r6
 800d54a:	f7fe febd 	bl	800c2c8 <_malloc_r>
 800d54e:	b948      	cbnz	r0, 800d564 <__smakebuf_r+0x44>
 800d550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d554:	059a      	lsls	r2, r3, #22
 800d556:	d4ef      	bmi.n	800d538 <__smakebuf_r+0x18>
 800d558:	f023 0303 	bic.w	r3, r3, #3
 800d55c:	f043 0302 	orr.w	r3, r3, #2
 800d560:	81a3      	strh	r3, [r4, #12]
 800d562:	e7e3      	b.n	800d52c <__smakebuf_r+0xc>
 800d564:	89a3      	ldrh	r3, [r4, #12]
 800d566:	6020      	str	r0, [r4, #0]
 800d568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d56c:	81a3      	strh	r3, [r4, #12]
 800d56e:	9b00      	ldr	r3, [sp, #0]
 800d570:	6163      	str	r3, [r4, #20]
 800d572:	9b01      	ldr	r3, [sp, #4]
 800d574:	6120      	str	r0, [r4, #16]
 800d576:	b15b      	cbz	r3, 800d590 <__smakebuf_r+0x70>
 800d578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d57c:	4630      	mov	r0, r6
 800d57e:	f000 f81d 	bl	800d5bc <_isatty_r>
 800d582:	b128      	cbz	r0, 800d590 <__smakebuf_r+0x70>
 800d584:	89a3      	ldrh	r3, [r4, #12]
 800d586:	f023 0303 	bic.w	r3, r3, #3
 800d58a:	f043 0301 	orr.w	r3, r3, #1
 800d58e:	81a3      	strh	r3, [r4, #12]
 800d590:	89a3      	ldrh	r3, [r4, #12]
 800d592:	431d      	orrs	r5, r3
 800d594:	81a5      	strh	r5, [r4, #12]
 800d596:	e7cf      	b.n	800d538 <__smakebuf_r+0x18>

0800d598 <_fstat_r>:
 800d598:	b538      	push	{r3, r4, r5, lr}
 800d59a:	4d07      	ldr	r5, [pc, #28]	; (800d5b8 <_fstat_r+0x20>)
 800d59c:	2300      	movs	r3, #0
 800d59e:	4604      	mov	r4, r0
 800d5a0:	4608      	mov	r0, r1
 800d5a2:	4611      	mov	r1, r2
 800d5a4:	602b      	str	r3, [r5, #0]
 800d5a6:	f7f6 f98e 	bl	80038c6 <_fstat>
 800d5aa:	1c43      	adds	r3, r0, #1
 800d5ac:	d102      	bne.n	800d5b4 <_fstat_r+0x1c>
 800d5ae:	682b      	ldr	r3, [r5, #0]
 800d5b0:	b103      	cbz	r3, 800d5b4 <_fstat_r+0x1c>
 800d5b2:	6023      	str	r3, [r4, #0]
 800d5b4:	bd38      	pop	{r3, r4, r5, pc}
 800d5b6:	bf00      	nop
 800d5b8:	200009e4 	.word	0x200009e4

0800d5bc <_isatty_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4d06      	ldr	r5, [pc, #24]	; (800d5d8 <_isatty_r+0x1c>)
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	4604      	mov	r4, r0
 800d5c4:	4608      	mov	r0, r1
 800d5c6:	602b      	str	r3, [r5, #0]
 800d5c8:	f7f6 f98d 	bl	80038e6 <_isatty>
 800d5cc:	1c43      	adds	r3, r0, #1
 800d5ce:	d102      	bne.n	800d5d6 <_isatty_r+0x1a>
 800d5d0:	682b      	ldr	r3, [r5, #0]
 800d5d2:	b103      	cbz	r3, 800d5d6 <_isatty_r+0x1a>
 800d5d4:	6023      	str	r3, [r4, #0]
 800d5d6:	bd38      	pop	{r3, r4, r5, pc}
 800d5d8:	200009e4 	.word	0x200009e4

0800d5dc <_init>:
 800d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5de:	bf00      	nop
 800d5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e2:	bc08      	pop	{r3}
 800d5e4:	469e      	mov	lr, r3
 800d5e6:	4770      	bx	lr

0800d5e8 <_fini>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	bf00      	nop
 800d5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ee:	bc08      	pop	{r3}
 800d5f0:	469e      	mov	lr, r3
 800d5f2:	4770      	bx	lr
