
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  0800b4c8  0800b4c8  0001b4c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc2c  0800bc2c  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc2c  0800bc2c  0001bc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc34  0800bc34  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc34  0800bc34  0001bc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc38  0800bc38  0001bc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800bc3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000248  0800be84  00020248  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  0800be84  00020804  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020276  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b738  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f7e  00000000  00000000  0003b9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0003f970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000122c  00000000  00000000  000410e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b647  00000000  00000000  0004230c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ee42  00000000  00000000  0006d953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010288a  00000000  00000000  0008c795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070c4  00000000  00000000  0018f020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  001960e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000248 	.word	0x20000248
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b4ac 	.word	0x0800b4ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000024c 	.word	0x2000024c
 800023c:	0800b4ac 	.word	0x0800b4ac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	460b      	mov	r3, r1
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	4613      	mov	r3, r2
 80005fc:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	b29a      	uxth	r2, r3
 8000602:	79bb      	ldrb	r3, [r7, #6]
 8000604:	b29b      	uxth	r3, r3
 8000606:	4413      	add	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	797b      	ldrb	r3, [r7, #5]
 800060c:	b29b      	uxth	r3, r3
 800060e:	4413      	add	r3, r2
 8000610:	b29b      	uxth	r3, r3
 8000612:	f203 1305 	addw	r3, r3, #261	; 0x105
 8000616:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8000618:	8afb      	ldrh	r3, [r7, #22]
 800061a:	425b      	negs	r3, r3
 800061c:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800061e:	237e      	movs	r3, #126	; 0x7e
 8000620:	733b      	strb	r3, [r7, #12]
 8000622:	23ff      	movs	r3, #255	; 0xff
 8000624:	737b      	strb	r3, [r7, #13]
 8000626:	2306      	movs	r3, #6
 8000628:	73bb      	strb	r3, [r7, #14]
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	2300      	movs	r3, #0
 8000630:	743b      	strb	r3, [r7, #16]
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	747b      	strb	r3, [r7, #17]
 8000636:	797b      	ldrb	r3, [r7, #5]
 8000638:	74bb      	strb	r3, [r7, #18]
 800063a:	8afb      	ldrh	r3, [r7, #22]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29b      	uxth	r3, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	74fb      	strb	r3, [r7, #19]
 8000644:	8afb      	ldrh	r3, [r7, #22]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	753b      	strb	r3, [r7, #20]
 800064a:	23ef      	movs	r3, #239	; 0xef
 800064c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 800064e:	f107 010c 	add.w	r1, r7, #12
 8000652:	f04f 33ff 	mov.w	r3, #4294967295
 8000656:	220a      	movs	r2, #10
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <Send_cmd+0x7c>)
 800065a:	f007 fc83 	bl	8007f64 <HAL_UART_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000062c 	.word	0x2000062c

0800066c <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  Send_cmd(0x03,0x00,0x01);
 8000670:	2201      	movs	r2, #1
 8000672:	2100      	movs	r1, #0
 8000674:	2003      	movs	r0, #3
 8000676:	f7ff ffb9 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 800067a:	20c8      	movs	r0, #200	; 0xc8
 800067c:	f003 fd38 	bl	80040f0 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}

08000684 <DF_SetEQ>:

void DF_SetEQ(uint8_t mode)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
  Send_cmd(0x07,0x00, mode);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	461a      	mov	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	2007      	movs	r0, #7
 8000696:	f7ff ffa9 	bl	80005ec <Send_cmd>
  HAL_Delay(200);
 800069a:	20c8      	movs	r0, #200	; 0xc8
 800069c:	f003 fd28 	bl	80040f0 <HAL_Delay>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <DF_Init>:
  HAL_Delay(200);
}


void DF_Init (uint8_t volume)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 80006b2:	2202      	movs	r2, #2
 80006b4:	2100      	movs	r1, #0
 80006b6:	203f      	movs	r0, #63	; 0x3f
 80006b8:	f7ff ff98 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 80006bc:	20c8      	movs	r0, #200	; 0xc8
 80006be:	f003 fd17 	bl	80040f0 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	461a      	mov	r2, r3
 80006c6:	2100      	movs	r1, #0
 80006c8:	2006      	movs	r0, #6
 80006ca:	f7ff ff8f 	bl	80005ec <Send_cmd>
	HAL_Delay(500);
 80006ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d2:	f003 fd0d 	bl	80040f0 <HAL_Delay>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <DF_Next>:

void DF_Next (void)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	af00      	add	r7, sp, #0
	Send_cmd(0x01, 0x00, 0x00);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2100      	movs	r1, #0
 80006e6:	2001      	movs	r0, #1
 80006e8:	f7ff ff80 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 80006ec:	20c8      	movs	r0, #200	; 0xc8
 80006ee:	f003 fcff 	bl	80040f0 <HAL_Delay>
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <DF_Pause>:

void DF_Pause (void)
{
 80006f6:	b580      	push	{r7, lr}
 80006f8:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	200e      	movs	r0, #14
 8000700:	f7ff ff74 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 8000704:	20c8      	movs	r0, #200	; 0xc8
 8000706:	f003 fcf3 	bl	80040f0 <HAL_Delay>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}

0800070e <DF_Previous>:

void DF_Previous (void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
	Send_cmd(0x02, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	2100      	movs	r1, #0
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff ff68 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 800071c:	20c8      	movs	r0, #200	; 0xc8
 800071e:	f003 fce7 	bl	80040f0 <HAL_Delay>
}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}

08000726 <DF_Playback>:

void DF_Playback (void)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	af00      	add	r7, sp, #0
	Send_cmd(0x0D, 0, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	2100      	movs	r1, #0
 800072e:	200d      	movs	r0, #13
 8000730:	f7ff ff5c 	bl	80005ec <Send_cmd>
	HAL_Delay(200);
 8000734:	20c8      	movs	r0, #200	; 0xc8
 8000736:	f003 fcdb 	bl	80040f0 <HAL_Delay>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <Check_Key>:

void Check_Key (void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key))
 8000744:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000748:	4827      	ldr	r0, [pc, #156]	; (80007e8 <Check_Key+0xa8>)
 800074a:	f003 ffb3 	bl	80046b4 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d121      	bne.n	8000798 <Check_Key+0x58>
	{
		while (!HAL_GPIO_ReadPin(Pause_Port, Pause_Key));
 8000754:	bf00      	nop
 8000756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075a:	4823      	ldr	r0, [pc, #140]	; (80007e8 <Check_Key+0xa8>)
 800075c:	f003 ffaa 	bl	80046b4 <HAL_GPIO_ReadPin>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0f7      	beq.n	8000756 <Check_Key+0x16>
		if (isplaying)
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <Check_Key+0xac>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d008      	beq.n	8000780 <Check_Key+0x40>
		{
			ispause = 1;
 800076e:	4b20      	ldr	r3, [pc, #128]	; (80007f0 <Check_Key+0xb0>)
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
			isplaying = 0;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <Check_Key+0xac>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
			DF_Pause();
 800077a:	f7ff ffbc 	bl	80006f6 <DF_Pause>
 800077e:	e00b      	b.n	8000798 <Check_Key+0x58>
		}

		else if (ispause)
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <Check_Key+0xb0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d007      	beq.n	8000798 <Check_Key+0x58>
		{
			isplaying = 1;
 8000788:	4b18      	ldr	r3, [pc, #96]	; (80007ec <Check_Key+0xac>)
 800078a:	2201      	movs	r2, #1
 800078c:	601a      	str	r2, [r3, #0]
			ispause = 0;
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <Check_Key+0xb0>)
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
			DF_Playback();
 8000794:	f7ff ffc7 	bl	8000726 <DF_Playback>
		}
	}

	if (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key))
 8000798:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800079c:	4812      	ldr	r0, [pc, #72]	; (80007e8 <Check_Key+0xa8>)
 800079e:	f003 ff89 	bl	80046b4 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d10a      	bne.n	80007be <Check_Key+0x7e>
	{
		while (!HAL_GPIO_ReadPin(Previous_Port, Previous_Key));
 80007a8:	bf00      	nop
 80007aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ae:	480e      	ldr	r0, [pc, #56]	; (80007e8 <Check_Key+0xa8>)
 80007b0:	f003 ff80 	bl	80046b4 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0f7      	beq.n	80007aa <Check_Key+0x6a>
		DF_Previous();
 80007ba:	f7ff ffa8 	bl	800070e <DF_Previous>
	}

	if (!HAL_GPIO_ReadPin(Next_Port, Next_Key))
 80007be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <Check_Key+0xa8>)
 80007c4:	f003 ff76 	bl	80046b4 <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d10a      	bne.n	80007e4 <Check_Key+0xa4>
	{
		while (!HAL_GPIO_ReadPin(Next_Port, Next_Key));
 80007ce:	bf00      	nop
 80007d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <Check_Key+0xa8>)
 80007d6:	f003 ff6d 	bl	80046b4 <HAL_GPIO_ReadPin>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d0f7      	beq.n	80007d0 <Check_Key+0x90>
		DF_Next();
 80007e0:	f7ff ff7d 	bl	80006de <DF_Next>
	}
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40020400 	.word	0x40020400
 80007ec:	20000000 	.word	0x20000000
 80007f0:	20000264 	.word	0x20000264

080007f4 <DS3231_Init>:

/**
 * @brief Initializes the DS3231 module. Set clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS3231_Init(I2C_HandleTypeDef *hi2c) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	_ds3231_ui2c = hi2c;
 80007fc:	4a09      	ldr	r2, [pc, #36]	; (8000824 <DS3231_Init+0x30>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]
	DS3231_EnableAlarm1(DS3231_DISABLED);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f8c9 	bl	800099a <DS3231_EnableAlarm1>
	DS3231_EnableAlarm2(DS3231_DISABLED);
 8000808:	2000      	movs	r0, #0
 800080a:	f000 f88d 	bl	8000928 <DS3231_EnableAlarm2>
	DS3231_ClearAlarm1Flag();
 800080e:	f000 f8e6 	bl	80009de <DS3231_ClearAlarm1Flag>
	DS3231_ClearAlarm2Flag();
 8000812:	f000 f8ac 	bl	800096e <DS3231_ClearAlarm2Flag>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000816:	2001      	movs	r0, #1
 8000818:	f000 f846 	bl	80008a8 <DS3231_SetInterruptMode>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000268 	.word	0x20000268

08000828 <DS3231_SetRegByte>:
/**
 * @brief Set the byte in the designated DS3231 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS3231_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b086      	sub	sp, #24
 800082c:	af02      	add	r7, sp, #8
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	733b      	strb	r3, [r7, #12]
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, bytes, 2, DS3231_TIMEOUT);
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <DS3231_SetRegByte+0x38>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	f107 020c 	add.w	r2, r7, #12
 8000848:	f04f 33ff 	mov.w	r3, #4294967295
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2302      	movs	r3, #2
 8000850:	21d0      	movs	r1, #208	; 0xd0
 8000852:	f004 f815 	bl	8004880 <HAL_I2C_Master_Transmit>
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000268 	.word	0x20000268

08000864 <DS3231_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS3231 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS3231_GetRegByte(uint8_t regAddr) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af02      	add	r7, sp, #8
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &regAddr, 1, DS3231_TIMEOUT);
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <DS3231_GetRegByte+0x40>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	1dfa      	adds	r2, r7, #7
 8000874:	f04f 33ff 	mov.w	r3, #4294967295
 8000878:	9300      	str	r3, [sp, #0]
 800087a:	2301      	movs	r3, #1
 800087c:	21d0      	movs	r1, #208	; 0xd0
 800087e:	f003 ffff 	bl	8004880 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds3231_ui2c, DS3231_I2C_ADDR << 1, &val, 1, DS3231_TIMEOUT);
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <DS3231_GetRegByte+0x40>)
 8000884:	6818      	ldr	r0, [r3, #0]
 8000886:	f107 020f 	add.w	r2, r7, #15
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	2301      	movs	r3, #1
 8000892:	21d0      	movs	r1, #208	; 0xd0
 8000894:	f004 f8e8 	bl	8004a68 <HAL_I2C_Master_Receive>
	return val;
 8000898:	7bfb      	ldrb	r3, [r7, #15]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000268 	.word	0x20000268

080008a8 <DS3231_SetInterruptMode>:

/**
 * @brief Set the interrupt mode to either alarm interrupt or square wave interrupt.
 * @param mode Interrupt mode to set, DS3231_ALARM_INTERRUPT or DS3231_SQUARE_WAVE_INTERRUPT.
 */
void DS3231_SetInterruptMode(DS3231_InterruptMode mode){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80008b2:	200e      	movs	r0, #14
 80008b4:	f7ff ffd6 	bl	8000864 <DS3231_GetRegByte>
 80008b8:	4603      	mov	r3, r0
 80008ba:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfb) | ((mode & 0x01) << DS3231_INTCN));
 80008bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c0:	f023 0304 	bic.w	r3, r3, #4
 80008c4:	b25a      	sxtb	r2, r3
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	b25b      	sxtb	r3, r3
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	4313      	orrs	r3, r2
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	4619      	mov	r1, r3
 80008da:	200e      	movs	r0, #14
 80008dc:	f7ff ffa4 	bl	8000828 <DS3231_SetRegByte>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <DS3231_SetRateSelect>:

/**
 * @brief Set frequency of the square wave output
 * @param rate Frequency to set, DS3231_1HZ, DS3231_1024HZ, DS3231_4096HZ or DS3231_8192HZ.
 */
void DS3231_SetRateSelect(DS3231_Rate rate){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80008f2:	200e      	movs	r0, #14
 80008f4:	f7ff ffb6 	bl	8000864 <DS3231_GetRegByte>
 80008f8:	4603      	mov	r3, r0
 80008fa:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xe7) | ((rate & 0x03) << DS3231_RS1));
 80008fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000900:	f023 0318 	bic.w	r3, r3, #24
 8000904:	b25a      	sxtb	r2, r3
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	b25b      	sxtb	r3, r3
 800090c:	f003 0318 	and.w	r3, r3, #24
 8000910:	b25b      	sxtb	r3, r3
 8000912:	4313      	orrs	r3, r2
 8000914:	b25b      	sxtb	r3, r3
 8000916:	b2db      	uxtb	r3, r3
 8000918:	4619      	mov	r1, r3
 800091a:	200e      	movs	r0, #14
 800091c:	f7ff ff84 	bl	8000828 <DS3231_SetRegByte>
}
 8000920:	bf00      	nop
 8000922:	3710      	adds	r7, #16
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <DS3231_EnableAlarm2>:

/**
 * @brief Enables alarm 2.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm2(DS3231_State enable){
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 8000932:	200e      	movs	r0, #14
 8000934:	f7ff ff96 	bl	8000864 <DS3231_GetRegByte>
 8000938:	4603      	mov	r3, r0
 800093a:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfd) | ((enable & 0x01) << DS3231_A2IE));
 800093c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000940:	f023 0302 	bic.w	r3, r3, #2
 8000944:	b25a      	sxtb	r2, r3
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	b25b      	sxtb	r3, r3
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	b25b      	sxtb	r3, r3
 8000952:	4313      	orrs	r3, r2
 8000954:	b25b      	sxtb	r3, r3
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4619      	mov	r1, r3
 800095a:	200e      	movs	r0, #14
 800095c:	f7ff ff64 	bl	8000828 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff ffa1 	bl	80008a8 <DS3231_SetInterruptMode>
}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <DS3231_ClearAlarm2Flag>:

/**
 * @brief Clears alarm 2 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm2Flag(){
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfd;
 8000974:	200f      	movs	r0, #15
 8000976:	f7ff ff75 	bl	8000864 <DS3231_GetRegByte>
 800097a:	4603      	mov	r3, r0
 800097c:	f023 0302 	bic.w	r3, r3, #2
 8000980:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A2F));
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	f023 0302 	bic.w	r3, r3, #2
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4619      	mov	r1, r3
 800098c:	200f      	movs	r0, #15
 800098e:	f7ff ff4b 	bl	8000828 <DS3231_SetRegByte>
}
 8000992:	bf00      	nop
 8000994:	3708      	adds	r7, #8
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <DS3231_EnableAlarm1>:

/**
 * @brief Enables alarm 1.
 * @param enable Enable, DS3231_ENABLED or DS3231_DISABLED.
 */
void DS3231_EnableAlarm1(DS3231_State enable){
 800099a:	b580      	push	{r7, lr}
 800099c:	b084      	sub	sp, #16
 800099e:	af00      	add	r7, sp, #0
 80009a0:	4603      	mov	r3, r0
 80009a2:	71fb      	strb	r3, [r7, #7]
	uint8_t control = DS3231_GetRegByte(DS3231_REG_CONTROL);
 80009a4:	200e      	movs	r0, #14
 80009a6:	f7ff ff5d 	bl	8000864 <DS3231_GetRegByte>
 80009aa:	4603      	mov	r3, r0
 80009ac:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_CONTROL, (control & 0xfe) | ((enable & 0x01) << DS3231_A1IE));
 80009ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009b2:	f023 0301 	bic.w	r3, r3, #1
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	b25b      	sxtb	r3, r3
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	4619      	mov	r1, r3
 80009ca:	200e      	movs	r0, #14
 80009cc:	f7ff ff2c 	bl	8000828 <DS3231_SetRegByte>
	DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f7ff ff69 	bl	80008a8 <DS3231_SetInterruptMode>
}
 80009d6:	bf00      	nop
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <DS3231_ClearAlarm1Flag>:

/**
 * @brief Clears alarm 1 matched flag. Matched flags must be cleared before the next match or the next interrupt will be masked.
 */
void DS3231_ClearAlarm1Flag(){
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
	uint8_t status = DS3231_GetRegByte(DS3231_REG_STATUS) & 0xfe;
 80009e4:	200f      	movs	r0, #15
 80009e6:	f7ff ff3d 	bl	8000864 <DS3231_GetRegByte>
 80009ea:	4603      	mov	r3, r0
 80009ec:	f023 0301 	bic.w	r3, r3, #1
 80009f0:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_STATUS, status & ~(0x01 << DS3231_A1F));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f023 0301 	bic.w	r3, r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	4619      	mov	r1, r3
 80009fc:	200f      	movs	r0, #15
 80009fe:	f7ff ff13 	bl	8000828 <DS3231_SetRegByte>
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <DS3231_SetAlarm1Second>:

/**
 * @brief Set alarm 1 second to match. Does not change alarm 1 matching mode.
 * @param second Second, 0 to 59.
 */
void DS3231_SetAlarm1Second(uint8_t second){
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_SECOND) & 0x80;
 8000a14:	2007      	movs	r0, #7
 8000a16:	f7ff ff25 	bl	8000864 <DS3231_GetRegByte>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a20:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m1 = temp | (DS3231_EncodeBCD(second) & 0x3f);
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f000 fa71 	bl	8000f0c <DS3231_EncodeBCD>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b25b      	sxtb	r3, r3
 8000a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a32:	b25a      	sxtb	r2, r3
 8000a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b25b      	sxtb	r3, r3
 8000a3c:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_SECOND, a1m1);
 8000a3e:	7bbb      	ldrb	r3, [r7, #14]
 8000a40:	4619      	mov	r1, r3
 8000a42:	2007      	movs	r0, #7
 8000a44:	f7ff fef0 	bl	8000828 <DS3231_SetRegByte>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <DS3231_SetAlarm1Minute>:

/**
 * @brief Set alarm 1 minute to match. Does not change alarm 1 matching mode.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetAlarm1Minute(uint8_t minute){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_MINUTE) & 0x80;
 8000a5a:	2008      	movs	r0, #8
 8000a5c:	f7ff ff02 	bl	8000864 <DS3231_GetRegByte>
 8000a60:	4603      	mov	r3, r0
 8000a62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000a66:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m2 = temp | (DS3231_EncodeBCD(minute) & 0x3f);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fa4e 	bl	8000f0c <DS3231_EncodeBCD>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b25b      	sxtb	r3, r3
 8000a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a78:	b25a      	sxtb	r2, r3
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_MINUTE, a1m2);
 8000a84:	7bbb      	ldrb	r3, [r7, #14]
 8000a86:	4619      	mov	r1, r3
 8000a88:	2008      	movs	r0, #8
 8000a8a:	f7ff fecd 	bl	8000828 <DS3231_SetRegByte>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <DS3231_SetAlarm1Hour>:

/**
 * @brief Set alarm 1 hour to match. Does not change alarm 1 matching mode.
 * @param hour Hour, 0 to 59.
 */
void DS3231_SetAlarm1Hour(uint8_t hour_24mode){
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_HOUR) & 0x80;
 8000aa0:	2009      	movs	r0, #9
 8000aa2:	f7ff fedf 	bl	8000864 <DS3231_GetRegByte>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000aac:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m3 = temp | (DS3231_EncodeBCD(hour_24mode) & 0x3f);
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 fa2b 	bl	8000f0c <DS3231_EncodeBCD>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b25b      	sxtb	r3, r3
 8000aba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000abe:	b25a      	sxtb	r2, r3
 8000ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_HOUR, a1m3);
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	4619      	mov	r1, r3
 8000ace:	2009      	movs	r0, #9
 8000ad0:	f7ff feaa 	bl	8000828 <DS3231_SetRegByte>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <DS3231_SetAlarm1Day>:

/**
 * @brief Set alarm 1 day. Alarm 1 can only be set to match either date or day. Does not change alarm 1 matching mode.
 * @param day Days since last Sunday, 1 to 7.
 */
void DS3231_SetAlarm1Day(uint8_t day){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp = DS3231_GetRegByte(DS3231_A1_DATE) & 0x80;
 8000ae6:	200a      	movs	r0, #10
 8000ae8:	f7ff febc 	bl	8000864 <DS3231_GetRegByte>
 8000aec:	4603      	mov	r3, r0
 8000aee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000af2:	73fb      	strb	r3, [r7, #15]
	uint8_t a1m4 = temp | (0x01 << DS3231_DYDT) | (DS3231_EncodeBCD(day) & 0x3f);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 fa08 	bl	8000f0c <DS3231_EncodeBCD>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	7bfb      	ldrb	r3, [r7, #15]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b0e:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_A1_DATE, a1m4);
 8000b10:	7bbb      	ldrb	r3, [r7, #14]
 8000b12:	4619      	mov	r1, r3
 8000b14:	200a      	movs	r0, #10
 8000b16:	f7ff fe87 	bl	8000828 <DS3231_SetRegByte>
}
 8000b1a:	bf00      	nop
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <DS3231_SetAlarm1Mode>:

/**
 * @brief Set alarm 1 mode.
 * @param alarmMode Alarm 1 mode, DS3231_A1_EVERY_S, DS3231_A1_MATCH_S, DS3231_A1_MATCH_S_M, DS3231_A1_MATCH_S_M_H, DS3231_A1_MATCH_S_M_H_DATE or DS3231_A1_MATCH_S_M_H_DAY.
 */
void DS3231_SetAlarm1Mode(DS3231_Alarm1Mode alarmMode){
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	temp = DS3231_GetRegByte(DS3231_A1_SECOND) & 0x7f;
 8000b2c:	2007      	movs	r0, #7
 8000b2e:	f7ff fe99 	bl	8000864 <DS3231_GetRegByte>
 8000b32:	4603      	mov	r3, r0
 8000b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b38:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_SECOND, temp | (((alarmMode >> 0) & 0x01) << DS3231_AXMY));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	01db      	lsls	r3, r3, #7
 8000b3e:	b25a      	sxtb	r2, r3
 8000b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	2007      	movs	r0, #7
 8000b4e:	f7ff fe6b 	bl	8000828 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_MINUTE) & 0x7f;
 8000b52:	2008      	movs	r0, #8
 8000b54:	f7ff fe86 	bl	8000864 <DS3231_GetRegByte>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b5e:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_MINUTE, temp | (((alarmMode >> 1) & 0x01) << DS3231_AXMY));
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	085b      	lsrs	r3, r3, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	01db      	lsls	r3, r3, #7
 8000b68:	b25a      	sxtb	r2, r3
 8000b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	4619      	mov	r1, r3
 8000b76:	2008      	movs	r0, #8
 8000b78:	f7ff fe56 	bl	8000828 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_HOUR) & 0x7f;
 8000b7c:	2009      	movs	r0, #9
 8000b7e:	f7ff fe71 	bl	8000864 <DS3231_GetRegByte>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b88:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_HOUR, temp | (((alarmMode >> 2) & 0x01) << DS3231_AXMY));
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	089b      	lsrs	r3, r3, #2
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	01db      	lsls	r3, r3, #7
 8000b92:	b25a      	sxtb	r2, r3
 8000b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	2009      	movs	r0, #9
 8000ba2:	f7ff fe41 	bl	8000828 <DS3231_SetRegByte>
	temp = DS3231_GetRegByte(DS3231_A1_DATE) & 0x7f;
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f7ff fe5c 	bl	8000864 <DS3231_GetRegByte>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000bb2:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_A1_DATE, temp | (((alarmMode >> 3) & 0x01) << DS3231_AXMY) | (alarmMode & 0x80));
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	08db      	lsrs	r3, r3, #3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	01db      	lsls	r3, r3, #7
 8000bbc:	b25a      	sxtb	r2, r3
 8000bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	b25a      	sxtb	r2, r3
 8000bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bce:	b25b      	sxtb	r3, r3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	b25b      	sxtb	r3, r3
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	200a      	movs	r0, #10
 8000bda:	f7ff fe25 	bl	8000828 <DS3231_SetRegByte>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <DS3231_IsAlarm1Triggered>:

/**
 * @brief Check if alarm 1 is triggered.
 * @return A1F flag bit, 0 or 1.
 */
uint8_t DS3231_IsAlarm1Triggered(){
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
	return (DS3231_GetRegByte(DS3231_REG_STATUS) >> DS3231_A1F) & 0x01;
 8000bea:	200f      	movs	r0, #15
 8000bec:	f7ff fe3a 	bl	8000864 <DS3231_GetRegByte>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	b2db      	uxtb	r3, r3
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <DS3231_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS3231_GetDayOfWeek(void) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DOW));
 8000c00:	2003      	movs	r0, #3
 8000c02:	f7ff fe2f 	bl	8000864 <DS3231_GetRegByte>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f966 	bl	8000eda <DS3231_DecodeBCD>
 8000c0e:	4603      	mov	r3, r0
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <DS3231_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS3231_GetDate(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_DATE));
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f7ff fe23 	bl	8000864 <DS3231_GetRegByte>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4618      	mov	r0, r3
 8000c22:	f000 f95a 	bl	8000eda <DS3231_DecodeBCD>
 8000c26:	4603      	mov	r3, r0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <DS3231_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS3231_GetMonth(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f);
 8000c30:	2005      	movs	r0, #5
 8000c32:	f7ff fe17 	bl	8000864 <DS3231_GetRegByte>
 8000c36:	4603      	mov	r3, r0
 8000c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f94b 	bl	8000eda <DS3231_DecodeBCD>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <DS3231_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2199.
 */
uint16_t DS3231_GetYear(void) {
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
	uint8_t decYear = DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_YEAR));
 8000c50:	2006      	movs	r0, #6
 8000c52:	f7ff fe07 	bl	8000864 <DS3231_GetRegByte>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f000 f93e 	bl	8000eda <DS3231_DecodeBCD>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	uint16_t century = (DS3231_GetRegByte(DS3231_REG_MONTH) >> DS3231_CENTURY) * 100 + 2000;
 8000c62:	2005      	movs	r0, #5
 8000c64:	f7ff fdfe 	bl	8000864 <DS3231_GetRegByte>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	09db      	lsrs	r3, r3, #7
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	461a      	mov	r2, r3
 8000c72:	0092      	lsls	r2, r2, #2
 8000c74:	4413      	add	r3, r2
 8000c76:	461a      	mov	r2, r3
 8000c78:	0091      	lsls	r1, r2, #2
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	4413      	add	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000c88:	80bb      	strh	r3, [r7, #4]
	return century + decYear;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	b29b      	uxth	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <DS3231_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS3231_GetHour(void) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_HOUR));
 8000ca0:	2002      	movs	r0, #2
 8000ca2:	f7ff fddf 	bl	8000864 <DS3231_GetRegByte>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 f916 	bl	8000eda <DS3231_DecodeBCD>
 8000cae:	4603      	mov	r3, r0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <DS3231_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS3231_GetMinute(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_MINUTE));
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff fdd3 	bl	8000864 <DS3231_GetRegByte>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 f90a 	bl	8000eda <DS3231_DecodeBCD>
 8000cc6:	4603      	mov	r3, r0
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <DS3231_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS3231_GetSecond(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	return DS3231_DecodeBCD(DS3231_GetRegByte(DS3231_REG_SECOND));
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f7ff fdc7 	bl	8000864 <DS3231_GetRegByte>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f8fe 	bl	8000eda <DS3231_DecodeBCD>
 8000cde:	4603      	mov	r3, r0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <DS3231_SetDayOfWeek>:

/**
 * @brief Set the current day of week.
 * @param dayOfWeek Days since last Sunday, 1 to 7.
 */
void DS3231_SetDayOfWeek(uint8_t dayOfWeek) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DOW, DS3231_EncodeBCD(dayOfWeek));
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f90b 	bl	8000f0c <DS3231_EncodeBCD>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2003      	movs	r0, #3
 8000cfc:	f7ff fd94 	bl	8000828 <DS3231_SetRegByte>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <DS3231_SetDate>:

/**
 * @brief Set the current day of month.
 * @param date Day of month, 1 to 31.
 */
void DS3231_SetDate(uint8_t date) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_DATE, DS3231_EncodeBCD(date));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f8f9 	bl	8000f0c <DS3231_EncodeBCD>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2004      	movs	r0, #4
 8000d20:	f7ff fd82 	bl	8000828 <DS3231_SetRegByte>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <DS3231_SetMonth>:

/**
 * @brief Set the current month.
 * @param month Month, 1 to 12.
 */
void DS3231_SetMonth(uint8_t month) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
	uint8_t century = DS3231_GetRegByte(DS3231_REG_MONTH) & 0x80;
 8000d36:	2005      	movs	r0, #5
 8000d38:	f7ff fd94 	bl	8000864 <DS3231_GetRegByte>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d42:	73fb      	strb	r3, [r7, #15]
	DS3231_SetRegByte(DS3231_REG_MONTH, DS3231_EncodeBCD(month) | century);
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f8e0 	bl	8000f0c <DS3231_EncodeBCD>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	461a      	mov	r2, r3
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	2005      	movs	r0, #5
 8000d5a:	f7ff fd65 	bl	8000828 <DS3231_SetRegByte>
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <DS3231_SetYear>:

/**
 * @brief Set the current year.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetYear(uint16_t year) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	80fb      	strh	r3, [r7, #6]
	uint8_t century = (year / 100) % 20;
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	4a1c      	ldr	r2, [pc, #112]	; (8000de8 <DS3231_SetYear+0x80>)
 8000d76:	fba2 2303 	umull	r2, r3, r2, r3
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <DS3231_SetYear+0x84>)
 8000d80:	fba3 1302 	umull	r1, r3, r3, r2
 8000d84:	0919      	lsrs	r1, r3, #4
 8000d86:	460b      	mov	r3, r1
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	440b      	add	r3, r1
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	73fb      	strb	r3, [r7, #15]
	uint8_t monthReg = (DS3231_GetRegByte(DS3231_REG_MONTH) & 0x7f) | (century << DS3231_CENTURY);
 8000d94:	2005      	movs	r0, #5
 8000d96:	f7ff fd65 	bl	8000864 <DS3231_GetRegByte>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000da2:	b25a      	sxtb	r2, r3
 8000da4:	7bfb      	ldrb	r3, [r7, #15]
 8000da6:	01db      	lsls	r3, r3, #7
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b25b      	sxtb	r3, r3
 8000dae:	73bb      	strb	r3, [r7, #14]
	DS3231_SetRegByte(DS3231_REG_MONTH, monthReg);
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	4619      	mov	r1, r3
 8000db4:	2005      	movs	r0, #5
 8000db6:	f7ff fd37 	bl	8000828 <DS3231_SetRegByte>
	DS3231_SetRegByte(DS3231_REG_YEAR, DS3231_EncodeBCD(year % 100));
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <DS3231_SetYear+0x80>)
 8000dbe:	fba2 1203 	umull	r1, r2, r2, r3
 8000dc2:	0952      	lsrs	r2, r2, #5
 8000dc4:	2164      	movs	r1, #100	; 0x64
 8000dc6:	fb01 f202 	mul.w	r2, r1, r2
 8000dca:	1a9b      	subs	r3, r3, r2
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f89b 	bl	8000f0c <DS3231_EncodeBCD>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	4619      	mov	r1, r3
 8000dda:	2006      	movs	r0, #6
 8000ddc:	f7ff fd24 	bl	8000828 <DS3231_SetRegByte>
}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	51eb851f 	.word	0x51eb851f
 8000dec:	cccccccd 	.word	0xcccccccd

08000df0 <DS3231_SetHour>:

/**
 * @brief Set the current hour, in 24h format.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 */
void DS3231_SetHour(uint8_t hour_24mode) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_HOUR, DS3231_EncodeBCD(hour_24mode & 0x3f));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 f882 	bl	8000f0c <DS3231_EncodeBCD>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f7ff fd0b 	bl	8000828 <DS3231_SetRegByte>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <DS3231_SetMinute>:

/**
 * @brief Set the current minute.
 * @param minute Minute, 0 to 59.
 */
void DS3231_SetMinute(uint8_t minute) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_MINUTE, DS3231_EncodeBCD(minute));
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 f870 	bl	8000f0c <DS3231_EncodeBCD>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	2001      	movs	r0, #1
 8000e32:	f7ff fcf9 	bl	8000828 <DS3231_SetRegByte>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <DS3231_SetSecond>:

/**
 * @brief Set the current second.
 * @param second Second, 0 to 59.
 */
void DS3231_SetSecond(uint8_t second) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	71fb      	strb	r3, [r7, #7]
	DS3231_SetRegByte(DS3231_REG_SECOND, DS3231_EncodeBCD(second));
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f85e 	bl	8000f0c <DS3231_EncodeBCD>
 8000e50:	4603      	mov	r3, r0
 8000e52:	4619      	mov	r1, r3
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff fce7 	bl	8000828 <DS3231_SetRegByte>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <DS3231_SetFullTime>:
 * @brief Set the current time.
 * @param hour_24mode Hour in 24h format, 0 to 23.
 * @param minute  Minute, 0 to 59.
 * @param second Second, 0 to 59.
 */
void DS3231_SetFullTime(uint8_t  hour_24mode, uint8_t minute, uint8_t second){
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	71fb      	strb	r3, [r7, #7]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	71bb      	strb	r3, [r7, #6]
 8000e70:	4613      	mov	r3, r2
 8000e72:	717b      	strb	r3, [r7, #5]
	DS3231_SetHour(hour_24mode);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffba 	bl	8000df0 <DS3231_SetHour>
	DS3231_SetMinute(minute);
 8000e7c:	79bb      	ldrb	r3, [r7, #6]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ffcb 	bl	8000e1a <DS3231_SetMinute>
	DS3231_SetSecond(second);
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff ffd9 	bl	8000e3e <DS3231_SetSecond>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <DS3231_SetFullDate>:
 * @param date Date, 0 to 31.
 * @param month Month, 1 to 12.
 * @param dow Days since last Sunday, 1 to 7.
 * @param year Year, 2000 to 2199.
 */
void DS3231_SetFullDate(uint8_t date, uint8_t month, uint8_t dow, uint16_t year){
 8000e94:	b590      	push	{r4, r7, lr}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	4611      	mov	r1, r2
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4623      	mov	r3, r4
 8000ea4:	71fb      	strb	r3, [r7, #7]
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71bb      	strb	r3, [r7, #6]
 8000eaa:	460b      	mov	r3, r1
 8000eac:	717b      	strb	r3, [r7, #5]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	807b      	strh	r3, [r7, #2]
	DS3231_SetDate(date);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff27 	bl	8000d08 <DS3231_SetDate>
	DS3231_SetMonth(month);
 8000eba:	79bb      	ldrb	r3, [r7, #6]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff35 	bl	8000d2c <DS3231_SetMonth>
	DS3231_SetDayOfWeek(dow);
 8000ec2:	797b      	ldrb	r3, [r7, #5]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff0d 	bl	8000ce4 <DS3231_SetDayOfWeek>
	DS3231_SetYear(year);
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff4b 	bl	8000d68 <DS3231_SetYear>
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd90      	pop	{r4, r7, pc}

08000eda <DS3231_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS3231_DecodeBCD(uint8_t bin) {
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	0092      	lsls	r2, r2, #2
 8000eee:	4413      	add	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	b2db      	uxtb	r3, r3
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DS3231_EncodeBCD>:
/**
 * @brief Encodes a decimal number to binaty-coded decimal for storage in registers.
 * @param dec Decimal number to encode.
 * @return Encoded binary-coded decimal value.
 */
uint8_t DS3231_EncodeBCD(uint8_t dec) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
	return (dec % 10 + ((dec / 10) << 4));
 8000f16:	79fa      	ldrb	r2, [r7, #7]
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <DS3231_EncodeBCD+0x40>)
 8000f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f1e:	08d9      	lsrs	r1, r3, #3
 8000f20:	460b      	mov	r3, r1
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	440b      	add	r3, r1
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	4907      	ldr	r1, [pc, #28]	; (8000f4c <DS3231_EncodeBCD+0x40>)
 8000f30:	fba1 1303 	umull	r1, r3, r1, r3
 8000f34:	08db      	lsrs	r3, r3, #3
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	011b      	lsls	r3, r3, #4
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b2db      	uxtb	r3, r3
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	cccccccd 	.word	0xcccccccd

08000f50 <MX_GPIO_Init>:
     PC5   ------> ETH_RXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	; 0x38
 8000f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f66:	4b9c      	ldr	r3, [pc, #624]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a9b      	ldr	r2, [pc, #620]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000f6c:	f043 0310 	orr.w	r3, r3, #16
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b99      	ldr	r3, [pc, #612]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	623b      	str	r3, [r7, #32]
 8000f7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7e:	4b96      	ldr	r3, [pc, #600]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a95      	ldr	r2, [pc, #596]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000f84:	f043 0304 	orr.w	r3, r3, #4
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b93      	ldr	r3, [pc, #588]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0304 	and.w	r3, r3, #4
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f96:	4b90      	ldr	r3, [pc, #576]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a8f      	ldr	r2, [pc, #572]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000f9c:	f043 0320 	orr.w	r3, r3, #32
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b8d      	ldr	r3, [pc, #564]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0320 	and.w	r3, r3, #32
 8000faa:	61bb      	str	r3, [r7, #24]
 8000fac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	4b8a      	ldr	r3, [pc, #552]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a89      	ldr	r2, [pc, #548]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b87      	ldr	r3, [pc, #540]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	4b84      	ldr	r3, [pc, #528]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a83      	ldr	r2, [pc, #524]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fcc:	f043 0301 	orr.w	r3, r3, #1
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b81      	ldr	r3, [pc, #516]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b7e      	ldr	r3, [pc, #504]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a7d      	ldr	r2, [pc, #500]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b7b      	ldr	r3, [pc, #492]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ff6:	4b78      	ldr	r3, [pc, #480]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a77      	ldr	r2, [pc, #476]	; (80011d8 <MX_GPIO_Init+0x288>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b75      	ldr	r3, [pc, #468]	; (80011d8 <MX_GPIO_Init+0x288>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800100e:	4b72      	ldr	r3, [pc, #456]	; (80011d8 <MX_GPIO_Init+0x288>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a71      	ldr	r2, [pc, #452]	; (80011d8 <MX_GPIO_Init+0x288>)
 8001014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b6f      	ldr	r3, [pc, #444]	; (80011d8 <MX_GPIO_Init+0x288>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2168      	movs	r1, #104	; 0x68
 800102a:	486c      	ldr	r0, [pc, #432]	; (80011dc <MX_GPIO_Init+0x28c>)
 800102c:	f003 fb5a 	bl	80046e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001030:	2200      	movs	r2, #0
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	486a      	ldr	r0, [pc, #424]	; (80011e0 <MX_GPIO_Init+0x290>)
 8001036:	f003 fb55 	bl	80046e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001040:	4868      	ldr	r0, [pc, #416]	; (80011e4 <MX_GPIO_Init+0x294>)
 8001042:	f003 fb4f 	bl	80046e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001046:	2200      	movs	r2, #0
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	4867      	ldr	r0, [pc, #412]	; (80011e8 <MX_GPIO_Init+0x298>)
 800104c:	f003 fb4a 	bl	80046e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8001050:	2314      	movs	r3, #20
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	485e      	ldr	r0, [pc, #376]	; (80011dc <MX_GPIO_Init+0x28c>)
 8001064:	f003 f97a 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 8001068:	2368      	movs	r3, #104	; 0x68
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4857      	ldr	r0, [pc, #348]	; (80011dc <MX_GPIO_Init+0x28c>)
 8001080:	f003 f96c 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001092:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001096:	4619      	mov	r1, r3
 8001098:	4852      	ldr	r0, [pc, #328]	; (80011e4 <MX_GPIO_Init+0x294>)
 800109a:	f003 f95f 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800109e:	2332      	movs	r3, #50	; 0x32
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ae:	230b      	movs	r3, #11
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	4619      	mov	r1, r3
 80010b8:	484a      	ldr	r0, [pc, #296]	; (80011e4 <MX_GPIO_Init+0x294>)
 80010ba:	f003 f94f 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80010be:	2386      	movs	r3, #134	; 0x86
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ca:	2303      	movs	r3, #3
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ce:	230b      	movs	r3, #11
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d6:	4619      	mov	r1, r3
 80010d8:	4844      	ldr	r0, [pc, #272]	; (80011ec <MX_GPIO_Init+0x29c>)
 80010da:	f003 f93f 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f2:	4619      	mov	r1, r3
 80010f4:	4839      	ldr	r0, [pc, #228]	; (80011dc <MX_GPIO_Init+0x28c>)
 80010f6:	f003 f931 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80010fa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001100:	2300      	movs	r3, #0
 8001102:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110c:	4619      	mov	r1, r3
 800110e:	4836      	ldr	r0, [pc, #216]	; (80011e8 <MX_GPIO_Init+0x298>)
 8001110:	f003 f924 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001114:	2340      	movs	r3, #64	; 0x40
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	4619      	mov	r1, r3
 800112a:	482d      	ldr	r0, [pc, #180]	; (80011e0 <MX_GPIO_Init+0x290>)
 800112c:	f003 f916 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	4827      	ldr	r0, [pc, #156]	; (80011e0 <MX_GPIO_Init+0x290>)
 8001144:	f003 f90a 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8001148:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	4619      	mov	r1, r3
 8001160:	4820      	ldr	r0, [pc, #128]	; (80011e4 <MX_GPIO_Init+0x294>)
 8001162:	f003 f8fb 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001178:	4619      	mov	r1, r3
 800117a:	481c      	ldr	r0, [pc, #112]	; (80011ec <MX_GPIO_Init+0x29c>)
 800117c:	f003 f8ee 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001180:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001192:	230b      	movs	r3, #11
 8001194:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800119a:	4619      	mov	r1, r3
 800119c:	4810      	ldr	r0, [pc, #64]	; (80011e0 <MX_GPIO_Init+0x290>)
 800119e:	f003 f8dd 	bl	800435c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011a2:	2380      	movs	r3, #128	; 0x80
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b6:	4619      	mov	r1, r3
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MX_GPIO_Init+0x298>)
 80011ba:	f003 f8cf 	bl	800435c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2028      	movs	r0, #40	; 0x28
 80011c4:	f003 f893 	bl	80042ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c8:	2028      	movs	r0, #40	; 0x28
 80011ca:	f003 f8ac 	bl	8004326 <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3738      	adds	r7, #56	; 0x38
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40021800 	.word	0x40021800
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40020000 	.word	0x40020000

080011f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c4;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_I2C1_Init+0x74>)
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <MX_I2C1_Init+0x78>)
 80011f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_I2C1_Init+0x74>)
 80011fc:	4a1b      	ldr	r2, [pc, #108]	; (800126c <MX_I2C1_Init+0x7c>)
 80011fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001200:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_I2C1_Init+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001206:	4b17      	ldr	r3, [pc, #92]	; (8001264 <MX_I2C1_Init+0x74>)
 8001208:	2201      	movs	r2, #1
 800120a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001212:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_I2C1_Init+0x74>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001218:	4b12      	ldr	r3, [pc, #72]	; (8001264 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800122a:	480e      	ldr	r0, [pc, #56]	; (8001264 <MX_I2C1_Init+0x74>)
 800122c:	f003 fa98 	bl	8004760 <HAL_I2C_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001236:	f001 fd13 	bl	8002c60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123a:	2100      	movs	r1, #0
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <MX_I2C1_Init+0x74>)
 800123e:	f003 ff75 	bl	800512c <HAL_I2CEx_ConfigAnalogFilter>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001248:	f001 fd0a 	bl	8002c60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800124c:	2100      	movs	r1, #0
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_I2C1_Init+0x74>)
 8001250:	f003 ffb7 	bl	80051c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800125a:	f001 fd01 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000026c 	.word	0x2000026c
 8001268:	40005400 	.word	0x40005400
 800126c:	00c0eaff 	.word	0x00c0eaff

08001270 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <MX_I2C4_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <MX_I2C4_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00C0EAFF;
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_I2C4_Init+0x74>)
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <MX_I2C4_Init+0x7c>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001280:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <MX_I2C4_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <MX_I2C4_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <MX_I2C4_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_I2C4_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <MX_I2C4_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_I2C4_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_I2C4_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80012aa:	480e      	ldr	r0, [pc, #56]	; (80012e4 <MX_I2C4_Init+0x74>)
 80012ac:	f003 fa58 	bl	8004760 <HAL_I2C_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80012b6:	f001 fcd3 	bl	8002c60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <MX_I2C4_Init+0x74>)
 80012be:	f003 ff35 	bl	800512c <HAL_I2CEx_ConfigAnalogFilter>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80012c8:	f001 fcca 	bl	8002c60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_I2C4_Init+0x74>)
 80012d0:	f003 ff77 	bl	80051c2 <HAL_I2CEx_ConfigDigitalFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80012da:	f001 fcc1 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200002c0 	.word	0x200002c0
 80012e8:	40006000 	.word	0x40006000
 80012ec:	00c0eaff 	.word	0x00c0eaff

080012f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b0b0      	sub	sp, #192	; 0xc0
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2290      	movs	r2, #144	; 0x90
 800130e:	2100      	movs	r1, #0
 8001310:	4618      	mov	r0, r3
 8001312:	f008 f858 	bl	80093c6 <memset>
  if(i2cHandle->Instance==I2C1)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a44      	ldr	r2, [pc, #272]	; (800142c <HAL_I2C_MspInit+0x13c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d13e      	bne.n	800139e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001320:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001324:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4618      	mov	r0, r3
 8001332:	f004 fcc7 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800133c:	f001 fc90 	bl	8002c60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b3b      	ldr	r3, [pc, #236]	; (8001430 <HAL_I2C_MspInit+0x140>)
 8001342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001344:	4a3a      	ldr	r2, [pc, #232]	; (8001430 <HAL_I2C_MspInit+0x140>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	6313      	str	r3, [r2, #48]	; 0x30
 800134c:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_I2C_MspInit+0x140>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
 8001356:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001358:	f44f 7340 	mov.w	r3, #768	; 0x300
 800135c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001360:	2312      	movs	r3, #18
 8001362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136c:	2303      	movs	r3, #3
 800136e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001372:	2304      	movs	r3, #4
 8001374:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800137c:	4619      	mov	r1, r3
 800137e:	482d      	ldr	r0, [pc, #180]	; (8001434 <HAL_I2C_MspInit+0x144>)
 8001380:	f002 ffec 	bl	800435c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001384:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <HAL_I2C_MspInit+0x140>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a29      	ldr	r2, [pc, #164]	; (8001430 <HAL_I2C_MspInit+0x140>)
 800138a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <HAL_I2C_MspInit+0x140>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C4_CLK_ENABLE();
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800139c:	e042      	b.n	8001424 <HAL_I2C_MspInit+0x134>
  else if(i2cHandle->Instance==I2C4)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a25      	ldr	r2, [pc, #148]	; (8001438 <HAL_I2C_MspInit+0x148>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d13d      	bne.n	8001424 <HAL_I2C_MspInit+0x134>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80013a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fc83 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80013c4:	f001 fc4c 	bl	8002c60 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_I2C_MspInit+0x140>)
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	4a18      	ldr	r2, [pc, #96]	; (8001430 <HAL_I2C_MspInit+0x140>)
 80013ce:	f043 0320 	orr.w	r3, r3, #32
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_I2C_MspInit+0x140>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e8:	2312      	movs	r3, #18
 80013ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80013fa:	2304      	movs	r3, #4
 80013fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001400:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001404:	4619      	mov	r1, r3
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <HAL_I2C_MspInit+0x14c>)
 8001408:	f002 ffa8 	bl	800435c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_I2C_MspInit+0x140>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_I2C_MspInit+0x140>)
 8001412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001416:	6413      	str	r3, [r2, #64]	; 0x40
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <HAL_I2C_MspInit+0x140>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
}
 8001424:	bf00      	nop
 8001426:	37c0      	adds	r7, #192	; 0xc0
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40005400 	.word	0x40005400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020400 	.word	0x40020400
 8001438:	40006000 	.word	0x40006000
 800143c:	40021400 	.word	0x40021400

08001440 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001444:	f3bf 8f4f 	dsb	sy
}
 8001448:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800144a:	f3bf 8f6f 	isb	sy
}
 800144e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <SCB_EnableICache+0x48>)
 8001452:	2200      	movs	r2, #0
 8001454:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001458:	f3bf 8f4f 	dsb	sy
}
 800145c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800145e:	f3bf 8f6f 	isb	sy
}
 8001462:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <SCB_EnableICache+0x48>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <SCB_EnableICache+0x48>)
 800146a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800146e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001470:	f3bf 8f4f 	dsb	sy
}
 8001474:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001476:	f3bf 8f6f 	isb	sy
}
 800147a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001492:	4b1f      	ldr	r3, [pc, #124]	; (8001510 <SCB_EnableDCache+0x84>)
 8001494:	2200      	movs	r2, #0
 8001496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800149a:	f3bf 8f4f 	dsb	sy
}
 800149e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <SCB_EnableDCache+0x84>)
 80014a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014a6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	0b5b      	lsrs	r3, r3, #13
 80014ac:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80014b0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ba:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	015a      	lsls	r2, r3, #5
 80014c0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80014c4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80014ca:	4911      	ldr	r1, [pc, #68]	; (8001510 <SCB_EnableDCache+0x84>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	60ba      	str	r2, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ef      	bne.n	80014bc <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	1e5a      	subs	r2, r3, #1
 80014e0:	60fa      	str	r2, [r7, #12]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1e5      	bne.n	80014b2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80014e6:	f3bf 8f4f 	dsb	sy
}
 80014ea:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <SCB_EnableDCache+0x84>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <SCB_EnableDCache+0x84>)
 80014f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014f8:	f3bf 8f4f 	dsb	sy
}
 80014fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014fe:	f3bf 8f6f 	isb	sy
}
 8001502:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <sendStringViaUART>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendStringViaUART(const char *str) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7fe fedf 	bl	80002e0 <strlen>
 8001522:	4603      	mov	r3, r0
 8001524:	b29a      	uxth	r2, r3
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <sendStringViaUART+0x28>)
 800152e:	f006 fd19 	bl	8007f64 <HAL_UART_Transmit>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200005a4 	.word	0x200005a4

08001540 <generateAndSortRandomNumbers>:

void generateAndSortRandomNumbers(uint32_t array[], uint32_t size) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b09e      	sub	sp, #120	; 0x78
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  for (uint32_t i = 0; i < size; i++) {
 800154a:	2300      	movs	r3, #0
 800154c:	677b      	str	r3, [r7, #116]	; 0x74
 800154e:	e012      	b.n	8001576 <generateAndSortRandomNumbers+0x36>
    array[i] = abs(HAL_RNG_GetRandomNumber(&hrng)) % 4 + 1;
 8001550:	481b      	ldr	r0, [pc, #108]	; (80015c0 <generateAndSortRandomNumbers+0x80>)
 8001552:	f005 f85f 	bl	8006614 <HAL_RNG_GetRandomNumber>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	bfb8      	it	lt
 800155c:	425b      	neglt	r3, r3
 800155e:	f003 0303 	and.w	r3, r3, #3
 8001562:	1c59      	adds	r1, r3, #1
 8001564:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	460a      	mov	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < size; i++) {
 8001570:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001572:	3301      	adds	r3, #1
 8001574:	677b      	str	r3, [r7, #116]	; 0x74
 8001576:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d3e8      	bcc.n	8001550 <generateAndSortRandomNumbers+0x10>
  }

  char message[100];

  for (int i = 0; i < 4; i++) {
 800157e:	2300      	movs	r3, #0
 8001580:	673b      	str	r3, [r7, #112]	; 0x70
 8001582:	e012      	b.n	80015aa <generateAndSortRandomNumbers+0x6a>
    sprintf(message, "%d ", array[i]);
 8001584:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	4413      	add	r3, r2
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	f107 030c 	add.w	r3, r7, #12
 8001592:	490c      	ldr	r1, [pc, #48]	; (80015c4 <generateAndSortRandomNumbers+0x84>)
 8001594:	4618      	mov	r0, r3
 8001596:	f007 feb3 	bl	8009300 <siprintf>
    sendStringViaUART(message);
 800159a:	f107 030c 	add.w	r3, r7, #12
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff ffb8 	bl	8001514 <sendStringViaUART>
  for (int i = 0; i < 4; i++) {
 80015a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015a6:	3301      	adds	r3, #1
 80015a8:	673b      	str	r3, [r7, #112]	; 0x70
 80015aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	dde9      	ble.n	8001584 <generateAndSortRandomNumbers+0x44>
  }
  sendStringViaUART(space);
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <generateAndSortRandomNumbers+0x88>)
 80015b2:	f7ff ffaf 	bl	8001514 <sendStringViaUART>
}
 80015b6:	bf00      	nop
 80015b8:	3778      	adds	r7, #120	; 0x78
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000448 	.word	0x20000448
 80015c4:	0800b578 	.word	0x0800b578
 80015c8:	2000006c 	.word	0x2000006c

080015cc <compareArrays>:

int compareArrays(int array1[], int array2[], int size) {
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
    int match = 1;  // Assume arrays match initially
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]

    // Compare elements of the arrays
    for (int i = 0; i < size; i++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	e011      	b.n	8001606 <compareArrays+0x3a>
        if (array1[i] != array2[i]) {
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4413      	add	r3, r2
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	68b9      	ldr	r1, [r7, #8]
 80015f2:	440b      	add	r3, r1
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d002      	beq.n	8001600 <compareArrays+0x34>
            match = 0;  // Arrays do not match
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
            break;
 80015fe:	e006      	b.n	800160e <compareArrays+0x42>
    for (int i = 0; i < size; i++) {
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	3301      	adds	r3, #1
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	429a      	cmp	r2, r3
 800160c:	dbe9      	blt.n	80015e2 <compareArrays+0x16>
        }
    }

    if (match) {
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <compareArrays+0x4c>
    	return 1;
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <compareArrays+0x4e>
    	//char message[] = "Match\r\n";
    	//HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
    } else {
    	return 0;
 8001618:	2300      	movs	r3, #0
    	//char message[] = "Not Match\r\n";
    	//HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
    }
}
 800161a:	4618      	mov	r0, r3
 800161c:	371c      	adds	r7, #28
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b094      	sub	sp, #80	; 0x50
 800162c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800162e:	f7ff ff07 	bl	8001440 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001632:	f7ff ff2b 	bl	800148c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001636:	f002 fcf5 	bl	8004024 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163a:	f000 f9bd 	bl	80019b8 <SystemClock_Config>

  /* USER CODE END SysInit */


  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163e:	f7ff fc87 	bl	8000f50 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001642:	f001 febf 	bl	80033c4 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8001646:	f001 fb57 	bl	8002cf8 <MX_SPI5_Init>
  MX_TIM1_Init();
 800164a:	f001 fd21 	bl	8003090 <MX_TIM1_Init>
  MX_RNG_Init();
 800164e:	f001 fb0b 	bl	8002c68 <MX_RNG_Init>
  MX_I2C4_Init();
 8001652:	f7ff fe0d 	bl	8001270 <MX_I2C4_Init>
  MX_TIM2_Init();
 8001656:	f001 fd6f 	bl	8003138 <MX_TIM2_Init>
  MX_I2C1_Init();
 800165a:	f7ff fdc9 	bl	80011f0 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 800165e:	f001 fee1 	bl	8003424 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001662:	f001 fddf 	bl	8003224 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8001666:	f002 f9d5 	bl	8003a14 <ILI9341_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800166a:	48ab      	ldr	r0, [pc, #684]	; (8001918 <main+0x2f0>)
 800166c:	f005 fbe0 	bl	8006e30 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001670:	48aa      	ldr	r0, [pc, #680]	; (800191c <main+0x2f4>)
 8001672:	f005 fbdd 	bl	8006e30 <HAL_TIM_Base_Start_IT>
  HAL_UART_Init(&huart3);
 8001676:	48aa      	ldr	r0, [pc, #680]	; (8001920 <main+0x2f8>)
 8001678:	f006 fc26 	bl	8007ec8 <HAL_UART_Init>

  DF_Init(30);
 800167c:	201e      	movs	r0, #30
 800167e:	f7ff f813 	bl	80006a8 <DF_Init>
	DF_PlayFromStart();
 8001682:	f7fe fff3 	bl	800066c <DF_PlayFromStart>
	DF_SetEQ(3);
 8001686:	2003      	movs	r0, #3
 8001688:	f7fe fffc 	bl	8000684 <DF_SetEQ>
	DS3231_Init(&hi2c4);
 800168c:	48a5      	ldr	r0, [pc, #660]	; (8001924 <main+0x2fc>)
 800168e:	f7ff f8b1 	bl	80007f4 <DS3231_Init>
  __ASM volatile ("cpsid i" : : : "memory");
 8001692:	b672      	cpsid	i
}
 8001694:	bf00      	nop
	__disable_irq();
	//Set interrupt mode to square wave mode, enable square wave interrupt at pin 3.
	DS3231_SetInterruptMode(DS3231_SQUARE_WAVE_INTERRUPT);
 8001696:	2000      	movs	r0, #0
 8001698:	f7ff f906 	bl	80008a8 <DS3231_SetInterruptMode>
	//Set interrupting frequency to 1 Hz.
	DS3231_SetRateSelect(DS3231_1HZ);
 800169c:	2000      	movs	r0, #0
 800169e:	f7ff f923 	bl	80008e8 <DS3231_SetRateSelect>
  __ASM volatile ("cpsie i" : : : "memory");
 80016a2:	b662      	cpsie	i
}
 80016a4:	bf00      	nop
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    ILI9341_Fill_Screen(WHITE);
 80016a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016aa:	f002 fb5f 	bl	8003d6c <ILI9341_Fill_Screen>
    ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f002 f952 	bl	8003958 <ILI9341_Set_Rotation>
     starttime = count;
 80016b4:	4b9c      	ldr	r3, [pc, #624]	; (8001928 <main+0x300>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a9c      	ldr	r2, [pc, #624]	; (800192c <main+0x304>)
 80016ba:	6013      	str	r3, [r2, #0]

     cmdBuffer[0] = 0x03;
 80016bc:	4b9c      	ldr	r3, [pc, #624]	; (8001930 <main+0x308>)
 80016be:	2203      	movs	r2, #3
 80016c0:	701a      	strb	r2, [r3, #0]
     cmdBuffer[1] = 0x00;
 80016c2:	4b9b      	ldr	r3, [pc, #620]	; (8001930 <main+0x308>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	705a      	strb	r2, [r3, #1]
     cmdBuffer[2] = 0x04;
 80016c8:	4b99      	ldr	r3, [pc, #612]	; (8001930 <main+0x308>)
 80016ca:	2204      	movs	r2, #4
 80016cc:	709a      	strb	r2, [r3, #2]
     //DS3231_SetFullDate(13, 10, 5, 2023);
     DS3231_SetInterruptMode(DS3231_ALARM_INTERRUPT);
 80016ce:	2001      	movs	r0, #1
 80016d0:	f7ff f8ea 	bl	80008a8 <DS3231_SetInterruptMode>
	DS3231_ClearAlarm1Flag();
 80016d4:	f7ff f983 	bl	80009de <DS3231_ClearAlarm1Flag>

	DS3231_EnableAlarm1(DS3231_ENABLED);
 80016d8:	2001      	movs	r0, #1
 80016da:	f7ff f95e 	bl	800099a <DS3231_EnableAlarm1>
	DS3231_SetAlarm1Mode(DS3231_A1_MATCH_S_M_H_DAY);
 80016de:	2080      	movs	r0, #128	; 0x80
 80016e0:	f7ff fa1f 	bl	8000b22 <DS3231_SetAlarm1Mode>
//	DS3231_SetAlarm1Second(5);
//	DS3231_SetAlarm1Minute(29);
//	DS3231_SetAlarm1Hour(19);
     ILI9341_Draw_Rectangle(0,0, 320,200,  WHITE);
 80016e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	23c8      	movs	r3, #200	; 0xc8
 80016ec:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80016f0:	2100      	movs	r1, #0
 80016f2:	2000      	movs	r0, #0
 80016f4:	f002 fc3a 	bl	8003f6c <ILI9341_Draw_Rectangle>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	   // Debug time Tera term
	   if ( count - teratermTime > 3000){
 80016f8:	4b8b      	ldr	r3, [pc, #556]	; (8001928 <main+0x300>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b8d      	ldr	r3, [pc, #564]	; (8001934 <main+0x30c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001706:	4293      	cmp	r3, r2
 8001708:	d914      	bls.n	8001734 <main+0x10c>
		   char message[20];
		   sprintf(message, "%d\r\n", screen);
 800170a:	4b8b      	ldr	r3, [pc, #556]	; (8001938 <main+0x310>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001714:	4989      	ldr	r1, [pc, #548]	; (800193c <main+0x314>)
 8001716:	4618      	mov	r0, r3
 8001718:	f007 fdf2 	bl	8009300 <siprintf>
		   HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 800171c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001720:	f04f 33ff 	mov.w	r3, #4294967295
 8001724:	2214      	movs	r2, #20
 8001726:	487e      	ldr	r0, [pc, #504]	; (8001920 <main+0x2f8>)
 8001728:	f006 fc1c 	bl	8007f64 <HAL_UART_Transmit>
		   teratermTime = count;
 800172c:	4b7e      	ldr	r3, [pc, #504]	; (8001928 <main+0x300>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a80      	ldr	r2, [pc, #512]	; (8001934 <main+0x30c>)
 8001732:	6013      	str	r3, [r2, #0]

	   }

	   // If Alarm trigger
		if(alarmtrigger)
 8001734:	4b82      	ldr	r3, [pc, #520]	; (8001940 <main+0x318>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d00a      	beq.n	8001752 <main+0x12a>
		{
			ILI9341_Fill_Screen(WHITE);
 800173c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001740:	f002 fb14 	bl	8003d6c <ILI9341_Fill_Screen>
			alarmtime = count;
 8001744:	4b78      	ldr	r3, [pc, #480]	; (8001928 <main+0x300>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a7e      	ldr	r2, [pc, #504]	; (8001944 <main+0x31c>)
 800174a:	6013      	str	r3, [r2, #0]
			alarm();
 800174c:	f000 fa64 	bl	8001c18 <alarm>
 8001750:	e7d2      	b.n	80016f8 <main+0xd0>
		   //alarmtrigger = 0;
		   //HAL_Delay(3000)
		}
		else{
	   // Screen state looping
	   switch(screen){
 8001752:	4b79      	ldr	r3, [pc, #484]	; (8001938 <main+0x310>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	3b01      	subs	r3, #1
 8001758:	2b03      	cmp	r3, #3
 800175a:	f200 8118 	bhi.w	800198e <main+0x366>
 800175e:	a201      	add	r2, pc, #4	; (adr r2, 8001764 <main+0x13c>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	08001775 	.word	0x08001775
 8001768:	08001801 	.word	0x08001801
 800176c:	080018a9 	.word	0x080018a9
 8001770:	08001907 	.word	0x08001907
	   case 1: // First state : show time
		   // Update screen every second
		   if((count-starttime) > 1000){
 8001774:	4b6c      	ldr	r3, [pc, #432]	; (8001928 <main+0x300>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b6c      	ldr	r3, [pc, #432]	; (800192c <main+0x304>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001782:	d907      	bls.n	8001794 <main+0x16c>
				updateT();
 8001784:	f000 fb68 	bl	8001e58 <updateT>
				showT();
 8001788:	f000 fba6 	bl	8001ed8 <showT>
				starttime = count;
 800178c:	4b66      	ldr	r3, [pc, #408]	; (8001928 <main+0x300>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a66      	ldr	r2, [pc, #408]	; (800192c <main+0x304>)
 8001792:	6013      	str	r3, [r2, #0]
			}
//		   Check_Key();

			if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 8001794:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001798:	486b      	ldr	r0, [pc, #428]	; (8001948 <main+0x320>)
 800179a:	f002 ff8b 	bl	80046b4 <HAL_GPIO_ReadPin>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d10f      	bne.n	80017c4 <main+0x19c>
				 HAL_Delay(50);
 80017a4:	2032      	movs	r0, #50	; 0x32
 80017a6:	f002 fca3 	bl	80040f0 <HAL_Delay>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 80017aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ae:	4866      	ldr	r0, [pc, #408]	; (8001948 <main+0x320>)
 80017b0:	f002 ff80 	bl	80046b4 <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d104      	bne.n	80017c4 <main+0x19c>
					DS3231_SetFullTime(21 , 12, 30);
 80017ba:	221e      	movs	r2, #30
 80017bc:	210c      	movs	r1, #12
 80017be:	2015      	movs	r0, #21
 80017c0:	f7ff fb4f 	bl	8000e62 <DS3231_SetFullTime>
//			   alarmtime = count;
//			   alarmtrigger = 0;
//			   //HAL_Delay(3000)
//			}
			// Go to state 2
			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && count - clicktime > 1000){
 80017c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c8:	4860      	ldr	r0, [pc, #384]	; (800194c <main+0x324>)
 80017ca:	f002 ff73 	bl	80046b4 <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f040 809d 	bne.w	8001910 <main+0x2e8>
 80017d6:	4b54      	ldr	r3, [pc, #336]	; (8001928 <main+0x300>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <main+0x328>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017e4:	f240 8094 	bls.w	8001910 <main+0x2e8>
					ILI9341_Fill_Screen(WHITE);
 80017e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80017ec:	f002 fabe 	bl	8003d6c <ILI9341_Fill_Screen>
					clicktime = count;
 80017f0:	4b4d      	ldr	r3, [pc, #308]	; (8001928 <main+0x300>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a56      	ldr	r2, [pc, #344]	; (8001950 <main+0x328>)
 80017f6:	6013      	str	r3, [r2, #0]
					screen = 2;
 80017f8:	4b4f      	ldr	r3, [pc, #316]	; (8001938 <main+0x310>)
 80017fa:	2202      	movs	r2, #2
 80017fc:	701a      	strb	r2, [r3, #0]
			}

			break;
 80017fe:	e087      	b.n	8001910 <main+0x2e8>

	   case 2:// Second State : Set Time
		   // If enter this state at first , set flag and time to set to current time
		   if(enterStateFlag == 0)
 8001800:	4b54      	ldr	r3, [pc, #336]	; (8001954 <main+0x32c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d11f      	bne.n	8001848 <main+0x220>
		   {
			   setMin = DS3231_GetMinute();
 8001808:	f7ff fa54 	bl	8000cb4 <DS3231_GetMinute>
 800180c:	4603      	mov	r3, r0
 800180e:	461a      	mov	r2, r3
 8001810:	4b51      	ldr	r3, [pc, #324]	; (8001958 <main+0x330>)
 8001812:	601a      	str	r2, [r3, #0]
			   setHour = DS3231_GetHour();
 8001814:	f7ff fa42 	bl	8000c9c <DS3231_GetHour>
 8001818:	4603      	mov	r3, r0
 800181a:	461a      	mov	r2, r3
 800181c:	4b4f      	ldr	r3, [pc, #316]	; (800195c <main+0x334>)
 800181e:	601a      	str	r2, [r3, #0]
			   setDate = date;
 8001820:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <main+0x338>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	461a      	mov	r2, r3
 8001826:	4b4f      	ldr	r3, [pc, #316]	; (8001964 <main+0x33c>)
 8001828:	601a      	str	r2, [r3, #0]
			   setMonth = month;
 800182a:	4b4f      	ldr	r3, [pc, #316]	; (8001968 <main+0x340>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	4b4e      	ldr	r3, [pc, #312]	; (800196c <main+0x344>)
 8001832:	601a      	str	r2, [r3, #0]
			   setYear = year;
 8001834:	4b4e      	ldr	r3, [pc, #312]	; (8001970 <main+0x348>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a4e      	ldr	r2, [pc, #312]	; (8001974 <main+0x34c>)
 800183a:	6013      	str	r3, [r2, #0]
			   currentIndex = 0;
 800183c:	4b4e      	ldr	r3, [pc, #312]	; (8001978 <main+0x350>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
			   enterStateFlag = 1;
 8001842:	4b44      	ldr	r3, [pc, #272]	; (8001954 <main+0x32c>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]
		   }
		   //?
		   if(setDate == 99){
 8001848:	4b46      	ldr	r3, [pc, #280]	; (8001964 <main+0x33c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b63      	cmp	r3, #99	; 0x63
 800184e:	d11c      	bne.n	800188a <main+0x262>

			   	   setMin = DS3231_GetMinute();
 8001850:	f7ff fa30 	bl	8000cb4 <DS3231_GetMinute>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <main+0x330>)
 800185a:	601a      	str	r2, [r3, #0]
			   	   setHour = DS3231_GetHour();
 800185c:	f7ff fa1e 	bl	8000c9c <DS3231_GetHour>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b3d      	ldr	r3, [pc, #244]	; (800195c <main+0x334>)
 8001866:	601a      	str	r2, [r3, #0]
				   setDate = date;
 8001868:	4b3d      	ldr	r3, [pc, #244]	; (8001960 <main+0x338>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	461a      	mov	r2, r3
 800186e:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <main+0x33c>)
 8001870:	601a      	str	r2, [r3, #0]
				   setMonth = month;
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <main+0x340>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	4b3c      	ldr	r3, [pc, #240]	; (800196c <main+0x344>)
 800187a:	601a      	str	r2, [r3, #0]
				   setYear = year;
 800187c:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <main+0x348>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a3c      	ldr	r2, [pc, #240]	; (8001974 <main+0x34c>)
 8001882:	6013      	str	r3, [r2, #0]
				   currentIndex = 0;
 8001884:	4b3c      	ldr	r3, [pc, #240]	; (8001978 <main+0x350>)
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]

			   }
		   // Setting
			   if(count-starttime > 1000){
 800188a:	4b27      	ldr	r3, [pc, #156]	; (8001928 <main+0x300>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b27      	ldr	r3, [pc, #156]	; (800192c <main+0x304>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001898:	d93c      	bls.n	8001914 <main+0x2ec>
//			   		showSetTime();
				    setPage();
 800189a:	f000 fe13 	bl	80024c4 <setPage>
			   		starttime = count;
 800189e:	4b22      	ldr	r3, [pc, #136]	; (8001928 <main+0x300>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a22      	ldr	r2, [pc, #136]	; (800192c <main+0x304>)
 80018a4:	6013      	str	r3, [r2, #0]
			   	}
			   break;
 80018a6:	e035      	b.n	8001914 <main+0x2ec>

	   case 3:// Third State : Set Alarm
		   		   // If enter this state at first , set flag and index
		   if(enterStateFlag == 0)
 80018a8:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <main+0x32c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d105      	bne.n	80018bc <main+0x294>
		   {
			   currentIndex = 2;
 80018b0:	4b31      	ldr	r3, [pc, #196]	; (8001978 <main+0x350>)
 80018b2:	2202      	movs	r2, #2
 80018b4:	701a      	strb	r2, [r3, #0]
			   enterStateFlag = 1;
 80018b6:	4b27      	ldr	r3, [pc, #156]	; (8001954 <main+0x32c>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	601a      	str	r2, [r3, #0]
		   }
		   if(setHour == 99){
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <main+0x334>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b63      	cmp	r3, #99	; 0x63
 80018c2:	d111      	bne.n	80018e8 <main+0x2c0>
			   setHour = hur;
 80018c4:	4b2d      	ldr	r3, [pc, #180]	; (800197c <main+0x354>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b24      	ldr	r3, [pc, #144]	; (800195c <main+0x334>)
 80018cc:	601a      	str	r2, [r3, #0]
			   setMin = min;
 80018ce:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <main+0x358>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <main+0x330>)
 80018d6:	601a      	str	r2, [r3, #0]
			   setSec = sec;
 80018d8:	4b2a      	ldr	r3, [pc, #168]	; (8001984 <main+0x35c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <main+0x360>)
 80018e0:	601a      	str	r2, [r3, #0]
			   currentIndex = 0;
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <main+0x350>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
		   }
		   //Setting
		   if(count-starttime > 1000){
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <main+0x300>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <main+0x304>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018f6:	d949      	bls.n	800198c <main+0x364>
//				showSetAlarm();
				setPage();
 80018f8:	f000 fde4 	bl	80024c4 <setPage>
				starttime = count;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <main+0x300>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0a      	ldr	r2, [pc, #40]	; (800192c <main+0x304>)
 8001902:	6013      	str	r3, [r2, #0]
			}
		   break;
 8001904:	e042      	b.n	800198c <main+0x364>

	   case 4:
		   Check_Key();
 8001906:	f7fe ff1b 	bl	8000740 <Check_Key>
		   setPage();
 800190a:	f000 fddb 	bl	80024c4 <setPage>
		   break;
 800190e:	e03e      	b.n	800198e <main+0x366>
			break;
 8001910:	bf00      	nop
 8001912:	e03c      	b.n	800198e <main+0x366>
			   break;
 8001914:	bf00      	nop
 8001916:	e03a      	b.n	800198e <main+0x366>
 8001918:	2000050c 	.word	0x2000050c
 800191c:	20000558 	.word	0x20000558
 8001920:	200005a4 	.word	0x200005a4
 8001924:	200002c0 	.word	0x200002c0
 8001928:	20000314 	.word	0x20000314
 800192c:	20000318 	.word	0x20000318
 8001930:	20000344 	.word	0x20000344
 8001934:	2000043c 	.word	0x2000043c
 8001938:	20000004 	.word	0x20000004
 800193c:	0800b57c 	.word	0x0800b57c
 8001940:	20000338 	.word	0x20000338
 8001944:	2000031c 	.word	0x2000031c
 8001948:	40020800 	.word	0x40020800
 800194c:	40020000 	.word	0x40020000
 8001950:	20000434 	.word	0x20000434
 8001954:	20000440 	.word	0x20000440
 8001958:	2000000c 	.word	0x2000000c
 800195c:	20000010 	.word	0x20000010
 8001960:	20000324 	.word	0x20000324
 8001964:	20000014 	.word	0x20000014
 8001968:	20000325 	.word	0x20000325
 800196c:	20000018 	.word	0x20000018
 8001970:	20000328 	.word	0x20000328
 8001974:	2000001c 	.word	0x2000001c
 8001978:	20000430 	.word	0x20000430
 800197c:	20000322 	.word	0x20000322
 8001980:	20000321 	.word	0x20000321
 8001984:	20000320 	.word	0x20000320
 8001988:	20000008 	.word	0x20000008
		   break;
 800198c:	bf00      	nop

	   char message[50];
	   //sprintf(message, "2: %d %d %d | 3: %d %d %d | cur = %d\r\n", setDate, setMonth, setYear, setHour, setMin, setSec, currentIndex);
	   //HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);

	   if (previousScreen !=  screen){
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <main+0x384>)
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <main+0x388>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	f43f aeae 	beq.w	80016f8 <main+0xd0>
		   currentIndex = 0;
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <main+0x38c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
		   previousScreen = screen;
 80019a2:	4b03      	ldr	r3, [pc, #12]	; (80019b0 <main+0x388>)
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	4b01      	ldr	r3, [pc, #4]	; (80019ac <main+0x384>)
 80019a8:	701a      	strb	r2, [r3, #0]
	   if ( count - teratermTime > 3000){
 80019aa:	e6a5      	b.n	80016f8 <main+0xd0>
 80019ac:	20000431 	.word	0x20000431
 80019b0:	20000004 	.word	0x20000004
 80019b4:	20000430 	.word	0x20000430

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b094      	sub	sp, #80	; 0x50
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	2234      	movs	r2, #52	; 0x34
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f007 fcfd 	bl	80093c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	f107 0308 	add.w	r3, r7, #8
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80019dc:	f003 fc3e 	bl	800525c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e0:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <SystemClock_Config+0xd8>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	4a2a      	ldr	r2, [pc, #168]	; (8001a90 <SystemClock_Config+0xd8>)
 80019e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ea:	6413      	str	r3, [r2, #64]	; 0x40
 80019ec:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <SystemClock_Config+0xd8>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <SystemClock_Config+0xdc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a25      	ldr	r2, [pc, #148]	; (8001a94 <SystemClock_Config+0xdc>)
 80019fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <SystemClock_Config+0xdc>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a24:	2304      	movs	r3, #4
 8001a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8001a28:	23c8      	movs	r3, #200	; 0xc8
 8001a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001a30:	2309      	movs	r3, #9
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a38:	f107 031c 	add.w	r3, r7, #28
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 fc6d 	bl	800531c <HAL_RCC_OscConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a48:	f001 f90a 	bl	8002c60 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a4c:	f003 fc16 	bl	800527c <HAL_PWREx_EnableOverDrive>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001a56:	f001 f903 	bl	8002c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5a:	230f      	movs	r3, #15
 8001a5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a70:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001a72:	f107 0308 	add.w	r3, r7, #8
 8001a76:	2106      	movs	r1, #6
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 fefd 	bl	8005878 <HAL_RCC_ClockConfig>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001a84:	f001 f8ec 	bl	8002c60 <Error_Handler>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3750      	adds	r7, #80	; 0x50
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40007000 	.word	0x40007000

08001a98 <CRC16_2>:

/* USER CODE BEGIN 4 */
uint16_t CRC16_2(uint8_t *ptr, uint8_t lenght){
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = 0xffff;
 8001aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa8:	81fb      	strh	r3, [r7, #14]
	uint8_t s = 0x00;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	737b      	strb	r3, [r7, #13]

	while (lenght--){
 8001aae:	e023      	b.n	8001af8 <CRC16_2+0x60>
		crc ^= *ptr++;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	89fb      	ldrh	r3, [r7, #14]
 8001abc:	4053      	eors	r3, r2
 8001abe:	81fb      	strh	r3, [r7, #14]

		for (s = 0 ; s <8 ;s++){
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	737b      	strb	r3, [r7, #13]
 8001ac4:	e015      	b.n	8001af2 <CRC16_2+0x5a>
			if ((crc & 0x01) != 0){
 8001ac6:	89fb      	ldrh	r3, [r7, #14]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00a      	beq.n	8001ae6 <CRC16_2+0x4e>
				crc >>= 1;
 8001ad0:	89fb      	ldrh	r3, [r7, #14]
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	81fb      	strh	r3, [r7, #14]
				crc ^= 0xA001;
 8001ad6:	89fb      	ldrh	r3, [r7, #14]
 8001ad8:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001adc:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	81fb      	strh	r3, [r7, #14]
 8001ae4:	e002      	b.n	8001aec <CRC16_2+0x54>

			}
			else{
				crc >>= 1;
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	81fb      	strh	r3, [r7, #14]
		for (s = 0 ; s <8 ;s++){
 8001aec:	7b7b      	ldrb	r3, [r7, #13]
 8001aee:	3301      	adds	r3, #1
 8001af0:	737b      	strb	r3, [r7, #13]
 8001af2:	7b7b      	ldrb	r3, [r7, #13]
 8001af4:	2b07      	cmp	r3, #7
 8001af6:	d9e6      	bls.n	8001ac6 <CRC16_2+0x2e>
	while (lenght--){
 8001af8:	78fb      	ldrb	r3, [r7, #3]
 8001afa:	1e5a      	subs	r2, r3, #1
 8001afc:	70fa      	strb	r2, [r7, #3]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1d6      	bne.n	8001ab0 <CRC16_2+0x18>
			}
		}
	}
	return crc;
 8001b02:	89fb      	ldrh	r3, [r7, #14]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <updateSensor>:

void updateSensor() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af02      	add	r7, sp, #8
	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 8001b16:	23c8      	movs	r3, #200	; 0xc8
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	4a39      	ldr	r2, [pc, #228]	; (8001c04 <updateSensor+0xf4>)
 8001b1e:	21b8      	movs	r1, #184	; 0xb8
 8001b20:	4839      	ldr	r0, [pc, #228]	; (8001c08 <updateSensor+0xf8>)
 8001b22:	f002 fead 	bl	8004880 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Transmit(&hi2c1, 0x5c << 1 , cmdBuffer, 3, 200);
 8001b26:	23c8      	movs	r3, #200	; 0xc8
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	4a35      	ldr	r2, [pc, #212]	; (8001c04 <updateSensor+0xf4>)
 8001b2e:	21b8      	movs	r1, #184	; 0xb8
 8001b30:	4835      	ldr	r0, [pc, #212]	; (8001c08 <updateSensor+0xf8>)
 8001b32:	f002 fea5 	bl	8004880 <HAL_I2C_Master_Transmit>

	HAL_Delay(1);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f002 fada 	bl	80040f0 <HAL_Delay>

	// receive sensor data

	HAL_I2C_Master_Receive(&hi2c1, 0x5c << 1 , dataBuffer , 8, 200);
 8001b3c:	23c8      	movs	r3, #200	; 0xc8
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	2308      	movs	r3, #8
 8001b42:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <updateSensor+0xfc>)
 8001b44:	21b8      	movs	r1, #184	; 0xb8
 8001b46:	4830      	ldr	r0, [pc, #192]	; (8001c08 <updateSensor+0xf8>)
 8001b48:	f002 ff8e 	bl	8004a68 <HAL_I2C_Master_Receive>

	uint16_t Rcrc = dataBuffer[7] << 8 ;
 8001b4c:	4b2f      	ldr	r3, [pc, #188]	; (8001c0c <updateSensor+0xfc>)
 8001b4e:	79db      	ldrb	r3, [r3, #7]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	80fb      	strh	r3, [r7, #6]
	Rcrc += dataBuffer[6];
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <updateSensor+0xfc>)
 8001b58:	799b      	ldrb	r3, [r3, #6]
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	4413      	add	r3, r2
 8001b60:	80fb      	strh	r3, [r7, #6]

	if (Rcrc == CRC16_2(dataBuffer,6)){
 8001b62:	2106      	movs	r1, #6
 8001b64:	4829      	ldr	r0, [pc, #164]	; (8001c0c <updateSensor+0xfc>)
 8001b66:	f7ff ff97 	bl	8001a98 <CRC16_2>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d143      	bne.n	8001bfc <updateSensor+0xec>
		uint16_t temperature = ((dataBuffer[4] & 0x7F) << 8 ) + dataBuffer[5];
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <updateSensor+0xfc>)
 8001b76:	791b      	ldrb	r3, [r3, #4]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b22      	ldr	r3, [pc, #136]	; (8001c0c <updateSensor+0xfc>)
 8001b84:	795b      	ldrb	r3, [r3, #5]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	80bb      	strh	r3, [r7, #4]

		temp = temperature  / 10.0 ;
 8001b8c:	88bb      	ldrh	r3, [r7, #4]
 8001b8e:	ee07 3a90 	vmov	s15, r3
 8001b92:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b96:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001b9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ba2:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <updateSensor+0x100>)
 8001ba4:	edc3 7a00 	vstr	s15, [r3]

		temp = (((dataBuffer[4] & 0x80) >> 7 ) == 1)? (temp * (-1)) : temp ;
 8001ba8:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <updateSensor+0xfc>)
 8001baa:	791b      	ldrb	r3, [r3, #4]
 8001bac:	09db      	lsrs	r3, r3, #7
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <updateSensor+0xb0>
 8001bb4:	4b16      	ldr	r3, [pc, #88]	; (8001c10 <updateSensor+0x100>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eef1 7a67 	vneg.f32	s15, s15
 8001bbe:	e002      	b.n	8001bc6 <updateSensor+0xb6>
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <updateSensor+0x100>)
 8001bc2:	edd3 7a00 	vldr	s15, [r3]
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <updateSensor+0x100>)
 8001bc8:	edc3 7a00 	vstr	s15, [r3]

		uint16_t humi = (dataBuffer[2] << 8) + dataBuffer[3] ;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <updateSensor+0xfc>)
 8001bce:	789b      	ldrb	r3, [r3, #2]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	021b      	lsls	r3, r3, #8
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <updateSensor+0xfc>)
 8001bd8:	78db      	ldrb	r3, [r3, #3]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	807b      	strh	r3, [r7, #2]
		RH = humi / 10.0 ;
 8001be0:	887b      	ldrh	r3, [r7, #2]
 8001be2:	ee07 3a90 	vmov	s15, r3
 8001be6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001bea:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8001bee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bf2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <updateSensor+0x104>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000344 	.word	0x20000344
 8001c08:	2000026c 	.word	0x2000026c
 8001c0c:	20000348 	.word	0x20000348
 8001c10:	2000033c 	.word	0x2000033c
 8001c14:	20000340 	.word	0x20000340

08001c18 <alarm>:

void alarm(){
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af02      	add	r7, sp, #8
	//-----------------------------------
	ILI9341_Draw_Text("WAKE UP!!", 50,50, BLACK, 4, WHITE);
 8001c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	2304      	movs	r3, #4
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2232      	movs	r2, #50	; 0x32
 8001c2c:	2132      	movs	r1, #50	; 0x32
 8001c2e:	4883      	ldr	r0, [pc, #524]	; (8001e3c <alarm+0x224>)
 8001c30:	f001 fd92 	bl	8003758 <ILI9341_Draw_Text>
	//-----------------------------------
	generateAndSortRandomNumbers(randomNumbers,4);
 8001c34:	2104      	movs	r1, #4
 8001c36:	4882      	ldr	r0, [pc, #520]	; (8001e40 <alarm+0x228>)
 8001c38:	f7ff fc82 	bl	8001540 <generateAndSortRandomNumbers>
	char pinNumber[4][2];
//	snprintf(buttonInput, 15, "%d %d %d %d",randomNumbers[0],randomNumbers[1],randomNumbers[2],randomNumbers[3]);
	for(int i=0;i<4;i++){
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	e024      	b.n	8001c8c <alarm+0x74>
		sprintf(pinNumber[i], "%d", randomNumbers[i]);
 8001c42:	463a      	mov	r2, r7
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	18d0      	adds	r0, r2, r3
 8001c4a:	4a7d      	ldr	r2, [pc, #500]	; (8001e40 <alarm+0x228>)
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	461a      	mov	r2, r3
 8001c54:	497b      	ldr	r1, [pc, #492]	; (8001e44 <alarm+0x22c>)
 8001c56:	f007 fb53 	bl	8009300 <siprintf>
		ILI9341_Draw_Text(pinNumber[i], 50 + i*30,100, BLACK, 4, WHITE);
 8001c5a:	463a      	mov	r2, r7
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	18d0      	adds	r0, r2, r3
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	0112      	lsls	r2, r2, #4
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	3332      	adds	r3, #50	; 0x32
 8001c72:	b2d9      	uxtb	r1, r3
 8001c74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	9300      	str	r3, [sp, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2264      	movs	r2, #100	; 0x64
 8001c82:	f001 fd69 	bl	8003758 <ILI9341_Draw_Text>
	for(int i=0;i<4;i++){
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	ddd7      	ble.n	8001c42 <alarm+0x2a>
	}
//	ILI9341_Draw_Text(buttonInput, 50,100, BLACK, 4, WHITE);
	int cnt = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
	while(1){
		if(cnt != 4){
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d04f      	beq.n	8001d3c <alarm+0x124>
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET){
 8001c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ca0:	4869      	ldr	r0, [pc, #420]	; (8001e48 <alarm+0x230>)
 8001ca2:	f002 fd07 	bl	80046b4 <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10b      	bne.n	8001cc4 <alarm+0xac>
				userButtonInput[cnt++] = 1;
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	613a      	str	r2, [r7, #16]
 8001cb2:	4a66      	ldr	r2, [pc, #408]	; (8001e4c <alarm+0x234>)
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				HAL_Delay(1000);
 8001cba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cbe:	f002 fa17 	bl	80040f0 <HAL_Delay>
 8001cc2:	e081      	b.n	8001dc8 <alarm+0x1b0>
			}
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET){
 8001cc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc8:	485f      	ldr	r0, [pc, #380]	; (8001e48 <alarm+0x230>)
 8001cca:	f002 fcf3 	bl	80046b4 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10b      	bne.n	8001cec <alarm+0xd4>
				userButtonInput[cnt++] = 2;
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	613a      	str	r2, [r7, #16]
 8001cda:	4a5c      	ldr	r2, [pc, #368]	; (8001e4c <alarm+0x234>)
 8001cdc:	2102      	movs	r1, #2
 8001cde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				HAL_Delay(1000);
 8001ce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ce6:	f002 fa03 	bl	80040f0 <HAL_Delay>
 8001cea:	e06d      	b.n	8001dc8 <alarm+0x1b0>
			}
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET){
 8001cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf0:	4855      	ldr	r0, [pc, #340]	; (8001e48 <alarm+0x230>)
 8001cf2:	f002 fcdf 	bl	80046b4 <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10b      	bne.n	8001d14 <alarm+0xfc>
				userButtonInput[cnt++] = 3;
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	613a      	str	r2, [r7, #16]
 8001d02:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <alarm+0x234>)
 8001d04:	2103      	movs	r1, #3
 8001d06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				HAL_Delay(1000);
 8001d0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d0e:	f002 f9ef 	bl	80040f0 <HAL_Delay>
 8001d12:	e059      	b.n	8001dc8 <alarm+0x1b0>
			}
			else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET){
 8001d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d18:	484d      	ldr	r0, [pc, #308]	; (8001e50 <alarm+0x238>)
 8001d1a:	f002 fccb 	bl	80046b4 <HAL_GPIO_ReadPin>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d151      	bne.n	8001dc8 <alarm+0x1b0>
				userButtonInput[cnt++] = 4;
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	613a      	str	r2, [r7, #16]
 8001d2a:	4a48      	ldr	r2, [pc, #288]	; (8001e4c <alarm+0x234>)
 8001d2c:	2104      	movs	r1, #4
 8001d2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				HAL_Delay(1000);
 8001d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d36:	f002 f9db 	bl	80040f0 <HAL_Delay>
 8001d3a:	e045      	b.n	8001dc8 <alarm+0x1b0>
			}
		}
		else{
//			snprintf(buttonInput, 15, "%d %d %d %d",userButtonInput[0],userButtonInput[1],userButtonInput[2],userButtonInput[3]);
//			ILI9341_Draw_Text(buttonInput, 50,10, BLACK, 4, WHITE);
			if(compareArrays(randomNumbers,userButtonInput,4) == 1){
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	4943      	ldr	r1, [pc, #268]	; (8001e4c <alarm+0x234>)
 8001d40:	483f      	ldr	r0, [pc, #252]	; (8001e40 <alarm+0x228>)
 8001d42:	f7ff fc43 	bl	80015cc <compareArrays>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <alarm+0x144>
				ILI9341_Fill_Screen(WHITE);
 8001d4c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d50:	f002 f80c 	bl	8003d6c <ILI9341_Fill_Screen>
				alarmtrigger = 0;
 8001d54:	4b3f      	ldr	r3, [pc, #252]	; (8001e54 <alarm+0x23c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
				break;
 8001d5a:	e06b      	b.n	8001e34 <alarm+0x21c>
			}else{
				generateAndSortRandomNumbers(randomNumbers,4);
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	4838      	ldr	r0, [pc, #224]	; (8001e40 <alarm+0x228>)
 8001d60:	f7ff fbee 	bl	8001540 <generateAndSortRandomNumbers>
				for(int i=0;i<4;i++){
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	e029      	b.n	8001dbe <alarm+0x1a6>
					sprintf(pinNumber[i], "%d", randomNumbers[i]);
 8001d6a:	463a      	mov	r2, r7
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	18d0      	adds	r0, r2, r3
 8001d72:	4a33      	ldr	r2, [pc, #204]	; (8001e40 <alarm+0x228>)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4931      	ldr	r1, [pc, #196]	; (8001e44 <alarm+0x22c>)
 8001d7e:	f007 fabf 	bl	8009300 <siprintf>
					ILI9341_Draw_Text(pinNumber[i], 50 + i*30,100, BLACK, 4, WHITE);
 8001d82:	463a      	mov	r2, r7
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	18d0      	adds	r0, r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	0112      	lsls	r2, r2, #4
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3332      	adds	r3, #50	; 0x32
 8001d9a:	b2d9      	uxtb	r1, r3
 8001d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2304      	movs	r3, #4
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2300      	movs	r3, #0
 8001da8:	2264      	movs	r2, #100	; 0x64
 8001daa:	f001 fcd5 	bl	8003758 <ILI9341_Draw_Text>
					userButtonInput[i] = 0;
 8001dae:	4a27      	ldr	r2, [pc, #156]	; (8001e4c <alarm+0x234>)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2100      	movs	r1, #0
 8001db4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i=0;i<4;i++){
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	ddd2      	ble.n	8001d6a <alarm+0x152>
				}
//				snprintf(buttonInput, 15, "%d %d %d %d",randomNumbers[0],randomNumbers[1],randomNumbers[2],randomNumbers[3]);
//				ILI9341_Draw_Text(buttonInput, 50,100, BLACK, 4, WHITE);
				cnt = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	613b      	str	r3, [r7, #16]
			}
		}
		for(int i=0;i<4;i++){
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	e02e      	b.n	8001e2c <alarm+0x214>
			ILI9341_Draw_Text(pinNumber[i], 50 + i*30,100, (userButtonInput[i] == randomNumbers[i]) ? GREEN : ((userButtonInput[i] == 0) ? BLACK : RED), 4, WHITE);
 8001dce:	463a      	mov	r2, r7
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	18d0      	adds	r0, r2, r3
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	3332      	adds	r3, #50	; 0x32
 8001de6:	b2d9      	uxtb	r1, r3
 8001de8:	4a18      	ldr	r2, [pc, #96]	; (8001e4c <alarm+0x234>)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001df0:	4c13      	ldr	r4, [pc, #76]	; (8001e40 <alarm+0x228>)
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d00a      	beq.n	8001e12 <alarm+0x1fa>
 8001dfc:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <alarm+0x234>)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <alarm+0x1f4>
 8001e08:	2300      	movs	r3, #0
 8001e0a:	e004      	b.n	8001e16 <alarm+0x1fe>
 8001e0c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e10:	e001      	b.n	8001e16 <alarm+0x1fe>
 8001e12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e1a:	9201      	str	r2, [sp, #4]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	9200      	str	r2, [sp, #0]
 8001e20:	2264      	movs	r2, #100	; 0x64
 8001e22:	f001 fc99 	bl	8003758 <ILI9341_Draw_Text>
		for(int i=0;i<4;i++){
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b03      	cmp	r3, #3
 8001e30:	ddcd      	ble.n	8001dce <alarm+0x1b6>
		if(cnt != 4){
 8001e32:	e730      	b.n	8001c96 <alarm+0x7e>
		}
	}
}
 8001e34:	bf00      	nop
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd90      	pop	{r4, r7, pc}
 8001e3c:	0800b584 	.word	0x0800b584
 8001e40:	20000410 	.word	0x20000410
 8001e44:	0800b590 	.word	0x0800b590
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	20000420 	.word	0x20000420
 8001e50:	40020000 	.word	0x40020000
 8001e54:	20000338 	.word	0x20000338

08001e58 <updateT>:

 void updateT(){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
 	sec = DS3231_GetSecond();
 8001e5c:	f7fe ff36 	bl	8000ccc <DS3231_GetSecond>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <updateT+0x64>)
 8001e66:	701a      	strb	r2, [r3, #0]
 	min = DS3231_GetMinute();
 8001e68:	f7fe ff24 	bl	8000cb4 <DS3231_GetMinute>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <updateT+0x68>)
 8001e72:	701a      	strb	r2, [r3, #0]
 	hur = DS3231_GetHour();
 8001e74:	f7fe ff12 	bl	8000c9c <DS3231_GetHour>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <updateT+0x6c>)
 8001e7e:	701a      	strb	r2, [r3, #0]
 	dow = DS3231_GetDayOfWeek()-1;
 8001e80:	f7fe febc 	bl	8000bfc <DS3231_GetDayOfWeek>
 8001e84:	4603      	mov	r3, r0
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <updateT+0x70>)
 8001e8c:	701a      	strb	r2, [r3, #0]
 	date = DS3231_GetDate()-1;
 8001e8e:	f7fe fec1 	bl	8000c14 <DS3231_GetDate>
 8001e92:	4603      	mov	r3, r0
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <updateT+0x74>)
 8001e9a:	701a      	strb	r2, [r3, #0]
 	month = DS3231_GetMonth()-1;
 8001e9c:	f7fe fec6 	bl	8000c2c <DS3231_GetMonth>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <updateT+0x78>)
 8001ea8:	701a      	strb	r2, [r3, #0]
 	year = DS3231_GetYear();
 8001eaa:	f7fe fece 	bl	8000c4a <DS3231_GetYear>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <updateT+0x7c>)
 8001eb4:	601a      	str	r2, [r3, #0]

 }
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000320 	.word	0x20000320
 8001ec0:	20000321 	.word	0x20000321
 8001ec4:	20000322 	.word	0x20000322
 8001ec8:	20000323 	.word	0x20000323
 8001ecc:	20000324 	.word	0x20000324
 8001ed0:	20000325 	.word	0x20000325
 8001ed4:	20000328 	.word	0x20000328

08001ed8 <showT>:
 void showT(){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b092      	sub	sp, #72	; 0x48
 8001edc:	af02      	add	r7, sp, #8

	updateSensor();
 8001ede:	f7ff fe17 	bl	8001b10 <updateSensor>
//		sprintf(strH,"%02d",setHour);
//		sprintf(strM,"%02d",setMin);
//		sprintf(strS,"%02d",setSec);
//	}

	sprintf(strH,"%02d",hur);
 8001ee2:	4b6d      	ldr	r3, [pc, #436]	; (8002098 <showT+0x1c0>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	496c      	ldr	r1, [pc, #432]	; (800209c <showT+0x1c4>)
 8001eea:	486d      	ldr	r0, [pc, #436]	; (80020a0 <showT+0x1c8>)
 8001eec:	f007 fa08 	bl	8009300 <siprintf>
	sprintf(strM,"%02d",min);
 8001ef0:	4b6c      	ldr	r3, [pc, #432]	; (80020a4 <showT+0x1cc>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4969      	ldr	r1, [pc, #420]	; (800209c <showT+0x1c4>)
 8001ef8:	486b      	ldr	r0, [pc, #428]	; (80020a8 <showT+0x1d0>)
 8001efa:	f007 fa01 	bl	8009300 <siprintf>
	sprintf(strS,"%02d",sec);
 8001efe:	4b6b      	ldr	r3, [pc, #428]	; (80020ac <showT+0x1d4>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4965      	ldr	r1, [pc, #404]	; (800209c <showT+0x1c4>)
 8001f06:	486a      	ldr	r0, [pc, #424]	; (80020b0 <showT+0x1d8>)
 8001f08:	f007 f9fa 	bl	8009300 <siprintf>

 	sprintf(strsensor,"%.1f C %.1f %%RH",temp,RH);
 8001f0c:	4b69      	ldr	r3, [pc, #420]	; (80020b4 <showT+0x1dc>)
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001f16:	4b68      	ldr	r3, [pc, #416]	; (80020b8 <showT+0x1e0>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f20:	ed8d 7b00 	vstr	d7, [sp]
 8001f24:	ec53 2b16 	vmov	r2, r3, d6
 8001f28:	4964      	ldr	r1, [pc, #400]	; (80020bc <showT+0x1e4>)
 8001f2a:	4865      	ldr	r0, [pc, #404]	; (80020c0 <showT+0x1e8>)
 8001f2c:	f007 f9e8 	bl	8009300 <siprintf>
// 	else{
// 		dow = dayofweek(setDate, setMonth + 1, setYear);
// 		snprintf(timedate,50,"%d %s %d",setDate, months[setMonth], setYear);
// 	}

 	dow = dayofweek(date + 1, month + 1, year);
 8001f30:	4b64      	ldr	r3, [pc, #400]	; (80020c4 <showT+0x1ec>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	3301      	adds	r3, #1
 8001f36:	4a64      	ldr	r2, [pc, #400]	; (80020c8 <showT+0x1f0>)
 8001f38:	7812      	ldrb	r2, [r2, #0]
 8001f3a:	1c51      	adds	r1, r2, #1
 8001f3c:	4a63      	ldr	r2, [pc, #396]	; (80020cc <showT+0x1f4>)
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 fe3b 	bl	8002bbc <dayofweek>
 8001f46:	4603      	mov	r3, r0
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <showT+0x1f8>)
 8001f4c:	701a      	strb	r2, [r3, #0]
 	snprintf(timedate,50,"%d %s %d",date+1, months[month], year);
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	; (80020c4 <showT+0x1ec>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	1c59      	adds	r1, r3, #1
 8001f54:	4b5c      	ldr	r3, [pc, #368]	; (80020c8 <showT+0x1f0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b5e      	ldr	r3, [pc, #376]	; (80020d4 <showT+0x1fc>)
 8001f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f60:	4a5a      	ldr	r2, [pc, #360]	; (80020cc <showT+0x1f4>)
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4a5b      	ldr	r2, [pc, #364]	; (80020d8 <showT+0x200>)
 8001f6c:	2132      	movs	r1, #50	; 0x32
 8001f6e:	485b      	ldr	r0, [pc, #364]	; (80020dc <showT+0x204>)
 8001f70:	f007 f992 	bl	8009298 <sniprintf>

	snprintf(timeString, 50, "%s:%s:%s", strH, strM, strS);
 8001f74:	4b4e      	ldr	r3, [pc, #312]	; (80020b0 <showT+0x1d8>)
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <showT+0x1d0>)
 8001f7a:	9300      	str	r3, [sp, #0]
 8001f7c:	4b48      	ldr	r3, [pc, #288]	; (80020a0 <showT+0x1c8>)
 8001f7e:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <showT+0x208>)
 8001f80:	2132      	movs	r1, #50	; 0x32
 8001f82:	4858      	ldr	r0, [pc, #352]	; (80020e4 <showT+0x20c>)
 8001f84:	f007 f988 	bl	8009298 <sniprintf>
	ILI9341_Draw_Text(timeString, 42, 100, BLACK, 5, WHITE);
 8001f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	2305      	movs	r3, #5
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	2264      	movs	r2, #100	; 0x64
 8001f96:	212a      	movs	r1, #42	; 0x2a
 8001f98:	4852      	ldr	r0, [pc, #328]	; (80020e4 <showT+0x20c>)
 8001f9a:	f001 fbdd 	bl	8003758 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text(strH, 50,90, BLACK, 5, WHITE);
//	ILI9341_Draw_Text(strM, 120,90, BLACK, 5, WHITE);
//	ILI9341_Draw_Text(strS, 210,90, BLACK, 5, WHITE);

	uint32_t dow_x = 56 + (9 - strlen(day[dow])) * 12;
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <showT+0x1f8>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4b50      	ldr	r3, [pc, #320]	; (80020e8 <showT+0x210>)
 8001fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f7fe f998 	bl	80002e0 <strlen>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	0092      	lsls	r2, r2, #2
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	33a4      	adds	r3, #164	; 0xa4
 8001fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	ILI9341_Draw_Text(day[dow], dow_x,10 , BLACK, 4, WHITE);
 8001fbe:	4b44      	ldr	r3, [pc, #272]	; (80020d0 <showT+0x1f8>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b48      	ldr	r3, [pc, #288]	; (80020e8 <showT+0x210>)
 8001fc6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001fca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fcc:	b2d9      	uxtb	r1, r3
 8001fce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd2:	9301      	str	r3, [sp, #4]
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	220a      	movs	r2, #10
 8001fdc:	f001 fbbc 	bl	8003758 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(strsensor, 75,40 , BLACK, 2, WHITE);
 8001fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe4:	9301      	str	r3, [sp, #4]
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2300      	movs	r3, #0
 8001fec:	2228      	movs	r2, #40	; 0x28
 8001fee:	214b      	movs	r1, #75	; 0x4b
 8001ff0:	4833      	ldr	r0, [pc, #204]	; (80020c0 <showT+0x1e8>)
 8001ff2:	f001 fbb1 	bl	8003758 <ILI9341_Draw_Text>
 //	ILI9341_Draw_Text(strsensor, 80,40 , BLACK, 1, WHITE);
//	ILI9341_Draw_Text(strdate, 50,210, BLACK, 2, WHITE);
//	ILI9341_Draw_Text(months[month], 80,210, BLACK, 2, WHITE);
//	ILI9341_Draw_Text(stryear, 200,210, BLACK, 2, WHITE);
	uint32_t time_x = 50 + (9-((setMonth == 99) ? strlen(months[month]) : strlen(months[setMonth]))) * 7;
 8001ff6:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <showT+0x214>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b63      	cmp	r3, #99	; 0x63
 8001ffc:	d10e      	bne.n	800201c <showT+0x144>
 8001ffe:	4b32      	ldr	r3, [pc, #200]	; (80020c8 <showT+0x1f0>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	4b33      	ldr	r3, [pc, #204]	; (80020d4 <showT+0x1fc>)
 8002006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe f968 	bl	80002e0 <strlen>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	3371      	adds	r3, #113	; 0x71
 800201a:	e00c      	b.n	8002036 <showT+0x15e>
 800201c:	4b33      	ldr	r3, [pc, #204]	; (80020ec <showT+0x214>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <showT+0x1fc>)
 8002022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f95a 	bl	80002e0 <strlen>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	3371      	adds	r3, #113	; 0x71
 8002036:	63bb      	str	r3, [r7, #56]	; 0x38
//	if (month % 2 == 1)
//		x -= 5;
 	ILI9341_Draw_Text(timedate, time_x, 210, BLACK, 2, WHITE);
 8002038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800203a:	b2d9      	uxtb	r1, r3
 800203c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002040:	9301      	str	r3, [sp, #4]
 8002042:	2302      	movs	r3, #2
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	2300      	movs	r3, #0
 8002048:	22d2      	movs	r2, #210	; 0xd2
 800204a:	4824      	ldr	r0, [pc, #144]	; (80020dc <showT+0x204>)
 800204c:	f001 fb84 	bl	8003758 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text(timedate, 50, 210, BLACK, 2, WHITE);
	char willBeAlarmIn[50] = "";
 8002050:	2300      	movs	r3, #0
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	f107 0308 	add.w	r3, r7, #8
 8002058:	222e      	movs	r2, #46	; 0x2e
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f007 f9b2 	bl	80093c6 <memset>
	snprintf(willBeAlarmIn, 50, "Alarm at %02d:%02d", setAlarmHour, setAlarmMin);
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <showT+0x218>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4b23      	ldr	r3, [pc, #140]	; (80020f4 <showT+0x21c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1d38      	adds	r0, r7, #4
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	4613      	mov	r3, r2
 8002070:	4a21      	ldr	r2, [pc, #132]	; (80020f8 <showT+0x220>)
 8002072:	2132      	movs	r1, #50	; 0x32
 8002074:	f007 f910 	bl	8009298 <sniprintf>
	ILI9341_Draw_Text(willBeAlarmIn, 75, 140, BLACK, 2, WHITE);
 8002078:	1d38      	adds	r0, r7, #4
 800207a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2302      	movs	r3, #2
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2300      	movs	r3, #0
 8002086:	228c      	movs	r2, #140	; 0x8c
 8002088:	214b      	movs	r1, #75	; 0x4b
 800208a:	f001 fb65 	bl	8003758 <ILI9341_Draw_Text>

 }
 800208e:	bf00      	nop
 8002090:	3740      	adds	r7, #64	; 0x40
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000322 	.word	0x20000322
 800209c:	0800b594 	.word	0x0800b594
 80020a0:	20000358 	.word	0x20000358
 80020a4:	20000321 	.word	0x20000321
 80020a8:	20000354 	.word	0x20000354
 80020ac:	20000320 	.word	0x20000320
 80020b0:	20000350 	.word	0x20000350
 80020b4:	2000033c 	.word	0x2000033c
 80020b8:	20000340 	.word	0x20000340
 80020bc:	0800b59c 	.word	0x0800b59c
 80020c0:	200003a8 	.word	0x200003a8
 80020c4:	20000324 	.word	0x20000324
 80020c8:	20000325 	.word	0x20000325
 80020cc:	20000328 	.word	0x20000328
 80020d0:	20000323 	.word	0x20000323
 80020d4:	2000003c 	.word	0x2000003c
 80020d8:	0800b5b0 	.word	0x0800b5b0
 80020dc:	2000035c 	.word	0x2000035c
 80020e0:	0800b5bc 	.word	0x0800b5bc
 80020e4:	200003dc 	.word	0x200003dc
 80020e8:	20000020 	.word	0x20000020
 80020ec:	20000018 	.word	0x20000018
 80020f0:	20000330 	.word	0x20000330
 80020f4:	2000032c 	.word	0x2000032c
 80020f8:	0800b5c8 	.word	0x0800b5c8

080020fc <showSetTime>:

void showSetTime(){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b09c      	sub	sp, #112	; 0x70
 8002100:	af02      	add	r7, sp, #8
	sprintf(strdate,"%02d",setDate+1);
 8002102:	4b7d      	ldr	r3, [pc, #500]	; (80022f8 <showSetTime+0x1fc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3301      	adds	r3, #1
 8002108:	461a      	mov	r2, r3
 800210a:	497c      	ldr	r1, [pc, #496]	; (80022fc <showSetTime+0x200>)
 800210c:	487c      	ldr	r0, [pc, #496]	; (8002300 <showSetTime+0x204>)
 800210e:	f007 f8f7 	bl	8009300 <siprintf>
	sprintf(strmonth,"%s",months[setMonth]);
 8002112:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <showSetTime+0x208>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a7c      	ldr	r2, [pc, #496]	; (8002308 <showSetTime+0x20c>)
 8002118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800211c:	461a      	mov	r2, r3
 800211e:	497b      	ldr	r1, [pc, #492]	; (800230c <showSetTime+0x210>)
 8002120:	487b      	ldr	r0, [pc, #492]	; (8002310 <showSetTime+0x214>)
 8002122:	f007 f8ed 	bl	8009300 <siprintf>
	sprintf(stryear,"%d",setYear);
 8002126:	4b7b      	ldr	r3, [pc, #492]	; (8002314 <showSetTime+0x218>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	497a      	ldr	r1, [pc, #488]	; (8002318 <showSetTime+0x21c>)
 800212e:	487b      	ldr	r0, [pc, #492]	; (800231c <showSetTime+0x220>)
 8002130:	f007 f8e6 	bl	8009300 <siprintf>

//	snprintf(timedate,50,"%s %s %s",strdate, strmonth, stryear);
//	ILI9341_Draw_Text(timedate, 80,10, BLACK, 2, WHITE);


	char getStr[100] = "";
 8002134:	2300      	movs	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	2260      	movs	r2, #96	; 0x60
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f007 f940 	bl	80093c6 <memset>
	sprintf(getStr,"Setting");
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4975      	ldr	r1, [pc, #468]	; (8002320 <showSetTime+0x224>)
 800214a:	4618      	mov	r0, r3
 800214c:	f007 f8d8 	bl	8009300 <siprintf>
	ILI9341_Draw_Text(getStr, 72,10, BLACK, 4, WHITE);
 8002150:	1d38      	adds	r0, r7, #4
 8002152:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	2304      	movs	r3, #4
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	2300      	movs	r3, #0
 800215e:	220a      	movs	r2, #10
 8002160:	2148      	movs	r1, #72	; 0x48
 8002162:	f001 faf9 	bl	8003758 <ILI9341_Draw_Text>

	sprintf(getStr,"Date");
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	496e      	ldr	r1, [pc, #440]	; (8002324 <showSetTime+0x228>)
 800216a:	4618      	mov	r0, r3
 800216c:	f007 f8c8 	bl	8009300 <siprintf>
	ILI9341_Draw_Text(getStr, 115,60, BLACK, 3, WHITE);
 8002170:	1d38      	adds	r0, r7, #4
 8002172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	2303      	movs	r3, #3
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	223c      	movs	r2, #60	; 0x3c
 8002180:	2173      	movs	r1, #115	; 0x73
 8002182:	f001 fae9 	bl	8003758 <ILI9341_Draw_Text>

	sprintf(getStr,"Time");
 8002186:	1d3b      	adds	r3, r7, #4
 8002188:	4967      	ldr	r1, [pc, #412]	; (8002328 <showSetTime+0x22c>)
 800218a:	4618      	mov	r0, r3
 800218c:	f007 f8b8 	bl	8009300 <siprintf>
	ILI9341_Draw_Text(getStr, 115,130, BLACK, 3, WHITE);
 8002190:	1d38      	adds	r0, r7, #4
 8002192:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002196:	9301      	str	r3, [sp, #4]
 8002198:	2303      	movs	r3, #3
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2300      	movs	r3, #0
 800219e:	2282      	movs	r2, #130	; 0x82
 80021a0:	2173      	movs	r1, #115	; 0x73
 80021a2:	f001 fad9 	bl	8003758 <ILI9341_Draw_Text>

	if (currentIndex == 0)
 80021a6:	4b61      	ldr	r3, [pc, #388]	; (800232c <showSetTime+0x230>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10b      	bne.n	80021c6 <showSetTime+0xca>
		ILI9341_Draw_Text(strdate, 55,100, BLUE, 2, WHITE);
 80021ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2302      	movs	r3, #2
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	231f      	movs	r3, #31
 80021ba:	2264      	movs	r2, #100	; 0x64
 80021bc:	2137      	movs	r1, #55	; 0x37
 80021be:	4850      	ldr	r0, [pc, #320]	; (8002300 <showSetTime+0x204>)
 80021c0:	f001 faca 	bl	8003758 <ILI9341_Draw_Text>
 80021c4:	e00a      	b.n	80021dc <showSetTime+0xe0>
	else
		ILI9341_Draw_Text(strdate, 55,100, BLACK, 2, WHITE);
 80021c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2300      	movs	r3, #0
 80021d2:	2264      	movs	r2, #100	; 0x64
 80021d4:	2137      	movs	r1, #55	; 0x37
 80021d6:	484a      	ldr	r0, [pc, #296]	; (8002300 <showSetTime+0x204>)
 80021d8:	f001 fabe 	bl	8003758 <ILI9341_Draw_Text>




	if (currentIndex == 1)
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <showSetTime+0x230>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d10b      	bne.n	80021fc <showSetTime+0x100>
		ILI9341_Draw_Text(strmonth, 100,100, BLUE, 2, WHITE);
 80021e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	2302      	movs	r3, #2
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	231f      	movs	r3, #31
 80021f0:	2264      	movs	r2, #100	; 0x64
 80021f2:	2164      	movs	r1, #100	; 0x64
 80021f4:	4846      	ldr	r0, [pc, #280]	; (8002310 <showSetTime+0x214>)
 80021f6:	f001 faaf 	bl	8003758 <ILI9341_Draw_Text>
 80021fa:	e00a      	b.n	8002212 <showSetTime+0x116>
	else
		ILI9341_Draw_Text(strmonth, 100,100, BLACK, 2, WHITE);
 80021fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	2302      	movs	r3, #2
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	2264      	movs	r2, #100	; 0x64
 800220a:	2164      	movs	r1, #100	; 0x64
 800220c:	4840      	ldr	r0, [pc, #256]	; (8002310 <showSetTime+0x214>)
 800220e:	f001 faa3 	bl	8003758 <ILI9341_Draw_Text>



	if (currentIndex== 2)
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <showSetTime+0x230>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d10b      	bne.n	8002232 <showSetTime+0x136>
		ILI9341_Draw_Text(stryear, 215,100, BLUE, 2, WHITE);
 800221a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	2302      	movs	r3, #2
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	231f      	movs	r3, #31
 8002226:	2264      	movs	r2, #100	; 0x64
 8002228:	21d7      	movs	r1, #215	; 0xd7
 800222a:	483c      	ldr	r0, [pc, #240]	; (800231c <showSetTime+0x220>)
 800222c:	f001 fa94 	bl	8003758 <ILI9341_Draw_Text>
 8002230:	e00a      	b.n	8002248 <showSetTime+0x14c>
	else
		ILI9341_Draw_Text(stryear, 215,100, BLACK, 2, WHITE);
 8002232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002236:	9301      	str	r3, [sp, #4]
 8002238:	2302      	movs	r3, #2
 800223a:	9300      	str	r3, [sp, #0]
 800223c:	2300      	movs	r3, #0
 800223e:	2264      	movs	r2, #100	; 0x64
 8002240:	21d7      	movs	r1, #215	; 0xd7
 8002242:	4836      	ldr	r0, [pc, #216]	; (800231c <showSetTime+0x220>)
 8002244:	f001 fa88 	bl	8003758 <ILI9341_Draw_Text>


	// hour

	sprintf(getStr,"%02d",setHour);
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <showSetTime+0x234>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	1d3b      	adds	r3, r7, #4
 800224e:	492b      	ldr	r1, [pc, #172]	; (80022fc <showSetTime+0x200>)
 8002250:	4618      	mov	r0, r3
 8002252:	f007 f855 	bl	8009300 <siprintf>



	if (currentIndex== 3)
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <showSetTime+0x230>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d10b      	bne.n	8002276 <showSetTime+0x17a>
			ILI9341_Draw_Text(getStr, 120,170, BLUE, 2, WHITE);
 800225e:	1d38      	adds	r0, r7, #4
 8002260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	2302      	movs	r3, #2
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	231f      	movs	r3, #31
 800226c:	22aa      	movs	r2, #170	; 0xaa
 800226e:	2178      	movs	r1, #120	; 0x78
 8002270:	f001 fa72 	bl	8003758 <ILI9341_Draw_Text>
 8002274:	e00a      	b.n	800228c <showSetTime+0x190>
		else
			ILI9341_Draw_Text(getStr, 120,170, BLACK, 2, WHITE);
 8002276:	1d38      	adds	r0, r7, #4
 8002278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	2302      	movs	r3, #2
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2300      	movs	r3, #0
 8002284:	22aa      	movs	r2, #170	; 0xaa
 8002286:	2178      	movs	r1, #120	; 0x78
 8002288:	f001 fa66 	bl	8003758 <ILI9341_Draw_Text>

	sprintf(getStr,":");
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	4929      	ldr	r1, [pc, #164]	; (8002334 <showSetTime+0x238>)
 8002290:	4618      	mov	r0, r3
 8002292:	f007 f835 	bl	8009300 <siprintf>
	ILI9341_Draw_Text(getStr, 150,170, BLACK, 2, WHITE);
 8002296:	1d38      	adds	r0, r7, #4
 8002298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	2302      	movs	r3, #2
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	22aa      	movs	r2, #170	; 0xaa
 80022a6:	2196      	movs	r1, #150	; 0x96
 80022a8:	f001 fa56 	bl	8003758 <ILI9341_Draw_Text>

	// minute
	sprintf(getStr,"%02d",setMin);
 80022ac:	4b22      	ldr	r3, [pc, #136]	; (8002338 <showSetTime+0x23c>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	4912      	ldr	r1, [pc, #72]	; (80022fc <showSetTime+0x200>)
 80022b4:	4618      	mov	r0, r3
 80022b6:	f007 f823 	bl	8009300 <siprintf>

	if (currentIndex== 4)
 80022ba:	4b1c      	ldr	r3, [pc, #112]	; (800232c <showSetTime+0x230>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d10b      	bne.n	80022da <showSetTime+0x1de>
			ILI9341_Draw_Text(getStr, 160,170, BLUE, 2, WHITE);
 80022c2:	1d38      	adds	r0, r7, #4
 80022c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2302      	movs	r3, #2
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	231f      	movs	r3, #31
 80022d0:	22aa      	movs	r2, #170	; 0xaa
 80022d2:	21a0      	movs	r1, #160	; 0xa0
 80022d4:	f001 fa40 	bl	8003758 <ILI9341_Draw_Text>
		else
			ILI9341_Draw_Text(getStr, 160,170, BLACK, 2, WHITE);

//	ILI9341_Draw_Text(day[dow], 50, 10 , BLACK, 4, WHITE);
}
 80022d8:	e00a      	b.n	80022f0 <showSetTime+0x1f4>
			ILI9341_Draw_Text(getStr, 160,170, BLACK, 2, WHITE);
 80022da:	1d38      	adds	r0, r7, #4
 80022dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e0:	9301      	str	r3, [sp, #4]
 80022e2:	2302      	movs	r3, #2
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2300      	movs	r3, #0
 80022e8:	22aa      	movs	r2, #170	; 0xaa
 80022ea:	21a0      	movs	r1, #160	; 0xa0
 80022ec:	f001 fa34 	bl	8003758 <ILI9341_Draw_Text>
}
 80022f0:	bf00      	nop
 80022f2:	3768      	adds	r7, #104	; 0x68
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000014 	.word	0x20000014
 80022fc:	0800b594 	.word	0x0800b594
 8002300:	20000390 	.word	0x20000390
 8002304:	20000018 	.word	0x20000018
 8002308:	2000003c 	.word	0x2000003c
 800230c:	0800b5dc 	.word	0x0800b5dc
 8002310:	20000394 	.word	0x20000394
 8002314:	2000001c 	.word	0x2000001c
 8002318:	0800b590 	.word	0x0800b590
 800231c:	200003a4 	.word	0x200003a4
 8002320:	0800b5e0 	.word	0x0800b5e0
 8002324:	0800b5e8 	.word	0x0800b5e8
 8002328:	0800b5f0 	.word	0x0800b5f0
 800232c:	20000430 	.word	0x20000430
 8002330:	20000010 	.word	0x20000010
 8002334:	0800b5f8 	.word	0x0800b5f8
 8002338:	2000000c 	.word	0x2000000c

0800233c <showSetAlarm>:

void showSetAlarm(){
 800233c:	b580      	push	{r7, lr}
 800233e:	b09c      	sub	sp, #112	; 0x70
 8002340:	af02      	add	r7, sp, #8



		char getStr[100] = "";
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	2260      	movs	r2, #96	; 0x60
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f007 f83a 	bl	80093c6 <memset>


		sprintf(getStr,"Setting Alarm Time");
 8002352:	463b      	mov	r3, r7
 8002354:	4951      	ldr	r1, [pc, #324]	; (800249c <showSetAlarm+0x160>)
 8002356:	4618      	mov	r0, r3
 8002358:	f006 ffd2 	bl	8009300 <siprintf>
		ILI9341_Draw_Text(getStr, 50, 20, BLACK , 2, WHITE);
 800235c:	4638      	mov	r0, r7
 800235e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	2302      	movs	r3, #2
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	2300      	movs	r3, #0
 800236a:	2214      	movs	r2, #20
 800236c:	2132      	movs	r1, #50	; 0x32
 800236e:	f001 f9f3 	bl	8003758 <ILI9341_Draw_Text>


		ILI9341_Draw_Text("Hour   Minute", 90,90, BLACK, 2, WHITE);
 8002372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2302      	movs	r3, #2
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2300      	movs	r3, #0
 800237e:	225a      	movs	r2, #90	; 0x5a
 8002380:	215a      	movs	r1, #90	; 0x5a
 8002382:	4847      	ldr	r0, [pc, #284]	; (80024a0 <showSetAlarm+0x164>)
 8002384:	f001 f9e8 	bl	8003758 <ILI9341_Draw_Text>

		sprintf(getStr,"%02d",setAlarmHour);
 8002388:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <showSetAlarm+0x168>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	463b      	mov	r3, r7
 800238e:	4946      	ldr	r1, [pc, #280]	; (80024a8 <showSetAlarm+0x16c>)
 8002390:	4618      	mov	r0, r3
 8002392:	f006 ffb5 	bl	8009300 <siprintf>

		if (currentIndex== 2)
 8002396:	4b45      	ldr	r3, [pc, #276]	; (80024ac <showSetAlarm+0x170>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d10b      	bne.n	80023b6 <showSetAlarm+0x7a>
			ILI9341_Draw_Text(getStr, 95,110, BLUE, 3, WHITE);
 800239e:	4638      	mov	r0, r7
 80023a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	2303      	movs	r3, #3
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	231f      	movs	r3, #31
 80023ac:	226e      	movs	r2, #110	; 0x6e
 80023ae:	215f      	movs	r1, #95	; 0x5f
 80023b0:	f001 f9d2 	bl	8003758 <ILI9341_Draw_Text>
 80023b4:	e00a      	b.n	80023cc <showSetAlarm+0x90>
		else
			ILI9341_Draw_Text(getStr, 95,110, BLACK, 3, WHITE);
 80023b6:	4638      	mov	r0, r7
 80023b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2303      	movs	r3, #3
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2300      	movs	r3, #0
 80023c4:	226e      	movs	r2, #110	; 0x6e
 80023c6:	215f      	movs	r1, #95	; 0x5f
 80023c8:	f001 f9c6 	bl	8003758 <ILI9341_Draw_Text>

		// minute
		sprintf(getStr,"%02d",setAlarmMin);
 80023cc:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <showSetAlarm+0x174>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	463b      	mov	r3, r7
 80023d2:	4935      	ldr	r1, [pc, #212]	; (80024a8 <showSetAlarm+0x16c>)
 80023d4:	4618      	mov	r0, r3
 80023d6:	f006 ff93 	bl	8009300 <siprintf>

		if (currentIndex== 3)
 80023da:	4b34      	ldr	r3, [pc, #208]	; (80024ac <showSetAlarm+0x170>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d10b      	bne.n	80023fa <showSetAlarm+0xbe>
			ILI9341_Draw_Text(getStr, 184,110, BLUE, 3, WHITE);
 80023e2:	4638      	mov	r0, r7
 80023e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	2303      	movs	r3, #3
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	231f      	movs	r3, #31
 80023f0:	226e      	movs	r2, #110	; 0x6e
 80023f2:	21b8      	movs	r1, #184	; 0xb8
 80023f4:	f001 f9b0 	bl	8003758 <ILI9341_Draw_Text>
 80023f8:	e00a      	b.n	8002410 <showSetAlarm+0xd4>
		else
			ILI9341_Draw_Text(getStr, 184,110, BLACK, 3, WHITE);
 80023fa:	4638      	mov	r0, r7
 80023fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	2303      	movs	r3, #3
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2300      	movs	r3, #0
 8002408:	226e      	movs	r2, #110	; 0x6e
 800240a:	21b8      	movs	r1, #184	; 0xb8
 800240c:	f001 f9a4 	bl	8003758 <ILI9341_Draw_Text>

		sprintf(getStr,"%s",day[setAlarmDay]);
 8002410:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <showSetAlarm+0x178>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a28      	ldr	r2, [pc, #160]	; (80024b8 <showSetAlarm+0x17c>)
 8002416:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800241a:	463b      	mov	r3, r7
 800241c:	4927      	ldr	r1, [pc, #156]	; (80024bc <showSetAlarm+0x180>)
 800241e:	4618      	mov	r0, r3
 8002420:	f006 ff6e 	bl	8009300 <siprintf>
		uint32_t dow_x = 75 + (9 - strlen(day[setAlarmDay])) * 12;
 8002424:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <showSetAlarm+0x178>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a23      	ldr	r2, [pc, #140]	; (80024b8 <showSetAlarm+0x17c>)
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fd ff56 	bl	80002e0 <strlen>
 8002434:	4602      	mov	r2, r0
 8002436:	4613      	mov	r3, r2
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	33b7      	adds	r3, #183	; 0xb7
 8002440:	667b      	str	r3, [r7, #100]	; 0x64
		if (currentIndex== 4)
 8002442:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <showSetAlarm+0x170>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2b04      	cmp	r3, #4
 8002448:	d10c      	bne.n	8002464 <showSetAlarm+0x128>
			ILI9341_Draw_Text(getStr, dow_x,175, BLUE, 3, WHITE);
 800244a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800244c:	b2d9      	uxtb	r1, r3
 800244e:	4638      	mov	r0, r7
 8002450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002454:	9301      	str	r3, [sp, #4]
 8002456:	2303      	movs	r3, #3
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	231f      	movs	r3, #31
 800245c:	22af      	movs	r2, #175	; 0xaf
 800245e:	f001 f97b 	bl	8003758 <ILI9341_Draw_Text>
 8002462:	e00b      	b.n	800247c <showSetAlarm+0x140>
		else
			ILI9341_Draw_Text(getStr, dow_x,175, BLACK, 3, WHITE);
 8002464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002466:	b2d9      	uxtb	r1, r3
 8002468:	4638      	mov	r0, r7
 800246a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2303      	movs	r3, #3
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2300      	movs	r3, #0
 8002476:	22af      	movs	r2, #175	; 0xaf
 8002478:	f001 f96e 	bl	8003758 <ILI9341_Draw_Text>



		ILI9341_Draw_Text(":", 155,110, BLACK, 3, WHITE);
 800247c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002480:	9301      	str	r3, [sp, #4]
 8002482:	2303      	movs	r3, #3
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	2300      	movs	r3, #0
 8002488:	226e      	movs	r2, #110	; 0x6e
 800248a:	219b      	movs	r1, #155	; 0x9b
 800248c:	480c      	ldr	r0, [pc, #48]	; (80024c0 <showSetAlarm+0x184>)
 800248e:	f001 f963 	bl	8003758 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text(strS, 160,20, BLACK, 2, WHITE);
	//ILI9341_Draw_Text(day[dow], 60,200, BLACK, 2, WHITE);


//	ILI9341_Draw_Text(day[dow], 10, 200 , BLACK, 4, WHITE);
}
 8002492:	bf00      	nop
 8002494:	3768      	adds	r7, #104	; 0x68
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	0800b5fc 	.word	0x0800b5fc
 80024a0:	0800b610 	.word	0x0800b610
 80024a4:	20000330 	.word	0x20000330
 80024a8:	0800b594 	.word	0x0800b594
 80024ac:	20000430 	.word	0x20000430
 80024b0:	2000032c 	.word	0x2000032c
 80024b4:	20000334 	.word	0x20000334
 80024b8:	20000020 	.word	0x20000020
 80024bc:	0800b5dc 	.word	0x0800b5dc
 80024c0:	0800b5f8 	.word	0x0800b5f8

080024c4 <setPage>:

void setPage(){
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b090      	sub	sp, #64	; 0x40
 80024c8:	af02      	add	r7, sp, #8
	if((count-starttime) > 1000){
 80024ca:	4b93      	ldr	r3, [pc, #588]	; (8002718 <setPage+0x254>)
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	4b93      	ldr	r3, [pc, #588]	; (800271c <setPage+0x258>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024d8:	d910      	bls.n	80024fc <setPage+0x38>
		if(screen == 2)
 80024da:	4b91      	ldr	r3, [pc, #580]	; (8002720 <setPage+0x25c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d102      	bne.n	80024e8 <setPage+0x24>
			showSetTime();
 80024e2:	f7ff fe0b 	bl	80020fc <showSetTime>
 80024e6:	e005      	b.n	80024f4 <setPage+0x30>
		else if(screen == 3)
 80024e8:	4b8d      	ldr	r3, [pc, #564]	; (8002720 <setPage+0x25c>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d101      	bne.n	80024f4 <setPage+0x30>
			showSetAlarm();
 80024f0:	f7ff ff24 	bl	800233c <showSetAlarm>
		starttime = count;
 80024f4:	4b88      	ldr	r3, [pc, #544]	; (8002718 <setPage+0x254>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a88      	ldr	r2, [pc, #544]	; (800271c <setPage+0x258>)
 80024fa:	6013      	str	r3, [r2, #0]
	}
//   Check_Key();


   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && count - debounceTime > 1000){
 80024fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002500:	4888      	ldr	r0, [pc, #544]	; (8002724 <setPage+0x260>)
 8002502:	f002 f8d7 	bl	80046b4 <HAL_GPIO_ReadPin>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	f040 8155 	bne.w	80027b8 <setPage+0x2f4>
 800250e:	4b82      	ldr	r3, [pc, #520]	; (8002718 <setPage+0x254>)
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	4b85      	ldr	r3, [pc, #532]	; (8002728 <setPage+0x264>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800251c:	f240 814c 	bls.w	80027b8 <setPage+0x2f4>
	   debounceTime = count;
 8002520:	4b7d      	ldr	r3, [pc, #500]	; (8002718 <setPage+0x254>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a80      	ldr	r2, [pc, #512]	; (8002728 <setPage+0x264>)
 8002526:	6013      	str	r3, [r2, #0]
	   switch(currentIndex){
 8002528:	4b80      	ldr	r3, [pc, #512]	; (800272c <setPage+0x268>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b04      	cmp	r3, #4
 800252e:	f200 8322 	bhi.w	8002b76 <setPage+0x6b2>
 8002532:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <setPage+0x74>)
 8002534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002538:	0800254d 	.word	0x0800254d
 800253c:	08002607 	.word	0x08002607
 8002540:	08002649 	.word	0x08002649
 8002544:	0800268d 	.word	0x0800268d
 8002548:	080026e9 	.word	0x080026e9
	   case 0:
		   if(screen == 2){
 800254c:	4b74      	ldr	r3, [pc, #464]	; (8002720 <setPage+0x25c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b02      	cmp	r3, #2
 8002552:	f040 8127 	bne.w	80027a4 <setPage+0x2e0>
			   setDate++;
 8002556:	4b76      	ldr	r3, [pc, #472]	; (8002730 <setPage+0x26c>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3301      	adds	r3, #1
 800255c:	4a74      	ldr	r2, [pc, #464]	; (8002730 <setPage+0x26c>)
 800255e:	6013      	str	r3, [r2, #0]
			   if(setMonth == 3 || setMonth == 5 || setMonth == 8 || setMonth == 10)
 8002560:	4b74      	ldr	r3, [pc, #464]	; (8002734 <setPage+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d00b      	beq.n	8002580 <setPage+0xbc>
 8002568:	4b72      	ldr	r3, [pc, #456]	; (8002734 <setPage+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d007      	beq.n	8002580 <setPage+0xbc>
 8002570:	4b70      	ldr	r3, [pc, #448]	; (8002734 <setPage+0x270>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d003      	beq.n	8002580 <setPage+0xbc>
 8002578:	4b6e      	ldr	r3, [pc, #440]	; (8002734 <setPage+0x270>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b0a      	cmp	r3, #10
 800257e:	d10d      	bne.n	800259c <setPage+0xd8>
				   setDate %= 30;
 8002580:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <setPage+0x26c>)
 8002582:	6819      	ldr	r1, [r3, #0]
 8002584:	4b6c      	ldr	r3, [pc, #432]	; (8002738 <setPage+0x274>)
 8002586:	fba3 2301 	umull	r2, r3, r3, r1
 800258a:	091a      	lsrs	r2, r3, #4
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	1aca      	subs	r2, r1, r3
 8002596:	4b66      	ldr	r3, [pc, #408]	; (8002730 <setPage+0x26c>)
 8002598:	601a      	str	r2, [r3, #0]
			   else{
				   setDate %= 31;
			   }
		   }

		   break;
 800259a:	e103      	b.n	80027a4 <setPage+0x2e0>
			   else if(setMonth == 1)
 800259c:	4b65      	ldr	r3, [pc, #404]	; (8002734 <setPage+0x270>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d120      	bne.n	80025e6 <setPage+0x122>
				   setDate = setYear%4==0 ? setDate%29 : setDate%28;
 80025a4:	4b65      	ldr	r3, [pc, #404]	; (800273c <setPage+0x278>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10c      	bne.n	80025ca <setPage+0x106>
 80025b0:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <setPage+0x26c>)
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	4b62      	ldr	r3, [pc, #392]	; (8002740 <setPage+0x27c>)
 80025b6:	fba3 2301 	umull	r2, r3, r3, r1
 80025ba:	091a      	lsrs	r2, r3, #4
 80025bc:	4613      	mov	r3, r2
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	1aca      	subs	r2, r1, r3
 80025c8:	e00a      	b.n	80025e0 <setPage+0x11c>
 80025ca:	4b59      	ldr	r3, [pc, #356]	; (8002730 <setPage+0x26c>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	0893      	lsrs	r3, r2, #2
 80025d0:	495c      	ldr	r1, [pc, #368]	; (8002744 <setPage+0x280>)
 80025d2:	fba1 3103 	umull	r3, r1, r1, r3
 80025d6:	460b      	mov	r3, r1
 80025d8:	00db      	lsls	r3, r3, #3
 80025da:	1a5b      	subs	r3, r3, r1
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	1ad2      	subs	r2, r2, r3
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <setPage+0x26c>)
 80025e2:	601a      	str	r2, [r3, #0]
		   break;
 80025e4:	e0de      	b.n	80027a4 <setPage+0x2e0>
				   setDate %= 31;
 80025e6:	4b52      	ldr	r3, [pc, #328]	; (8002730 <setPage+0x26c>)
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	4b57      	ldr	r3, [pc, #348]	; (8002748 <setPage+0x284>)
 80025ec:	fba3 2301 	umull	r2, r3, r3, r1
 80025f0:	1aca      	subs	r2, r1, r3
 80025f2:	0852      	lsrs	r2, r2, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	091a      	lsrs	r2, r3, #4
 80025f8:	4613      	mov	r3, r2
 80025fa:	015b      	lsls	r3, r3, #5
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	1aca      	subs	r2, r1, r3
 8002600:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <setPage+0x26c>)
 8002602:	601a      	str	r2, [r3, #0]
		   break;
 8002604:	e0ce      	b.n	80027a4 <setPage+0x2e0>
	   case 1:
		   if(screen == 2) {
 8002606:	4b46      	ldr	r3, [pc, #280]	; (8002720 <setPage+0x25c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b02      	cmp	r3, #2
 800260c:	f040 80cc 	bne.w	80027a8 <setPage+0x2e4>
			   setMonth++;
 8002610:	4b48      	ldr	r3, [pc, #288]	; (8002734 <setPage+0x270>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3301      	adds	r3, #1
 8002616:	4a47      	ldr	r2, [pc, #284]	; (8002734 <setPage+0x270>)
 8002618:	6013      	str	r3, [r2, #0]
			   setMonth %= 12;
 800261a:	4b46      	ldr	r3, [pc, #280]	; (8002734 <setPage+0x270>)
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	4b4b      	ldr	r3, [pc, #300]	; (800274c <setPage+0x288>)
 8002620:	fba3 2301 	umull	r2, r3, r3, r1
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	1aca      	subs	r2, r1, r3
 8002630:	4b40      	ldr	r3, [pc, #256]	; (8002734 <setPage+0x270>)
 8002632:	601a      	str	r2, [r3, #0]


			   ILI9341_Draw_Rectangle(90,100, 125,30,  WHITE);
 8002634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	231e      	movs	r3, #30
 800263c:	227d      	movs	r2, #125	; 0x7d
 800263e:	2164      	movs	r1, #100	; 0x64
 8002640:	205a      	movs	r0, #90	; 0x5a
 8002642:	f001 fc93 	bl	8003f6c <ILI9341_Draw_Rectangle>
		   }

		   break;
 8002646:	e0af      	b.n	80027a8 <setPage+0x2e4>
	   case 2:
		   if(screen == 2) {setYear++;}
 8002648:	4b35      	ldr	r3, [pc, #212]	; (8002720 <setPage+0x25c>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d105      	bne.n	800265c <setPage+0x198>
 8002650:	4b3a      	ldr	r3, [pc, #232]	; (800273c <setPage+0x278>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	4a39      	ldr	r2, [pc, #228]	; (800273c <setPage+0x278>)
 8002658:	6013      	str	r3, [r2, #0]
		   else if(screen == 3){
		   			   setAlarmHour++;
		   			   setAlarmHour %=24;
		   		   }

		   break;
 800265a:	e0a7      	b.n	80027ac <setPage+0x2e8>
		   else if(screen == 3){
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <setPage+0x25c>)
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b03      	cmp	r3, #3
 8002662:	f040 80a3 	bne.w	80027ac <setPage+0x2e8>
		   			   setAlarmHour++;
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <setPage+0x28c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	4a38      	ldr	r2, [pc, #224]	; (8002750 <setPage+0x28c>)
 800266e:	6013      	str	r3, [r2, #0]
		   			   setAlarmHour %=24;
 8002670:	4b37      	ldr	r3, [pc, #220]	; (8002750 <setPage+0x28c>)
 8002672:	6819      	ldr	r1, [r3, #0]
 8002674:	4b35      	ldr	r3, [pc, #212]	; (800274c <setPage+0x288>)
 8002676:	fba3 2301 	umull	r2, r3, r3, r1
 800267a:	091a      	lsrs	r2, r3, #4
 800267c:	4613      	mov	r3, r2
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4413      	add	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	1aca      	subs	r2, r1, r3
 8002686:	4b32      	ldr	r3, [pc, #200]	; (8002750 <setPage+0x28c>)
 8002688:	601a      	str	r2, [r3, #0]
		   break;
 800268a:	e08f      	b.n	80027ac <setPage+0x2e8>
	   case 3:
		   if(screen == 2){
 800268c:	4b24      	ldr	r3, [pc, #144]	; (8002720 <setPage+0x25c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d112      	bne.n	80026ba <setPage+0x1f6>
			   setHour++;
 8002694:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <setPage+0x290>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	3301      	adds	r3, #1
 800269a:	4a2e      	ldr	r2, [pc, #184]	; (8002754 <setPage+0x290>)
 800269c:	6013      	str	r3, [r2, #0]
			   setHour %= 24;
 800269e:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <setPage+0x290>)
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	4b2a      	ldr	r3, [pc, #168]	; (800274c <setPage+0x288>)
 80026a4:	fba3 2301 	umull	r2, r3, r3, r1
 80026a8:	091a      	lsrs	r2, r3, #4
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	1aca      	subs	r2, r1, r3
 80026b4:	4b27      	ldr	r3, [pc, #156]	; (8002754 <setPage+0x290>)
 80026b6:	601a      	str	r2, [r3, #0]
	   		else if(screen == 3){
	   			setAlarmMin++;
	   			setAlarmMin %=60;
	   		}

		   break;
 80026b8:	e07a      	b.n	80027b0 <setPage+0x2ec>
	   		else if(screen == 3){
 80026ba:	4b19      	ldr	r3, [pc, #100]	; (8002720 <setPage+0x25c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d176      	bne.n	80027b0 <setPage+0x2ec>
	   			setAlarmMin++;
 80026c2:	4b25      	ldr	r3, [pc, #148]	; (8002758 <setPage+0x294>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	4a23      	ldr	r2, [pc, #140]	; (8002758 <setPage+0x294>)
 80026ca:	6013      	str	r3, [r2, #0]
	   			setAlarmMin %=60;
 80026cc:	4b22      	ldr	r3, [pc, #136]	; (8002758 <setPage+0x294>)
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <setPage+0x274>)
 80026d2:	fba3 2301 	umull	r2, r3, r3, r1
 80026d6:	095a      	lsrs	r2, r3, #5
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	1aca      	subs	r2, r1, r3
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <setPage+0x294>)
 80026e4:	601a      	str	r2, [r3, #0]
		   break;
 80026e6:	e063      	b.n	80027b0 <setPage+0x2ec>
	   case 4:
	   		if(screen == 2){
 80026e8:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <setPage+0x25c>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d137      	bne.n	8002760 <setPage+0x29c>
	   			   setMin++;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <setPage+0x298>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <setPage+0x298>)
 80026f8:	6013      	str	r3, [r2, #0]
	   			   setMin %= 60;
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <setPage+0x298>)
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <setPage+0x274>)
 8002700:	fba3 2301 	umull	r2, r3, r3, r1
 8002704:	095a      	lsrs	r2, r3, #5
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	1aca      	subs	r2, r1, r3
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <setPage+0x298>)
 8002712:	601a      	str	r2, [r3, #0]
	   			setAlarmDay %= 7;

	   			ILI9341_Draw_Rectangle( 70,175, 200,40,  WHITE);
	   		}

	   		break;
 8002714:	e04e      	b.n	80027b4 <setPage+0x2f0>
 8002716:	bf00      	nop
 8002718:	20000314 	.word	0x20000314
 800271c:	20000318 	.word	0x20000318
 8002720:	20000004 	.word	0x20000004
 8002724:	40020400 	.word	0x40020400
 8002728:	20000438 	.word	0x20000438
 800272c:	20000430 	.word	0x20000430
 8002730:	20000014 	.word	0x20000014
 8002734:	20000018 	.word	0x20000018
 8002738:	88888889 	.word	0x88888889
 800273c:	2000001c 	.word	0x2000001c
 8002740:	8d3dcb09 	.word	0x8d3dcb09
 8002744:	24924925 	.word	0x24924925
 8002748:	08421085 	.word	0x08421085
 800274c:	aaaaaaab 	.word	0xaaaaaaab
 8002750:	20000330 	.word	0x20000330
 8002754:	20000010 	.word	0x20000010
 8002758:	2000032c 	.word	0x2000032c
 800275c:	2000000c 	.word	0x2000000c
	   		else if(screen == 3){
 8002760:	4b9a      	ldr	r3, [pc, #616]	; (80029cc <setPage+0x508>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b03      	cmp	r3, #3
 8002766:	d125      	bne.n	80027b4 <setPage+0x2f0>
	   			setAlarmDay++;
 8002768:	4b99      	ldr	r3, [pc, #612]	; (80029d0 <setPage+0x50c>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	3301      	adds	r3, #1
 800276e:	4a98      	ldr	r2, [pc, #608]	; (80029d0 <setPage+0x50c>)
 8002770:	6013      	str	r3, [r2, #0]
	   			setAlarmDay %= 7;
 8002772:	4b97      	ldr	r3, [pc, #604]	; (80029d0 <setPage+0x50c>)
 8002774:	6819      	ldr	r1, [r3, #0]
 8002776:	4b97      	ldr	r3, [pc, #604]	; (80029d4 <setPage+0x510>)
 8002778:	fba3 2301 	umull	r2, r3, r3, r1
 800277c:	1aca      	subs	r2, r1, r3
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	4413      	add	r3, r2
 8002782:	089a      	lsrs	r2, r3, #2
 8002784:	4613      	mov	r3, r2
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	1a9b      	subs	r3, r3, r2
 800278a:	1aca      	subs	r2, r1, r3
 800278c:	4b90      	ldr	r3, [pc, #576]	; (80029d0 <setPage+0x50c>)
 800278e:	601a      	str	r2, [r3, #0]
	   			ILI9341_Draw_Rectangle( 70,175, 200,40,  WHITE);
 8002790:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2328      	movs	r3, #40	; 0x28
 8002798:	22c8      	movs	r2, #200	; 0xc8
 800279a:	21af      	movs	r1, #175	; 0xaf
 800279c:	2046      	movs	r0, #70	; 0x46
 800279e:	f001 fbe5 	bl	8003f6c <ILI9341_Draw_Rectangle>
	   		break;
 80027a2:	e007      	b.n	80027b4 <setPage+0x2f0>
		   break;
 80027a4:	bf00      	nop
 80027a6:	e1e6      	b.n	8002b76 <setPage+0x6b2>
		   break;
 80027a8:	bf00      	nop
 80027aa:	e1e4      	b.n	8002b76 <setPage+0x6b2>
		   break;
 80027ac:	bf00      	nop
 80027ae:	e1e2      	b.n	8002b76 <setPage+0x6b2>
		   break;
 80027b0:	bf00      	nop
 80027b2:	e1e0      	b.n	8002b76 <setPage+0x6b2>
	   		break;
 80027b4:	bf00      	nop
	   switch(currentIndex){
 80027b6:	e1de      	b.n	8002b76 <setPage+0x6b2>

	   }
   }
   else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET && count - debounceTime > 1000){
 80027b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027bc:	4886      	ldr	r0, [pc, #536]	; (80029d8 <setPage+0x514>)
 80027be:	f001 ff79 	bl	80046b4 <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f040 80ab 	bne.w	8002920 <setPage+0x45c>
 80027ca:	4b84      	ldr	r3, [pc, #528]	; (80029dc <setPage+0x518>)
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4b84      	ldr	r3, [pc, #528]	; (80029e0 <setPage+0x51c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027d8:	f240 80a2 	bls.w	8002920 <setPage+0x45c>
	   debounceTime = count;
 80027dc:	4b7f      	ldr	r3, [pc, #508]	; (80029dc <setPage+0x518>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a7f      	ldr	r2, [pc, #508]	; (80029e0 <setPage+0x51c>)
 80027e2:	6013      	str	r3, [r2, #0]
	   switch(currentIndex){
 80027e4:	4b7f      	ldr	r3, [pc, #508]	; (80029e4 <setPage+0x520>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	f200 81c4 	bhi.w	8002b76 <setPage+0x6b2>
 80027ee:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <setPage+0x330>)
 80027f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f4:	08002809 	.word	0x08002809
 80027f8:	08002825 	.word	0x08002825
 80027fc:	08002841 	.word	0x08002841
 8002800:	08002879 	.word	0x08002879
 8002804:	080028c3 	.word	0x080028c3
	   case 0:
		   if(screen == 2){
 8002808:	4b70      	ldr	r3, [pc, #448]	; (80029cc <setPage+0x508>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b02      	cmp	r3, #2
 800280e:	d17d      	bne.n	800290c <setPage+0x448>
			   if(setDate > 0)
 8002810:	4b75      	ldr	r3, [pc, #468]	; (80029e8 <setPage+0x524>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d079      	beq.n	800290c <setPage+0x448>
				   setDate--;
 8002818:	4b73      	ldr	r3, [pc, #460]	; (80029e8 <setPage+0x524>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	3b01      	subs	r3, #1
 800281e:	4a72      	ldr	r2, [pc, #456]	; (80029e8 <setPage+0x524>)
 8002820:	6013      	str	r3, [r2, #0]
		   }

		   break;
 8002822:	e073      	b.n	800290c <setPage+0x448>
	   case 1:
		   if(screen == 2) {
 8002824:	4b69      	ldr	r3, [pc, #420]	; (80029cc <setPage+0x508>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d171      	bne.n	8002910 <setPage+0x44c>
			   if (setMonth > 0)
 800282c:	4b6f      	ldr	r3, [pc, #444]	; (80029ec <setPage+0x528>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d06d      	beq.n	8002910 <setPage+0x44c>
				   setMonth--;
 8002834:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <setPage+0x528>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3b01      	subs	r3, #1
 800283a:	4a6c      	ldr	r2, [pc, #432]	; (80029ec <setPage+0x528>)
 800283c:	6013      	str	r3, [r2, #0]
//			   ILI9341_Draw_Rectangle(75,200, 125,40,  WHITE);

		   }

		   break;
 800283e:	e067      	b.n	8002910 <setPage+0x44c>
	   case 2:
		   if(screen == 2) {
 8002840:	4b62      	ldr	r3, [pc, #392]	; (80029cc <setPage+0x508>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d109      	bne.n	800285c <setPage+0x398>
			   if(setYear > 0)
 8002848:	4b69      	ldr	r3, [pc, #420]	; (80029f0 <setPage+0x52c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d061      	beq.n	8002914 <setPage+0x450>
				   setYear--;
 8002850:	4b67      	ldr	r3, [pc, #412]	; (80029f0 <setPage+0x52c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3b01      	subs	r3, #1
 8002856:	4a66      	ldr	r2, [pc, #408]	; (80029f0 <setPage+0x52c>)
 8002858:	6013      	str	r3, [r2, #0]
					   setAlarmHour--;

						   }
		   }

		   break;
 800285a:	e05b      	b.n	8002914 <setPage+0x450>
		   else if(screen == 3){
 800285c:	4b5b      	ldr	r3, [pc, #364]	; (80029cc <setPage+0x508>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d157      	bne.n	8002914 <setPage+0x450>
			   if(setAlarmHour > 0){
 8002864:	4b63      	ldr	r3, [pc, #396]	; (80029f4 <setPage+0x530>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d053      	beq.n	8002914 <setPage+0x450>
					   setAlarmHour--;
 800286c:	4b61      	ldr	r3, [pc, #388]	; (80029f4 <setPage+0x530>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3b01      	subs	r3, #1
 8002872:	4a60      	ldr	r2, [pc, #384]	; (80029f4 <setPage+0x530>)
 8002874:	6013      	str	r3, [r2, #0]
		   break;
 8002876:	e04d      	b.n	8002914 <setPage+0x450>

	   case 3:
		   if(screen == 2){
 8002878:	4b54      	ldr	r3, [pc, #336]	; (80029cc <setPage+0x508>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d109      	bne.n	8002894 <setPage+0x3d0>
			   if(setHour > 0){
 8002880:	4b5d      	ldr	r3, [pc, #372]	; (80029f8 <setPage+0x534>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d047      	beq.n	8002918 <setPage+0x454>
	   			   setHour--;
 8002888:	4b5b      	ldr	r3, [pc, #364]	; (80029f8 <setPage+0x534>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	4a5a      	ldr	r2, [pc, #360]	; (80029f8 <setPage+0x534>)
 8002890:	6013      	str	r3, [r2, #0]
			   if(setAlarmMin > 0){
					   setAlarmMin--;
					   ILI9341_Draw_Rectangle(90,175, 125,30,  WHITE);
						   }
		   }
		   break;
 8002892:	e041      	b.n	8002918 <setPage+0x454>
		   else if(screen == 3){
 8002894:	4b4d      	ldr	r3, [pc, #308]	; (80029cc <setPage+0x508>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d13d      	bne.n	8002918 <setPage+0x454>
			   if(setAlarmMin > 0){
 800289c:	4b57      	ldr	r3, [pc, #348]	; (80029fc <setPage+0x538>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d039      	beq.n	8002918 <setPage+0x454>
					   setAlarmMin--;
 80028a4:	4b55      	ldr	r3, [pc, #340]	; (80029fc <setPage+0x538>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	4a54      	ldr	r2, [pc, #336]	; (80029fc <setPage+0x538>)
 80028ac:	6013      	str	r3, [r2, #0]
					   ILI9341_Draw_Rectangle(90,175, 125,30,  WHITE);
 80028ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	231e      	movs	r3, #30
 80028b6:	227d      	movs	r2, #125	; 0x7d
 80028b8:	21af      	movs	r1, #175	; 0xaf
 80028ba:	205a      	movs	r0, #90	; 0x5a
 80028bc:	f001 fb56 	bl	8003f6c <ILI9341_Draw_Rectangle>
		   break;
 80028c0:	e02a      	b.n	8002918 <setPage+0x454>


	   case 4:
	   		   if(screen == 2){
 80028c2:	4b42      	ldr	r3, [pc, #264]	; (80029cc <setPage+0x508>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d109      	bne.n	80028de <setPage+0x41a>
	   			   if(setMin > 0){
 80028ca:	4b4d      	ldr	r3, [pc, #308]	; (8002a00 <setPage+0x53c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d024      	beq.n	800291c <setPage+0x458>
	   	   			   setMin--;
 80028d2:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <setPage+0x53c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	4a49      	ldr	r2, [pc, #292]	; (8002a00 <setPage+0x53c>)
 80028da:	6013      	str	r3, [r2, #0]
						   }
			   ILI9341_Draw_Rectangle(60,200, 200,40,  WHITE);
//			   ILI9341_Draw_Rectangle(90,200, 125,40,  RED);
		   }

	   		   break;
 80028dc:	e01e      	b.n	800291c <setPage+0x458>
	   		else if(screen == 3){
 80028de:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <setPage+0x508>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d11a      	bne.n	800291c <setPage+0x458>
			   if(setAlarmDay > 0){
 80028e6:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <setPage+0x50c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d004      	beq.n	80028f8 <setPage+0x434>
					   setAlarmDay--;
 80028ee:	4b38      	ldr	r3, [pc, #224]	; (80029d0 <setPage+0x50c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	4a36      	ldr	r2, [pc, #216]	; (80029d0 <setPage+0x50c>)
 80028f6:	6013      	str	r3, [r2, #0]
			   ILI9341_Draw_Rectangle(60,200, 200,40,  WHITE);
 80028f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	2328      	movs	r3, #40	; 0x28
 8002900:	22c8      	movs	r2, #200	; 0xc8
 8002902:	21c8      	movs	r1, #200	; 0xc8
 8002904:	203c      	movs	r0, #60	; 0x3c
 8002906:	f001 fb31 	bl	8003f6c <ILI9341_Draw_Rectangle>
	   		   break;
 800290a:	e007      	b.n	800291c <setPage+0x458>
		   break;
 800290c:	bf00      	nop
 800290e:	e132      	b.n	8002b76 <setPage+0x6b2>
		   break;
 8002910:	bf00      	nop
 8002912:	e130      	b.n	8002b76 <setPage+0x6b2>
		   break;
 8002914:	bf00      	nop
 8002916:	e12e      	b.n	8002b76 <setPage+0x6b2>
		   break;
 8002918:	bf00      	nop
 800291a:	e12c      	b.n	8002b76 <setPage+0x6b2>
	   		   break;
 800291c:	bf00      	nop
	   switch(currentIndex){
 800291e:	e12a      	b.n	8002b76 <setPage+0x6b2>

	   }
   }
   else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTime > 100){
 8002920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002924:	482c      	ldr	r0, [pc, #176]	; (80029d8 <setPage+0x514>)
 8002926:	f001 fec5 	bl	80046b4 <HAL_GPIO_ReadPin>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	f040 80c0 	bne.w	8002ab2 <setPage+0x5ee>
 8002932:	4b2a      	ldr	r3, [pc, #168]	; (80029dc <setPage+0x518>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	4b2a      	ldr	r3, [pc, #168]	; (80029e0 <setPage+0x51c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b64      	cmp	r3, #100	; 0x64
 800293e:	f240 80b8 	bls.w	8002ab2 <setPage+0x5ee>
	   debounceTime = count;
 8002942:	4b26      	ldr	r3, [pc, #152]	; (80029dc <setPage+0x518>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <setPage+0x51c>)
 8002948:	6013      	str	r3, [r2, #0]
//	   else{

		   // update setting Time


		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 800294a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800294e:	4822      	ldr	r0, [pc, #136]	; (80029d8 <setPage+0x514>)
 8002950:	f001 feb0 	bl	80046b4 <HAL_GPIO_ReadPin>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d17d      	bne.n	8002a56 <setPage+0x592>
 800295a:	4b20      	ldr	r3, [pc, #128]	; (80029dc <setPage+0x518>)
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <setPage+0x540>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002968:	4293      	cmp	r3, r2
 800296a:	d974      	bls.n	8002a56 <setPage+0x592>


			   if(screen == 2){
 800296c:	4b17      	ldr	r3, [pc, #92]	; (80029cc <setPage+0x508>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d149      	bne.n	8002a08 <setPage+0x544>
			   DS3231_SetFullDate(setDate+1,setMonth+1, dayofweek(setDate + 1, setMonth + 1, setYear), setYear);
 8002974:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <setPage+0x524>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	b2db      	uxtb	r3, r3
 800297a:	3301      	adds	r3, #1
 800297c:	b2dc      	uxtb	r4, r3
 800297e:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <setPage+0x528>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	3301      	adds	r3, #1
 8002986:	b2dd      	uxtb	r5, r3
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <setPage+0x524>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	1c58      	adds	r0, r3, #1
 800298e:	4b17      	ldr	r3, [pc, #92]	; (80029ec <setPage+0x528>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	4a16      	ldr	r2, [pc, #88]	; (80029f0 <setPage+0x52c>)
 8002996:	6812      	ldr	r2, [r2, #0]
 8002998:	4619      	mov	r1, r3
 800299a:	f000 f90f 	bl	8002bbc <dayofweek>
 800299e:	4603      	mov	r3, r0
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <setPage+0x52c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4629      	mov	r1, r5
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7fe fa72 	bl	8000e94 <DS3231_SetFullDate>
			   DS3231_SetMinute(setMin);
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <setPage+0x53c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fa2f 	bl	8000e1a <DS3231_SetMinute>
			   DS3231_SetHour(setHour);
 80029bc:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <setPage+0x534>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fa14 	bl	8000df0 <DS3231_SetHour>
 80029c8:	e039      	b.n	8002a3e <setPage+0x57a>
 80029ca:	bf00      	nop
 80029cc:	20000004 	.word	0x20000004
 80029d0:	20000334 	.word	0x20000334
 80029d4:	24924925 	.word	0x24924925
 80029d8:	40020400 	.word	0x40020400
 80029dc:	20000314 	.word	0x20000314
 80029e0:	20000438 	.word	0x20000438
 80029e4:	20000430 	.word	0x20000430
 80029e8:	20000014 	.word	0x20000014
 80029ec:	20000018 	.word	0x20000018
 80029f0:	2000001c 	.word	0x2000001c
 80029f4:	20000330 	.word	0x20000330
 80029f8:	20000010 	.word	0x20000010
 80029fc:	2000032c 	.word	0x2000032c
 8002a00:	2000000c 	.word	0x2000000c
 8002a04:	20000444 	.word	0x20000444


			   }
			   else if (screen == 3){
 8002a08:	4b5d      	ldr	r3, [pc, #372]	; (8002b80 <setPage+0x6bc>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d116      	bne.n	8002a3e <setPage+0x57a>

				   DS3231_SetAlarm1Hour(setAlarmHour);
 8002a10:	4b5c      	ldr	r3, [pc, #368]	; (8002b84 <setPage+0x6c0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe f83d 	bl	8000a96 <DS3231_SetAlarm1Hour>
				   DS3231_SetAlarm1Minute(setAlarmMin);
 8002a1c:	4b5a      	ldr	r3, [pc, #360]	; (8002b88 <setPage+0x6c4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe f814 	bl	8000a50 <DS3231_SetAlarm1Minute>
				   DS3231_SetAlarm1Second(0);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fd ffee 	bl	8000a0a <DS3231_SetAlarm1Second>
				   DS3231_SetAlarm1Day(setAlarmDay+1);  // ใส่ day of week
 8002a2e:	4b57      	ldr	r3, [pc, #348]	; (8002b8c <setPage+0x6c8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	3301      	adds	r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fe f84f 	bl	8000adc <DS3231_SetAlarm1Day>
			   }


			   debounceTimeSave = count;
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <setPage+0x6cc>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a54      	ldr	r2, [pc, #336]	; (8002b94 <setPage+0x6d0>)
 8002a44:	6013      	str	r3, [r2, #0]


			   HAL_UART_Transmit(&huart3, (uint8_t *)"SAVED!!", sizeof("SAVED!!"), HAL_MAX_DELAY);
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	2208      	movs	r2, #8
 8002a4c:	4952      	ldr	r1, [pc, #328]	; (8002b98 <setPage+0x6d4>)
 8002a4e:	4853      	ldr	r0, [pc, #332]	; (8002b9c <setPage+0x6d8>)
 8002a50:	f005 fa88 	bl	8007f64 <HAL_UART_Transmit>
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8002a54:	e08d      	b.n	8002b72 <setPage+0x6ae>
		   }
		   else{

			   if (screen==2){
 8002a56:	4b4a      	ldr	r3, [pc, #296]	; (8002b80 <setPage+0x6bc>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d113      	bne.n	8002a86 <setPage+0x5c2>
			   currentIndex += 1;
 8002a5e:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <setPage+0x6dc>)
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b4e      	ldr	r3, [pc, #312]	; (8002ba0 <setPage+0x6dc>)
 8002a68:	701a      	strb	r2, [r3, #0]
			   currentIndex %= 5;
 8002a6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ba0 <setPage+0x6dc>)
 8002a6c:	781a      	ldrb	r2, [r3, #0]
 8002a6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ba4 <setPage+0x6e0>)
 8002a70:	fba3 1302 	umull	r1, r3, r3, r2
 8002a74:	0899      	lsrs	r1, r3, #2
 8002a76:	460b      	mov	r3, r1
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	4b47      	ldr	r3, [pc, #284]	; (8002ba0 <setPage+0x6dc>)
 8002a82:	701a      	strb	r2, [r3, #0]
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8002a84:	e075      	b.n	8002b72 <setPage+0x6ae>
			   }
			   else if(screen==3){
 8002a86:	4b3e      	ldr	r3, [pc, #248]	; (8002b80 <setPage+0x6bc>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d171      	bne.n	8002b72 <setPage+0x6ae>



				   currentIndex += 1;
 8002a8e:	4b44      	ldr	r3, [pc, #272]	; (8002ba0 <setPage+0x6dc>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <setPage+0x6dc>)
 8002a98:	701a      	strb	r2, [r3, #0]

				   if (currentIndex < 2 || currentIndex > 4){
 8002a9a:	4b41      	ldr	r3, [pc, #260]	; (8002ba0 <setPage+0x6dc>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d903      	bls.n	8002aaa <setPage+0x5e6>
 8002aa2:	4b3f      	ldr	r3, [pc, #252]	; (8002ba0 <setPage+0x6dc>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d963      	bls.n	8002b72 <setPage+0x6ae>
					   currentIndex = 2;
 8002aaa:	4b3d      	ldr	r3, [pc, #244]	; (8002ba0 <setPage+0x6dc>)
 8002aac:	2202      	movs	r2, #2
 8002aae:	701a      	strb	r2, [r3, #0]
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8002ab0:	e05f      	b.n	8002b72 <setPage+0x6ae>

//
//	   }
   }

   else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && count - debounceTime > 200 ){
 8002ab2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ab6:	483c      	ldr	r0, [pc, #240]	; (8002ba8 <setPage+0x6e4>)
 8002ab8:	f001 fdfc 	bl	80046b4 <HAL_GPIO_ReadPin>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d159      	bne.n	8002b76 <setPage+0x6b2>
 8002ac2:	4b33      	ldr	r3, [pc, #204]	; (8002b90 <setPage+0x6cc>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4b39      	ldr	r3, [pc, #228]	; (8002bac <setPage+0x6e8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2bc8      	cmp	r3, #200	; 0xc8
 8002ace:	d952      	bls.n	8002b76 <setPage+0x6b2>
	   debounceTime = count;
 8002ad0:	4b2f      	ldr	r3, [pc, #188]	; (8002b90 <setPage+0x6cc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a35      	ldr	r2, [pc, #212]	; (8002bac <setPage+0x6e8>)
 8002ad6:	6013      	str	r3, [r2, #0]
	   ILI9341_Fill_Screen(WHITE);
 8002ad8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002adc:	f001 f946 	bl	8003d6c <ILI9341_Fill_Screen>
	   clicktime = count;
 8002ae0:	4b2b      	ldr	r3, [pc, #172]	; (8002b90 <setPage+0x6cc>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a32      	ldr	r2, [pc, #200]	; (8002bb0 <setPage+0x6ec>)
 8002ae6:	6013      	str	r3, [r2, #0]

	   while (count - clicktime < 1000){
 8002ae8:	e00e      	b.n	8002b08 <setPage+0x644>
		   char message[50];
		   sprintf(message, "%d %d\r\n", clicktime, count);
 8002aea:	4b31      	ldr	r3, [pc, #196]	; (8002bb0 <setPage+0x6ec>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <setPage+0x6cc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	1d38      	adds	r0, r7, #4
 8002af4:	492f      	ldr	r1, [pc, #188]	; (8002bb4 <setPage+0x6f0>)
 8002af6:	f006 fc03 	bl	8009300 <siprintf>
		   HAL_UART_Transmit(&huart3, (uint8_t *)message, sizeof(message), HAL_MAX_DELAY);
 8002afa:	1d39      	adds	r1, r7, #4
 8002afc:	f04f 33ff 	mov.w	r3, #4294967295
 8002b00:	2232      	movs	r2, #50	; 0x32
 8002b02:	4826      	ldr	r0, [pc, #152]	; (8002b9c <setPage+0x6d8>)
 8002b04:	f005 fa2e 	bl	8007f64 <HAL_UART_Transmit>
	   while (count - clicktime < 1000){
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <setPage+0x6cc>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <setPage+0x6ec>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b16:	d3e8      	bcc.n	8002aea <setPage+0x626>
	   }

	   if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && count - debounceTime >3000) {
 8002b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b1c:	4822      	ldr	r0, [pc, #136]	; (8002ba8 <setPage+0x6e4>)
 8002b1e:	f001 fdc9 	bl	80046b4 <HAL_GPIO_ReadPin>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d113      	bne.n	8002b50 <setPage+0x68c>
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <setPage+0x6cc>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <setPage+0x6e8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d90a      	bls.n	8002b50 <setPage+0x68c>
		   screen--;
 8002b3a:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <setPage+0x6bc>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b0f      	ldr	r3, [pc, #60]	; (8002b80 <setPage+0x6bc>)
 8002b44:	701a      	strb	r2, [r3, #0]
		   debounceTime = count;
 8002b46:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <setPage+0x6cc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a18      	ldr	r2, [pc, #96]	; (8002bac <setPage+0x6e8>)
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	e012      	b.n	8002b76 <setPage+0x6b2>
	   }
	   else {
		   enterStateFlag = 0;
 8002b50:	4b19      	ldr	r3, [pc, #100]	; (8002bb8 <setPage+0x6f4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
		   screen++;
 8002b56:	4b0a      	ldr	r3, [pc, #40]	; (8002b80 <setPage+0x6bc>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <setPage+0x6bc>)
 8002b60:	701a      	strb	r2, [r3, #0]
		   if (screen > 4)
 8002b62:	4b07      	ldr	r3, [pc, #28]	; (8002b80 <setPage+0x6bc>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d905      	bls.n	8002b76 <setPage+0x6b2>
			   screen = 1;
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <setPage+0x6bc>)
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	701a      	strb	r2, [r3, #0]
//		   setHour = param1;
//		   setMin = param2;
//		   setSec = param3;
//	   }
   }
}
 8002b70:	e001      	b.n	8002b76 <setPage+0x6b2>
		   if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && count - debounceTimeSave > 3000){
 8002b72:	bf00      	nop
 8002b74:	e7ff      	b.n	8002b76 <setPage+0x6b2>
}
 8002b76:	bf00      	nop
 8002b78:	3738      	adds	r7, #56	; 0x38
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000004 	.word	0x20000004
 8002b84:	20000330 	.word	0x20000330
 8002b88:	2000032c 	.word	0x2000032c
 8002b8c:	20000334 	.word	0x20000334
 8002b90:	20000314 	.word	0x20000314
 8002b94:	20000444 	.word	0x20000444
 8002b98:	0800b620 	.word	0x0800b620
 8002b9c:	200005a4 	.word	0x200005a4
 8002ba0:	20000430 	.word	0x20000430
 8002ba4:	cccccccd 	.word	0xcccccccd
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	20000438 	.word	0x20000438
 8002bb0:	20000434 	.word	0x20000434
 8002bb4:	0800b628 	.word	0x0800b628
 8002bb8:	20000440 	.word	0x20000440

08002bbc <dayofweek>:


int dayofweek(int d, int m, int y)
{
 8002bbc:	b4b0      	push	{r4, r5, r7}
 8002bbe:	b091      	sub	sp, #68	; 0x44
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
	int t[] = { 0, 3, 2, 5, 0, 3, 5, 1, 4, 6, 2, 4 };
 8002bc8:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <dayofweek+0x98>)
 8002bca:	f107 0410 	add.w	r4, r7, #16
 8002bce:	461d      	mov	r5, r3
 8002bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002bdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// if month is less than 3 reduce year by 1
	if (m < 3)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	dc02      	bgt.n	8002bec <dayofweek+0x30>
		y -= 1;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	607b      	str	r3, [r7, #4]

	return ((y + y / 4 - y / 100 + y / 400 + t[m - 1] + d) % 7);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da00      	bge.n	8002bf4 <dayofweek+0x38>
 8002bf2:	3303      	adds	r3, #3
 8002bf4:	109b      	asrs	r3, r3, #2
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	441a      	add	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4916      	ldr	r1, [pc, #88]	; (8002c58 <dayofweek+0x9c>)
 8002c00:	fb81 0103 	smull	r0, r1, r1, r3
 8002c04:	1149      	asrs	r1, r1, #5
 8002c06:	17db      	asrs	r3, r3, #31
 8002c08:	1a5b      	subs	r3, r3, r1
 8002c0a:	441a      	add	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4912      	ldr	r1, [pc, #72]	; (8002c58 <dayofweek+0x9c>)
 8002c10:	fb81 0103 	smull	r0, r1, r1, r3
 8002c14:	11c9      	asrs	r1, r1, #7
 8002c16:	17db      	asrs	r3, r3, #31
 8002c18:	1acb      	subs	r3, r1, r3
 8002c1a:	441a      	add	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	3340      	adds	r3, #64	; 0x40
 8002c24:	443b      	add	r3, r7
 8002c26:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8002c2a:	441a      	add	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	441a      	add	r2, r3
 8002c30:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <dayofweek+0xa0>)
 8002c32:	fb83 1302 	smull	r1, r3, r3, r2
 8002c36:	4413      	add	r3, r2
 8002c38:	1099      	asrs	r1, r3, #2
 8002c3a:	17d3      	asrs	r3, r2, #31
 8002c3c:	1ac9      	subs	r1, r1, r3
 8002c3e:	460b      	mov	r3, r1
 8002c40:	00db      	lsls	r3, r3, #3
 8002c42:	1a5b      	subs	r3, r3, r1
 8002c44:	1ad1      	subs	r1, r2, r3
 8002c46:	460b      	mov	r3, r1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3744      	adds	r7, #68	; 0x44
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bcb0      	pop	{r4, r5, r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	0800b630 	.word	0x0800b630
 8002c58:	51eb851f 	.word	0x51eb851f
 8002c5c:	92492493 	.word	0x92492493

08002c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8002c64:	e7fe      	b.n	8002c64 <Error_Handler+0x4>
	...

08002c68 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_RNG_Init+0x20>)
 8002c6e:	4a07      	ldr	r2, [pc, #28]	; (8002c8c <MX_RNG_Init+0x24>)
 8002c70:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <MX_RNG_Init+0x20>)
 8002c74:	f003 fc4e 	bl	8006514 <HAL_RNG_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002c7e:	f7ff ffef 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000448 	.word	0x20000448
 8002c8c:	50060800 	.word	0x50060800

08002c90 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b0a8      	sub	sp, #160	; 0xa0
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c98:	f107 0310 	add.w	r3, r7, #16
 8002c9c:	2290      	movs	r2, #144	; 0x90
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f006 fb90 	bl	80093c6 <memset>
  if(rngHandle->Instance==RNG)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a11      	ldr	r2, [pc, #68]	; (8002cf0 <HAL_RNG_MspInit+0x60>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d11b      	bne.n	8002ce8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002cb0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cb4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f002 ffff 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002ccc:	f7ff ffc8 	bl	8002c60 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_RNG_MspInit+0x64>)
 8002cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd4:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_RNG_MspInit+0x64>)
 8002cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cda:	6353      	str	r3, [r2, #52]	; 0x34
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RNG_MspInit+0x64>)
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002ce8:	bf00      	nop
 8002cea:	37a0      	adds	r7, #160	; 0xa0
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	50060800 	.word	0x50060800
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <MX_SPI5_Init+0x78>)
 8002d00:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d08:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d10:	4b16      	ldr	r3, [pc, #88]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d12:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d16:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d18:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d1e:	4b13      	ldr	r3, [pc, #76]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d2a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d46:	2207      	movs	r2, #7
 8002d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002d56:	4805      	ldr	r0, [pc, #20]	; (8002d6c <MX_SPI5_Init+0x74>)
 8002d58:	f003 fc71 	bl	800663e <HAL_SPI_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002d62:	f7ff ff7d 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000458 	.word	0x20000458
 8002d70:	40015000 	.word	0x40015000

08002d74 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	; 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_SPI_MspInit+0x7c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d128      	bne.n	8002de8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002d96:	4b17      	ldr	r3, [pc, #92]	; (8002df4 <HAL_SPI_MspInit+0x80>)
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	4a16      	ldr	r2, [pc, #88]	; (8002df4 <HAL_SPI_MspInit+0x80>)
 8002d9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002da0:	6453      	str	r3, [r2, #68]	; 0x44
 8002da2:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <HAL_SPI_MspInit+0x80>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_SPI_MspInit+0x80>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_SPI_MspInit+0x80>)
 8002db4:	f043 0320 	orr.w	r3, r3, #32
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_SPI_MspInit+0x80>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002dc6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002dd8:	2305      	movs	r3, #5
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_SPI_MspInit+0x84>)
 8002de4:	f001 faba 	bl	800435c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002de8:	bf00      	nop
 8002dea:	3728      	adds	r7, #40	; 0x28
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40015000 	.word	0x40015000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40021400 	.word	0x40021400

08002dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_MspInit+0x44>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	4a0e      	ldr	r2, [pc, #56]	; (8002e40 <HAL_MspInit+0x44>)
 8002e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <HAL_MspInit+0x44>)
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <HAL_MspInit+0x44>)
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1e:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <HAL_MspInit+0x44>)
 8002e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e24:	6453      	str	r3, [r2, #68]	; 0x44
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_MspInit+0x44>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40023800 	.word	0x40023800

08002e44 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e48:	f001 f932 	bl	80040b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	count++;
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <TIM2_IRQHandler+0x18>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	4a03      	ldr	r2, [pc, #12]	; (8002e68 <TIM2_IRQHandler+0x18>)
 8002e5c:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002e5e:	4803      	ldr	r0, [pc, #12]	; (8002e6c <TIM2_IRQHandler+0x1c>)
 8002e60:	f004 f8bf 	bl	8006fe2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20000314 	.word	0x20000314
 8002e6c:	2000050c 	.word	0x2000050c

08002e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(DS3231_IsAlarm1Triggered()){
 8002e74:	f7fd feb7 	bl	8000be6 <DS3231_IsAlarm1Triggered>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <EXTI15_10_IRQHandler+0x18>
			alarmtrigger = 1;
 8002e7e:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <EXTI15_10_IRQHandler+0x24>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]
			DS3231_ClearAlarm1Flag();
 8002e84:	f7fd fdab 	bl	80009de <DS3231_ClearAlarm1Flag>
		}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e88:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e8c:	f001 fc44 	bl	8004718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000338 	.word	0x20000338

08002e98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
	return 1;
 8002e9c:	2301      	movs	r3, #1
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <_kill>:

int _kill(int pid, int sig)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002eb2:	f006 fadb 	bl	800946c <__errno>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2216      	movs	r2, #22
 8002eba:	601a      	str	r2, [r3, #0]
	return -1;
 8002ebc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <_exit>:

void _exit (int status)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff ffe7 	bl	8002ea8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002eda:	e7fe      	b.n	8002eda <_exit+0x12>

08002edc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e00a      	b.n	8002f04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eee:	f3af 8000 	nop.w
 8002ef2:	4601      	mov	r1, r0
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	60ba      	str	r2, [r7, #8]
 8002efa:	b2ca      	uxtb	r2, r1
 8002efc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	3301      	adds	r3, #1
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dbf0      	blt.n	8002eee <_read+0x12>
	}

return len;
 8002f0c:	687b      	ldr	r3, [r7, #4]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b086      	sub	sp, #24
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	e009      	b.n	8002f3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	60ba      	str	r2, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	dbf1      	blt.n	8002f28 <_write+0x12>
	}
	return len;
 8002f44:	687b      	ldr	r3, [r7, #4]
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3718      	adds	r7, #24
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_close>:

int _close(int file)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
	return -1;
 8002f56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
 8002f6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f76:	605a      	str	r2, [r3, #4]
	return 0;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <_isatty>:

int _isatty(int file)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
	return 1;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
	return 0;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc0:	4a14      	ldr	r2, [pc, #80]	; (8003014 <_sbrk+0x5c>)
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <_sbrk+0x60>)
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fcc:	4b13      	ldr	r3, [pc, #76]	; (800301c <_sbrk+0x64>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <_sbrk+0x64>)
 8002fd6:	4a12      	ldr	r2, [pc, #72]	; (8003020 <_sbrk+0x68>)
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d207      	bcs.n	8002ff8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fe8:	f006 fa40 	bl	800946c <__errno>
 8002fec:	4603      	mov	r3, r0
 8002fee:	220c      	movs	r2, #12
 8002ff0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ff6:	e009      	b.n	800300c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <_sbrk+0x64>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ffe:	4b07      	ldr	r3, [pc, #28]	; (800301c <_sbrk+0x64>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <_sbrk+0x64>)
 8003008:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	4618      	mov	r0, r3
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20080000 	.word	0x20080000
 8003018:	00000400 	.word	0x00000400
 800301c:	200004bc 	.word	0x200004bc
 8003020:	20000808 	.word	0x20000808

08003024 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <SystemInit+0x5c>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302e:	4a14      	ldr	r2, [pc, #80]	; (8003080 <SystemInit+0x5c>)
 8003030:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003034:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003038:	4b12      	ldr	r3, [pc, #72]	; (8003084 <SystemInit+0x60>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a11      	ldr	r2, [pc, #68]	; (8003084 <SystemInit+0x60>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <SystemInit+0x60>)
 8003046:	2200      	movs	r2, #0
 8003048:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800304a:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <SystemInit+0x60>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	490d      	ldr	r1, [pc, #52]	; (8003084 <SystemInit+0x60>)
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <SystemInit+0x64>)
 8003052:	4013      	ands	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003056:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <SystemInit+0x60>)
 8003058:	4a0c      	ldr	r2, [pc, #48]	; (800308c <SystemInit+0x68>)
 800305a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <SystemInit+0x60>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a08      	ldr	r2, [pc, #32]	; (8003084 <SystemInit+0x60>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003066:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <SystemInit+0x60>)
 800306a:	2200      	movs	r2, #0
 800306c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800306e:	4b04      	ldr	r3, [pc, #16]	; (8003080 <SystemInit+0x5c>)
 8003070:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003074:	609a      	str	r2, [r3, #8]
#endif
}
 8003076:	bf00      	nop
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000ed00 	.word	0xe000ed00
 8003084:	40023800 	.word	0x40023800
 8003088:	fef6ffff 	.word	0xfef6ffff
 800308c:	24003010 	.word	0x24003010

08003090 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003096:	f107 0310 	add.w	r3, r7, #16
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
 800309e:	605a      	str	r2, [r3, #4]
 80030a0:	609a      	str	r2, [r3, #8]
 80030a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030a4:	1d3b      	adds	r3, r7, #4
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030ae:	4b20      	ldr	r3, [pc, #128]	; (8003130 <MX_TIM1_Init+0xa0>)
 80030b0:	4a20      	ldr	r2, [pc, #128]	; (8003134 <MX_TIM1_Init+0xa4>)
 80030b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 80030b4:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <MX_TIM1_Init+0xa0>)
 80030b6:	f242 720f 	movw	r2, #9999	; 0x270f
 80030ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <MX_TIM1_Init+0xa0>)
 80030be:	2200      	movs	r2, #0
 80030c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80030c2:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <MX_TIM1_Init+0xa0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80030c8:	4b19      	ldr	r3, [pc, #100]	; (8003130 <MX_TIM1_Init+0xa0>)
 80030ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030d0:	4b17      	ldr	r3, [pc, #92]	; (8003130 <MX_TIM1_Init+0xa0>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030d6:	4b16      	ldr	r3, [pc, #88]	; (8003130 <MX_TIM1_Init+0xa0>)
 80030d8:	2200      	movs	r2, #0
 80030da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030dc:	4814      	ldr	r0, [pc, #80]	; (8003130 <MX_TIM1_Init+0xa0>)
 80030de:	f003 fe4f 	bl	8006d80 <HAL_TIM_Base_Init>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80030e8:	f7ff fdba 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030f2:	f107 0310 	add.w	r3, r7, #16
 80030f6:	4619      	mov	r1, r3
 80030f8:	480d      	ldr	r0, [pc, #52]	; (8003130 <MX_TIM1_Init+0xa0>)
 80030fa:	f004 f9a5 	bl	8007448 <HAL_TIM_ConfigClockSource>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003104:	f7ff fdac 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003108:	2300      	movs	r3, #0
 800310a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800310c:	2300      	movs	r3, #0
 800310e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003110:	2300      	movs	r3, #0
 8003112:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003114:	1d3b      	adds	r3, r7, #4
 8003116:	4619      	mov	r1, r3
 8003118:	4805      	ldr	r0, [pc, #20]	; (8003130 <MX_TIM1_Init+0xa0>)
 800311a:	f004 fe29 	bl	8007d70 <HAL_TIMEx_MasterConfigSynchronization>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003124:	f7ff fd9c 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003128:	bf00      	nop
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	200004c0 	.word	0x200004c0
 8003134:	40010000 	.word	0x40010000

08003138 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08e      	sub	sp, #56	; 0x38
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800313e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	609a      	str	r2, [r3, #8]
 800314a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314c:	f107 031c 	add.w	r3, r7, #28
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003158:	463b      	mov	r3, r7
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	605a      	str	r2, [r3, #4]
 8003160:	609a      	str	r2, [r3, #8]
 8003162:	60da      	str	r2, [r3, #12]
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	615a      	str	r2, [r3, #20]
 8003168:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800316a:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <MX_TIM2_Init+0xe8>)
 800316c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003170:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 8003172:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <MX_TIM2_Init+0xe8>)
 8003174:	2263      	movs	r2, #99	; 0x63
 8003176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003178:	4b29      	ldr	r3, [pc, #164]	; (8003220 <MX_TIM2_Init+0xe8>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <MX_TIM2_Init+0xe8>)
 8003180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003184:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003186:	4b26      	ldr	r3, [pc, #152]	; (8003220 <MX_TIM2_Init+0xe8>)
 8003188:	2200      	movs	r2, #0
 800318a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <MX_TIM2_Init+0xe8>)
 800318e:	2200      	movs	r2, #0
 8003190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003192:	4823      	ldr	r0, [pc, #140]	; (8003220 <MX_TIM2_Init+0xe8>)
 8003194:	f003 fdf4 	bl	8006d80 <HAL_TIM_Base_Init>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800319e:	f7ff fd5f 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031ac:	4619      	mov	r1, r3
 80031ae:	481c      	ldr	r0, [pc, #112]	; (8003220 <MX_TIM2_Init+0xe8>)
 80031b0:	f004 f94a 	bl	8007448 <HAL_TIM_ConfigClockSource>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80031ba:	f7ff fd51 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80031be:	4818      	ldr	r0, [pc, #96]	; (8003220 <MX_TIM2_Init+0xe8>)
 80031c0:	f003 feae 	bl	8006f20 <HAL_TIM_PWM_Init>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80031ca:	f7ff fd49 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031d2:	2300      	movs	r3, #0
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80031d6:	f107 031c 	add.w	r3, r7, #28
 80031da:	4619      	mov	r1, r3
 80031dc:	4810      	ldr	r0, [pc, #64]	; (8003220 <MX_TIM2_Init+0xe8>)
 80031de:	f004 fdc7 	bl	8007d70 <HAL_TIMEx_MasterConfigSynchronization>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80031e8:	f7ff fd3a 	bl	8002c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ec:	2360      	movs	r3, #96	; 0x60
 80031ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031fc:	463b      	mov	r3, r7
 80031fe:	2208      	movs	r2, #8
 8003200:	4619      	mov	r1, r3
 8003202:	4807      	ldr	r0, [pc, #28]	; (8003220 <MX_TIM2_Init+0xe8>)
 8003204:	f004 f80c 	bl	8007220 <HAL_TIM_PWM_ConfigChannel>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800320e:	f7ff fd27 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003212:	4803      	ldr	r0, [pc, #12]	; (8003220 <MX_TIM2_Init+0xe8>)
 8003214:	f000 f8a0 	bl	8003358 <HAL_TIM_MspPostInit>

}
 8003218:	bf00      	nop
 800321a:	3738      	adds	r7, #56	; 0x38
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	2000050c 	.word	0x2000050c

08003224 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800322a:	f107 0310 	add.w	r3, r7, #16
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	605a      	str	r2, [r3, #4]
 8003234:	609a      	str	r2, [r3, #8]
 8003236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003242:	4b1d      	ldr	r3, [pc, #116]	; (80032b8 <MX_TIM3_Init+0x94>)
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <MX_TIM3_Init+0x98>)
 8003246:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8003248:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <MX_TIM3_Init+0x94>)
 800324a:	2263      	movs	r2, #99	; 0x63
 800324c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <MX_TIM3_Init+0x94>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8003254:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <MX_TIM3_Init+0x94>)
 8003256:	f240 32e7 	movw	r2, #999	; 0x3e7
 800325a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <MX_TIM3_Init+0x94>)
 800325e:	2200      	movs	r2, #0
 8003260:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <MX_TIM3_Init+0x94>)
 8003264:	2200      	movs	r2, #0
 8003266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003268:	4813      	ldr	r0, [pc, #76]	; (80032b8 <MX_TIM3_Init+0x94>)
 800326a:	f003 fd89 	bl	8006d80 <HAL_TIM_Base_Init>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003274:	f7ff fcf4 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800327c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800327e:	f107 0310 	add.w	r3, r7, #16
 8003282:	4619      	mov	r1, r3
 8003284:	480c      	ldr	r0, [pc, #48]	; (80032b8 <MX_TIM3_Init+0x94>)
 8003286:	f004 f8df 	bl	8007448 <HAL_TIM_ConfigClockSource>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003290:	f7ff fce6 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003294:	2300      	movs	r3, #0
 8003296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800329c:	1d3b      	adds	r3, r7, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4805      	ldr	r0, [pc, #20]	; (80032b8 <MX_TIM3_Init+0x94>)
 80032a2:	f004 fd65 	bl	8007d70 <HAL_TIMEx_MasterConfigSynchronization>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80032ac:	f7ff fcd8 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032b0:	bf00      	nop
 80032b2:	3720      	adds	r7, #32
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000558 	.word	0x20000558
 80032bc:	40000400 	.word	0x40000400

080032c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1f      	ldr	r2, [pc, #124]	; (800334c <HAL_TIM_Base_MspInit+0x8c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10c      	bne.n	80032ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <HAL_TIM_Base_MspInit+0x90>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	4a1e      	ldr	r2, [pc, #120]	; (8003350 <HAL_TIM_Base_MspInit+0x90>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6453      	str	r3, [r2, #68]	; 0x44
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <HAL_TIM_Base_MspInit+0x90>)
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80032ea:	e02a      	b.n	8003342 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f4:	d114      	bne.n	8003320 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032f6:	4b16      	ldr	r3, [pc, #88]	; (8003350 <HAL_TIM_Base_MspInit+0x90>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a15      	ldr	r2, [pc, #84]	; (8003350 <HAL_TIM_Base_MspInit+0x90>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b13      	ldr	r3, [pc, #76]	; (8003350 <HAL_TIM_Base_MspInit+0x90>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	201c      	movs	r0, #28
 8003314:	f000 ffeb 	bl	80042ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003318:	201c      	movs	r0, #28
 800331a:	f001 f804 	bl	8004326 <HAL_NVIC_EnableIRQ>
}
 800331e:	e010      	b.n	8003342 <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <HAL_TIM_Base_MspInit+0x94>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d10b      	bne.n	8003342 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800332a:	4b09      	ldr	r3, [pc, #36]	; (8003350 <HAL_TIM_Base_MspInit+0x90>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a08      	ldr	r2, [pc, #32]	; (8003350 <HAL_TIM_Base_MspInit+0x90>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b06      	ldr	r3, [pc, #24]	; (8003350 <HAL_TIM_Base_MspInit+0x90>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40010000 	.word	0x40010000
 8003350:	40023800 	.word	0x40023800
 8003354:	40000400 	.word	0x40000400

08003358 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003360:	f107 030c 	add.w	r3, r7, #12
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003378:	d11c      	bne.n	80033b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <HAL_TIM_MspPostInit+0x64>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a0f      	ldr	r2, [pc, #60]	; (80033bc <HAL_TIM_MspPostInit+0x64>)
 8003380:	f043 0302 	orr.w	r3, r3, #2
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_TIM_MspPostInit+0x64>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003396:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033a4:	2301      	movs	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a8:	f107 030c 	add.w	r3, r7, #12
 80033ac:	4619      	mov	r1, r3
 80033ae:	4804      	ldr	r0, [pc, #16]	; (80033c0 <HAL_TIM_MspPostInit+0x68>)
 80033b0:	f000 ffd4 	bl	800435c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80033b4:	bf00      	nop
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40020400 	.word	0x40020400

080033c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <MX_USART3_UART_Init+0x58>)
 80033ca:	4a15      	ldr	r2, [pc, #84]	; (8003420 <MX_USART3_UART_Init+0x5c>)
 80033cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <MX_USART3_UART_Init+0x58>)
 80033d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <MX_USART3_UART_Init+0x58>)
 80033d8:	2200      	movs	r2, #0
 80033da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80033dc:	4b0f      	ldr	r3, [pc, #60]	; (800341c <MX_USART3_UART_Init+0x58>)
 80033de:	2200      	movs	r2, #0
 80033e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <MX_USART3_UART_Init+0x58>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80033e8:	4b0c      	ldr	r3, [pc, #48]	; (800341c <MX_USART3_UART_Init+0x58>)
 80033ea:	220c      	movs	r2, #12
 80033ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033ee:	4b0b      	ldr	r3, [pc, #44]	; (800341c <MX_USART3_UART_Init+0x58>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <MX_USART3_UART_Init+0x58>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <MX_USART3_UART_Init+0x58>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003400:	4b06      	ldr	r3, [pc, #24]	; (800341c <MX_USART3_UART_Init+0x58>)
 8003402:	2200      	movs	r2, #0
 8003404:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003406:	4805      	ldr	r0, [pc, #20]	; (800341c <MX_USART3_UART_Init+0x58>)
 8003408:	f004 fd5e 	bl	8007ec8 <HAL_UART_Init>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003412:	f7ff fc25 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200005a4 	.word	0x200005a4
 8003420:	40004800 	.word	0x40004800

08003424 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003428:	4b14      	ldr	r3, [pc, #80]	; (800347c <MX_USART6_UART_Init+0x58>)
 800342a:	4a15      	ldr	r2, [pc, #84]	; (8003480 <MX_USART6_UART_Init+0x5c>)
 800342c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800342e:	4b13      	ldr	r3, [pc, #76]	; (800347c <MX_USART6_UART_Init+0x58>)
 8003430:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003434:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <MX_USART6_UART_Init+0x58>)
 8003438:	2200      	movs	r2, #0
 800343a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800343c:	4b0f      	ldr	r3, [pc, #60]	; (800347c <MX_USART6_UART_Init+0x58>)
 800343e:	2200      	movs	r2, #0
 8003440:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <MX_USART6_UART_Init+0x58>)
 8003444:	2200      	movs	r2, #0
 8003446:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003448:	4b0c      	ldr	r3, [pc, #48]	; (800347c <MX_USART6_UART_Init+0x58>)
 800344a:	220c      	movs	r2, #12
 800344c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <MX_USART6_UART_Init+0x58>)
 8003450:	2200      	movs	r2, #0
 8003452:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003454:	4b09      	ldr	r3, [pc, #36]	; (800347c <MX_USART6_UART_Init+0x58>)
 8003456:	2200      	movs	r2, #0
 8003458:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800345a:	4b08      	ldr	r3, [pc, #32]	; (800347c <MX_USART6_UART_Init+0x58>)
 800345c:	2200      	movs	r2, #0
 800345e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <MX_USART6_UART_Init+0x58>)
 8003462:	2200      	movs	r2, #0
 8003464:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003466:	4805      	ldr	r0, [pc, #20]	; (800347c <MX_USART6_UART_Init+0x58>)
 8003468:	f004 fd2e 	bl	8007ec8 <HAL_UART_Init>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8003472:	f7ff fbf5 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003476:	bf00      	nop
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	2000062c 	.word	0x2000062c
 8003480:	40011400 	.word	0x40011400

08003484 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b0b0      	sub	sp, #192	; 0xc0
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800349c:	f107 031c 	add.w	r3, r7, #28
 80034a0:	2290      	movs	r2, #144	; 0x90
 80034a2:	2100      	movs	r1, #0
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 ff8e 	bl	80093c6 <memset>
  if(uartHandle->Instance==USART3)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a43      	ldr	r2, [pc, #268]	; (80035bc <HAL_UART_MspInit+0x138>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d13d      	bne.n	8003530 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80034b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80034ba:	2300      	movs	r3, #0
 80034bc:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034be:	f107 031c 	add.w	r3, r7, #28
 80034c2:	4618      	mov	r0, r3
 80034c4:	f002 fbfe 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80034ce:	f7ff fbc7 	bl	8002c60 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80034d2:	4b3b      	ldr	r3, [pc, #236]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a3a      	ldr	r2, [pc, #232]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 80034d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ea:	4b35      	ldr	r3, [pc, #212]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	4a34      	ldr	r2, [pc, #208]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 80034f0:	f043 0308 	orr.w	r3, r3, #8
 80034f4:	6313      	str	r3, [r2, #48]	; 0x30
 80034f6:	4b32      	ldr	r3, [pc, #200]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003502:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2302      	movs	r3, #2
 800350c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003510:	2300      	movs	r3, #0
 8003512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003516:	2303      	movs	r3, #3
 8003518:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800351c:	2307      	movs	r3, #7
 800351e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003522:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003526:	4619      	mov	r1, r3
 8003528:	4826      	ldr	r0, [pc, #152]	; (80035c4 <HAL_UART_MspInit+0x140>)
 800352a:	f000 ff17 	bl	800435c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800352e:	e040      	b.n	80035b2 <HAL_UART_MspInit+0x12e>
  else if(uartHandle->Instance==USART6)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a24      	ldr	r2, [pc, #144]	; (80035c8 <HAL_UART_MspInit+0x144>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d13b      	bne.n	80035b2 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800353a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800353e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003540:	2300      	movs	r3, #0
 8003542:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003544:	f107 031c 	add.w	r3, r7, #28
 8003548:	4618      	mov	r0, r3
 800354a:	f002 fbbb 	bl	8005cc4 <HAL_RCCEx_PeriphCLKConfig>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8003554:	f7ff fb84 	bl	8002c60 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003558:	4b19      	ldr	r3, [pc, #100]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 800355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355c:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 800355e:	f043 0320 	orr.w	r3, r3, #32
 8003562:	6453      	str	r3, [r2, #68]	; 0x44
 8003564:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f003 0320 	and.w	r3, r3, #32
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003570:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 8003576:	f043 0304 	orr.w	r3, r3, #4
 800357a:	6313      	str	r3, [r2, #48]	; 0x30
 800357c:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <HAL_UART_MspInit+0x13c>)
 800357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003588:	23c0      	movs	r3, #192	; 0xc0
 800358a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2302      	movs	r3, #2
 8003590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800359a:	2303      	movs	r3, #3
 800359c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80035a0:	2308      	movs	r3, #8
 80035a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035aa:	4619      	mov	r1, r3
 80035ac:	4807      	ldr	r0, [pc, #28]	; (80035cc <HAL_UART_MspInit+0x148>)
 80035ae:	f000 fed5 	bl	800435c <HAL_GPIO_Init>
}
 80035b2:	bf00      	nop
 80035b4:	37c0      	adds	r7, #192	; 0xc0
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	40004800 	.word	0x40004800
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40020c00 	.word	0x40020c00
 80035c8:	40011400 	.word	0x40011400
 80035cc:	40020800 	.word	0x40020800

080035d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003608 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035d6:	e003      	b.n	80035e0 <LoopCopyDataInit>

080035d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035d8:	4b0c      	ldr	r3, [pc, #48]	; (800360c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035de:	3104      	adds	r1, #4

080035e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035e0:	480b      	ldr	r0, [pc, #44]	; (8003610 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035e8:	d3f6      	bcc.n	80035d8 <CopyDataInit>
  ldr  r2, =_sbss
 80035ea:	4a0b      	ldr	r2, [pc, #44]	; (8003618 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035ec:	e002      	b.n	80035f4 <LoopFillZerobss>

080035ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035f0:	f842 3b04 	str.w	r3, [r2], #4

080035f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035f8:	d3f9      	bcc.n	80035ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035fa:	f7ff fd13 	bl	8003024 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035fe:	f005 ff3b 	bl	8009478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003602:	f7fe f811 	bl	8001628 <main>
  bx  lr    
 8003606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003608:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800360c:	0800bc3c 	.word	0x0800bc3c
  ldr  r0, =_sdata
 8003610:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003614:	20000248 	.word	0x20000248
  ldr  r2, =_sbss
 8003618:	20000248 	.word	0x20000248
  ldr  r3, = _ebss
 800361c:	20000804 	.word	0x20000804

08003620 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003620:	e7fe      	b.n	8003620 <ADC_IRQHandler>
	...

08003624 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af02      	add	r7, sp, #8
 800362a:	4604      	mov	r4, r0
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	4623      	mov	r3, r4
 8003634:	71fb      	strb	r3, [r7, #7]
 8003636:	4603      	mov	r3, r0
 8003638:	71bb      	strb	r3, [r7, #6]
 800363a:	460b      	mov	r3, r1
 800363c:	717b      	strb	r3, [r7, #5]
 800363e:	4613      	mov	r3, r2
 8003640:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8003642:	79fb      	ldrb	r3, [r7, #7]
 8003644:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8003646:	7dfb      	ldrb	r3, [r7, #23]
 8003648:	2b1f      	cmp	r3, #31
 800364a:	d802      	bhi.n	8003652 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	71fb      	strb	r3, [r7, #7]
 8003650:	e002      	b.n	8003658 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	3b20      	subs	r3, #32
 8003656:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8003658:	2300      	movs	r3, #0
 800365a:	753b      	strb	r3, [r7, #20]
 800365c:	e012      	b.n	8003684 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800365e:	7dfa      	ldrb	r2, [r7, #23]
 8003660:	7d38      	ldrb	r0, [r7, #20]
 8003662:	7d39      	ldrb	r1, [r7, #20]
 8003664:	4c3b      	ldr	r4, [pc, #236]	; (8003754 <ILI9341_Draw_Char+0x130>)
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	4423      	add	r3, r4
 8003670:	4403      	add	r3, r0
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	f101 0318 	add.w	r3, r1, #24
 8003678:	443b      	add	r3, r7
 800367a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800367e:	7d3b      	ldrb	r3, [r7, #20]
 8003680:	3301      	adds	r3, #1
 8003682:	753b      	strb	r3, [r7, #20]
 8003684:	7d3b      	ldrb	r3, [r7, #20]
 8003686:	2b05      	cmp	r3, #5
 8003688:	d9e9      	bls.n	800365e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 800368a:	79bb      	ldrb	r3, [r7, #6]
 800368c:	b298      	uxth	r0, r3
 800368e:	797b      	ldrb	r3, [r7, #5]
 8003690:	b299      	uxth	r1, r3
 8003692:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003694:	461a      	mov	r2, r3
 8003696:	0052      	lsls	r2, r2, #1
 8003698:	4413      	add	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	b29c      	uxth	r4, r3
 80036a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	4623      	mov	r3, r4
 80036aa:	f000 fc5f 	bl	8003f6c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80036ae:	2300      	movs	r3, #0
 80036b0:	757b      	strb	r3, [r7, #21]
 80036b2:	e047      	b.n	8003744 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80036b4:	2300      	movs	r3, #0
 80036b6:	75bb      	strb	r3, [r7, #22]
 80036b8:	e03e      	b.n	8003738 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 80036ba:	7d7b      	ldrb	r3, [r7, #21]
 80036bc:	3318      	adds	r3, #24
 80036be:	443b      	add	r3, r7
 80036c0:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80036c4:	461a      	mov	r2, r3
 80036c6:	7dbb      	ldrb	r3, [r7, #22]
 80036c8:	fa42 f303 	asr.w	r3, r2, r3
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d02e      	beq.n	8003732 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 80036d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d110      	bne.n	80036fc <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80036da:	79bb      	ldrb	r3, [r7, #6]
 80036dc:	b29a      	uxth	r2, r3
 80036de:	7d7b      	ldrb	r3, [r7, #21]
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	b298      	uxth	r0, r3
 80036e6:	797b      	ldrb	r3, [r7, #5]
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	7dbb      	ldrb	r3, [r7, #22]
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4413      	add	r3, r2
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	887a      	ldrh	r2, [r7, #2]
 80036f4:	4619      	mov	r1, r3
 80036f6:	f000 fb5f 	bl	8003db8 <ILI9341_Draw_Pixel>
 80036fa:	e01a      	b.n	8003732 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80036fc:	79bb      	ldrb	r3, [r7, #6]
 80036fe:	b29a      	uxth	r2, r3
 8003700:	7d7b      	ldrb	r3, [r7, #21]
 8003702:	b29b      	uxth	r3, r3
 8003704:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8003706:	fb11 f303 	smulbb	r3, r1, r3
 800370a:	b29b      	uxth	r3, r3
 800370c:	4413      	add	r3, r2
 800370e:	b298      	uxth	r0, r3
 8003710:	797b      	ldrb	r3, [r7, #5]
 8003712:	b29a      	uxth	r2, r3
 8003714:	7dbb      	ldrb	r3, [r7, #22]
 8003716:	b29b      	uxth	r3, r3
 8003718:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800371a:	fb11 f303 	smulbb	r3, r1, r3
 800371e:	b29b      	uxth	r3, r3
 8003720:	4413      	add	r3, r2
 8003722:	b299      	uxth	r1, r3
 8003724:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8003726:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4623      	mov	r3, r4
 800372e:	f000 fc1d 	bl	8003f6c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8003732:	7dbb      	ldrb	r3, [r7, #22]
 8003734:	3301      	adds	r3, #1
 8003736:	75bb      	strb	r3, [r7, #22]
 8003738:	7dbb      	ldrb	r3, [r7, #22]
 800373a:	2b07      	cmp	r3, #7
 800373c:	d9bd      	bls.n	80036ba <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 800373e:	7d7b      	ldrb	r3, [r7, #21]
 8003740:	3301      	adds	r3, #1
 8003742:	757b      	strb	r3, [r7, #21]
 8003744:	7d7b      	ldrb	r3, [r7, #21]
 8003746:	2b05      	cmp	r3, #5
 8003748:	d9b4      	bls.n	80036b4 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800374a:	bf00      	nop
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	bd90      	pop	{r4, r7, pc}
 8003754:	0800b678 	.word	0x0800b678

08003758 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8003758:	b590      	push	{r4, r7, lr}
 800375a:	b085      	sub	sp, #20
 800375c:	af02      	add	r7, sp, #8
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	4608      	mov	r0, r1
 8003762:	4611      	mov	r1, r2
 8003764:	461a      	mov	r2, r3
 8003766:	4603      	mov	r3, r0
 8003768:	70fb      	strb	r3, [r7, #3]
 800376a:	460b      	mov	r3, r1
 800376c:	70bb      	strb	r3, [r7, #2]
 800376e:	4613      	mov	r3, r2
 8003770:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8003772:	e017      	b.n	80037a4 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	7818      	ldrb	r0, [r3, #0]
 800377c:	883c      	ldrh	r4, [r7, #0]
 800377e:	78ba      	ldrb	r2, [r7, #2]
 8003780:	78f9      	ldrb	r1, [r7, #3]
 8003782:	8bbb      	ldrh	r3, [r7, #28]
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	8b3b      	ldrh	r3, [r7, #24]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	4623      	mov	r3, r4
 800378c:	f7ff ff4a 	bl	8003624 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8003790:	8b3b      	ldrh	r3, [r7, #24]
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	0052      	lsls	r2, r2, #1
 8003798:	4413      	add	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	b2da      	uxtb	r2, r3
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	4413      	add	r3, r2
 80037a2:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e3      	bne.n	8003774 <ILI9341_Draw_Text+0x1c>
    }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
	...

080037b8 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80037bc:	f7ff fa9c 	bl	8002cf8 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80037c0:	f7fd fbc6 	bl	8000f50 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80037c4:	2200      	movs	r2, #0
 80037c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80037ca:	4802      	ldr	r0, [pc, #8]	; (80037d4 <ILI9341_SPI_Init+0x1c>)
 80037cc:	f000 ff8a 	bl	80046e4 <HAL_GPIO_WritePin>
}
 80037d0:	bf00      	nop
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40020800 	.word	0x40020800

080037d8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80037e2:	1df9      	adds	r1, r7, #7
 80037e4:	2301      	movs	r3, #1
 80037e6:	2201      	movs	r2, #1
 80037e8:	4803      	ldr	r0, [pc, #12]	; (80037f8 <ILI9341_SPI_Send+0x20>)
 80037ea:	f002 ffd3 	bl	8006794 <HAL_SPI_Transmit>
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000458 	.word	0x20000458

080037fc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003806:	2200      	movs	r2, #0
 8003808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800380c:	480b      	ldr	r0, [pc, #44]	; (800383c <ILI9341_Write_Command+0x40>)
 800380e:	f000 ff69 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003812:	2200      	movs	r2, #0
 8003814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003818:	4808      	ldr	r0, [pc, #32]	; (800383c <ILI9341_Write_Command+0x40>)
 800381a:	f000 ff63 	bl	80046e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff ffd9 	bl	80037d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8003826:	2201      	movs	r2, #1
 8003828:	f44f 7180 	mov.w	r1, #256	; 0x100
 800382c:	4803      	ldr	r0, [pc, #12]	; (800383c <ILI9341_Write_Command+0x40>)
 800382e:	f000 ff59 	bl	80046e4 <HAL_GPIO_WritePin>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40020800 	.word	0x40020800

08003840 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800384a:	2201      	movs	r2, #1
 800384c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003850:	480b      	ldr	r0, [pc, #44]	; (8003880 <ILI9341_Write_Data+0x40>)
 8003852:	f000 ff47 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003856:	2200      	movs	r2, #0
 8003858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800385c:	4808      	ldr	r0, [pc, #32]	; (8003880 <ILI9341_Write_Data+0x40>)
 800385e:	f000 ff41 	bl	80046e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ffb7 	bl	80037d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800386a:	2201      	movs	r2, #1
 800386c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003870:	4803      	ldr	r0, [pc, #12]	; (8003880 <ILI9341_Write_Data+0x40>)
 8003872:	f000 ff37 	bl	80046e4 <HAL_GPIO_WritePin>
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40020800 	.word	0x40020800

08003884 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8003884:	b590      	push	{r4, r7, lr}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	4611      	mov	r1, r2
 8003890:	461a      	mov	r2, r3
 8003892:	4623      	mov	r3, r4
 8003894:	80fb      	strh	r3, [r7, #6]
 8003896:	4603      	mov	r3, r0
 8003898:	80bb      	strh	r3, [r7, #4]
 800389a:	460b      	mov	r3, r1
 800389c:	807b      	strh	r3, [r7, #2]
 800389e:	4613      	mov	r3, r2
 80038a0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80038a2:	202a      	movs	r0, #42	; 0x2a
 80038a4:	f7ff ffaa 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80038a8:	88fb      	ldrh	r3, [r7, #6]
 80038aa:	0a1b      	lsrs	r3, r3, #8
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ffc5 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7ff ffc0 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80038c0:	887b      	ldrh	r3, [r7, #2]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff ffb9 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80038ce:	887b      	ldrh	r3, [r7, #2]
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff ffb4 	bl	8003840 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80038d8:	202b      	movs	r0, #43	; 0x2b
 80038da:	f7ff ff8f 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80038de:	88bb      	ldrh	r3, [r7, #4]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ffaa 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80038ec:	88bb      	ldrh	r3, [r7, #4]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ffa5 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80038f6:	883b      	ldrh	r3, [r7, #0]
 80038f8:	0a1b      	lsrs	r3, r3, #8
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff9e 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8003904:	883b      	ldrh	r3, [r7, #0]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff ff99 	bl	8003840 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800390e:	202c      	movs	r0, #44	; 0x2c
 8003910:	f7ff ff74 	bl	80037fc <ILI9341_Write_Command>
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	bd90      	pop	{r4, r7, pc}

0800391c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003920:	2201      	movs	r2, #1
 8003922:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003926:	480b      	ldr	r0, [pc, #44]	; (8003954 <ILI9341_Reset+0x38>)
 8003928:	f000 fedc 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800392c:	20c8      	movs	r0, #200	; 0xc8
 800392e:	f000 fbdf 	bl	80040f0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003932:	2200      	movs	r2, #0
 8003934:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003938:	4806      	ldr	r0, [pc, #24]	; (8003954 <ILI9341_Reset+0x38>)
 800393a:	f000 fed3 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800393e:	20c8      	movs	r0, #200	; 0xc8
 8003940:	f000 fbd6 	bl	80040f0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8003944:	2201      	movs	r2, #1
 8003946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800394a:	4802      	ldr	r0, [pc, #8]	; (8003954 <ILI9341_Reset+0x38>)
 800394c:	f000 feca 	bl	80046e4 <HAL_GPIO_WritePin>
}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40020800 	.word	0x40020800

08003958 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8003966:	2036      	movs	r0, #54	; 0x36
 8003968:	f7ff ff48 	bl	80037fc <ILI9341_Write_Command>
HAL_Delay(1);
 800396c:	2001      	movs	r0, #1
 800396e:	f000 fbbf 	bl	80040f0 <HAL_Delay>
	
switch(screen_rotation) 
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b03      	cmp	r3, #3
 8003976:	d837      	bhi.n	80039e8 <ILI9341_Set_Rotation+0x90>
 8003978:	a201      	add	r2, pc, #4	; (adr r2, 8003980 <ILI9341_Set_Rotation+0x28>)
 800397a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397e:	bf00      	nop
 8003980:	08003991 	.word	0x08003991
 8003984:	080039a7 	.word	0x080039a7
 8003988:	080039bd 	.word	0x080039bd
 800398c:	080039d3 	.word	0x080039d3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8003990:	2048      	movs	r0, #72	; 0x48
 8003992:	f7ff ff55 	bl	8003840 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <ILI9341_Set_Rotation+0x9c>)
 8003998:	22f0      	movs	r2, #240	; 0xf0
 800399a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800399c:	4b16      	ldr	r3, [pc, #88]	; (80039f8 <ILI9341_Set_Rotation+0xa0>)
 800399e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039a2:	801a      	strh	r2, [r3, #0]
			break;
 80039a4:	e021      	b.n	80039ea <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80039a6:	2028      	movs	r0, #40	; 0x28
 80039a8:	f7ff ff4a 	bl	8003840 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80039ac:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <ILI9341_Set_Rotation+0x9c>)
 80039ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039b2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80039b4:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <ILI9341_Set_Rotation+0xa0>)
 80039b6:	22f0      	movs	r2, #240	; 0xf0
 80039b8:	801a      	strh	r2, [r3, #0]
			break;
 80039ba:	e016      	b.n	80039ea <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80039bc:	2088      	movs	r0, #136	; 0x88
 80039be:	f7ff ff3f 	bl	8003840 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80039c2:	4b0c      	ldr	r3, [pc, #48]	; (80039f4 <ILI9341_Set_Rotation+0x9c>)
 80039c4:	22f0      	movs	r2, #240	; 0xf0
 80039c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <ILI9341_Set_Rotation+0xa0>)
 80039ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039ce:	801a      	strh	r2, [r3, #0]
			break;
 80039d0:	e00b      	b.n	80039ea <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80039d2:	20e8      	movs	r0, #232	; 0xe8
 80039d4:	f7ff ff34 	bl	8003840 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80039d8:	4b06      	ldr	r3, [pc, #24]	; (80039f4 <ILI9341_Set_Rotation+0x9c>)
 80039da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80039de:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <ILI9341_Set_Rotation+0xa0>)
 80039e2:	22f0      	movs	r2, #240	; 0xf0
 80039e4:	801a      	strh	r2, [r3, #0]
			break;
 80039e6:	e000      	b.n	80039ea <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80039e8:	bf00      	nop
	}
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000076 	.word	0x20000076
 80039f8:	20000074 	.word	0x20000074

080039fc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8003a00:	2201      	movs	r2, #1
 8003a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a06:	4802      	ldr	r0, [pc, #8]	; (8003a10 <ILI9341_Enable+0x14>)
 8003a08:	f000 fe6c 	bl	80046e4 <HAL_GPIO_WritePin>
}
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40020800 	.word	0x40020800

08003a14 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8003a18:	f7ff fff0 	bl	80039fc <ILI9341_Enable>
ILI9341_SPI_Init();
 8003a1c:	f7ff fecc 	bl	80037b8 <ILI9341_SPI_Init>
ILI9341_Reset();
 8003a20:	f7ff ff7c 	bl	800391c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8003a24:	2001      	movs	r0, #1
 8003a26:	f7ff fee9 	bl	80037fc <ILI9341_Write_Command>
HAL_Delay(1000);
 8003a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a2e:	f000 fb5f 	bl	80040f0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8003a32:	20cb      	movs	r0, #203	; 0xcb
 8003a34:	f7ff fee2 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8003a38:	2039      	movs	r0, #57	; 0x39
 8003a3a:	f7ff ff01 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8003a3e:	202c      	movs	r0, #44	; 0x2c
 8003a40:	f7ff fefe 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003a44:	2000      	movs	r0, #0
 8003a46:	f7ff fefb 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8003a4a:	2034      	movs	r0, #52	; 0x34
 8003a4c:	f7ff fef8 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8003a50:	2002      	movs	r0, #2
 8003a52:	f7ff fef5 	bl	8003840 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8003a56:	20cf      	movs	r0, #207	; 0xcf
 8003a58:	f7ff fed0 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f7ff feef 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003a62:	20c1      	movs	r0, #193	; 0xc1
 8003a64:	f7ff feec 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8003a68:	2030      	movs	r0, #48	; 0x30
 8003a6a:	f7ff fee9 	bl	8003840 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8003a6e:	20e8      	movs	r0, #232	; 0xe8
 8003a70:	f7ff fec4 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8003a74:	2085      	movs	r0, #133	; 0x85
 8003a76:	f7ff fee3 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	f7ff fee0 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8003a80:	2078      	movs	r0, #120	; 0x78
 8003a82:	f7ff fedd 	bl	8003840 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8003a86:	20ea      	movs	r0, #234	; 0xea
 8003a88:	f7ff feb8 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f7ff fed7 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003a92:	2000      	movs	r0, #0
 8003a94:	f7ff fed4 	bl	8003840 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8003a98:	20ed      	movs	r0, #237	; 0xed
 8003a9a:	f7ff feaf 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8003a9e:	2064      	movs	r0, #100	; 0x64
 8003aa0:	f7ff fece 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003aa4:	2003      	movs	r0, #3
 8003aa6:	f7ff fecb 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8003aaa:	2012      	movs	r0, #18
 8003aac:	f7ff fec8 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8003ab0:	2081      	movs	r0, #129	; 0x81
 8003ab2:	f7ff fec5 	bl	8003840 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8003ab6:	20f7      	movs	r0, #247	; 0xf7
 8003ab8:	f7ff fea0 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8003abc:	2020      	movs	r0, #32
 8003abe:	f7ff febf 	bl	8003840 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8003ac2:	20c0      	movs	r0, #192	; 0xc0
 8003ac4:	f7ff fe9a 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8003ac8:	2023      	movs	r0, #35	; 0x23
 8003aca:	f7ff feb9 	bl	8003840 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8003ace:	20c1      	movs	r0, #193	; 0xc1
 8003ad0:	f7ff fe94 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8003ad4:	2010      	movs	r0, #16
 8003ad6:	f7ff feb3 	bl	8003840 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8003ada:	20c5      	movs	r0, #197	; 0xc5
 8003adc:	f7ff fe8e 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8003ae0:	203e      	movs	r0, #62	; 0x3e
 8003ae2:	f7ff fead 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8003ae6:	2028      	movs	r0, #40	; 0x28
 8003ae8:	f7ff feaa 	bl	8003840 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8003aec:	20c7      	movs	r0, #199	; 0xc7
 8003aee:	f7ff fe85 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8003af2:	2086      	movs	r0, #134	; 0x86
 8003af4:	f7ff fea4 	bl	8003840 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8003af8:	2036      	movs	r0, #54	; 0x36
 8003afa:	f7ff fe7f 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8003afe:	2048      	movs	r0, #72	; 0x48
 8003b00:	f7ff fe9e 	bl	8003840 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8003b04:	203a      	movs	r0, #58	; 0x3a
 8003b06:	f7ff fe79 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8003b0a:	2055      	movs	r0, #85	; 0x55
 8003b0c:	f7ff fe98 	bl	8003840 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8003b10:	20b1      	movs	r0, #177	; 0xb1
 8003b12:	f7ff fe73 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003b16:	2000      	movs	r0, #0
 8003b18:	f7ff fe92 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8003b1c:	2018      	movs	r0, #24
 8003b1e:	f7ff fe8f 	bl	8003840 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8003b22:	20b6      	movs	r0, #182	; 0xb6
 8003b24:	f7ff fe6a 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8003b28:	2008      	movs	r0, #8
 8003b2a:	f7ff fe89 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8003b2e:	2082      	movs	r0, #130	; 0x82
 8003b30:	f7ff fe86 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8003b34:	2027      	movs	r0, #39	; 0x27
 8003b36:	f7ff fe83 	bl	8003840 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8003b3a:	20f2      	movs	r0, #242	; 0xf2
 8003b3c:	f7ff fe5e 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003b40:	2000      	movs	r0, #0
 8003b42:	f7ff fe7d 	bl	8003840 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8003b46:	2026      	movs	r0, #38	; 0x26
 8003b48:	f7ff fe58 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8003b4c:	2001      	movs	r0, #1
 8003b4e:	f7ff fe77 	bl	8003840 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8003b52:	20e0      	movs	r0, #224	; 0xe0
 8003b54:	f7ff fe52 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8003b58:	200f      	movs	r0, #15
 8003b5a:	f7ff fe71 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003b5e:	2031      	movs	r0, #49	; 0x31
 8003b60:	f7ff fe6e 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8003b64:	202b      	movs	r0, #43	; 0x2b
 8003b66:	f7ff fe6b 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8003b6a:	200c      	movs	r0, #12
 8003b6c:	f7ff fe68 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003b70:	200e      	movs	r0, #14
 8003b72:	f7ff fe65 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8003b76:	2008      	movs	r0, #8
 8003b78:	f7ff fe62 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8003b7c:	204e      	movs	r0, #78	; 0x4e
 8003b7e:	f7ff fe5f 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8003b82:	20f1      	movs	r0, #241	; 0xf1
 8003b84:	f7ff fe5c 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8003b88:	2037      	movs	r0, #55	; 0x37
 8003b8a:	f7ff fe59 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8003b8e:	2007      	movs	r0, #7
 8003b90:	f7ff fe56 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8003b94:	2010      	movs	r0, #16
 8003b96:	f7ff fe53 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	f7ff fe50 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003ba0:	200e      	movs	r0, #14
 8003ba2:	f7ff fe4d 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8003ba6:	2009      	movs	r0, #9
 8003ba8:	f7ff fe4a 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8003bac:	2000      	movs	r0, #0
 8003bae:	f7ff fe47 	bl	8003840 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8003bb2:	20e1      	movs	r0, #225	; 0xe1
 8003bb4:	f7ff fe22 	bl	80037fc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8003bb8:	2000      	movs	r0, #0
 8003bba:	f7ff fe41 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8003bbe:	200e      	movs	r0, #14
 8003bc0:	f7ff fe3e 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8003bc4:	2014      	movs	r0, #20
 8003bc6:	f7ff fe3b 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8003bca:	2003      	movs	r0, #3
 8003bcc:	f7ff fe38 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8003bd0:	2011      	movs	r0, #17
 8003bd2:	f7ff fe35 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8003bd6:	2007      	movs	r0, #7
 8003bd8:	f7ff fe32 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003bdc:	2031      	movs	r0, #49	; 0x31
 8003bde:	f7ff fe2f 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8003be2:	20c1      	movs	r0, #193	; 0xc1
 8003be4:	f7ff fe2c 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8003be8:	2048      	movs	r0, #72	; 0x48
 8003bea:	f7ff fe29 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8003bee:	2008      	movs	r0, #8
 8003bf0:	f7ff fe26 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003bf4:	200f      	movs	r0, #15
 8003bf6:	f7ff fe23 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8003bfa:	200c      	movs	r0, #12
 8003bfc:	f7ff fe20 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8003c00:	2031      	movs	r0, #49	; 0x31
 8003c02:	f7ff fe1d 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8003c06:	2036      	movs	r0, #54	; 0x36
 8003c08:	f7ff fe1a 	bl	8003840 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8003c0c:	200f      	movs	r0, #15
 8003c0e:	f7ff fe17 	bl	8003840 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8003c12:	2011      	movs	r0, #17
 8003c14:	f7ff fdf2 	bl	80037fc <ILI9341_Write_Command>
HAL_Delay(120);
 8003c18:	2078      	movs	r0, #120	; 0x78
 8003c1a:	f000 fa69 	bl	80040f0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8003c1e:	2029      	movs	r0, #41	; 0x29
 8003c20:	f7ff fdec 	bl	80037fc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8003c24:	2000      	movs	r0, #0
 8003c26:	f7ff fe97 	bl	8003958 <ILI9341_Set_Rotation>
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8003c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c34:	b08d      	sub	sp, #52	; 0x34
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	4603      	mov	r3, r0
 8003c3a:	6039      	str	r1, [r7, #0]
 8003c3c:	80fb      	strh	r3, [r7, #6]
 8003c3e:	466b      	mov	r3, sp
 8003c40:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c4e:	d202      	bcs.n	8003c56 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c54:	e002      	b.n	8003c5c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8003c56:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c62:	4840      	ldr	r0, [pc, #256]	; (8003d64 <ILI9341_Draw_Colour_Burst+0x134>)
 8003c64:	f000 fd3e 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003c6e:	483d      	ldr	r0, [pc, #244]	; (8003d64 <ILI9341_Draw_Colour_Burst+0x134>)
 8003c70:	f000 fd38 	bl	80046e4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8003c74:	88fb      	ldrh	r3, [r7, #6]
 8003c76:	0a1b      	lsrs	r3, r3, #8
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8003c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c80:	460b      	mov	r3, r1
 8003c82:	3b01      	subs	r3, #1
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	2300      	movs	r3, #0
 8003c88:	4688      	mov	r8, r1
 8003c8a:	4699      	mov	r9, r3
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	f04f 0300 	mov.w	r3, #0
 8003c94:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c98:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c9c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	461d      	mov	r5, r3
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	00eb      	lsls	r3, r5, #3
 8003cb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb4:	00e2      	lsls	r2, r4, #3
 8003cb6:	1dcb      	adds	r3, r1, #7
 8003cb8:	08db      	lsrs	r3, r3, #3
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	ebad 0d03 	sub.w	sp, sp, r3
 8003cc0:	466b      	mov	r3, sp
 8003cc2:	3300      	adds	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cca:	e00e      	b.n	8003cea <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003cd6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	3301      	adds	r3, #1
 8003cdc:	88fa      	ldrh	r2, [r7, #6]
 8003cde:	b2d1      	uxtb	r1, r2
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	3302      	adds	r3, #2
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d3ec      	bcc.n	8003ccc <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d06:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d0c:	fb01 f202 	mul.w	r2, r1, r2
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d010      	beq.n	8003d3c <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d1e:	e009      	b.n	8003d34 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	230a      	movs	r3, #10
 8003d26:	69b9      	ldr	r1, [r7, #24]
 8003d28:	480f      	ldr	r0, [pc, #60]	; (8003d68 <ILI9341_Draw_Colour_Burst+0x138>)
 8003d2a:	f002 fd33 	bl	8006794 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	3301      	adds	r3, #1
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
 8003d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d3f1      	bcc.n	8003d20 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	230a      	movs	r3, #10
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	4808      	ldr	r0, [pc, #32]	; (8003d68 <ILI9341_Draw_Colour_Burst+0x138>)
 8003d46:	f002 fd25 	bl	8006794 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d50:	4804      	ldr	r0, [pc, #16]	; (8003d64 <ILI9341_Draw_Colour_Burst+0x134>)
 8003d52:	f000 fcc7 	bl	80046e4 <HAL_GPIO_WritePin>
 8003d56:	46b5      	mov	sp, r6
}
 8003d58:	bf00      	nop
 8003d5a:	3734      	adds	r7, #52	; 0x34
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d62:	bf00      	nop
 8003d64:	40020800 	.word	0x40020800
 8003d68:	20000458 	.word	0x20000458

08003d6c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8003d76:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <ILI9341_Fill_Screen+0x44>)
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <ILI9341_Fill_Screen+0x48>)
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2100      	movs	r1, #0
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7ff fd7d 	bl	8003884 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8003d8a:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <ILI9341_Fill_Screen+0x44>)
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <ILI9341_Fill_Screen+0x48>)
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	4611      	mov	r1, r2
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7ff ff44 	bl	8003c30 <ILI9341_Draw_Colour_Burst>
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000076 	.word	0x20000076
 8003db4:	20000074 	.word	0x20000074

08003db8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	80fb      	strh	r3, [r7, #6]
 8003dc2:	460b      	mov	r3, r1
 8003dc4:	80bb      	strh	r3, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003dca:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <ILI9341_Draw_Pixel+0x1a4>)
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	88fa      	ldrh	r2, [r7, #6]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	f080 80be 	bcs.w	8003f54 <ILI9341_Draw_Pixel+0x19c>
 8003dd8:	4b61      	ldr	r3, [pc, #388]	; (8003f60 <ILI9341_Draw_Pixel+0x1a8>)
 8003dda:	881b      	ldrh	r3, [r3, #0]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	88ba      	ldrh	r2, [r7, #4]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f080 80b7 	bcs.w	8003f54 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003de6:	2200      	movs	r2, #0
 8003de8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003dec:	485d      	ldr	r0, [pc, #372]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003dee:	f000 fc79 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003df2:	2200      	movs	r2, #0
 8003df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003df8:	485a      	ldr	r0, [pc, #360]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003dfa:	f000 fc73 	bl	80046e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8003dfe:	202a      	movs	r0, #42	; 0x2a
 8003e00:	f7ff fcea 	bl	80037d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8003e04:	2201      	movs	r2, #1
 8003e06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e0a:	4856      	ldr	r0, [pc, #344]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003e0c:	f000 fc6a 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8003e10:	2201      	movs	r2, #1
 8003e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e16:	4853      	ldr	r0, [pc, #332]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003e18:	f000 fc64 	bl	80046e4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e22:	4850      	ldr	r0, [pc, #320]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003e24:	f000 fc5e 	bl	80046e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8003e28:	88fb      	ldrh	r3, [r7, #6]
 8003e2a:	0a1b      	lsrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	753b      	strb	r3, [r7, #20]
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	757b      	strb	r3, [r7, #21]
 8003e38:	88fb      	ldrh	r3, [r7, #6]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	121b      	asrs	r3, r3, #8
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	75bb      	strb	r3, [r7, #22]
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8003e4c:	f107 0114 	add.w	r1, r7, #20
 8003e50:	2301      	movs	r3, #1
 8003e52:	2204      	movs	r2, #4
 8003e54:	4844      	ldr	r0, [pc, #272]	; (8003f68 <ILI9341_Draw_Pixel+0x1b0>)
 8003e56:	f002 fc9d 	bl	8006794 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e60:	4840      	ldr	r0, [pc, #256]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003e62:	f000 fc3f 	bl	80046e4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003e66:	2200      	movs	r2, #0
 8003e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e6c:	483d      	ldr	r0, [pc, #244]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003e6e:	f000 fc39 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003e72:	2200      	movs	r2, #0
 8003e74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e78:	483a      	ldr	r0, [pc, #232]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003e7a:	f000 fc33 	bl	80046e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8003e7e:	202b      	movs	r0, #43	; 0x2b
 8003e80:	f7ff fcaa 	bl	80037d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8003e84:	2201      	movs	r2, #1
 8003e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e8a:	4836      	ldr	r0, [pc, #216]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003e8c:	f000 fc2a 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8003e90:	2201      	movs	r2, #1
 8003e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e96:	4833      	ldr	r0, [pc, #204]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003e98:	f000 fc24 	bl	80046e4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ea2:	4830      	ldr	r0, [pc, #192]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003ea4:	f000 fc1e 	bl	80046e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8003ea8:	88bb      	ldrh	r3, [r7, #4]
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	743b      	strb	r3, [r7, #16]
 8003eb2:	88bb      	ldrh	r3, [r7, #4]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	747b      	strb	r3, [r7, #17]
 8003eb8:	88bb      	ldrh	r3, [r7, #4]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	121b      	asrs	r3, r3, #8
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	74bb      	strb	r3, [r7, #18]
 8003ec2:	88bb      	ldrh	r3, [r7, #4]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8003ecc:	f107 0110 	add.w	r1, r7, #16
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	4824      	ldr	r0, [pc, #144]	; (8003f68 <ILI9341_Draw_Pixel+0x1b0>)
 8003ed6:	f002 fc5d 	bl	8006794 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003eda:	2201      	movs	r2, #1
 8003edc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ee0:	4820      	ldr	r0, [pc, #128]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003ee2:	f000 fbff 	bl	80046e4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003eec:	481d      	ldr	r0, [pc, #116]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003eee:	f000 fbf9 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ef8:	481a      	ldr	r0, [pc, #104]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003efa:	f000 fbf3 	bl	80046e4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8003efe:	202c      	movs	r0, #44	; 0x2c
 8003f00:	f7ff fc6a 	bl	80037d8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8003f04:	2201      	movs	r2, #1
 8003f06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f0a:	4816      	ldr	r0, [pc, #88]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003f0c:	f000 fbea 	bl	80046e4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8003f10:	2201      	movs	r2, #1
 8003f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f16:	4813      	ldr	r0, [pc, #76]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003f18:	f000 fbe4 	bl	80046e4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f22:	4810      	ldr	r0, [pc, #64]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003f24:	f000 fbde 	bl	80046e4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8003f28:	887b      	ldrh	r3, [r7, #2]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	733b      	strb	r3, [r7, #12]
 8003f32:	887b      	ldrh	r3, [r7, #2]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8003f38:	f107 010c 	add.w	r1, r7, #12
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4809      	ldr	r0, [pc, #36]	; (8003f68 <ILI9341_Draw_Pixel+0x1b0>)
 8003f42:	f002 fc27 	bl	8006794 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8003f46:	2201      	movs	r2, #1
 8003f48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f4c:	4805      	ldr	r0, [pc, #20]	; (8003f64 <ILI9341_Draw_Pixel+0x1ac>)
 8003f4e:	f000 fbc9 	bl	80046e4 <HAL_GPIO_WritePin>
 8003f52:	e000      	b.n	8003f56 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003f54:	bf00      	nop
	
}
 8003f56:	3718      	adds	r7, #24
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	20000076 	.word	0x20000076
 8003f60:	20000074 	.word	0x20000074
 8003f64:	40020800 	.word	0x40020800
 8003f68:	20000458 	.word	0x20000458

08003f6c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8003f6c:	b590      	push	{r4, r7, lr}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4604      	mov	r4, r0
 8003f74:	4608      	mov	r0, r1
 8003f76:	4611      	mov	r1, r2
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4623      	mov	r3, r4
 8003f7c:	80fb      	strh	r3, [r7, #6]
 8003f7e:	4603      	mov	r3, r0
 8003f80:	80bb      	strh	r3, [r7, #4]
 8003f82:	460b      	mov	r3, r1
 8003f84:	807b      	strh	r3, [r7, #2]
 8003f86:	4613      	mov	r3, r2
 8003f88:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <ILI9341_Draw_Rectangle+0xb0>)
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	88fa      	ldrh	r2, [r7, #6]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d23d      	bcs.n	8004012 <ILI9341_Draw_Rectangle+0xa6>
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <ILI9341_Draw_Rectangle+0xb4>)
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	88ba      	ldrh	r2, [r7, #4]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d237      	bcs.n	8004012 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8003fa2:	88fa      	ldrh	r2, [r7, #6]
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4a1c      	ldr	r2, [pc, #112]	; (800401c <ILI9341_Draw_Rectangle+0xb0>)
 8003faa:	8812      	ldrh	r2, [r2, #0]
 8003fac:	b292      	uxth	r2, r2
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	dd05      	ble.n	8003fbe <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8003fb2:	4b1a      	ldr	r3, [pc, #104]	; (800401c <ILI9341_Draw_Rectangle+0xb0>)
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8003fbe:	88ba      	ldrh	r2, [r7, #4]
 8003fc0:	883b      	ldrh	r3, [r7, #0]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	4a16      	ldr	r2, [pc, #88]	; (8004020 <ILI9341_Draw_Rectangle+0xb4>)
 8003fc6:	8812      	ldrh	r2, [r2, #0]
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	dd05      	ble.n	8003fda <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8003fce:	4b14      	ldr	r3, [pc, #80]	; (8004020 <ILI9341_Draw_Rectangle+0xb4>)
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	88bb      	ldrh	r3, [r7, #4]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	887b      	ldrh	r3, [r7, #2]
 8003fde:	4413      	add	r3, r2
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29c      	uxth	r4, r3
 8003fe6:	88ba      	ldrh	r2, [r7, #4]
 8003fe8:	883b      	ldrh	r3, [r7, #0]
 8003fea:	4413      	add	r3, r2
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	88b9      	ldrh	r1, [r7, #4]
 8003ff4:	88f8      	ldrh	r0, [r7, #6]
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	f7ff fc44 	bl	8003884 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8003ffc:	883b      	ldrh	r3, [r7, #0]
 8003ffe:	887a      	ldrh	r2, [r7, #2]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	461a      	mov	r2, r3
 8004006:	8b3b      	ldrh	r3, [r7, #24]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fe10 	bl	8003c30 <ILI9341_Draw_Colour_Burst>
 8004010:	e000      	b.n	8004014 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8004012:	bf00      	nop
}
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bd90      	pop	{r4, r7, pc}
 800401a:	bf00      	nop
 800401c:	20000076 	.word	0x20000076
 8004020:	20000074 	.word	0x20000074

08004024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004028:	4b08      	ldr	r3, [pc, #32]	; (800404c <HAL_Init+0x28>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a07      	ldr	r2, [pc, #28]	; (800404c <HAL_Init+0x28>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004034:	2003      	movs	r0, #3
 8004036:	f000 f94f 	bl	80042d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800403a:	2000      	movs	r0, #0
 800403c:	f000 f808 	bl	8004050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004040:	f7fe fedc 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023c00 	.word	0x40023c00

08004050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004058:	4b12      	ldr	r3, [pc, #72]	; (80040a4 <HAL_InitTick+0x54>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <HAL_InitTick+0x58>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	4619      	mov	r1, r3
 8004062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004066:	fbb3 f3f1 	udiv	r3, r3, r1
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	4618      	mov	r0, r3
 8004070:	f000 f967 	bl	8004342 <HAL_SYSTICK_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e00e      	b.n	800409c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2b0f      	cmp	r3, #15
 8004082:	d80a      	bhi.n	800409a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004084:	2200      	movs	r2, #0
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	f000 f92f 	bl	80042ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004090:	4a06      	ldr	r2, [pc, #24]	; (80040ac <HAL_InitTick+0x5c>)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	20000070 	.word	0x20000070
 80040a8:	2000007c 	.word	0x2000007c
 80040ac:	20000078 	.word	0x20000078

080040b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040b4:	4b06      	ldr	r3, [pc, #24]	; (80040d0 <HAL_IncTick+0x20>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_IncTick+0x24>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4413      	add	r3, r2
 80040c0:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <HAL_IncTick+0x24>)
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	2000007c 	.word	0x2000007c
 80040d4:	200006b4 	.word	0x200006b4

080040d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return uwTick;
 80040dc:	4b03      	ldr	r3, [pc, #12]	; (80040ec <HAL_GetTick+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	200006b4 	.word	0x200006b4

080040f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040f8:	f7ff ffee 	bl	80040d8 <HAL_GetTick>
 80040fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004108:	d005      	beq.n	8004116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800410a:	4b0a      	ldr	r3, [pc, #40]	; (8004134 <HAL_Delay+0x44>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	461a      	mov	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004116:	bf00      	nop
 8004118:	f7ff ffde 	bl	80040d8 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	429a      	cmp	r2, r3
 8004126:	d8f7      	bhi.n	8004118 <HAL_Delay+0x28>
  {
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	2000007c 	.word	0x2000007c

08004138 <__NVIC_SetPriorityGrouping>:
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f003 0307 	and.w	r3, r3, #7
 8004146:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <__NVIC_SetPriorityGrouping+0x40>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004154:	4013      	ands	r3, r2
 8004156:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004160:	4b06      	ldr	r3, [pc, #24]	; (800417c <__NVIC_SetPriorityGrouping+0x44>)
 8004162:	4313      	orrs	r3, r2
 8004164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004166:	4a04      	ldr	r2, [pc, #16]	; (8004178 <__NVIC_SetPriorityGrouping+0x40>)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	60d3      	str	r3, [r2, #12]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000ed00 	.word	0xe000ed00
 800417c:	05fa0000 	.word	0x05fa0000

08004180 <__NVIC_GetPriorityGrouping>:
{
 8004180:	b480      	push	{r7}
 8004182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004184:	4b04      	ldr	r3, [pc, #16]	; (8004198 <__NVIC_GetPriorityGrouping+0x18>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	0a1b      	lsrs	r3, r3, #8
 800418a:	f003 0307 	and.w	r3, r3, #7
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <__NVIC_EnableIRQ>:
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	4603      	mov	r3, r0
 80041a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	db0b      	blt.n	80041c6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	f003 021f 	and.w	r2, r3, #31
 80041b4:	4907      	ldr	r1, [pc, #28]	; (80041d4 <__NVIC_EnableIRQ+0x38>)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	095b      	lsrs	r3, r3, #5
 80041bc:	2001      	movs	r0, #1
 80041be:	fa00 f202 	lsl.w	r2, r0, r2
 80041c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000e100 	.word	0xe000e100

080041d8 <__NVIC_SetPriority>:
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	4603      	mov	r3, r0
 80041e0:	6039      	str	r1, [r7, #0]
 80041e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	db0a      	blt.n	8004202 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	490c      	ldr	r1, [pc, #48]	; (8004224 <__NVIC_SetPriority+0x4c>)
 80041f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f6:	0112      	lsls	r2, r2, #4
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	440b      	add	r3, r1
 80041fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004200:	e00a      	b.n	8004218 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	4908      	ldr	r1, [pc, #32]	; (8004228 <__NVIC_SetPriority+0x50>)
 8004208:	79fb      	ldrb	r3, [r7, #7]
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3b04      	subs	r3, #4
 8004210:	0112      	lsls	r2, r2, #4
 8004212:	b2d2      	uxtb	r2, r2
 8004214:	440b      	add	r3, r1
 8004216:	761a      	strb	r2, [r3, #24]
}
 8004218:	bf00      	nop
 800421a:	370c      	adds	r7, #12
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	e000e100 	.word	0xe000e100
 8004228:	e000ed00 	.word	0xe000ed00

0800422c <NVIC_EncodePriority>:
{
 800422c:	b480      	push	{r7}
 800422e:	b089      	sub	sp, #36	; 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f1c3 0307 	rsb	r3, r3, #7
 8004246:	2b04      	cmp	r3, #4
 8004248:	bf28      	it	cs
 800424a:	2304      	movcs	r3, #4
 800424c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3304      	adds	r3, #4
 8004252:	2b06      	cmp	r3, #6
 8004254:	d902      	bls.n	800425c <NVIC_EncodePriority+0x30>
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3b03      	subs	r3, #3
 800425a:	e000      	b.n	800425e <NVIC_EncodePriority+0x32>
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004260:	f04f 32ff 	mov.w	r2, #4294967295
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	401a      	ands	r2, r3
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004274:	f04f 31ff 	mov.w	r1, #4294967295
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	43d9      	mvns	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004284:	4313      	orrs	r3, r2
}
 8004286:	4618      	mov	r0, r3
 8004288:	3724      	adds	r7, #36	; 0x24
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a4:	d301      	bcc.n	80042aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042a6:	2301      	movs	r3, #1
 80042a8:	e00f      	b.n	80042ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042aa:	4a0a      	ldr	r2, [pc, #40]	; (80042d4 <SysTick_Config+0x40>)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b2:	210f      	movs	r1, #15
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	f7ff ff8e 	bl	80041d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <SysTick_Config+0x40>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <SysTick_Config+0x40>)
 80042c4:	2207      	movs	r2, #7
 80042c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	e000e010 	.word	0xe000e010

080042d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff ff29 	bl	8004138 <__NVIC_SetPriorityGrouping>
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b086      	sub	sp, #24
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	4603      	mov	r3, r0
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042fc:	2300      	movs	r3, #0
 80042fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004300:	f7ff ff3e 	bl	8004180 <__NVIC_GetPriorityGrouping>
 8004304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	6978      	ldr	r0, [r7, #20]
 800430c:	f7ff ff8e 	bl	800422c <NVIC_EncodePriority>
 8004310:	4602      	mov	r2, r0
 8004312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff5d 	bl	80041d8 <__NVIC_SetPriority>
}
 800431e:	bf00      	nop
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	4603      	mov	r3, r0
 800432e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ff31 	bl	800419c <__NVIC_EnableIRQ>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ffa2 	bl	8004294 <SysTick_Config>
 8004350:	4603      	mov	r3, r0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	; 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004366:	2300      	movs	r3, #0
 8004368:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004372:	2300      	movs	r3, #0
 8004374:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	e175      	b.n	8004668 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800437c:	2201      	movs	r2, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4013      	ands	r3, r2
 800438e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	429a      	cmp	r2, r3
 8004396:	f040 8164 	bne.w	8004662 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d005      	beq.n	80043b2 <HAL_GPIO_Init+0x56>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d130      	bne.n	8004414 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	2203      	movs	r2, #3
 80043be:	fa02 f303 	lsl.w	r3, r2, r3
 80043c2:	43db      	mvns	r3, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4013      	ands	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043e8:	2201      	movs	r2, #1
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 0201 	and.w	r2, r3, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 0303 	and.w	r3, r3, #3
 800441c:	2b03      	cmp	r3, #3
 800441e:	d017      	beq.n	8004450 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	2203      	movs	r2, #3
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d123      	bne.n	80044a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	08da      	lsrs	r2, r3, #3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3208      	adds	r2, #8
 8004464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	220f      	movs	r2, #15
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4313      	orrs	r3, r2
 8004494:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	08da      	lsrs	r2, r3, #3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	3208      	adds	r2, #8
 800449e:	69b9      	ldr	r1, [r7, #24]
 80044a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	005b      	lsls	r3, r3, #1
 80044ae:	2203      	movs	r2, #3
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0203 	and.w	r2, r3, #3
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	f000 80be 	beq.w	8004662 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044e6:	4b66      	ldr	r3, [pc, #408]	; (8004680 <HAL_GPIO_Init+0x324>)
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	4a65      	ldr	r2, [pc, #404]	; (8004680 <HAL_GPIO_Init+0x324>)
 80044ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044f0:	6453      	str	r3, [r2, #68]	; 0x44
 80044f2:	4b63      	ldr	r3, [pc, #396]	; (8004680 <HAL_GPIO_Init+0x324>)
 80044f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80044fe:	4a61      	ldr	r2, [pc, #388]	; (8004684 <HAL_GPIO_Init+0x328>)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	3302      	adds	r3, #2
 8004506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	220f      	movs	r2, #15
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	43db      	mvns	r3, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	4013      	ands	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a58      	ldr	r2, [pc, #352]	; (8004688 <HAL_GPIO_Init+0x32c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d037      	beq.n	800459a <HAL_GPIO_Init+0x23e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a57      	ldr	r2, [pc, #348]	; (800468c <HAL_GPIO_Init+0x330>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d031      	beq.n	8004596 <HAL_GPIO_Init+0x23a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a56      	ldr	r2, [pc, #344]	; (8004690 <HAL_GPIO_Init+0x334>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d02b      	beq.n	8004592 <HAL_GPIO_Init+0x236>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a55      	ldr	r2, [pc, #340]	; (8004694 <HAL_GPIO_Init+0x338>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d025      	beq.n	800458e <HAL_GPIO_Init+0x232>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a54      	ldr	r2, [pc, #336]	; (8004698 <HAL_GPIO_Init+0x33c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01f      	beq.n	800458a <HAL_GPIO_Init+0x22e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a53      	ldr	r2, [pc, #332]	; (800469c <HAL_GPIO_Init+0x340>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d019      	beq.n	8004586 <HAL_GPIO_Init+0x22a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a52      	ldr	r2, [pc, #328]	; (80046a0 <HAL_GPIO_Init+0x344>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d013      	beq.n	8004582 <HAL_GPIO_Init+0x226>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a51      	ldr	r2, [pc, #324]	; (80046a4 <HAL_GPIO_Init+0x348>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00d      	beq.n	800457e <HAL_GPIO_Init+0x222>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a50      	ldr	r2, [pc, #320]	; (80046a8 <HAL_GPIO_Init+0x34c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d007      	beq.n	800457a <HAL_GPIO_Init+0x21e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a4f      	ldr	r2, [pc, #316]	; (80046ac <HAL_GPIO_Init+0x350>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d101      	bne.n	8004576 <HAL_GPIO_Init+0x21a>
 8004572:	2309      	movs	r3, #9
 8004574:	e012      	b.n	800459c <HAL_GPIO_Init+0x240>
 8004576:	230a      	movs	r3, #10
 8004578:	e010      	b.n	800459c <HAL_GPIO_Init+0x240>
 800457a:	2308      	movs	r3, #8
 800457c:	e00e      	b.n	800459c <HAL_GPIO_Init+0x240>
 800457e:	2307      	movs	r3, #7
 8004580:	e00c      	b.n	800459c <HAL_GPIO_Init+0x240>
 8004582:	2306      	movs	r3, #6
 8004584:	e00a      	b.n	800459c <HAL_GPIO_Init+0x240>
 8004586:	2305      	movs	r3, #5
 8004588:	e008      	b.n	800459c <HAL_GPIO_Init+0x240>
 800458a:	2304      	movs	r3, #4
 800458c:	e006      	b.n	800459c <HAL_GPIO_Init+0x240>
 800458e:	2303      	movs	r3, #3
 8004590:	e004      	b.n	800459c <HAL_GPIO_Init+0x240>
 8004592:	2302      	movs	r3, #2
 8004594:	e002      	b.n	800459c <HAL_GPIO_Init+0x240>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_GPIO_Init+0x240>
 800459a:	2300      	movs	r3, #0
 800459c:	69fa      	ldr	r2, [r7, #28]
 800459e:	f002 0203 	and.w	r2, r2, #3
 80045a2:	0092      	lsls	r2, r2, #2
 80045a4:	4093      	lsls	r3, r2
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045ac:	4935      	ldr	r1, [pc, #212]	; (8004684 <HAL_GPIO_Init+0x328>)
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	089b      	lsrs	r3, r3, #2
 80045b2:	3302      	adds	r3, #2
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ba:	4b3d      	ldr	r3, [pc, #244]	; (80046b0 <HAL_GPIO_Init+0x354>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	43db      	mvns	r3, r3
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	4013      	ands	r3, r2
 80045c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045de:	4a34      	ldr	r2, [pc, #208]	; (80046b0 <HAL_GPIO_Init+0x354>)
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045e4:	4b32      	ldr	r3, [pc, #200]	; (80046b0 <HAL_GPIO_Init+0x354>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	43db      	mvns	r3, r3
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4013      	ands	r3, r2
 80045f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004608:	4a29      	ldr	r2, [pc, #164]	; (80046b0 <HAL_GPIO_Init+0x354>)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800460e:	4b28      	ldr	r3, [pc, #160]	; (80046b0 <HAL_GPIO_Init+0x354>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004632:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <HAL_GPIO_Init+0x354>)
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <HAL_GPIO_Init+0x354>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <HAL_GPIO_Init+0x354>)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	3301      	adds	r3, #1
 8004666:	61fb      	str	r3, [r7, #28]
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b0f      	cmp	r3, #15
 800466c:	f67f ae86 	bls.w	800437c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	3724      	adds	r7, #36	; 0x24
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800
 8004684:	40013800 	.word	0x40013800
 8004688:	40020000 	.word	0x40020000
 800468c:	40020400 	.word	0x40020400
 8004690:	40020800 	.word	0x40020800
 8004694:	40020c00 	.word	0x40020c00
 8004698:	40021000 	.word	0x40021000
 800469c:	40021400 	.word	0x40021400
 80046a0:	40021800 	.word	0x40021800
 80046a4:	40021c00 	.word	0x40021c00
 80046a8:	40022000 	.word	0x40022000
 80046ac:	40022400 	.word	0x40022400
 80046b0:	40013c00 	.word	0x40013c00

080046b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691a      	ldr	r2, [r3, #16]
 80046c4:	887b      	ldrh	r3, [r7, #2]
 80046c6:	4013      	ands	r3, r2
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d002      	beq.n	80046d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
 80046d0:	e001      	b.n	80046d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046d2:	2300      	movs	r3, #0
 80046d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	807b      	strh	r3, [r7, #2]
 80046f0:	4613      	mov	r3, r2
 80046f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046f4:	787b      	ldrb	r3, [r7, #1]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046fa:	887a      	ldrh	r2, [r7, #2]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004700:	e003      	b.n	800470a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004702:	887b      	ldrh	r3, [r7, #2]
 8004704:	041a      	lsls	r2, r3, #16
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	619a      	str	r2, [r3, #24]
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004722:	4b08      	ldr	r3, [pc, #32]	; (8004744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004724:	695a      	ldr	r2, [r3, #20]
 8004726:	88fb      	ldrh	r3, [r7, #6]
 8004728:	4013      	ands	r3, r2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d006      	beq.n	800473c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800472e:	4a05      	ldr	r2, [pc, #20]	; (8004744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f806 	bl	8004748 <HAL_GPIO_EXTI_Callback>
  }
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40013c00 	.word	0x40013c00

08004748 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	4603      	mov	r3, r0
 8004750:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07f      	b.n	8004872 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fc fdb2 	bl	80012f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2224      	movs	r2, #36	; 0x24
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0201 	bic.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d107      	bne.n	80047da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047d6:	609a      	str	r2, [r3, #8]
 80047d8:	e006      	b.n	80047e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689a      	ldr	r2, [r3, #8]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d104      	bne.n	80047fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6859      	ldr	r1, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_I2C_Init+0x11c>)
 8004806:	430b      	orrs	r3, r1
 8004808:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004818:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691a      	ldr	r2, [r3, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69d9      	ldr	r1, [r3, #28]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a1a      	ldr	r2, [r3, #32]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f042 0201 	orr.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2220      	movs	r2, #32
 800485e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	02008000 	.word	0x02008000

08004880 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b088      	sub	sp, #32
 8004884:	af02      	add	r7, sp, #8
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	607a      	str	r2, [r7, #4]
 800488a:	461a      	mov	r2, r3
 800488c:	460b      	mov	r3, r1
 800488e:	817b      	strh	r3, [r7, #10]
 8004890:	4613      	mov	r3, r2
 8004892:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b20      	cmp	r3, #32
 800489e:	f040 80da 	bne.w	8004a56 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_I2C_Master_Transmit+0x30>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e0d3      	b.n	8004a58 <HAL_I2C_Master_Transmit+0x1d8>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048b8:	f7ff fc0e 	bl	80040d8 <HAL_GetTick>
 80048bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	2319      	movs	r3, #25
 80048c4:	2201      	movs	r2, #1
 80048c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f9e6 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e0be      	b.n	8004a58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2221      	movs	r2, #33	; 0x21
 80048de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2210      	movs	r2, #16
 80048e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	893a      	ldrh	r2, [r7, #8]
 80048fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004906:	b29b      	uxth	r3, r3
 8004908:	2bff      	cmp	r3, #255	; 0xff
 800490a:	d90e      	bls.n	800492a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	22ff      	movs	r2, #255	; 0xff
 8004910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004916:	b2da      	uxtb	r2, r3
 8004918:	8979      	ldrh	r1, [r7, #10]
 800491a:	4b51      	ldr	r3, [pc, #324]	; (8004a60 <HAL_I2C_Master_Transmit+0x1e0>)
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fbd0 	bl	80050c8 <I2C_TransferConfig>
 8004928:	e06c      	b.n	8004a04 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004938:	b2da      	uxtb	r2, r3
 800493a:	8979      	ldrh	r1, [r7, #10]
 800493c:	4b48      	ldr	r3, [pc, #288]	; (8004a60 <HAL_I2C_Master_Transmit+0x1e0>)
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fbbf 	bl	80050c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800494a:	e05b      	b.n	8004a04 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	6a39      	ldr	r1, [r7, #32]
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f9e3 	bl	8004d1c <I2C_WaitOnTXISFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e07b      	b.n	8004a58 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d034      	beq.n	8004a04 <HAL_I2C_Master_Transmit+0x184>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d130      	bne.n	8004a04 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2180      	movs	r1, #128	; 0x80
 80049ac:	68f8      	ldr	r0, [r7, #12]
 80049ae:	f000 f975 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d001      	beq.n	80049bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e04d      	b.n	8004a58 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2bff      	cmp	r3, #255	; 0xff
 80049c4:	d90e      	bls.n	80049e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	22ff      	movs	r2, #255	; 0xff
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	8979      	ldrh	r1, [r7, #10]
 80049d4:	2300      	movs	r3, #0
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fb73 	bl	80050c8 <I2C_TransferConfig>
 80049e2:	e00f      	b.n	8004a04 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	8979      	ldrh	r1, [r7, #10]
 80049f6:	2300      	movs	r3, #0
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb62 	bl	80050c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d19e      	bne.n	800494c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	6a39      	ldr	r1, [r7, #32]
 8004a12:	68f8      	ldr	r0, [r7, #12]
 8004a14:	f000 f9c2 	bl	8004d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e01a      	b.n	8004a58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2220      	movs	r2, #32
 8004a28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6859      	ldr	r1, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <HAL_I2C_Master_Transmit+0x1e4>)
 8004a36:	400b      	ands	r3, r1
 8004a38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e000      	b.n	8004a58 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
  }
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	80002000 	.word	0x80002000
 8004a64:	fe00e800 	.word	0xfe00e800

08004a68 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af02      	add	r7, sp, #8
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	461a      	mov	r2, r3
 8004a74:	460b      	mov	r3, r1
 8004a76:	817b      	strh	r3, [r7, #10]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b20      	cmp	r3, #32
 8004a86:	f040 80db 	bne.w	8004c40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_I2C_Master_Receive+0x30>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e0d4      	b.n	8004c42 <HAL_I2C_Master_Receive+0x1da>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004aa0:	f7ff fb1a 	bl	80040d8 <HAL_GetTick>
 8004aa4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	2319      	movs	r3, #25
 8004aac:	2201      	movs	r2, #1
 8004aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f000 f8f2 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d001      	beq.n	8004ac2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e0bf      	b.n	8004c42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2222      	movs	r2, #34	; 0x22
 8004ac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2210      	movs	r2, #16
 8004ace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	893a      	ldrh	r2, [r7, #8]
 8004ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2bff      	cmp	r3, #255	; 0xff
 8004af2:	d90e      	bls.n	8004b12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	22ff      	movs	r2, #255	; 0xff
 8004af8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	8979      	ldrh	r1, [r7, #10]
 8004b02:	4b52      	ldr	r3, [pc, #328]	; (8004c4c <HAL_I2C_Master_Receive+0x1e4>)
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b0a:	68f8      	ldr	r0, [r7, #12]
 8004b0c:	f000 fadc 	bl	80050c8 <I2C_TransferConfig>
 8004b10:	e06d      	b.n	8004bee <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	8979      	ldrh	r1, [r7, #10]
 8004b24:	4b49      	ldr	r3, [pc, #292]	; (8004c4c <HAL_I2C_Master_Receive+0x1e4>)
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 facb 	bl	80050c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004b32:	e05c      	b.n	8004bee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	6a39      	ldr	r1, [r7, #32]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f96b 	bl	8004e14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e07c      	b.n	8004c42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b64:	3b01      	subs	r3, #1
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	3b01      	subs	r3, #1
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d034      	beq.n	8004bee <HAL_I2C_Master_Receive+0x186>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d130      	bne.n	8004bee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	2200      	movs	r2, #0
 8004b94:	2180      	movs	r1, #128	; 0x80
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f000 f880 	bl	8004c9c <I2C_WaitOnFlagUntilTimeout>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e04d      	b.n	8004c42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	2bff      	cmp	r3, #255	; 0xff
 8004bae:	d90e      	bls.n	8004bce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	22ff      	movs	r2, #255	; 0xff
 8004bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	8979      	ldrh	r1, [r7, #10]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fa7e 	bl	80050c8 <I2C_TransferConfig>
 8004bcc:	e00f      	b.n	8004bee <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd2:	b29a      	uxth	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	8979      	ldrh	r1, [r7, #10]
 8004be0:	2300      	movs	r3, #0
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 fa6d 	bl	80050c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d19d      	bne.n	8004b34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	6a39      	ldr	r1, [r7, #32]
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 f8cd 	bl	8004d9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e01a      	b.n	8004c42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2220      	movs	r2, #32
 8004c12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6859      	ldr	r1, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b0c      	ldr	r3, [pc, #48]	; (8004c50 <HAL_I2C_Master_Receive+0x1e8>)
 8004c20:	400b      	ands	r3, r1
 8004c22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	80002400 	.word	0x80002400
 8004c50:	fe00e800 	.word	0xfe00e800

08004c54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d103      	bne.n	8004c72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d007      	beq.n	8004c90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	619a      	str	r2, [r3, #24]
  }
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cac:	e022      	b.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb4:	d01e      	beq.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb6:	f7ff fa0f 	bl	80040d8 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d302      	bcc.n	8004ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d113      	bne.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e00f      	b.n	8004d14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	79fb      	ldrb	r3, [r7, #7]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d0cd      	beq.n	8004cae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d28:	e02c      	b.n	8004d84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	68b9      	ldr	r1, [r7, #8]
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f8ea 	bl	8004f08 <I2C_IsErrorOccurred>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e02a      	b.n	8004d94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d01e      	beq.n	8004d84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d46:	f7ff f9c7 	bl	80040d8 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d302      	bcc.n	8004d5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d113      	bne.n	8004d84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d60:	f043 0220 	orr.w	r2, r3, #32
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e007      	b.n	8004d94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d1cb      	bne.n	8004d2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004da8:	e028      	b.n	8004dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68b9      	ldr	r1, [r7, #8]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 f8aa 	bl	8004f08 <I2C_IsErrorOccurred>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e026      	b.n	8004e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dbe:	f7ff f98b 	bl	80040d8 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d302      	bcc.n	8004dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d113      	bne.n	8004dfc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd8:	f043 0220 	orr.w	r2, r3, #32
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e007      	b.n	8004e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	f003 0320 	and.w	r3, r3, #32
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	d1cf      	bne.n	8004daa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e20:	e064      	b.n	8004eec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f86e 	bl	8004f08 <I2C_IsErrorOccurred>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d001      	beq.n	8004e36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e062      	b.n	8004efc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	f003 0320 	and.w	r3, r3, #32
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d138      	bne.n	8004eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d105      	bne.n	8004e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e04e      	b.n	8004efc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f003 0310 	and.w	r3, r3, #16
 8004e68:	2b10      	cmp	r3, #16
 8004e6a:	d107      	bne.n	8004e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2210      	movs	r2, #16
 8004e72:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2204      	movs	r2, #4
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44
 8004e7a:	e002      	b.n	8004e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2220      	movs	r2, #32
 8004e88:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6859      	ldr	r1, [r3, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b1b      	ldr	r3, [pc, #108]	; (8004f04 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004e96:	400b      	ands	r3, r1
 8004e98:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e022      	b.n	8004efc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eb6:	f7ff f90f 	bl	80040d8 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d302      	bcc.n	8004ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10f      	bne.n	8004eec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e007      	b.n	8004efc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d193      	bne.n	8004e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	fe00e800 	.word	0xfe00e800

08004f08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08a      	sub	sp, #40	; 0x28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004f22:	2300      	movs	r3, #0
 8004f24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d068      	beq.n	8005006 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2210      	movs	r2, #16
 8004f3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f3c:	e049      	b.n	8004fd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d045      	beq.n	8004fd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f46:	f7ff f8c7 	bl	80040d8 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d302      	bcc.n	8004f5c <I2C_IsErrorOccurred+0x54>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d13a      	bne.n	8004fd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f7e:	d121      	bne.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f86:	d01d      	beq.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f88:	7cfb      	ldrb	r3, [r7, #19]
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d01a      	beq.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f9e:	f7ff f89b 	bl	80040d8 <HAL_GetTick>
 8004fa2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fa4:	e00e      	b.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004fa6:	f7ff f897 	bl	80040d8 <HAL_GetTick>
 8004faa:	4602      	mov	r2, r0
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	2b19      	cmp	r3, #25
 8004fb2:	d907      	bls.n	8004fc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	f043 0320 	orr.w	r3, r3, #32
 8004fba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004fc2:	e006      	b.n	8004fd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f003 0320 	and.w	r3, r3, #32
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d1e9      	bne.n	8004fa6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b20      	cmp	r3, #32
 8004fde:	d003      	beq.n	8004fe8 <I2C_IsErrorOccurred+0xe0>
 8004fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d0aa      	beq.n	8004f3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d103      	bne.n	8004ff8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	f043 0304 	orr.w	r3, r3, #4
 8004ffe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005028:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	f043 0308 	orr.w	r3, r3, #8
 8005040:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800504a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00b      	beq.n	8005074 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	f043 0302 	orr.w	r3, r3, #2
 8005062:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800506c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01c      	beq.n	80050b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7ff fde9 	bl	8004c54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6859      	ldr	r1, [r3, #4]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	4b0d      	ldr	r3, [pc, #52]	; (80050c4 <I2C_IsErrorOccurred+0x1bc>)
 800508e:	400b      	ands	r3, r1
 8005090:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	431a      	orrs	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2220      	movs	r2, #32
 80050a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80050b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3728      	adds	r7, #40	; 0x28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	bf00      	nop
 80050c4:	fe00e800 	.word	0xfe00e800

080050c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b087      	sub	sp, #28
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	607b      	str	r3, [r7, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	817b      	strh	r3, [r7, #10]
 80050d6:	4613      	mov	r3, r2
 80050d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050da:	897b      	ldrh	r3, [r7, #10]
 80050dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050e0:	7a7b      	ldrb	r3, [r7, #9]
 80050e2:	041b      	lsls	r3, r3, #16
 80050e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	0d5b      	lsrs	r3, r3, #21
 8005102:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <I2C_TransferConfig+0x60>)
 8005108:	430b      	orrs	r3, r1
 800510a:	43db      	mvns	r3, r3
 800510c:	ea02 0103 	and.w	r1, r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	430a      	orrs	r2, r1
 8005118:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800511a:	bf00      	nop
 800511c:	371c      	adds	r7, #28
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	03ff63ff 	.word	0x03ff63ff

0800512c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b20      	cmp	r3, #32
 8005140:	d138      	bne.n	80051b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800514c:	2302      	movs	r3, #2
 800514e:	e032      	b.n	80051b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2224      	movs	r2, #36	; 0x24
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800517e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	6819      	ldr	r1, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	430a      	orrs	r2, r1
 800518e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0201 	orr.w	r2, r2, #1
 800519e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2220      	movs	r2, #32
 80051a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	e000      	b.n	80051b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051b4:	2302      	movs	r3, #2
  }
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d139      	bne.n	800524c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e033      	b.n	800524e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2224      	movs	r2, #36	; 0x24
 80051f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0201 	bic.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005214:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 0201 	orr.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	e000      	b.n	800524e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800524c:	2302      	movs	r3, #2
  }
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
	...

0800525c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a04      	ldr	r2, [pc, #16]	; (8005278 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800526a:	6013      	str	r3, [r2, #0]
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40007000 	.word	0x40007000

0800527c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005286:	4b23      	ldr	r3, [pc, #140]	; (8005314 <HAL_PWREx_EnableOverDrive+0x98>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	4a22      	ldr	r2, [pc, #136]	; (8005314 <HAL_PWREx_EnableOverDrive+0x98>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005290:	6413      	str	r3, [r2, #64]	; 0x40
 8005292:	4b20      	ldr	r3, [pc, #128]	; (8005314 <HAL_PWREx_EnableOverDrive+0x98>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800529a:	603b      	str	r3, [r7, #0]
 800529c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800529e:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052aa:	f7fe ff15 	bl	80040d8 <HAL_GetTick>
 80052ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052b0:	e009      	b.n	80052c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052b2:	f7fe ff11 	bl	80040d8 <HAL_GetTick>
 80052b6:	4602      	mov	r2, r0
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	1ad3      	subs	r3, r2, r3
 80052bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052c0:	d901      	bls.n	80052c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e022      	b.n	800530c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d2:	d1ee      	bne.n	80052b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a0f      	ldr	r2, [pc, #60]	; (8005318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052e0:	f7fe fefa 	bl	80040d8 <HAL_GetTick>
 80052e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052e6:	e009      	b.n	80052fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052e8:	f7fe fef6 	bl	80040d8 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052f6:	d901      	bls.n	80052fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e007      	b.n	800530c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052fc:	4b06      	ldr	r3, [pc, #24]	; (8005318 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005304:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005308:	d1ee      	bne.n	80052e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	40007000 	.word	0x40007000

0800531c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005324:	2300      	movs	r3, #0
 8005326:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e29b      	b.n	800586a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	f000 8087 	beq.w	800544e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005340:	4b96      	ldr	r3, [pc, #600]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f003 030c 	and.w	r3, r3, #12
 8005348:	2b04      	cmp	r3, #4
 800534a:	d00c      	beq.n	8005366 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534c:	4b93      	ldr	r3, [pc, #588]	; (800559c <HAL_RCC_OscConfig+0x280>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 030c 	and.w	r3, r3, #12
 8005354:	2b08      	cmp	r3, #8
 8005356:	d112      	bne.n	800537e <HAL_RCC_OscConfig+0x62>
 8005358:	4b90      	ldr	r3, [pc, #576]	; (800559c <HAL_RCC_OscConfig+0x280>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005364:	d10b      	bne.n	800537e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005366:	4b8d      	ldr	r3, [pc, #564]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d06c      	beq.n	800544c <HAL_RCC_OscConfig+0x130>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d168      	bne.n	800544c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e275      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005386:	d106      	bne.n	8005396 <HAL_RCC_OscConfig+0x7a>
 8005388:	4b84      	ldr	r3, [pc, #528]	; (800559c <HAL_RCC_OscConfig+0x280>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a83      	ldr	r2, [pc, #524]	; (800559c <HAL_RCC_OscConfig+0x280>)
 800538e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	e02e      	b.n	80053f4 <HAL_RCC_OscConfig+0xd8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d10c      	bne.n	80053b8 <HAL_RCC_OscConfig+0x9c>
 800539e:	4b7f      	ldr	r3, [pc, #508]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a7e      	ldr	r2, [pc, #504]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	4b7c      	ldr	r3, [pc, #496]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7b      	ldr	r2, [pc, #492]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	e01d      	b.n	80053f4 <HAL_RCC_OscConfig+0xd8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053c0:	d10c      	bne.n	80053dc <HAL_RCC_OscConfig+0xc0>
 80053c2:	4b76      	ldr	r3, [pc, #472]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a75      	ldr	r2, [pc, #468]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053cc:	6013      	str	r3, [r2, #0]
 80053ce:	4b73      	ldr	r3, [pc, #460]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a72      	ldr	r2, [pc, #456]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	e00b      	b.n	80053f4 <HAL_RCC_OscConfig+0xd8>
 80053dc:	4b6f      	ldr	r3, [pc, #444]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a6e      	ldr	r2, [pc, #440]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	4b6c      	ldr	r3, [pc, #432]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a6b      	ldr	r2, [pc, #428]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80053ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d013      	beq.n	8005424 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053fc:	f7fe fe6c 	bl	80040d8 <HAL_GetTick>
 8005400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005404:	f7fe fe68 	bl	80040d8 <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e229      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b61      	ldr	r3, [pc, #388]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0xe8>
 8005422:	e014      	b.n	800544e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fe fe58 	bl	80040d8 <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800542c:	f7fe fe54 	bl	80040d8 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b64      	cmp	r3, #100	; 0x64
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e215      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800543e:	4b57      	ldr	r3, [pc, #348]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f0      	bne.n	800542c <HAL_RCC_OscConfig+0x110>
 800544a:	e000      	b.n	800544e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800544c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d069      	beq.n	800552e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800545a:	4b50      	ldr	r3, [pc, #320]	; (800559c <HAL_RCC_OscConfig+0x280>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f003 030c 	and.w	r3, r3, #12
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005466:	4b4d      	ldr	r3, [pc, #308]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b08      	cmp	r3, #8
 8005470:	d11c      	bne.n	80054ac <HAL_RCC_OscConfig+0x190>
 8005472:	4b4a      	ldr	r3, [pc, #296]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d116      	bne.n	80054ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800547e:	4b47      	ldr	r3, [pc, #284]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_RCC_OscConfig+0x17a>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d001      	beq.n	8005496 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e1e9      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005496:	4b41      	ldr	r3, [pc, #260]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	493d      	ldr	r1, [pc, #244]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054aa:	e040      	b.n	800552e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d023      	beq.n	80054fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054b4:	4b39      	ldr	r3, [pc, #228]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a38      	ldr	r2, [pc, #224]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80054ba:	f043 0301 	orr.w	r3, r3, #1
 80054be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fe fe0a 	bl	80040d8 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054c8:	f7fe fe06 	bl	80040d8 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e1c7      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054da:	4b30      	ldr	r3, [pc, #192]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0f0      	beq.n	80054c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e6:	4b2d      	ldr	r3, [pc, #180]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	4929      	ldr	r1, [pc, #164]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]
 80054fa:	e018      	b.n	800552e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054fc:	4b27      	ldr	r3, [pc, #156]	; (800559c <HAL_RCC_OscConfig+0x280>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a26      	ldr	r2, [pc, #152]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005502:	f023 0301 	bic.w	r3, r3, #1
 8005506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fe fde6 	bl	80040d8 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005510:	f7fe fde2 	bl	80040d8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e1a3      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005522:	4b1e      	ldr	r3, [pc, #120]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d038      	beq.n	80055ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	695b      	ldr	r3, [r3, #20]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d019      	beq.n	8005576 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005542:	4b16      	ldr	r3, [pc, #88]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005546:	4a15      	ldr	r2, [pc, #84]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800554e:	f7fe fdc3 	bl	80040d8 <HAL_GetTick>
 8005552:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005554:	e008      	b.n	8005568 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005556:	f7fe fdbf 	bl	80040d8 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b02      	cmp	r3, #2
 8005562:	d901      	bls.n	8005568 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e180      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <HAL_RCC_OscConfig+0x280>)
 800556a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d0f0      	beq.n	8005556 <HAL_RCC_OscConfig+0x23a>
 8005574:	e01a      	b.n	80055ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005576:	4b09      	ldr	r3, [pc, #36]	; (800559c <HAL_RCC_OscConfig+0x280>)
 8005578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800557a:	4a08      	ldr	r2, [pc, #32]	; (800559c <HAL_RCC_OscConfig+0x280>)
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005582:	f7fe fda9 	bl	80040d8 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005588:	e00a      	b.n	80055a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800558a:	f7fe fda5 	bl	80040d8 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d903      	bls.n	80055a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e166      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
 800559c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055a0:	4b92      	ldr	r3, [pc, #584]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80055a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1ee      	bne.n	800558a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0304 	and.w	r3, r3, #4
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80a4 	beq.w	8005702 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ba:	4b8c      	ldr	r3, [pc, #560]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10d      	bne.n	80055e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80055c6:	4b89      	ldr	r3, [pc, #548]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	4a88      	ldr	r2, [pc, #544]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80055cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d0:	6413      	str	r3, [r2, #64]	; 0x40
 80055d2:	4b86      	ldr	r3, [pc, #536]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055da:	60bb      	str	r3, [r7, #8]
 80055dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055de:	2301      	movs	r3, #1
 80055e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e2:	4b83      	ldr	r3, [pc, #524]	; (80057f0 <HAL_RCC_OscConfig+0x4d4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d118      	bne.n	8005620 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80055ee:	4b80      	ldr	r3, [pc, #512]	; (80057f0 <HAL_RCC_OscConfig+0x4d4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a7f      	ldr	r2, [pc, #508]	; (80057f0 <HAL_RCC_OscConfig+0x4d4>)
 80055f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055fa:	f7fe fd6d 	bl	80040d8 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005602:	f7fe fd69 	bl	80040d8 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b64      	cmp	r3, #100	; 0x64
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e12a      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005614:	4b76      	ldr	r3, [pc, #472]	; (80057f0 <HAL_RCC_OscConfig+0x4d4>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d106      	bne.n	8005636 <HAL_RCC_OscConfig+0x31a>
 8005628:	4b70      	ldr	r3, [pc, #448]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	4a6f      	ldr	r2, [pc, #444]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	6713      	str	r3, [r2, #112]	; 0x70
 8005634:	e02d      	b.n	8005692 <HAL_RCC_OscConfig+0x376>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10c      	bne.n	8005658 <HAL_RCC_OscConfig+0x33c>
 800563e:	4b6b      	ldr	r3, [pc, #428]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	4a6a      	ldr	r2, [pc, #424]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	6713      	str	r3, [r2, #112]	; 0x70
 800564a:	4b68      	ldr	r3, [pc, #416]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	4a67      	ldr	r2, [pc, #412]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	6713      	str	r3, [r2, #112]	; 0x70
 8005656:	e01c      	b.n	8005692 <HAL_RCC_OscConfig+0x376>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b05      	cmp	r3, #5
 800565e:	d10c      	bne.n	800567a <HAL_RCC_OscConfig+0x35e>
 8005660:	4b62      	ldr	r3, [pc, #392]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005664:	4a61      	ldr	r2, [pc, #388]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005666:	f043 0304 	orr.w	r3, r3, #4
 800566a:	6713      	str	r3, [r2, #112]	; 0x70
 800566c:	4b5f      	ldr	r3, [pc, #380]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a5e      	ldr	r2, [pc, #376]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005672:	f043 0301 	orr.w	r3, r3, #1
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
 8005678:	e00b      	b.n	8005692 <HAL_RCC_OscConfig+0x376>
 800567a:	4b5c      	ldr	r3, [pc, #368]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567e:	4a5b      	ldr	r2, [pc, #364]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005680:	f023 0301 	bic.w	r3, r3, #1
 8005684:	6713      	str	r3, [r2, #112]	; 0x70
 8005686:	4b59      	ldr	r3, [pc, #356]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a58      	ldr	r2, [pc, #352]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d015      	beq.n	80056c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fe fd1d 	bl	80040d8 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056a0:	e00a      	b.n	80056b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a2:	f7fe fd19 	bl	80040d8 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e0d8      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b8:	4b4c      	ldr	r3, [pc, #304]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80056ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056bc:	f003 0302 	and.w	r3, r3, #2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0ee      	beq.n	80056a2 <HAL_RCC_OscConfig+0x386>
 80056c4:	e014      	b.n	80056f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c6:	f7fe fd07 	bl	80040d8 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056cc:	e00a      	b.n	80056e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fe fd03 	bl	80040d8 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e0c2      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056e4:	4b41      	ldr	r3, [pc, #260]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	f003 0302 	and.w	r3, r3, #2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1ee      	bne.n	80056ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056f0:	7dfb      	ldrb	r3, [r7, #23]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d105      	bne.n	8005702 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056f6:	4b3d      	ldr	r3, [pc, #244]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	4a3c      	ldr	r2, [pc, #240]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80056fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005700:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 80ae 	beq.w	8005868 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800570c:	4b37      	ldr	r3, [pc, #220]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b08      	cmp	r3, #8
 8005716:	d06d      	beq.n	80057f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b02      	cmp	r3, #2
 800571e:	d14b      	bne.n	80057b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005720:	4b32      	ldr	r3, [pc, #200]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a31      	ldr	r2, [pc, #196]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800572a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fe fcd4 	bl	80040d8 <HAL_GetTick>
 8005730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005734:	f7fe fcd0 	bl	80040d8 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e091      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005746:	4b29      	ldr	r3, [pc, #164]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f0      	bne.n	8005734 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	69da      	ldr	r2, [r3, #28]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	431a      	orrs	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	019b      	lsls	r3, r3, #6
 8005762:	431a      	orrs	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005768:	085b      	lsrs	r3, r3, #1
 800576a:	3b01      	subs	r3, #1
 800576c:	041b      	lsls	r3, r3, #16
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005774:	061b      	lsls	r3, r3, #24
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	071b      	lsls	r3, r3, #28
 800577e:	491b      	ldr	r1, [pc, #108]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005780:	4313      	orrs	r3, r2
 8005782:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005784:	4b19      	ldr	r3, [pc, #100]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a18      	ldr	r2, [pc, #96]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 800578a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800578e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005790:	f7fe fca2 	bl	80040d8 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005798:	f7fe fc9e 	bl	80040d8 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e05f      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057aa:	4b10      	ldr	r3, [pc, #64]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x47c>
 80057b6:	e057      	b.n	8005868 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b8:	4b0c      	ldr	r3, [pc, #48]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a0b      	ldr	r2, [pc, #44]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80057be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fe fc88 	bl	80040d8 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fe fc84 	bl	80040d8 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e045      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057de:	4b03      	ldr	r3, [pc, #12]	; (80057ec <HAL_RCC_OscConfig+0x4d0>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d1f0      	bne.n	80057cc <HAL_RCC_OscConfig+0x4b0>
 80057ea:	e03d      	b.n	8005868 <HAL_RCC_OscConfig+0x54c>
 80057ec:	40023800 	.word	0x40023800
 80057f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80057f4:	4b1f      	ldr	r3, [pc, #124]	; (8005874 <HAL_RCC_OscConfig+0x558>)
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	699b      	ldr	r3, [r3, #24]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d030      	beq.n	8005864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800580c:	429a      	cmp	r2, r3
 800580e:	d129      	bne.n	8005864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581a:	429a      	cmp	r2, r3
 800581c:	d122      	bne.n	8005864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005824:	4013      	ands	r3, r2
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800582a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800582c:	4293      	cmp	r3, r2
 800582e:	d119      	bne.n	8005864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	3b01      	subs	r3, #1
 800583e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005840:	429a      	cmp	r2, r3
 8005842:	d10f      	bne.n	8005864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d107      	bne.n	8005864 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005860:	429a      	cmp	r2, r3
 8005862:	d001      	beq.n	8005868 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800

08005878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e0d0      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005890:	4b6a      	ldr	r3, [pc, #424]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d910      	bls.n	80058c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589e:	4b67      	ldr	r3, [pc, #412]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f023 020f 	bic.w	r2, r3, #15
 80058a6:	4965      	ldr	r1, [pc, #404]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ae:	4b63      	ldr	r3, [pc, #396]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0b8      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d020      	beq.n	800590e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d8:	4b59      	ldr	r3, [pc, #356]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a58      	ldr	r2, [pc, #352]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 80058de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f0:	4b53      	ldr	r3, [pc, #332]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4a52      	ldr	r2, [pc, #328]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 80058f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fc:	4b50      	ldr	r3, [pc, #320]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	494d      	ldr	r1, [pc, #308]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d040      	beq.n	800599c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d107      	bne.n	8005932 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005922:	4b47      	ldr	r3, [pc, #284]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d115      	bne.n	800595a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e07f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d107      	bne.n	800594a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800593a:	4b41      	ldr	r3, [pc, #260]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d109      	bne.n	800595a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e073      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594a:	4b3d      	ldr	r3, [pc, #244]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e06b      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800595a:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f023 0203 	bic.w	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	4936      	ldr	r1, [pc, #216]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 8005968:	4313      	orrs	r3, r2
 800596a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800596c:	f7fe fbb4 	bl	80040d8 <HAL_GetTick>
 8005970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005972:	e00a      	b.n	800598a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005974:	f7fe fbb0 	bl	80040d8 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005982:	4293      	cmp	r3, r2
 8005984:	d901      	bls.n	800598a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	e053      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598a:	4b2d      	ldr	r3, [pc, #180]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 020c 	and.w	r2, r3, #12
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	429a      	cmp	r2, r3
 800599a:	d1eb      	bne.n	8005974 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800599c:	4b27      	ldr	r3, [pc, #156]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d210      	bcs.n	80059cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059aa:	4b24      	ldr	r3, [pc, #144]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f023 020f 	bic.w	r2, r3, #15
 80059b2:	4922      	ldr	r1, [pc, #136]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ba:	4b20      	ldr	r3, [pc, #128]	; (8005a3c <HAL_RCC_ClockConfig+0x1c4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 030f 	and.w	r3, r3, #15
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d001      	beq.n	80059cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e032      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d8:	4b19      	ldr	r3, [pc, #100]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4916      	ldr	r1, [pc, #88]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059f6:	4b12      	ldr	r3, [pc, #72]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	490e      	ldr	r1, [pc, #56]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a0a:	f000 f821 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	4b0b      	ldr	r3, [pc, #44]	; (8005a40 <HAL_RCC_ClockConfig+0x1c8>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	490a      	ldr	r1, [pc, #40]	; (8005a44 <HAL_RCC_ClockConfig+0x1cc>)
 8005a1c:	5ccb      	ldrb	r3, [r1, r3]
 8005a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a22:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <HAL_RCC_ClockConfig+0x1d0>)
 8005a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <HAL_RCC_ClockConfig+0x1d4>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe fb10 	bl	8004050 <HAL_InitTick>

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40023c00 	.word	0x40023c00
 8005a40:	40023800 	.word	0x40023800
 8005a44:	0800b660 	.word	0x0800b660
 8005a48:	20000070 	.word	0x20000070
 8005a4c:	20000078 	.word	0x20000078

08005a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a54:	b094      	sub	sp, #80	; 0x50
 8005a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a60:	2300      	movs	r3, #0
 8005a62:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a68:	4b79      	ldr	r3, [pc, #484]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d00d      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0x40>
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	f200 80e1 	bhi.w	8005c3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x34>
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d003      	beq.n	8005a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a82:	e0db      	b.n	8005c3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a84:	4b73      	ldr	r3, [pc, #460]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a86:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a88:	e0db      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a8a:	4b73      	ldr	r3, [pc, #460]	; (8005c58 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a8e:	e0d8      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a90:	4b6f      	ldr	r3, [pc, #444]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a98:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a9a:	4b6d      	ldr	r3, [pc, #436]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d063      	beq.n	8005b6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa6:	4b6a      	ldr	r3, [pc, #424]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	099b      	lsrs	r3, r3, #6
 8005aac:	2200      	movs	r2, #0
 8005aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aba:	2300      	movs	r3, #0
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
 8005abe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	f04f 0000 	mov.w	r0, #0
 8005aca:	f04f 0100 	mov.w	r1, #0
 8005ace:	0159      	lsls	r1, r3, #5
 8005ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad4:	0150      	lsls	r0, r2, #5
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4621      	mov	r1, r4
 8005adc:	1a51      	subs	r1, r2, r1
 8005ade:	6139      	str	r1, [r7, #16]
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005af4:	4659      	mov	r1, fp
 8005af6:	018b      	lsls	r3, r1, #6
 8005af8:	4651      	mov	r1, sl
 8005afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005afe:	4651      	mov	r1, sl
 8005b00:	018a      	lsls	r2, r1, #6
 8005b02:	4651      	mov	r1, sl
 8005b04:	ebb2 0801 	subs.w	r8, r2, r1
 8005b08:	4659      	mov	r1, fp
 8005b0a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b22:	4690      	mov	r8, r2
 8005b24:	4699      	mov	r9, r3
 8005b26:	4623      	mov	r3, r4
 8005b28:	eb18 0303 	adds.w	r3, r8, r3
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	462b      	mov	r3, r5
 8005b30:	eb49 0303 	adc.w	r3, r9, r3
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b42:	4629      	mov	r1, r5
 8005b44:	024b      	lsls	r3, r1, #9
 8005b46:	4621      	mov	r1, r4
 8005b48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	024a      	lsls	r2, r1, #9
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b56:	2200      	movs	r2, #0
 8005b58:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b60:	f7fa fbc6 	bl	80002f0 <__aeabi_uldivmod>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4613      	mov	r3, r2
 8005b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b6c:	e058      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6e:	4b38      	ldr	r3, [pc, #224]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	099b      	lsrs	r3, r3, #6
 8005b74:	2200      	movs	r2, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	4611      	mov	r1, r2
 8005b7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	2300      	movs	r3, #0
 8005b82:	627b      	str	r3, [r7, #36]	; 0x24
 8005b84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	f04f 0000 	mov.w	r0, #0
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	0159      	lsls	r1, r3, #5
 8005b96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b9a:	0150      	lsls	r0, r2, #5
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bc0:	ebb2 040a 	subs.w	r4, r2, sl
 8005bc4:	eb63 050b 	sbc.w	r5, r3, fp
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	00eb      	lsls	r3, r5, #3
 8005bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bd6:	00e2      	lsls	r2, r4, #3
 8005bd8:	4614      	mov	r4, r2
 8005bda:	461d      	mov	r5, r3
 8005bdc:	4643      	mov	r3, r8
 8005bde:	18e3      	adds	r3, r4, r3
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	464b      	mov	r3, r9
 8005be4:	eb45 0303 	adc.w	r3, r5, r3
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	028b      	lsls	r3, r1, #10
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c00:	4621      	mov	r1, r4
 8005c02:	028a      	lsls	r2, r1, #10
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	61fa      	str	r2, [r7, #28]
 8005c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c14:	f7fa fb6c 	bl	80002f0 <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c3a:	e002      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c3c:	4b05      	ldr	r3, [pc, #20]	; (8005c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3750      	adds	r7, #80	; 0x50
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800
 8005c54:	00f42400 	.word	0x00f42400
 8005c58:	007a1200 	.word	0x007a1200

08005c5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000070 	.word	0x20000070

08005c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c78:	f7ff fff0 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	0a9b      	lsrs	r3, r3, #10
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4903      	ldr	r1, [pc, #12]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c8a:	5ccb      	ldrb	r3, [r1, r3]
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40023800 	.word	0x40023800
 8005c98:	0800b670 	.word	0x0800b670

08005c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ca0:	f7ff ffdc 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0b5b      	lsrs	r3, r3, #13
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	0800b670 	.word	0x0800b670

08005cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b088      	sub	sp, #32
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d012      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005cec:	4b69      	ldr	r3, [pc, #420]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	4a68      	ldr	r2, [pc, #416]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005cf6:	6093      	str	r3, [r2, #8]
 8005cf8:	4b66      	ldr	r3, [pc, #408]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d00:	4964      	ldr	r1, [pc, #400]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d02:	4313      	orrs	r3, r2
 8005d04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d017      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d1e:	4b5d      	ldr	r3, [pc, #372]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2c:	4959      	ldr	r1, [pc, #356]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d017      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d5a:	4b4e      	ldr	r3, [pc, #312]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	494a      	ldr	r1, [pc, #296]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d78:	d101      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005d86:	2301      	movs	r3, #1
 8005d88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005d96:	2301      	movs	r3, #1
 8005d98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 808b 	beq.w	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005da8:	4b3a      	ldr	r3, [pc, #232]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	4a39      	ldr	r2, [pc, #228]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db2:	6413      	str	r3, [r2, #64]	; 0x40
 8005db4:	4b37      	ldr	r3, [pc, #220]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbc:	60bb      	str	r3, [r7, #8]
 8005dbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005dc0:	4b35      	ldr	r3, [pc, #212]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a34      	ldr	r2, [pc, #208]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dcc:	f7fe f984 	bl	80040d8 <HAL_GetTick>
 8005dd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dd4:	f7fe f980 	bl	80040d8 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b64      	cmp	r3, #100	; 0x64
 8005de0:	d901      	bls.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e38f      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005de6:	4b2c      	ldr	r3, [pc, #176]	; (8005e98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f0      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005df2:	4b28      	ldr	r3, [pc, #160]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d035      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0a:	693a      	ldr	r2, [r7, #16]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d02e      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e10:	4b20      	ldr	r3, [pc, #128]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e26:	4b1b      	ldr	r3, [pc, #108]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2a:	4a1a      	ldr	r2, [pc, #104]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e32:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e38:	4b16      	ldr	r3, [pc, #88]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d114      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e44:	f7fe f948 	bl	80040d8 <HAL_GetTick>
 8005e48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4a:	e00a      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e4c:	f7fe f944 	bl	80040d8 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e351      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e62:	4b0c      	ldr	r3, [pc, #48]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d0ee      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e7a:	d111      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005e7c:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e88:	4b04      	ldr	r3, [pc, #16]	; (8005e9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e8a:	400b      	ands	r3, r1
 8005e8c:	4901      	ldr	r1, [pc, #4]	; (8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	608b      	str	r3, [r1, #8]
 8005e92:	e00b      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005e94:	40023800 	.word	0x40023800
 8005e98:	40007000 	.word	0x40007000
 8005e9c:	0ffffcff 	.word	0x0ffffcff
 8005ea0:	4bac      	ldr	r3, [pc, #688]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	4aab      	ldr	r2, [pc, #684]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ea6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005eaa:	6093      	str	r3, [r2, #8]
 8005eac:	4ba9      	ldr	r3, [pc, #676]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eb8:	49a6      	ldr	r1, [pc, #664]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d010      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005eca:	4ba2      	ldr	r3, [pc, #648]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ed0:	4aa0      	ldr	r2, [pc, #640]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005eda:	4b9e      	ldr	r3, [pc, #632]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005edc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee4:	499b      	ldr	r1, [pc, #620]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ef8:	4b96      	ldr	r3, [pc, #600]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f06:	4993      	ldr	r1, [pc, #588]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f1a:	4b8e      	ldr	r3, [pc, #568]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f28:	498a      	ldr	r1, [pc, #552]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f3c:	4b85      	ldr	r3, [pc, #532]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f4a:	4982      	ldr	r1, [pc, #520]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f5e:	4b7d      	ldr	r3, [pc, #500]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	4979      	ldr	r1, [pc, #484]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00a      	beq.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f80:	4b74      	ldr	r3, [pc, #464]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f86:	f023 0203 	bic.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8e:	4971      	ldr	r1, [pc, #452]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00a      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fa2:	4b6c      	ldr	r3, [pc, #432]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa8:	f023 020c 	bic.w	r2, r3, #12
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fb0:	4968      	ldr	r1, [pc, #416]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fc4:	4b63      	ldr	r3, [pc, #396]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fd2:	4960      	ldr	r1, [pc, #384]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fe6:	4b5b      	ldr	r3, [pc, #364]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff4:	4957      	ldr	r1, [pc, #348]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006008:	4b52      	ldr	r3, [pc, #328]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800600a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800600e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006016:	494f      	ldr	r1, [pc, #316]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006018:	4313      	orrs	r3, r2
 800601a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800602a:	4b4a      	ldr	r3, [pc, #296]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800602c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006030:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006038:	4946      	ldr	r1, [pc, #280]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800603a:	4313      	orrs	r3, r2
 800603c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800604c:	4b41      	ldr	r3, [pc, #260]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006052:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800605a:	493e      	ldr	r1, [pc, #248]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800605c:	4313      	orrs	r3, r2
 800605e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800606e:	4b39      	ldr	r3, [pc, #228]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006074:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800607c:	4935      	ldr	r1, [pc, #212]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006090:	4b30      	ldr	r3, [pc, #192]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006096:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800609e:	492d      	ldr	r1, [pc, #180]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d011      	beq.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060b2:	4b28      	ldr	r3, [pc, #160]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c0:	4924      	ldr	r1, [pc, #144]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060d0:	d101      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80060d2:	2301      	movs	r3, #1
 80060d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0308 	and.w	r3, r3, #8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80060e2:	2301      	movs	r3, #1
 80060e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00a      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060f2:	4b18      	ldr	r3, [pc, #96]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006100:	4914      	ldr	r1, [pc, #80]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006102:	4313      	orrs	r3, r2
 8006104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006114:	4b0f      	ldr	r3, [pc, #60]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006124:	490b      	ldr	r1, [pc, #44]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00f      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006138:	4b06      	ldr	r3, [pc, #24]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006148:	4902      	ldr	r1, [pc, #8]	; (8006154 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006150:	e002      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006152:	bf00      	nop
 8006154:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00b      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006164:	4b8a      	ldr	r3, [pc, #552]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006174:	4986      	ldr	r1, [pc, #536]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006176:	4313      	orrs	r3, r2
 8006178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006188:	4b81      	ldr	r3, [pc, #516]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800618a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800618e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006198:	497d      	ldr	r1, [pc, #500]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d006      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80d6 	beq.w	8006360 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061b4:	4b76      	ldr	r3, [pc, #472]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a75      	ldr	r2, [pc, #468]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c0:	f7fd ff8a 	bl	80040d8 <HAL_GetTick>
 80061c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061c6:	e008      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061c8:	f7fd ff86 	bl	80040d8 <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b64      	cmp	r3, #100	; 0x64
 80061d4:	d901      	bls.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e195      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061da:	4b6d      	ldr	r3, [pc, #436]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1f0      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d021      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d11d      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061fa:	4b65      	ldr	r3, [pc, #404]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006200:	0c1b      	lsrs	r3, r3, #16
 8006202:	f003 0303 	and.w	r3, r3, #3
 8006206:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006208:	4b61      	ldr	r3, [pc, #388]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620e:	0e1b      	lsrs	r3, r3, #24
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	019a      	lsls	r2, r3, #6
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	041b      	lsls	r3, r3, #16
 8006220:	431a      	orrs	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	061b      	lsls	r3, r3, #24
 8006226:	431a      	orrs	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	071b      	lsls	r3, r3, #28
 800622e:	4958      	ldr	r1, [pc, #352]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006230:	4313      	orrs	r3, r2
 8006232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800624a:	d00a      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006254:	2b00      	cmp	r3, #0
 8006256:	d02e      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006260:	d129      	bne.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006262:	4b4b      	ldr	r3, [pc, #300]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	f003 0303 	and.w	r3, r3, #3
 800626e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006270:	4b47      	ldr	r3, [pc, #284]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006276:	0f1b      	lsrs	r3, r3, #28
 8006278:	f003 0307 	and.w	r3, r3, #7
 800627c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	019a      	lsls	r2, r3, #6
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	061b      	lsls	r3, r3, #24
 8006290:	431a      	orrs	r2, r3
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	071b      	lsls	r3, r3, #28
 8006296:	493e      	ldr	r1, [pc, #248]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006298:	4313      	orrs	r3, r2
 800629a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800629e:	4b3c      	ldr	r3, [pc, #240]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062a4:	f023 021f 	bic.w	r2, r3, #31
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ac:	3b01      	subs	r3, #1
 80062ae:	4938      	ldr	r1, [pc, #224]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d01d      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062c2:	4b33      	ldr	r3, [pc, #204]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062c8:	0e1b      	lsrs	r3, r3, #24
 80062ca:	f003 030f 	and.w	r3, r3, #15
 80062ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062d0:	4b2f      	ldr	r3, [pc, #188]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062d6:	0f1b      	lsrs	r3, r3, #28
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	019a      	lsls	r2, r3, #6
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	041b      	lsls	r3, r3, #16
 80062ea:	431a      	orrs	r2, r3
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	061b      	lsls	r3, r3, #24
 80062f0:	431a      	orrs	r2, r3
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	071b      	lsls	r3, r3, #28
 80062f6:	4926      	ldr	r1, [pc, #152]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d011      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	019a      	lsls	r2, r3, #6
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	041b      	lsls	r3, r3, #16
 8006316:	431a      	orrs	r2, r3
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	061b      	lsls	r3, r3, #24
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	071b      	lsls	r3, r3, #28
 8006326:	491a      	ldr	r1, [pc, #104]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006328:	4313      	orrs	r3, r2
 800632a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800632e:	4b18      	ldr	r3, [pc, #96]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a17      	ldr	r2, [pc, #92]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006334:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006338:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800633a:	f7fd fecd 	bl	80040d8 <HAL_GetTick>
 800633e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006340:	e008      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006342:	f7fd fec9 	bl	80040d8 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b64      	cmp	r3, #100	; 0x64
 800634e:	d901      	bls.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e0d8      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006354:	4b0e      	ldr	r3, [pc, #56]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f0      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	2b01      	cmp	r3, #1
 8006364:	f040 80ce 	bne.w	8006504 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a08      	ldr	r2, [pc, #32]	; (8006390 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800636e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006374:	f7fd feb0 	bl	80040d8 <HAL_GetTick>
 8006378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800637a:	e00b      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800637c:	f7fd feac 	bl	80040d8 <HAL_GetTick>
 8006380:	4602      	mov	r2, r0
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	2b64      	cmp	r3, #100	; 0x64
 8006388:	d904      	bls.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e0bb      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800638e:	bf00      	nop
 8006390:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006394:	4b5e      	ldr	r3, [pc, #376]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800639c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063a0:	d0ec      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d003      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d009      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d02e      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d12a      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063ca:	4b51      	ldr	r3, [pc, #324]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	0c1b      	lsrs	r3, r3, #16
 80063d2:	f003 0303 	and.w	r3, r3, #3
 80063d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063d8:	4b4d      	ldr	r3, [pc, #308]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063de:	0f1b      	lsrs	r3, r3, #28
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	019a      	lsls	r2, r3, #6
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	431a      	orrs	r2, r3
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	061b      	lsls	r3, r3, #24
 80063f8:	431a      	orrs	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	071b      	lsls	r3, r3, #28
 80063fe:	4944      	ldr	r1, [pc, #272]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006406:	4b42      	ldr	r3, [pc, #264]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800640c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006414:	3b01      	subs	r3, #1
 8006416:	021b      	lsls	r3, r3, #8
 8006418:	493d      	ldr	r1, [pc, #244]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800641a:	4313      	orrs	r3, r2
 800641c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d022      	beq.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006430:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006434:	d11d      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006436:	4b36      	ldr	r3, [pc, #216]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643c:	0e1b      	lsrs	r3, r3, #24
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006444:	4b32      	ldr	r3, [pc, #200]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800644a:	0f1b      	lsrs	r3, r3, #28
 800644c:	f003 0307 	and.w	r3, r3, #7
 8006450:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	019a      	lsls	r2, r3, #6
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	041b      	lsls	r3, r3, #16
 800645e:	431a      	orrs	r2, r3
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	061b      	lsls	r3, r3, #24
 8006464:	431a      	orrs	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	071b      	lsls	r3, r3, #28
 800646a:	4929      	ldr	r1, [pc, #164]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800646c:	4313      	orrs	r3, r2
 800646e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	2b00      	cmp	r3, #0
 800647c:	d028      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800647e:	4b24      	ldr	r3, [pc, #144]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006484:	0e1b      	lsrs	r3, r3, #24
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800648c:	4b20      	ldr	r3, [pc, #128]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800648e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006492:	0c1b      	lsrs	r3, r3, #16
 8006494:	f003 0303 	and.w	r3, r3, #3
 8006498:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	019a      	lsls	r2, r3, #6
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	041b      	lsls	r3, r3, #16
 80064a4:	431a      	orrs	r2, r3
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	061b      	lsls	r3, r3, #24
 80064aa:	431a      	orrs	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	071b      	lsls	r3, r3, #28
 80064b2:	4917      	ldr	r1, [pc, #92]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	4911      	ldr	r1, [pc, #68]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80064d0:	4b0f      	ldr	r3, [pc, #60]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a0e      	ldr	r2, [pc, #56]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064dc:	f7fd fdfc 	bl	80040d8 <HAL_GetTick>
 80064e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064e2:	e008      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80064e4:	f7fd fdf8 	bl	80040d8 <HAL_GetTick>
 80064e8:	4602      	mov	r2, r0
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b64      	cmp	r3, #100	; 0x64
 80064f0:	d901      	bls.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e007      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80064f6:	4b06      	ldr	r3, [pc, #24]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006502:	d1ef      	bne.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	40023800 	.word	0x40023800

08006514 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e01c      	b.n	8006560 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	795b      	ldrb	r3, [r3, #5]
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7fc fbaa 	bl	8002c90 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2202      	movs	r2, #2
 8006540:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0204 	orr.w	r2, r2, #4
 8006550:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3708      	adds	r7, #8
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	791b      	ldrb	r3, [r3, #4]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_RNG_GenerateRandomNumber+0x1a>
 800657e:	2302      	movs	r3, #2
 8006580:	e044      	b.n	800660c <HAL_RNG_GenerateRandomNumber+0xa4>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	795b      	ldrb	r3, [r3, #5]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	d133      	bne.n	80065fa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006598:	f7fd fd9e 	bl	80040d8 <HAL_GetTick>
 800659c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800659e:	e018      	b.n	80065d2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80065a0:	f7fd fd9a 	bl	80040d8 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d911      	bls.n	80065d2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f003 0301 	and.w	r3, r3, #1
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d00a      	beq.n	80065d2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e01c      	b.n	800660c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d1df      	bne.n	80065a0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689a      	ldr	r2, [r3, #8]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68da      	ldr	r2, [r3, #12]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2201      	movs	r2, #1
 80065f6:	715a      	strb	r2, [r3, #5]
 80065f8:	e004      	b.n	8006604 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2204      	movs	r2, #4
 80065fe:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	711a      	strb	r2, [r3, #4]

  return status;
 800660a:	7bfb      	ldrb	r3, [r7, #15]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	330c      	adds	r3, #12
 8006620:	4619      	mov	r1, r3
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f7ff ffa0 	bl	8006568 <HAL_RNG_GenerateRandomNumber>
 8006628:	4603      	mov	r3, r0
 800662a:	2b00      	cmp	r3, #0
 800662c:	d102      	bne.n	8006634 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	e000      	b.n	8006636 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8006634:	2300      	movs	r3, #0
  }
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e09d      	b.n	800678c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	2b00      	cmp	r3, #0
 8006656:	d108      	bne.n	800666a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006660:	d009      	beq.n	8006676 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	61da      	str	r2, [r3, #28]
 8006668:	e005      	b.n	8006676 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d106      	bne.n	8006696 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7fc fb6f 	bl	8002d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2202      	movs	r2, #2
 800669a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066b6:	d902      	bls.n	80066be <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	e002      	b.n	80066c4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066cc:	d007      	beq.n	80066de <HAL_SPI_Init+0xa0>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d6:	d002      	beq.n	80066de <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80066ee:	431a      	orrs	r2, r3
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	695b      	ldr	r3, [r3, #20]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	431a      	orrs	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800670c:	431a      	orrs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006720:	ea42 0103 	orr.w	r1, r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006728:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	0c1b      	lsrs	r3, r3, #16
 800673a:	f003 0204 	and.w	r2, r3, #4
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	431a      	orrs	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800675a:	ea42 0103 	orr.w	r1, r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	430a      	orrs	r2, r1
 800676a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800677a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	603b      	str	r3, [r7, #0]
 80067a0:	4613      	mov	r3, r2
 80067a2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80067a4:	2300      	movs	r3, #0
 80067a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_SPI_Transmit+0x22>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e158      	b.n	8006a68 <HAL_SPI_Transmit+0x2d4>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067be:	f7fd fc8b 	bl	80040d8 <HAL_GetTick>
 80067c2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80067c4:	88fb      	ldrh	r3, [r7, #6]
 80067c6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d002      	beq.n	80067da <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80067d4:	2302      	movs	r3, #2
 80067d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067d8:	e13d      	b.n	8006a56 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <HAL_SPI_Transmit+0x52>
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d102      	bne.n	80067ec <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80067ea:	e134      	b.n	8006a56 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2203      	movs	r2, #3
 80067f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	88fa      	ldrh	r2, [r7, #6]
 800680a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006836:	d10f      	bne.n	8006858 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006846:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006856:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006862:	2b40      	cmp	r3, #64	; 0x40
 8006864:	d007      	beq.n	8006876 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006874:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800687e:	d94b      	bls.n	8006918 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_SPI_Transmit+0xfa>
 8006888:	8afb      	ldrh	r3, [r7, #22]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d13e      	bne.n	800690c <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006892:	881a      	ldrh	r2, [r3, #0]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689e:	1c9a      	adds	r2, r3, #2
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	3b01      	subs	r3, #1
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068b2:	e02b      	b.n	800690c <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d112      	bne.n	80068e8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	881a      	ldrh	r2, [r3, #0]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d2:	1c9a      	adds	r2, r3, #2
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80068e6:	e011      	b.n	800690c <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068e8:	f7fd fbf6 	bl	80040d8 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d803      	bhi.n	8006900 <HAL_SPI_Transmit+0x16c>
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fe:	d102      	bne.n	8006906 <HAL_SPI_Transmit+0x172>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	77fb      	strb	r3, [r7, #31]
          goto error;
 800690a:	e0a4      	b.n	8006a56 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1ce      	bne.n	80068b4 <HAL_SPI_Transmit+0x120>
 8006916:	e07c      	b.n	8006a12 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_SPI_Transmit+0x192>
 8006920:	8afb      	ldrh	r3, [r7, #22]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d170      	bne.n	8006a08 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800692a:	b29b      	uxth	r3, r3
 800692c:	2b01      	cmp	r3, #1
 800692e:	d912      	bls.n	8006956 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	881a      	ldrh	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006940:	1c9a      	adds	r2, r3, #2
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800694a:	b29b      	uxth	r3, r3
 800694c:	3b02      	subs	r3, #2
 800694e:	b29a      	uxth	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006954:	e058      	b.n	8006a08 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	330c      	adds	r3, #12
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006968:	1c5a      	adds	r2, r3, #1
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006972:	b29b      	uxth	r3, r3
 8006974:	3b01      	subs	r3, #1
 8006976:	b29a      	uxth	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800697c:	e044      	b.n	8006a08 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b02      	cmp	r3, #2
 800698a:	d12b      	bne.n	80069e4 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b01      	cmp	r3, #1
 8006994:	d912      	bls.n	80069bc <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699a:	881a      	ldrh	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b02      	subs	r3, #2
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069ba:	e025      	b.n	8006a08 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	330c      	adds	r3, #12
 80069c6:	7812      	ldrb	r2, [r2, #0]
 80069c8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ce:	1c5a      	adds	r2, r3, #1
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069e2:	e011      	b.n	8006a08 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e4:	f7fd fb78 	bl	80040d8 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d803      	bhi.n	80069fc <HAL_SPI_Transmit+0x268>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d102      	bne.n	8006a02 <HAL_SPI_Transmit+0x26e>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d102      	bne.n	8006a08 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006a06:	e026      	b.n	8006a56 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1b5      	bne.n	800697e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	6839      	ldr	r1, [r7, #0]
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f948 	bl	8006cac <SPI_EndRxTxTransaction>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d002      	beq.n	8006a28 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2220      	movs	r2, #32
 8006a26:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a30:	2300      	movs	r3, #0
 8006a32:	613b      	str	r3, [r7, #16]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	613b      	str	r3, [r7, #16]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e000      	b.n	8006a56 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006a54:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006a66:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3720      	adds	r7, #32
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	603b      	str	r3, [r7, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006a80:	f7fd fb2a 	bl	80040d8 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006a90:	f7fd fb22 	bl	80040d8 <HAL_GetTick>
 8006a94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006a96:	4b39      	ldr	r3, [pc, #228]	; (8006b7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	015b      	lsls	r3, r3, #5
 8006a9c:	0d1b      	lsrs	r3, r3, #20
 8006a9e:	69fa      	ldr	r2, [r7, #28]
 8006aa0:	fb02 f303 	mul.w	r3, r2, r3
 8006aa4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006aa6:	e054      	b.n	8006b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aae:	d050      	beq.n	8006b52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006ab0:	f7fd fb12 	bl	80040d8 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d902      	bls.n	8006ac6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d13d      	bne.n	8006b42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ad4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ade:	d111      	bne.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae8:	d004      	beq.n	8006af4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af2:	d107      	bne.n	8006b04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b0c:	d10f      	bne.n	8006b2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e017      	b.n	8006b72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	bf0c      	ite	eq
 8006b62:	2301      	moveq	r3, #1
 8006b64:	2300      	movne	r3, #0
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	461a      	mov	r2, r3
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d19b      	bne.n	8006aa8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3720      	adds	r7, #32
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000070 	.word	0x20000070

08006b80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b08a      	sub	sp, #40	; 0x28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006b92:	f7fd faa1 	bl	80040d8 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9a:	1a9b      	subs	r3, r3, r2
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006ba2:	f7fd fa99 	bl	80040d8 <HAL_GetTick>
 8006ba6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	330c      	adds	r3, #12
 8006bae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006bb0:	4b3d      	ldr	r3, [pc, #244]	; (8006ca8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	00da      	lsls	r2, r3, #3
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	0d1b      	lsrs	r3, r3, #20
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bc2:	fb02 f303 	mul.w	r3, r2, r3
 8006bc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006bc8:	e060      	b.n	8006c8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006bd0:	d107      	bne.n	8006be2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be8:	d050      	beq.n	8006c8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006bea:	f7fd fa75 	bl	80040d8 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d902      	bls.n	8006c00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d13d      	bne.n	8006c7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c18:	d111      	bne.n	8006c3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c22:	d004      	beq.n	8006c2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2c:	d107      	bne.n	8006c3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c46:	d10f      	bne.n	8006c68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e010      	b.n	8006c9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d101      	bne.n	8006c86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4013      	ands	r3, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d196      	bne.n	8006bca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3728      	adds	r7, #40	; 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000070 	.word	0x20000070

08006cac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af02      	add	r7, sp, #8
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f7ff ff5b 	bl	8006b80 <SPI_WaitFifoStateUntilTimeout>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d007      	beq.n	8006ce0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd4:	f043 0220 	orr.w	r2, r3, #32
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e046      	b.n	8006d6e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ce0:	4b25      	ldr	r3, [pc, #148]	; (8006d78 <SPI_EndRxTxTransaction+0xcc>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <SPI_EndRxTxTransaction+0xd0>)
 8006ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cea:	0d5b      	lsrs	r3, r3, #21
 8006cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006cf0:	fb02 f303 	mul.w	r3, r2, r3
 8006cf4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cfe:	d112      	bne.n	8006d26 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2180      	movs	r1, #128	; 0x80
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff feb0 	bl	8006a70 <SPI_WaitFlagStateUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d016      	beq.n	8006d44 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1a:	f043 0220 	orr.w	r2, r3, #32
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e023      	b.n	8006d6e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3c:	2b80      	cmp	r3, #128	; 0x80
 8006d3e:	d0f2      	beq.n	8006d26 <SPI_EndRxTxTransaction+0x7a>
 8006d40:	e000      	b.n	8006d44 <SPI_EndRxTxTransaction+0x98>
        break;
 8006d42:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	9300      	str	r3, [sp, #0]
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f7ff ff15 	bl	8006b80 <SPI_WaitFifoStateUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d60:	f043 0220 	orr.w	r2, r3, #32
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e000      	b.n	8006d6e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000070 	.word	0x20000070
 8006d7c:	165e9f81 	.word	0x165e9f81

08006d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e049      	b.n	8006e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fc fa8a 	bl	80032c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f000 fc3e 	bl	8007640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d001      	beq.n	8006e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e054      	b.n	8006ef2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f042 0201 	orr.w	r2, r2, #1
 8006e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a26      	ldr	r2, [pc, #152]	; (8006f00 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d022      	beq.n	8006eb0 <HAL_TIM_Base_Start_IT+0x80>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e72:	d01d      	beq.n	8006eb0 <HAL_TIM_Base_Start_IT+0x80>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a22      	ldr	r2, [pc, #136]	; (8006f04 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d018      	beq.n	8006eb0 <HAL_TIM_Base_Start_IT+0x80>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a21      	ldr	r2, [pc, #132]	; (8006f08 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d013      	beq.n	8006eb0 <HAL_TIM_Base_Start_IT+0x80>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a1f      	ldr	r2, [pc, #124]	; (8006f0c <HAL_TIM_Base_Start_IT+0xdc>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00e      	beq.n	8006eb0 <HAL_TIM_Base_Start_IT+0x80>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1e      	ldr	r2, [pc, #120]	; (8006f10 <HAL_TIM_Base_Start_IT+0xe0>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d009      	beq.n	8006eb0 <HAL_TIM_Base_Start_IT+0x80>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1c      	ldr	r2, [pc, #112]	; (8006f14 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d004      	beq.n	8006eb0 <HAL_TIM_Base_Start_IT+0x80>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1b      	ldr	r2, [pc, #108]	; (8006f18 <HAL_TIM_Base_Start_IT+0xe8>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d115      	bne.n	8006edc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	4b19      	ldr	r3, [pc, #100]	; (8006f1c <HAL_TIM_Base_Start_IT+0xec>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2b06      	cmp	r3, #6
 8006ec0:	d015      	beq.n	8006eee <HAL_TIM_Base_Start_IT+0xbe>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec8:	d011      	beq.n	8006eee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0201 	orr.w	r2, r2, #1
 8006ed8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eda:	e008      	b.n	8006eee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e000      	b.n	8006ef0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	40010000 	.word	0x40010000
 8006f04:	40000400 	.word	0x40000400
 8006f08:	40000800 	.word	0x40000800
 8006f0c:	40000c00 	.word	0x40000c00
 8006f10:	40010400 	.word	0x40010400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40001800 	.word	0x40001800
 8006f1c:	00010007 	.word	0x00010007

08006f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e049      	b.n	8006fc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f841 	bl	8006fce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	4610      	mov	r0, r2
 8006f60:	f000 fb6e 	bl	8007640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b083      	sub	sp, #12
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006fd6:	bf00      	nop
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr

08006fe2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d122      	bne.n	800703e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b02      	cmp	r3, #2
 8007004:	d11b      	bne.n	800703e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f06f 0202 	mvn.w	r2, #2
 800700e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	f003 0303 	and.w	r3, r3, #3
 8007020:	2b00      	cmp	r3, #0
 8007022:	d003      	beq.n	800702c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 faed 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 800702a:	e005      	b.n	8007038 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 fadf 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 faf0 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	f003 0304 	and.w	r3, r3, #4
 8007048:	2b04      	cmp	r3, #4
 800704a:	d122      	bne.n	8007092 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	f003 0304 	and.w	r3, r3, #4
 8007056:	2b04      	cmp	r3, #4
 8007058:	d11b      	bne.n	8007092 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f06f 0204 	mvn.w	r2, #4
 8007062:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007074:	2b00      	cmp	r3, #0
 8007076:	d003      	beq.n	8007080 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fac3 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 800707e:	e005      	b.n	800708c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fab5 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fac6 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f003 0308 	and.w	r3, r3, #8
 800709c:	2b08      	cmp	r3, #8
 800709e:	d122      	bne.n	80070e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	f003 0308 	and.w	r3, r3, #8
 80070aa:	2b08      	cmp	r3, #8
 80070ac:	d11b      	bne.n	80070e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f06f 0208 	mvn.w	r2, #8
 80070b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2204      	movs	r2, #4
 80070bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	f003 0303 	and.w	r3, r3, #3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fa99 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 80070d2:	e005      	b.n	80070e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fa8b 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fa9c 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f003 0310 	and.w	r3, r3, #16
 80070f0:	2b10      	cmp	r3, #16
 80070f2:	d122      	bne.n	800713a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b10      	cmp	r3, #16
 8007100:	d11b      	bne.n	800713a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f06f 0210 	mvn.w	r2, #16
 800710a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2208      	movs	r2, #8
 8007110:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	69db      	ldr	r3, [r3, #28]
 8007118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800711c:	2b00      	cmp	r3, #0
 800711e:	d003      	beq.n	8007128 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 fa6f 	bl	8007604 <HAL_TIM_IC_CaptureCallback>
 8007126:	e005      	b.n	8007134 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fa61 	bl	80075f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fa72 	bl	8007618 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b01      	cmp	r3, #1
 8007146:	d10e      	bne.n	8007166 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0301 	and.w	r3, r3, #1
 8007152:	2b01      	cmp	r3, #1
 8007154:	d107      	bne.n	8007166 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f06f 0201 	mvn.w	r2, #1
 800715e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 fa3b 	bl	80075dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b80      	cmp	r3, #128	; 0x80
 8007172:	d10e      	bne.n	8007192 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717e:	2b80      	cmp	r3, #128	; 0x80
 8007180:	d107      	bne.n	8007192 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800718a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fe87 	bl	8007ea0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a0:	d10e      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d107      	bne.n	80071c0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fe7a 	bl	8007eb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ca:	2b40      	cmp	r3, #64	; 0x40
 80071cc:	d10e      	bne.n	80071ec <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	d107      	bne.n	80071ec <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 fa20 	bl	800762c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b20      	cmp	r3, #32
 80071f8:	d10e      	bne.n	8007218 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b20      	cmp	r3, #32
 8007206:	d107      	bne.n	8007218 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0220 	mvn.w	r2, #32
 8007210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fe3a 	bl	8007e8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800722c:	2300      	movs	r3, #0
 800722e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800723a:	2302      	movs	r3, #2
 800723c:	e0ff      	b.n	800743e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2b14      	cmp	r3, #20
 800724a:	f200 80f0 	bhi.w	800742e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800724e:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007254:	080072a9 	.word	0x080072a9
 8007258:	0800742f 	.word	0x0800742f
 800725c:	0800742f 	.word	0x0800742f
 8007260:	0800742f 	.word	0x0800742f
 8007264:	080072e9 	.word	0x080072e9
 8007268:	0800742f 	.word	0x0800742f
 800726c:	0800742f 	.word	0x0800742f
 8007270:	0800742f 	.word	0x0800742f
 8007274:	0800732b 	.word	0x0800732b
 8007278:	0800742f 	.word	0x0800742f
 800727c:	0800742f 	.word	0x0800742f
 8007280:	0800742f 	.word	0x0800742f
 8007284:	0800736b 	.word	0x0800736b
 8007288:	0800742f 	.word	0x0800742f
 800728c:	0800742f 	.word	0x0800742f
 8007290:	0800742f 	.word	0x0800742f
 8007294:	080073ad 	.word	0x080073ad
 8007298:	0800742f 	.word	0x0800742f
 800729c:	0800742f 	.word	0x0800742f
 80072a0:	0800742f 	.word	0x0800742f
 80072a4:	080073ed 	.word	0x080073ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 fa66 	bl	8007780 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699a      	ldr	r2, [r3, #24]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f042 0208 	orr.w	r2, r2, #8
 80072c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699a      	ldr	r2, [r3, #24]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0204 	bic.w	r2, r2, #4
 80072d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6999      	ldr	r1, [r3, #24]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	691a      	ldr	r2, [r3, #16]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	619a      	str	r2, [r3, #24]
      break;
 80072e6:	e0a5      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fab8 	bl	8007864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	6999      	ldr	r1, [r3, #24]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	021a      	lsls	r2, r3, #8
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	619a      	str	r2, [r3, #24]
      break;
 8007328:	e084      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68b9      	ldr	r1, [r7, #8]
 8007330:	4618      	mov	r0, r3
 8007332:	f000 fb0f 	bl	8007954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f042 0208 	orr.w	r2, r2, #8
 8007344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0204 	bic.w	r2, r2, #4
 8007354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	69d9      	ldr	r1, [r3, #28]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	61da      	str	r2, [r3, #28]
      break;
 8007368:	e064      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68b9      	ldr	r1, [r7, #8]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 fb65 	bl	8007a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69da      	ldr	r2, [r3, #28]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69da      	ldr	r2, [r3, #28]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	69d9      	ldr	r1, [r3, #28]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	021a      	lsls	r2, r3, #8
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	430a      	orrs	r2, r1
 80073a8:	61da      	str	r2, [r3, #28]
      break;
 80073aa:	e043      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68b9      	ldr	r1, [r7, #8]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fb9c 	bl	8007af0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f042 0208 	orr.w	r2, r2, #8
 80073c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0204 	bic.w	r2, r2, #4
 80073d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073ea:	e023      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68b9      	ldr	r1, [r7, #8]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fbce 	bl	8007b94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007406:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007416:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	021a      	lsls	r2, r3, #8
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	430a      	orrs	r2, r1
 800742a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800742c:	e002      	b.n	8007434 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	75fb      	strb	r3, [r7, #23]
      break;
 8007432:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800743c:	7dfb      	ldrb	r3, [r7, #23]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop

08007448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800745c:	2b01      	cmp	r3, #1
 800745e:	d101      	bne.n	8007464 <HAL_TIM_ConfigClockSource+0x1c>
 8007460:	2302      	movs	r3, #2
 8007462:	e0b4      	b.n	80075ce <HAL_TIM_ConfigClockSource+0x186>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	4b56      	ldr	r3, [pc, #344]	; (80075d8 <HAL_TIM_ConfigClockSource+0x190>)
 8007480:	4013      	ands	r3, r2
 8007482:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800748a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800749c:	d03e      	beq.n	800751c <HAL_TIM_ConfigClockSource+0xd4>
 800749e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074a2:	f200 8087 	bhi.w	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074aa:	f000 8086 	beq.w	80075ba <HAL_TIM_ConfigClockSource+0x172>
 80074ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b2:	d87f      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074b4:	2b70      	cmp	r3, #112	; 0x70
 80074b6:	d01a      	beq.n	80074ee <HAL_TIM_ConfigClockSource+0xa6>
 80074b8:	2b70      	cmp	r3, #112	; 0x70
 80074ba:	d87b      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074bc:	2b60      	cmp	r3, #96	; 0x60
 80074be:	d050      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x11a>
 80074c0:	2b60      	cmp	r3, #96	; 0x60
 80074c2:	d877      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074c4:	2b50      	cmp	r3, #80	; 0x50
 80074c6:	d03c      	beq.n	8007542 <HAL_TIM_ConfigClockSource+0xfa>
 80074c8:	2b50      	cmp	r3, #80	; 0x50
 80074ca:	d873      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074cc:	2b40      	cmp	r3, #64	; 0x40
 80074ce:	d058      	beq.n	8007582 <HAL_TIM_ConfigClockSource+0x13a>
 80074d0:	2b40      	cmp	r3, #64	; 0x40
 80074d2:	d86f      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074d4:	2b30      	cmp	r3, #48	; 0x30
 80074d6:	d064      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074d8:	2b30      	cmp	r3, #48	; 0x30
 80074da:	d86b      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074dc:	2b20      	cmp	r3, #32
 80074de:	d060      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074e0:	2b20      	cmp	r3, #32
 80074e2:	d867      	bhi.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d05c      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074e8:	2b10      	cmp	r3, #16
 80074ea:	d05a      	beq.n	80075a2 <HAL_TIM_ConfigClockSource+0x15a>
 80074ec:	e062      	b.n	80075b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80074fe:	f000 fc17 	bl	8007d30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007510:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	609a      	str	r2, [r3, #8]
      break;
 800751a:	e04f      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800752c:	f000 fc00 	bl	8007d30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	689a      	ldr	r2, [r3, #8]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800753e:	609a      	str	r2, [r3, #8]
      break;
 8007540:	e03c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800754e:	461a      	mov	r2, r3
 8007550:	f000 fb74 	bl	8007c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2150      	movs	r1, #80	; 0x50
 800755a:	4618      	mov	r0, r3
 800755c:	f000 fbcd 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 8007560:	e02c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800756e:	461a      	mov	r2, r3
 8007570:	f000 fb93 	bl	8007c9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2160      	movs	r1, #96	; 0x60
 800757a:	4618      	mov	r0, r3
 800757c:	f000 fbbd 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 8007580:	e01c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800758e:	461a      	mov	r2, r3
 8007590:	f000 fb54 	bl	8007c3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2140      	movs	r1, #64	; 0x40
 800759a:	4618      	mov	r0, r3
 800759c:	f000 fbad 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 80075a0:	e00c      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f000 fba4 	bl	8007cfa <TIM_ITRx_SetConfig>
      break;
 80075b2:	e003      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
      break;
 80075b8:	e000      	b.n	80075bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	fffeff88 	.word	0xfffeff88

080075dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007634:	bf00      	nop
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a40      	ldr	r2, [pc, #256]	; (8007754 <TIM_Base_SetConfig+0x114>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d013      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800765e:	d00f      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a3d      	ldr	r2, [pc, #244]	; (8007758 <TIM_Base_SetConfig+0x118>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00b      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a3c      	ldr	r2, [pc, #240]	; (800775c <TIM_Base_SetConfig+0x11c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d007      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a3b      	ldr	r2, [pc, #236]	; (8007760 <TIM_Base_SetConfig+0x120>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d003      	beq.n	8007680 <TIM_Base_SetConfig+0x40>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a3a      	ldr	r2, [pc, #232]	; (8007764 <TIM_Base_SetConfig+0x124>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d108      	bne.n	8007692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	4313      	orrs	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a2f      	ldr	r2, [pc, #188]	; (8007754 <TIM_Base_SetConfig+0x114>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d02b      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a0:	d027      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	4a2c      	ldr	r2, [pc, #176]	; (8007758 <TIM_Base_SetConfig+0x118>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d023      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a2b      	ldr	r2, [pc, #172]	; (800775c <TIM_Base_SetConfig+0x11c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01f      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a2a      	ldr	r2, [pc, #168]	; (8007760 <TIM_Base_SetConfig+0x120>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d01b      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a29      	ldr	r2, [pc, #164]	; (8007764 <TIM_Base_SetConfig+0x124>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d017      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a28      	ldr	r2, [pc, #160]	; (8007768 <TIM_Base_SetConfig+0x128>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d013      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a27      	ldr	r2, [pc, #156]	; (800776c <TIM_Base_SetConfig+0x12c>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00f      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a26      	ldr	r2, [pc, #152]	; (8007770 <TIM_Base_SetConfig+0x130>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00b      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a25      	ldr	r2, [pc, #148]	; (8007774 <TIM_Base_SetConfig+0x134>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d007      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a24      	ldr	r2, [pc, #144]	; (8007778 <TIM_Base_SetConfig+0x138>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d003      	beq.n	80076f2 <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a23      	ldr	r2, [pc, #140]	; (800777c <TIM_Base_SetConfig+0x13c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d108      	bne.n	8007704 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	4313      	orrs	r3, r2
 8007702:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	695b      	ldr	r3, [r3, #20]
 800770e:	4313      	orrs	r3, r2
 8007710:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a0a      	ldr	r2, [pc, #40]	; (8007754 <TIM_Base_SetConfig+0x114>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d003      	beq.n	8007738 <TIM_Base_SetConfig+0xf8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a0c      	ldr	r2, [pc, #48]	; (8007764 <TIM_Base_SetConfig+0x124>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d103      	bne.n	8007740 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	691a      	ldr	r2, [r3, #16]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	615a      	str	r2, [r3, #20]
}
 8007746:	bf00      	nop
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop
 8007754:	40010000 	.word	0x40010000
 8007758:	40000400 	.word	0x40000400
 800775c:	40000800 	.word	0x40000800
 8007760:	40000c00 	.word	0x40000c00
 8007764:	40010400 	.word	0x40010400
 8007768:	40014000 	.word	0x40014000
 800776c:	40014400 	.word	0x40014400
 8007770:	40014800 	.word	0x40014800
 8007774:	40001800 	.word	0x40001800
 8007778:	40001c00 	.word	0x40001c00
 800777c:	40002000 	.word	0x40002000

08007780 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f023 0201 	bic.w	r2, r3, #1
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4b2b      	ldr	r3, [pc, #172]	; (8007858 <TIM_OC1_SetConfig+0xd8>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f023 0302 	bic.w	r3, r3, #2
 80077c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4a21      	ldr	r2, [pc, #132]	; (800785c <TIM_OC1_SetConfig+0xdc>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d003      	beq.n	80077e4 <TIM_OC1_SetConfig+0x64>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a20      	ldr	r2, [pc, #128]	; (8007860 <TIM_OC1_SetConfig+0xe0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d10c      	bne.n	80077fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	f023 0308 	bic.w	r3, r3, #8
 80077ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f023 0304 	bic.w	r3, r3, #4
 80077fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a16      	ldr	r2, [pc, #88]	; (800785c <TIM_OC1_SetConfig+0xdc>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d003      	beq.n	800780e <TIM_OC1_SetConfig+0x8e>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a15      	ldr	r2, [pc, #84]	; (8007860 <TIM_OC1_SetConfig+0xe0>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d111      	bne.n	8007832 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800781c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	4313      	orrs	r3, r2
 8007830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685a      	ldr	r2, [r3, #4]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	697a      	ldr	r2, [r7, #20]
 800784a:	621a      	str	r2, [r3, #32]
}
 800784c:	bf00      	nop
 800784e:	371c      	adds	r7, #28
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr
 8007858:	fffeff8f 	.word	0xfffeff8f
 800785c:	40010000 	.word	0x40010000
 8007860:	40010400 	.word	0x40010400

08007864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	f023 0210 	bic.w	r2, r3, #16
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4b2e      	ldr	r3, [pc, #184]	; (8007948 <TIM_OC2_SetConfig+0xe4>)
 8007890:	4013      	ands	r3, r2
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 0320 	bic.w	r3, r3, #32
 80078ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a23      	ldr	r2, [pc, #140]	; (800794c <TIM_OC2_SetConfig+0xe8>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d003      	beq.n	80078cc <TIM_OC2_SetConfig+0x68>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	4a22      	ldr	r2, [pc, #136]	; (8007950 <TIM_OC2_SetConfig+0xec>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d10d      	bne.n	80078e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	011b      	lsls	r3, r3, #4
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a18      	ldr	r2, [pc, #96]	; (800794c <TIM_OC2_SetConfig+0xe8>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d003      	beq.n	80078f8 <TIM_OC2_SetConfig+0x94>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a17      	ldr	r2, [pc, #92]	; (8007950 <TIM_OC2_SetConfig+0xec>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d113      	bne.n	8007920 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007906:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	621a      	str	r2, [r3, #32]
}
 800793a:	bf00      	nop
 800793c:	371c      	adds	r7, #28
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr
 8007946:	bf00      	nop
 8007948:	feff8fff 	.word	0xfeff8fff
 800794c:	40010000 	.word	0x40010000
 8007950:	40010400 	.word	0x40010400

08007954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007954:	b480      	push	{r7}
 8007956:	b087      	sub	sp, #28
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6a1b      	ldr	r3, [r3, #32]
 800796e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4b2d      	ldr	r3, [pc, #180]	; (8007a34 <TIM_OC3_SetConfig+0xe0>)
 8007980:	4013      	ands	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f023 0303 	bic.w	r3, r3, #3
 800798a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	4313      	orrs	r3, r2
 8007994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800799c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a22      	ldr	r2, [pc, #136]	; (8007a38 <TIM_OC3_SetConfig+0xe4>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_OC3_SetConfig+0x66>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a21      	ldr	r2, [pc, #132]	; (8007a3c <TIM_OC3_SetConfig+0xe8>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d10d      	bne.n	80079d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	021b      	lsls	r3, r3, #8
 80079c8:	697a      	ldr	r2, [r7, #20]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <TIM_OC3_SetConfig+0xe4>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d003      	beq.n	80079e6 <TIM_OC3_SetConfig+0x92>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a16      	ldr	r2, [pc, #88]	; (8007a3c <TIM_OC3_SetConfig+0xe8>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d113      	bne.n	8007a0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	695b      	ldr	r3, [r3, #20]
 80079fa:	011b      	lsls	r3, r3, #4
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	011b      	lsls	r3, r3, #4
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	621a      	str	r2, [r3, #32]
}
 8007a28:	bf00      	nop
 8007a2a:	371c      	adds	r7, #28
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr
 8007a34:	fffeff8f 	.word	0xfffeff8f
 8007a38:	40010000 	.word	0x40010000
 8007a3c:	40010400 	.word	0x40010400

08007a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <TIM_OC4_SetConfig+0xa4>)
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	031b      	lsls	r3, r3, #12
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a13      	ldr	r2, [pc, #76]	; (8007ae8 <TIM_OC4_SetConfig+0xa8>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d003      	beq.n	8007aa8 <TIM_OC4_SetConfig+0x68>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4a12      	ldr	r2, [pc, #72]	; (8007aec <TIM_OC4_SetConfig+0xac>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d109      	bne.n	8007abc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	019b      	lsls	r3, r3, #6
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	685a      	ldr	r2, [r3, #4]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	621a      	str	r2, [r3, #32]
}
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	feff8fff 	.word	0xfeff8fff
 8007ae8:	40010000 	.word	0x40010000
 8007aec:	40010400 	.word	0x40010400

08007af0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <TIM_OC5_SetConfig+0x98>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007b30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	041b      	lsls	r3, r3, #16
 8007b38:	693a      	ldr	r2, [r7, #16]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a12      	ldr	r2, [pc, #72]	; (8007b8c <TIM_OC5_SetConfig+0x9c>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d003      	beq.n	8007b4e <TIM_OC5_SetConfig+0x5e>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a11      	ldr	r2, [pc, #68]	; (8007b90 <TIM_OC5_SetConfig+0xa0>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d109      	bne.n	8007b62 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	021b      	lsls	r3, r3, #8
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	685a      	ldr	r2, [r3, #4]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	693a      	ldr	r2, [r7, #16]
 8007b7a:	621a      	str	r2, [r3, #32]
}
 8007b7c:	bf00      	nop
 8007b7e:	371c      	adds	r7, #28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	fffeff8f 	.word	0xfffeff8f
 8007b8c:	40010000 	.word	0x40010000
 8007b90:	40010400 	.word	0x40010400

08007b94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4b1c      	ldr	r3, [pc, #112]	; (8007c30 <TIM_OC6_SetConfig+0x9c>)
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	051b      	lsls	r3, r3, #20
 8007bde:	693a      	ldr	r2, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a13      	ldr	r2, [pc, #76]	; (8007c34 <TIM_OC6_SetConfig+0xa0>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d003      	beq.n	8007bf4 <TIM_OC6_SetConfig+0x60>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a12      	ldr	r2, [pc, #72]	; (8007c38 <TIM_OC6_SetConfig+0xa4>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d109      	bne.n	8007c08 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	029b      	lsls	r3, r3, #10
 8007c02:	697a      	ldr	r2, [r7, #20]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	697a      	ldr	r2, [r7, #20]
 8007c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	693a      	ldr	r2, [r7, #16]
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	bf00      	nop
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
 8007c2e:	bf00      	nop
 8007c30:	feff8fff 	.word	0xfeff8fff
 8007c34:	40010000 	.word	0x40010000
 8007c38:	40010400 	.word	0x40010400

08007c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f023 0201 	bic.w	r2, r3, #1
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f023 030a 	bic.w	r3, r3, #10
 8007c78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	621a      	str	r2, [r3, #32]
}
 8007c8e:	bf00      	nop
 8007c90:	371c      	adds	r7, #28
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr

08007c9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b087      	sub	sp, #28
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	f023 0210 	bic.w	r2, r3, #16
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	699b      	ldr	r3, [r3, #24]
 8007cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	031b      	lsls	r3, r3, #12
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	011b      	lsls	r3, r3, #4
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	621a      	str	r2, [r3, #32]
}
 8007cee:	bf00      	nop
 8007cf0:	371c      	adds	r7, #28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b085      	sub	sp, #20
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	f043 0307 	orr.w	r3, r3, #7
 8007d1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68fa      	ldr	r2, [r7, #12]
 8007d22:	609a      	str	r2, [r3, #8]
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	021a      	lsls	r2, r3, #8
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	431a      	orrs	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	609a      	str	r2, [r3, #8]
}
 8007d64:	bf00      	nop
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e06d      	b.n	8007e64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a30      	ldr	r2, [pc, #192]	; (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a2f      	ldr	r2, [pc, #188]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d108      	bne.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007dc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a20      	ldr	r2, [pc, #128]	; (8007e70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d022      	beq.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfa:	d01d      	beq.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a1d      	ldr	r2, [pc, #116]	; (8007e78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d018      	beq.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a1c      	ldr	r2, [pc, #112]	; (8007e7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d013      	beq.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a1a      	ldr	r2, [pc, #104]	; (8007e80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00e      	beq.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a15      	ldr	r2, [pc, #84]	; (8007e74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d009      	beq.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a16      	ldr	r2, [pc, #88]	; (8007e84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d004      	beq.n	8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d10c      	bne.n	8007e52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40010400 	.word	0x40010400
 8007e78:	40000400 	.word	0x40000400
 8007e7c:	40000800 	.word	0x40000800
 8007e80:	40000c00 	.word	0x40000c00
 8007e84:	40014000 	.word	0x40014000
 8007e88:	40001800 	.word	0x40001800

08007e8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e040      	b.n	8007f5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fb faca 	bl	8003484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2224      	movs	r2, #36	; 0x24
 8007ef4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f8b0 	bl	800806c <UART_SetConfig>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d101      	bne.n	8007f16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e022      	b.n	8007f5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fb08 	bl	8008534 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	689a      	ldr	r2, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f042 0201 	orr.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fb8f 	bl	8008678 <UART_CheckIdleState>
 8007f5a:	4603      	mov	r3, r0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b08a      	sub	sp, #40	; 0x28
 8007f68:	af02      	add	r7, sp, #8
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	603b      	str	r3, [r7, #0]
 8007f70:	4613      	mov	r3, r2
 8007f72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f78:	2b20      	cmp	r3, #32
 8007f7a:	d171      	bne.n	8008060 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <HAL_UART_Transmit+0x24>
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e06a      	b.n	8008062 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2221      	movs	r2, #33	; 0x21
 8007f98:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f9a:	f7fc f89d 	bl	80040d8 <HAL_GetTick>
 8007f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	88fa      	ldrh	r2, [r7, #6]
 8007fa4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb8:	d108      	bne.n	8007fcc <HAL_UART_Transmit+0x68>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d104      	bne.n	8007fcc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	61bb      	str	r3, [r7, #24]
 8007fca:	e003      	b.n	8007fd4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007fd4:	e02c      	b.n	8008030 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	2180      	movs	r1, #128	; 0x80
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f000 fb96 	bl	8008712 <UART_WaitOnFlagUntilTimeout>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007fec:	2303      	movs	r3, #3
 8007fee:	e038      	b.n	8008062 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10b      	bne.n	800800e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008004:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	3302      	adds	r3, #2
 800800a:	61bb      	str	r3, [r7, #24]
 800800c:	e007      	b.n	800801e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	781a      	ldrb	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	3301      	adds	r3, #1
 800801c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008024:	b29b      	uxth	r3, r3
 8008026:	3b01      	subs	r3, #1
 8008028:	b29a      	uxth	r2, r3
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1cc      	bne.n	8007fd6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2200      	movs	r2, #0
 8008044:	2140      	movs	r1, #64	; 0x40
 8008046:	68f8      	ldr	r0, [r7, #12]
 8008048:	f000 fb63 	bl	8008712 <UART_WaitOnFlagUntilTimeout>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e005      	b.n	8008062 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	e000      	b.n	8008062 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8008060:	2302      	movs	r3, #2
  }
}
 8008062:	4618      	mov	r0, r3
 8008064:	3720      	adds	r7, #32
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b088      	sub	sp, #32
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	689a      	ldr	r2, [r3, #8]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	4313      	orrs	r3, r2
 800808e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	4ba6      	ldr	r3, [pc, #664]	; (8008330 <UART_SetConfig+0x2c4>)
 8008098:	4013      	ands	r3, r2
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6812      	ldr	r2, [r2, #0]
 800809e:	6979      	ldr	r1, [r7, #20]
 80080a0:	430b      	orrs	r3, r1
 80080a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68da      	ldr	r2, [r3, #12]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	430a      	orrs	r2, r1
 80080dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a94      	ldr	r2, [pc, #592]	; (8008334 <UART_SetConfig+0x2c8>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d120      	bne.n	800812a <UART_SetConfig+0xbe>
 80080e8:	4b93      	ldr	r3, [pc, #588]	; (8008338 <UART_SetConfig+0x2cc>)
 80080ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080ee:	f003 0303 	and.w	r3, r3, #3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d816      	bhi.n	8008124 <UART_SetConfig+0xb8>
 80080f6:	a201      	add	r2, pc, #4	; (adr r2, 80080fc <UART_SetConfig+0x90>)
 80080f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fc:	0800810d 	.word	0x0800810d
 8008100:	08008119 	.word	0x08008119
 8008104:	08008113 	.word	0x08008113
 8008108:	0800811f 	.word	0x0800811f
 800810c:	2301      	movs	r3, #1
 800810e:	77fb      	strb	r3, [r7, #31]
 8008110:	e150      	b.n	80083b4 <UART_SetConfig+0x348>
 8008112:	2302      	movs	r3, #2
 8008114:	77fb      	strb	r3, [r7, #31]
 8008116:	e14d      	b.n	80083b4 <UART_SetConfig+0x348>
 8008118:	2304      	movs	r3, #4
 800811a:	77fb      	strb	r3, [r7, #31]
 800811c:	e14a      	b.n	80083b4 <UART_SetConfig+0x348>
 800811e:	2308      	movs	r3, #8
 8008120:	77fb      	strb	r3, [r7, #31]
 8008122:	e147      	b.n	80083b4 <UART_SetConfig+0x348>
 8008124:	2310      	movs	r3, #16
 8008126:	77fb      	strb	r3, [r7, #31]
 8008128:	e144      	b.n	80083b4 <UART_SetConfig+0x348>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a83      	ldr	r2, [pc, #524]	; (800833c <UART_SetConfig+0x2d0>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d132      	bne.n	800819a <UART_SetConfig+0x12e>
 8008134:	4b80      	ldr	r3, [pc, #512]	; (8008338 <UART_SetConfig+0x2cc>)
 8008136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800813a:	f003 030c 	and.w	r3, r3, #12
 800813e:	2b0c      	cmp	r3, #12
 8008140:	d828      	bhi.n	8008194 <UART_SetConfig+0x128>
 8008142:	a201      	add	r2, pc, #4	; (adr r2, 8008148 <UART_SetConfig+0xdc>)
 8008144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008148:	0800817d 	.word	0x0800817d
 800814c:	08008195 	.word	0x08008195
 8008150:	08008195 	.word	0x08008195
 8008154:	08008195 	.word	0x08008195
 8008158:	08008189 	.word	0x08008189
 800815c:	08008195 	.word	0x08008195
 8008160:	08008195 	.word	0x08008195
 8008164:	08008195 	.word	0x08008195
 8008168:	08008183 	.word	0x08008183
 800816c:	08008195 	.word	0x08008195
 8008170:	08008195 	.word	0x08008195
 8008174:	08008195 	.word	0x08008195
 8008178:	0800818f 	.word	0x0800818f
 800817c:	2300      	movs	r3, #0
 800817e:	77fb      	strb	r3, [r7, #31]
 8008180:	e118      	b.n	80083b4 <UART_SetConfig+0x348>
 8008182:	2302      	movs	r3, #2
 8008184:	77fb      	strb	r3, [r7, #31]
 8008186:	e115      	b.n	80083b4 <UART_SetConfig+0x348>
 8008188:	2304      	movs	r3, #4
 800818a:	77fb      	strb	r3, [r7, #31]
 800818c:	e112      	b.n	80083b4 <UART_SetConfig+0x348>
 800818e:	2308      	movs	r3, #8
 8008190:	77fb      	strb	r3, [r7, #31]
 8008192:	e10f      	b.n	80083b4 <UART_SetConfig+0x348>
 8008194:	2310      	movs	r3, #16
 8008196:	77fb      	strb	r3, [r7, #31]
 8008198:	e10c      	b.n	80083b4 <UART_SetConfig+0x348>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a68      	ldr	r2, [pc, #416]	; (8008340 <UART_SetConfig+0x2d4>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d120      	bne.n	80081e6 <UART_SetConfig+0x17a>
 80081a4:	4b64      	ldr	r3, [pc, #400]	; (8008338 <UART_SetConfig+0x2cc>)
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081ae:	2b30      	cmp	r3, #48	; 0x30
 80081b0:	d013      	beq.n	80081da <UART_SetConfig+0x16e>
 80081b2:	2b30      	cmp	r3, #48	; 0x30
 80081b4:	d814      	bhi.n	80081e0 <UART_SetConfig+0x174>
 80081b6:	2b20      	cmp	r3, #32
 80081b8:	d009      	beq.n	80081ce <UART_SetConfig+0x162>
 80081ba:	2b20      	cmp	r3, #32
 80081bc:	d810      	bhi.n	80081e0 <UART_SetConfig+0x174>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <UART_SetConfig+0x15c>
 80081c2:	2b10      	cmp	r3, #16
 80081c4:	d006      	beq.n	80081d4 <UART_SetConfig+0x168>
 80081c6:	e00b      	b.n	80081e0 <UART_SetConfig+0x174>
 80081c8:	2300      	movs	r3, #0
 80081ca:	77fb      	strb	r3, [r7, #31]
 80081cc:	e0f2      	b.n	80083b4 <UART_SetConfig+0x348>
 80081ce:	2302      	movs	r3, #2
 80081d0:	77fb      	strb	r3, [r7, #31]
 80081d2:	e0ef      	b.n	80083b4 <UART_SetConfig+0x348>
 80081d4:	2304      	movs	r3, #4
 80081d6:	77fb      	strb	r3, [r7, #31]
 80081d8:	e0ec      	b.n	80083b4 <UART_SetConfig+0x348>
 80081da:	2308      	movs	r3, #8
 80081dc:	77fb      	strb	r3, [r7, #31]
 80081de:	e0e9      	b.n	80083b4 <UART_SetConfig+0x348>
 80081e0:	2310      	movs	r3, #16
 80081e2:	77fb      	strb	r3, [r7, #31]
 80081e4:	e0e6      	b.n	80083b4 <UART_SetConfig+0x348>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a56      	ldr	r2, [pc, #344]	; (8008344 <UART_SetConfig+0x2d8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d120      	bne.n	8008232 <UART_SetConfig+0x1c6>
 80081f0:	4b51      	ldr	r3, [pc, #324]	; (8008338 <UART_SetConfig+0x2cc>)
 80081f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081fa:	2bc0      	cmp	r3, #192	; 0xc0
 80081fc:	d013      	beq.n	8008226 <UART_SetConfig+0x1ba>
 80081fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008200:	d814      	bhi.n	800822c <UART_SetConfig+0x1c0>
 8008202:	2b80      	cmp	r3, #128	; 0x80
 8008204:	d009      	beq.n	800821a <UART_SetConfig+0x1ae>
 8008206:	2b80      	cmp	r3, #128	; 0x80
 8008208:	d810      	bhi.n	800822c <UART_SetConfig+0x1c0>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <UART_SetConfig+0x1a8>
 800820e:	2b40      	cmp	r3, #64	; 0x40
 8008210:	d006      	beq.n	8008220 <UART_SetConfig+0x1b4>
 8008212:	e00b      	b.n	800822c <UART_SetConfig+0x1c0>
 8008214:	2300      	movs	r3, #0
 8008216:	77fb      	strb	r3, [r7, #31]
 8008218:	e0cc      	b.n	80083b4 <UART_SetConfig+0x348>
 800821a:	2302      	movs	r3, #2
 800821c:	77fb      	strb	r3, [r7, #31]
 800821e:	e0c9      	b.n	80083b4 <UART_SetConfig+0x348>
 8008220:	2304      	movs	r3, #4
 8008222:	77fb      	strb	r3, [r7, #31]
 8008224:	e0c6      	b.n	80083b4 <UART_SetConfig+0x348>
 8008226:	2308      	movs	r3, #8
 8008228:	77fb      	strb	r3, [r7, #31]
 800822a:	e0c3      	b.n	80083b4 <UART_SetConfig+0x348>
 800822c:	2310      	movs	r3, #16
 800822e:	77fb      	strb	r3, [r7, #31]
 8008230:	e0c0      	b.n	80083b4 <UART_SetConfig+0x348>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a44      	ldr	r2, [pc, #272]	; (8008348 <UART_SetConfig+0x2dc>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d125      	bne.n	8008288 <UART_SetConfig+0x21c>
 800823c:	4b3e      	ldr	r3, [pc, #248]	; (8008338 <UART_SetConfig+0x2cc>)
 800823e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008242:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800824a:	d017      	beq.n	800827c <UART_SetConfig+0x210>
 800824c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008250:	d817      	bhi.n	8008282 <UART_SetConfig+0x216>
 8008252:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008256:	d00b      	beq.n	8008270 <UART_SetConfig+0x204>
 8008258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800825c:	d811      	bhi.n	8008282 <UART_SetConfig+0x216>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <UART_SetConfig+0x1fe>
 8008262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008266:	d006      	beq.n	8008276 <UART_SetConfig+0x20a>
 8008268:	e00b      	b.n	8008282 <UART_SetConfig+0x216>
 800826a:	2300      	movs	r3, #0
 800826c:	77fb      	strb	r3, [r7, #31]
 800826e:	e0a1      	b.n	80083b4 <UART_SetConfig+0x348>
 8008270:	2302      	movs	r3, #2
 8008272:	77fb      	strb	r3, [r7, #31]
 8008274:	e09e      	b.n	80083b4 <UART_SetConfig+0x348>
 8008276:	2304      	movs	r3, #4
 8008278:	77fb      	strb	r3, [r7, #31]
 800827a:	e09b      	b.n	80083b4 <UART_SetConfig+0x348>
 800827c:	2308      	movs	r3, #8
 800827e:	77fb      	strb	r3, [r7, #31]
 8008280:	e098      	b.n	80083b4 <UART_SetConfig+0x348>
 8008282:	2310      	movs	r3, #16
 8008284:	77fb      	strb	r3, [r7, #31]
 8008286:	e095      	b.n	80083b4 <UART_SetConfig+0x348>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a2f      	ldr	r2, [pc, #188]	; (800834c <UART_SetConfig+0x2e0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d125      	bne.n	80082de <UART_SetConfig+0x272>
 8008292:	4b29      	ldr	r3, [pc, #164]	; (8008338 <UART_SetConfig+0x2cc>)
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008298:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800829c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082a0:	d017      	beq.n	80082d2 <UART_SetConfig+0x266>
 80082a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082a6:	d817      	bhi.n	80082d8 <UART_SetConfig+0x26c>
 80082a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ac:	d00b      	beq.n	80082c6 <UART_SetConfig+0x25a>
 80082ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082b2:	d811      	bhi.n	80082d8 <UART_SetConfig+0x26c>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d003      	beq.n	80082c0 <UART_SetConfig+0x254>
 80082b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082bc:	d006      	beq.n	80082cc <UART_SetConfig+0x260>
 80082be:	e00b      	b.n	80082d8 <UART_SetConfig+0x26c>
 80082c0:	2301      	movs	r3, #1
 80082c2:	77fb      	strb	r3, [r7, #31]
 80082c4:	e076      	b.n	80083b4 <UART_SetConfig+0x348>
 80082c6:	2302      	movs	r3, #2
 80082c8:	77fb      	strb	r3, [r7, #31]
 80082ca:	e073      	b.n	80083b4 <UART_SetConfig+0x348>
 80082cc:	2304      	movs	r3, #4
 80082ce:	77fb      	strb	r3, [r7, #31]
 80082d0:	e070      	b.n	80083b4 <UART_SetConfig+0x348>
 80082d2:	2308      	movs	r3, #8
 80082d4:	77fb      	strb	r3, [r7, #31]
 80082d6:	e06d      	b.n	80083b4 <UART_SetConfig+0x348>
 80082d8:	2310      	movs	r3, #16
 80082da:	77fb      	strb	r3, [r7, #31]
 80082dc:	e06a      	b.n	80083b4 <UART_SetConfig+0x348>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1b      	ldr	r2, [pc, #108]	; (8008350 <UART_SetConfig+0x2e4>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d138      	bne.n	800835a <UART_SetConfig+0x2ee>
 80082e8:	4b13      	ldr	r3, [pc, #76]	; (8008338 <UART_SetConfig+0x2cc>)
 80082ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80082f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082f6:	d017      	beq.n	8008328 <UART_SetConfig+0x2bc>
 80082f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082fc:	d82a      	bhi.n	8008354 <UART_SetConfig+0x2e8>
 80082fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008302:	d00b      	beq.n	800831c <UART_SetConfig+0x2b0>
 8008304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008308:	d824      	bhi.n	8008354 <UART_SetConfig+0x2e8>
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <UART_SetConfig+0x2aa>
 800830e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008312:	d006      	beq.n	8008322 <UART_SetConfig+0x2b6>
 8008314:	e01e      	b.n	8008354 <UART_SetConfig+0x2e8>
 8008316:	2300      	movs	r3, #0
 8008318:	77fb      	strb	r3, [r7, #31]
 800831a:	e04b      	b.n	80083b4 <UART_SetConfig+0x348>
 800831c:	2302      	movs	r3, #2
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e048      	b.n	80083b4 <UART_SetConfig+0x348>
 8008322:	2304      	movs	r3, #4
 8008324:	77fb      	strb	r3, [r7, #31]
 8008326:	e045      	b.n	80083b4 <UART_SetConfig+0x348>
 8008328:	2308      	movs	r3, #8
 800832a:	77fb      	strb	r3, [r7, #31]
 800832c:	e042      	b.n	80083b4 <UART_SetConfig+0x348>
 800832e:	bf00      	nop
 8008330:	efff69f3 	.word	0xefff69f3
 8008334:	40011000 	.word	0x40011000
 8008338:	40023800 	.word	0x40023800
 800833c:	40004400 	.word	0x40004400
 8008340:	40004800 	.word	0x40004800
 8008344:	40004c00 	.word	0x40004c00
 8008348:	40005000 	.word	0x40005000
 800834c:	40011400 	.word	0x40011400
 8008350:	40007800 	.word	0x40007800
 8008354:	2310      	movs	r3, #16
 8008356:	77fb      	strb	r3, [r7, #31]
 8008358:	e02c      	b.n	80083b4 <UART_SetConfig+0x348>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a72      	ldr	r2, [pc, #456]	; (8008528 <UART_SetConfig+0x4bc>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d125      	bne.n	80083b0 <UART_SetConfig+0x344>
 8008364:	4b71      	ldr	r3, [pc, #452]	; (800852c <UART_SetConfig+0x4c0>)
 8008366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800836e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008372:	d017      	beq.n	80083a4 <UART_SetConfig+0x338>
 8008374:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008378:	d817      	bhi.n	80083aa <UART_SetConfig+0x33e>
 800837a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800837e:	d00b      	beq.n	8008398 <UART_SetConfig+0x32c>
 8008380:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008384:	d811      	bhi.n	80083aa <UART_SetConfig+0x33e>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <UART_SetConfig+0x326>
 800838a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800838e:	d006      	beq.n	800839e <UART_SetConfig+0x332>
 8008390:	e00b      	b.n	80083aa <UART_SetConfig+0x33e>
 8008392:	2300      	movs	r3, #0
 8008394:	77fb      	strb	r3, [r7, #31]
 8008396:	e00d      	b.n	80083b4 <UART_SetConfig+0x348>
 8008398:	2302      	movs	r3, #2
 800839a:	77fb      	strb	r3, [r7, #31]
 800839c:	e00a      	b.n	80083b4 <UART_SetConfig+0x348>
 800839e:	2304      	movs	r3, #4
 80083a0:	77fb      	strb	r3, [r7, #31]
 80083a2:	e007      	b.n	80083b4 <UART_SetConfig+0x348>
 80083a4:	2308      	movs	r3, #8
 80083a6:	77fb      	strb	r3, [r7, #31]
 80083a8:	e004      	b.n	80083b4 <UART_SetConfig+0x348>
 80083aa:	2310      	movs	r3, #16
 80083ac:	77fb      	strb	r3, [r7, #31]
 80083ae:	e001      	b.n	80083b4 <UART_SetConfig+0x348>
 80083b0:	2310      	movs	r3, #16
 80083b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083bc:	d15b      	bne.n	8008476 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80083be:	7ffb      	ldrb	r3, [r7, #31]
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d828      	bhi.n	8008416 <UART_SetConfig+0x3aa>
 80083c4:	a201      	add	r2, pc, #4	; (adr r2, 80083cc <UART_SetConfig+0x360>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083f1 	.word	0x080083f1
 80083d0:	080083f9 	.word	0x080083f9
 80083d4:	08008401 	.word	0x08008401
 80083d8:	08008417 	.word	0x08008417
 80083dc:	08008407 	.word	0x08008407
 80083e0:	08008417 	.word	0x08008417
 80083e4:	08008417 	.word	0x08008417
 80083e8:	08008417 	.word	0x08008417
 80083ec:	0800840f 	.word	0x0800840f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f0:	f7fd fc40 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 80083f4:	61b8      	str	r0, [r7, #24]
        break;
 80083f6:	e013      	b.n	8008420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f8:	f7fd fc50 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 80083fc:	61b8      	str	r0, [r7, #24]
        break;
 80083fe:	e00f      	b.n	8008420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008400:	4b4b      	ldr	r3, [pc, #300]	; (8008530 <UART_SetConfig+0x4c4>)
 8008402:	61bb      	str	r3, [r7, #24]
        break;
 8008404:	e00c      	b.n	8008420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008406:	f7fd fb23 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 800840a:	61b8      	str	r0, [r7, #24]
        break;
 800840c:	e008      	b.n	8008420 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800840e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008412:	61bb      	str	r3, [r7, #24]
        break;
 8008414:	e004      	b.n	8008420 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	77bb      	strb	r3, [r7, #30]
        break;
 800841e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d074      	beq.n	8008510 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	005a      	lsls	r2, r3, #1
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	085b      	lsrs	r3, r3, #1
 8008430:	441a      	add	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	fbb2 f3f3 	udiv	r3, r2, r3
 800843a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	2b0f      	cmp	r3, #15
 8008440:	d916      	bls.n	8008470 <UART_SetConfig+0x404>
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008448:	d212      	bcs.n	8008470 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	b29b      	uxth	r3, r3
 800844e:	f023 030f 	bic.w	r3, r3, #15
 8008452:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	085b      	lsrs	r3, r3, #1
 8008458:	b29b      	uxth	r3, r3
 800845a:	f003 0307 	and.w	r3, r3, #7
 800845e:	b29a      	uxth	r2, r3
 8008460:	89fb      	ldrh	r3, [r7, #14]
 8008462:	4313      	orrs	r3, r2
 8008464:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	89fa      	ldrh	r2, [r7, #14]
 800846c:	60da      	str	r2, [r3, #12]
 800846e:	e04f      	b.n	8008510 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	77bb      	strb	r3, [r7, #30]
 8008474:	e04c      	b.n	8008510 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008476:	7ffb      	ldrb	r3, [r7, #31]
 8008478:	2b08      	cmp	r3, #8
 800847a:	d828      	bhi.n	80084ce <UART_SetConfig+0x462>
 800847c:	a201      	add	r2, pc, #4	; (adr r2, 8008484 <UART_SetConfig+0x418>)
 800847e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008482:	bf00      	nop
 8008484:	080084a9 	.word	0x080084a9
 8008488:	080084b1 	.word	0x080084b1
 800848c:	080084b9 	.word	0x080084b9
 8008490:	080084cf 	.word	0x080084cf
 8008494:	080084bf 	.word	0x080084bf
 8008498:	080084cf 	.word	0x080084cf
 800849c:	080084cf 	.word	0x080084cf
 80084a0:	080084cf 	.word	0x080084cf
 80084a4:	080084c7 	.word	0x080084c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084a8:	f7fd fbe4 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 80084ac:	61b8      	str	r0, [r7, #24]
        break;
 80084ae:	e013      	b.n	80084d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084b0:	f7fd fbf4 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 80084b4:	61b8      	str	r0, [r7, #24]
        break;
 80084b6:	e00f      	b.n	80084d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084b8:	4b1d      	ldr	r3, [pc, #116]	; (8008530 <UART_SetConfig+0x4c4>)
 80084ba:	61bb      	str	r3, [r7, #24]
        break;
 80084bc:	e00c      	b.n	80084d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084be:	f7fd fac7 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 80084c2:	61b8      	str	r0, [r7, #24]
        break;
 80084c4:	e008      	b.n	80084d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ca:	61bb      	str	r3, [r7, #24]
        break;
 80084cc:	e004      	b.n	80084d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	77bb      	strb	r3, [r7, #30]
        break;
 80084d6:	bf00      	nop
    }

    if (pclk != 0U)
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d018      	beq.n	8008510 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	085a      	lsrs	r2, r3, #1
 80084e4:	69bb      	ldr	r3, [r7, #24]
 80084e6:	441a      	add	r2, r3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	2b0f      	cmp	r3, #15
 80084f6:	d909      	bls.n	800850c <UART_SetConfig+0x4a0>
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084fe:	d205      	bcs.n	800850c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	b29a      	uxth	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60da      	str	r2, [r3, #12]
 800850a:	e001      	b.n	8008510 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2200      	movs	r2, #0
 800851a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800851c:	7fbb      	ldrb	r3, [r7, #30]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3720      	adds	r7, #32
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	40007c00 	.word	0x40007c00
 800852c:	40023800 	.word	0x40023800
 8008530:	00f42400 	.word	0x00f42400

08008534 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	430a      	orrs	r2, r1
 80085c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	430a      	orrs	r2, r1
 80085e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ea:	f003 0320 	and.w	r3, r3, #32
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	430a      	orrs	r2, r1
 8008606:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800860c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01a      	beq.n	800864a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	430a      	orrs	r2, r1
 8008628:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008632:	d10a      	bne.n	800864a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	430a      	orrs	r2, r1
 8008648:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800864e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00a      	beq.n	800866c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	430a      	orrs	r2, r1
 800866a:	605a      	str	r2, [r3, #4]
  }
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af02      	add	r7, sp, #8
 800867e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008688:	f7fb fd26 	bl	80040d8 <HAL_GetTick>
 800868c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0308 	and.w	r3, r3, #8
 8008698:	2b08      	cmp	r3, #8
 800869a:	d10e      	bne.n	80086ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800869c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086a0:	9300      	str	r3, [sp, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f000 f831 	bl	8008712 <UART_WaitOnFlagUntilTimeout>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d001      	beq.n	80086ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086b6:	2303      	movs	r3, #3
 80086b8:	e027      	b.n	800870a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d10e      	bne.n	80086e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086cc:	9300      	str	r3, [sp, #0]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 f81b 	bl	8008712 <UART_WaitOnFlagUntilTimeout>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e011      	b.n	800870a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2220      	movs	r2, #32
 80086ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008712:	b580      	push	{r7, lr}
 8008714:	b09c      	sub	sp, #112	; 0x70
 8008716:	af00      	add	r7, sp, #0
 8008718:	60f8      	str	r0, [r7, #12]
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	4613      	mov	r3, r2
 8008720:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008722:	e0a7      	b.n	8008874 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	f000 80a3 	beq.w	8008874 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800872e:	f7fb fcd3 	bl	80040d8 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800873a:	429a      	cmp	r2, r3
 800873c:	d302      	bcc.n	8008744 <UART_WaitOnFlagUntilTimeout+0x32>
 800873e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008740:	2b00      	cmp	r3, #0
 8008742:	d13f      	bne.n	80087c4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800874c:	e853 3f00 	ldrex	r3, [r3]
 8008750:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008754:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008758:	667b      	str	r3, [r7, #100]	; 0x64
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008764:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008766:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008768:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800876a:	e841 2300 	strex	r3, r2, [r1]
 800876e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1e6      	bne.n	8008744 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	3308      	adds	r3, #8
 800877c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008780:	e853 3f00 	ldrex	r3, [r3]
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	f023 0301 	bic.w	r3, r3, #1
 800878c:	663b      	str	r3, [r7, #96]	; 0x60
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008796:	64ba      	str	r2, [r7, #72]	; 0x48
 8008798:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800879c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e5      	bne.n	8008776 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2220      	movs	r2, #32
 80087ae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80087c0:	2303      	movs	r3, #3
 80087c2:	e068      	b.n	8008896 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0304 	and.w	r3, r3, #4
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d050      	beq.n	8008874 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	69db      	ldr	r3, [r3, #28]
 80087d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087e0:	d148      	bne.n	8008874 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80087ea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	e853 3f00 	ldrex	r3, [r3]
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008800:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800880a:	637b      	str	r3, [r7, #52]	; 0x34
 800880c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008810:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e6      	bne.n	80087ec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	3308      	adds	r3, #8
 8008824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	e853 3f00 	ldrex	r3, [r3]
 800882c:	613b      	str	r3, [r7, #16]
   return(result);
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	f023 0301 	bic.w	r3, r3, #1
 8008834:	66bb      	str	r3, [r7, #104]	; 0x68
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3308      	adds	r3, #8
 800883c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800883e:	623a      	str	r2, [r7, #32]
 8008840:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008842:	69f9      	ldr	r1, [r7, #28]
 8008844:	6a3a      	ldr	r2, [r7, #32]
 8008846:	e841 2300 	strex	r3, r2, [r1]
 800884a:	61bb      	str	r3, [r7, #24]
   return(result);
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d1e5      	bne.n	800881e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	2220      	movs	r2, #32
 8008856:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2220      	movs	r2, #32
 800885c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2220      	movs	r2, #32
 8008864:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008870:	2303      	movs	r3, #3
 8008872:	e010      	b.n	8008896 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	69da      	ldr	r2, [r3, #28]
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	4013      	ands	r3, r2
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	429a      	cmp	r2, r3
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	b2db      	uxtb	r3, r3
 800888a:	461a      	mov	r2, r3
 800888c:	79fb      	ldrb	r3, [r7, #7]
 800888e:	429a      	cmp	r2, r3
 8008890:	f43f af48 	beq.w	8008724 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3770      	adds	r7, #112	; 0x70
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <__cvt>:
 800889e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088a0:	ed2d 8b02 	vpush	{d8}
 80088a4:	eeb0 8b40 	vmov.f64	d8, d0
 80088a8:	b085      	sub	sp, #20
 80088aa:	4617      	mov	r7, r2
 80088ac:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80088ae:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80088b0:	ee18 2a90 	vmov	r2, s17
 80088b4:	f025 0520 	bic.w	r5, r5, #32
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	bfb6      	itet	lt
 80088bc:	222d      	movlt	r2, #45	; 0x2d
 80088be:	2200      	movge	r2, #0
 80088c0:	eeb1 8b40 	vneglt.f64	d8, d0
 80088c4:	2d46      	cmp	r5, #70	; 0x46
 80088c6:	460c      	mov	r4, r1
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	d004      	beq.n	80088d6 <__cvt+0x38>
 80088cc:	2d45      	cmp	r5, #69	; 0x45
 80088ce:	d100      	bne.n	80088d2 <__cvt+0x34>
 80088d0:	3401      	adds	r4, #1
 80088d2:	2102      	movs	r1, #2
 80088d4:	e000      	b.n	80088d8 <__cvt+0x3a>
 80088d6:	2103      	movs	r1, #3
 80088d8:	ab03      	add	r3, sp, #12
 80088da:	9301      	str	r3, [sp, #4]
 80088dc:	ab02      	add	r3, sp, #8
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	4622      	mov	r2, r4
 80088e2:	4633      	mov	r3, r6
 80088e4:	eeb0 0b48 	vmov.f64	d0, d8
 80088e8:	f000 fe76 	bl	80095d8 <_dtoa_r>
 80088ec:	2d47      	cmp	r5, #71	; 0x47
 80088ee:	d101      	bne.n	80088f4 <__cvt+0x56>
 80088f0:	07fb      	lsls	r3, r7, #31
 80088f2:	d51a      	bpl.n	800892a <__cvt+0x8c>
 80088f4:	2d46      	cmp	r5, #70	; 0x46
 80088f6:	eb00 0204 	add.w	r2, r0, r4
 80088fa:	d10c      	bne.n	8008916 <__cvt+0x78>
 80088fc:	7803      	ldrb	r3, [r0, #0]
 80088fe:	2b30      	cmp	r3, #48	; 0x30
 8008900:	d107      	bne.n	8008912 <__cvt+0x74>
 8008902:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890a:	bf1c      	itt	ne
 800890c:	f1c4 0401 	rsbne	r4, r4, #1
 8008910:	6034      	strne	r4, [r6, #0]
 8008912:	6833      	ldr	r3, [r6, #0]
 8008914:	441a      	add	r2, r3
 8008916:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800891a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891e:	bf08      	it	eq
 8008920:	9203      	streq	r2, [sp, #12]
 8008922:	2130      	movs	r1, #48	; 0x30
 8008924:	9b03      	ldr	r3, [sp, #12]
 8008926:	4293      	cmp	r3, r2
 8008928:	d307      	bcc.n	800893a <__cvt+0x9c>
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800892e:	1a1b      	subs	r3, r3, r0
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	b005      	add	sp, #20
 8008934:	ecbd 8b02 	vpop	{d8}
 8008938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800893a:	1c5c      	adds	r4, r3, #1
 800893c:	9403      	str	r4, [sp, #12]
 800893e:	7019      	strb	r1, [r3, #0]
 8008940:	e7f0      	b.n	8008924 <__cvt+0x86>

08008942 <__exponent>:
 8008942:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008944:	4603      	mov	r3, r0
 8008946:	2900      	cmp	r1, #0
 8008948:	bfb8      	it	lt
 800894a:	4249      	neglt	r1, r1
 800894c:	f803 2b02 	strb.w	r2, [r3], #2
 8008950:	bfb4      	ite	lt
 8008952:	222d      	movlt	r2, #45	; 0x2d
 8008954:	222b      	movge	r2, #43	; 0x2b
 8008956:	2909      	cmp	r1, #9
 8008958:	7042      	strb	r2, [r0, #1]
 800895a:	dd2a      	ble.n	80089b2 <__exponent+0x70>
 800895c:	f10d 0207 	add.w	r2, sp, #7
 8008960:	4617      	mov	r7, r2
 8008962:	260a      	movs	r6, #10
 8008964:	4694      	mov	ip, r2
 8008966:	fb91 f5f6 	sdiv	r5, r1, r6
 800896a:	fb06 1415 	mls	r4, r6, r5, r1
 800896e:	3430      	adds	r4, #48	; 0x30
 8008970:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008974:	460c      	mov	r4, r1
 8008976:	2c63      	cmp	r4, #99	; 0x63
 8008978:	f102 32ff 	add.w	r2, r2, #4294967295
 800897c:	4629      	mov	r1, r5
 800897e:	dcf1      	bgt.n	8008964 <__exponent+0x22>
 8008980:	3130      	adds	r1, #48	; 0x30
 8008982:	f1ac 0402 	sub.w	r4, ip, #2
 8008986:	f802 1c01 	strb.w	r1, [r2, #-1]
 800898a:	1c41      	adds	r1, r0, #1
 800898c:	4622      	mov	r2, r4
 800898e:	42ba      	cmp	r2, r7
 8008990:	d30a      	bcc.n	80089a8 <__exponent+0x66>
 8008992:	f10d 0209 	add.w	r2, sp, #9
 8008996:	eba2 020c 	sub.w	r2, r2, ip
 800899a:	42bc      	cmp	r4, r7
 800899c:	bf88      	it	hi
 800899e:	2200      	movhi	r2, #0
 80089a0:	4413      	add	r3, r2
 80089a2:	1a18      	subs	r0, r3, r0
 80089a4:	b003      	add	sp, #12
 80089a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80089ac:	f801 5f01 	strb.w	r5, [r1, #1]!
 80089b0:	e7ed      	b.n	800898e <__exponent+0x4c>
 80089b2:	2330      	movs	r3, #48	; 0x30
 80089b4:	3130      	adds	r1, #48	; 0x30
 80089b6:	7083      	strb	r3, [r0, #2]
 80089b8:	70c1      	strb	r1, [r0, #3]
 80089ba:	1d03      	adds	r3, r0, #4
 80089bc:	e7f1      	b.n	80089a2 <__exponent+0x60>
	...

080089c0 <_printf_float>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	b08b      	sub	sp, #44	; 0x2c
 80089c6:	460c      	mov	r4, r1
 80089c8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80089cc:	4616      	mov	r6, r2
 80089ce:	461f      	mov	r7, r3
 80089d0:	4605      	mov	r5, r0
 80089d2:	f000 fd01 	bl	80093d8 <_localeconv_r>
 80089d6:	f8d0 b000 	ldr.w	fp, [r0]
 80089da:	4658      	mov	r0, fp
 80089dc:	f7f7 fc80 	bl	80002e0 <strlen>
 80089e0:	2300      	movs	r3, #0
 80089e2:	9308      	str	r3, [sp, #32]
 80089e4:	f8d8 3000 	ldr.w	r3, [r8]
 80089e8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80089ec:	6822      	ldr	r2, [r4, #0]
 80089ee:	3307      	adds	r3, #7
 80089f0:	f023 0307 	bic.w	r3, r3, #7
 80089f4:	f103 0108 	add.w	r1, r3, #8
 80089f8:	f8c8 1000 	str.w	r1, [r8]
 80089fc:	ed93 0b00 	vldr	d0, [r3]
 8008a00:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008c60 <_printf_float+0x2a0>
 8008a04:	eeb0 7bc0 	vabs.f64	d7, d0
 8008a08:	eeb4 7b46 	vcmp.f64	d7, d6
 8008a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a10:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8008a14:	4682      	mov	sl, r0
 8008a16:	dd24      	ble.n	8008a62 <_printf_float+0xa2>
 8008a18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a20:	d502      	bpl.n	8008a28 <_printf_float+0x68>
 8008a22:	232d      	movs	r3, #45	; 0x2d
 8008a24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a28:	498f      	ldr	r1, [pc, #572]	; (8008c68 <_printf_float+0x2a8>)
 8008a2a:	4b90      	ldr	r3, [pc, #576]	; (8008c6c <_printf_float+0x2ac>)
 8008a2c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008a30:	bf94      	ite	ls
 8008a32:	4688      	movls	r8, r1
 8008a34:	4698      	movhi	r8, r3
 8008a36:	2303      	movs	r3, #3
 8008a38:	6123      	str	r3, [r4, #16]
 8008a3a:	f022 0204 	bic.w	r2, r2, #4
 8008a3e:	2300      	movs	r3, #0
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	9304      	str	r3, [sp, #16]
 8008a44:	9700      	str	r7, [sp, #0]
 8008a46:	4633      	mov	r3, r6
 8008a48:	aa09      	add	r2, sp, #36	; 0x24
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	4628      	mov	r0, r5
 8008a4e:	f000 f9d1 	bl	8008df4 <_printf_common>
 8008a52:	3001      	adds	r0, #1
 8008a54:	f040 808a 	bne.w	8008b6c <_printf_float+0x1ac>
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295
 8008a5c:	b00b      	add	sp, #44	; 0x2c
 8008a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a62:	eeb4 0b40 	vcmp.f64	d0, d0
 8008a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6a:	d709      	bvc.n	8008a80 <_printf_float+0xc0>
 8008a6c:	ee10 3a90 	vmov	r3, s1
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bfbc      	itt	lt
 8008a74:	232d      	movlt	r3, #45	; 0x2d
 8008a76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008a7a:	497d      	ldr	r1, [pc, #500]	; (8008c70 <_printf_float+0x2b0>)
 8008a7c:	4b7d      	ldr	r3, [pc, #500]	; (8008c74 <_printf_float+0x2b4>)
 8008a7e:	e7d5      	b.n	8008a2c <_printf_float+0x6c>
 8008a80:	6863      	ldr	r3, [r4, #4]
 8008a82:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008a86:	9104      	str	r1, [sp, #16]
 8008a88:	1c59      	adds	r1, r3, #1
 8008a8a:	d13c      	bne.n	8008b06 <_printf_float+0x146>
 8008a8c:	2306      	movs	r3, #6
 8008a8e:	6063      	str	r3, [r4, #4]
 8008a90:	2300      	movs	r3, #0
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	ab08      	add	r3, sp, #32
 8008a96:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008a9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a9e:	ab07      	add	r3, sp, #28
 8008aa0:	6861      	ldr	r1, [r4, #4]
 8008aa2:	9300      	str	r3, [sp, #0]
 8008aa4:	6022      	str	r2, [r4, #0]
 8008aa6:	f10d 031b 	add.w	r3, sp, #27
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7ff fef7 	bl	800889e <__cvt>
 8008ab0:	9b04      	ldr	r3, [sp, #16]
 8008ab2:	9907      	ldr	r1, [sp, #28]
 8008ab4:	2b47      	cmp	r3, #71	; 0x47
 8008ab6:	4680      	mov	r8, r0
 8008ab8:	d108      	bne.n	8008acc <_printf_float+0x10c>
 8008aba:	1cc8      	adds	r0, r1, #3
 8008abc:	db02      	blt.n	8008ac4 <_printf_float+0x104>
 8008abe:	6863      	ldr	r3, [r4, #4]
 8008ac0:	4299      	cmp	r1, r3
 8008ac2:	dd41      	ble.n	8008b48 <_printf_float+0x188>
 8008ac4:	f1a9 0902 	sub.w	r9, r9, #2
 8008ac8:	fa5f f989 	uxtb.w	r9, r9
 8008acc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ad0:	d820      	bhi.n	8008b14 <_printf_float+0x154>
 8008ad2:	3901      	subs	r1, #1
 8008ad4:	464a      	mov	r2, r9
 8008ad6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ada:	9107      	str	r1, [sp, #28]
 8008adc:	f7ff ff31 	bl	8008942 <__exponent>
 8008ae0:	9a08      	ldr	r2, [sp, #32]
 8008ae2:	9004      	str	r0, [sp, #16]
 8008ae4:	1813      	adds	r3, r2, r0
 8008ae6:	2a01      	cmp	r2, #1
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	dc02      	bgt.n	8008af2 <_printf_float+0x132>
 8008aec:	6822      	ldr	r2, [r4, #0]
 8008aee:	07d2      	lsls	r2, r2, #31
 8008af0:	d501      	bpl.n	8008af6 <_printf_float+0x136>
 8008af2:	3301      	adds	r3, #1
 8008af4:	6123      	str	r3, [r4, #16]
 8008af6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0a2      	beq.n	8008a44 <_printf_float+0x84>
 8008afe:	232d      	movs	r3, #45	; 0x2d
 8008b00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b04:	e79e      	b.n	8008a44 <_printf_float+0x84>
 8008b06:	9904      	ldr	r1, [sp, #16]
 8008b08:	2947      	cmp	r1, #71	; 0x47
 8008b0a:	d1c1      	bne.n	8008a90 <_printf_float+0xd0>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1bf      	bne.n	8008a90 <_printf_float+0xd0>
 8008b10:	2301      	movs	r3, #1
 8008b12:	e7bc      	b.n	8008a8e <_printf_float+0xce>
 8008b14:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008b18:	d118      	bne.n	8008b4c <_printf_float+0x18c>
 8008b1a:	2900      	cmp	r1, #0
 8008b1c:	6863      	ldr	r3, [r4, #4]
 8008b1e:	dd0b      	ble.n	8008b38 <_printf_float+0x178>
 8008b20:	6121      	str	r1, [r4, #16]
 8008b22:	b913      	cbnz	r3, 8008b2a <_printf_float+0x16a>
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	07d0      	lsls	r0, r2, #31
 8008b28:	d502      	bpl.n	8008b30 <_printf_float+0x170>
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	440b      	add	r3, r1
 8008b2e:	6123      	str	r3, [r4, #16]
 8008b30:	2300      	movs	r3, #0
 8008b32:	65a1      	str	r1, [r4, #88]	; 0x58
 8008b34:	9304      	str	r3, [sp, #16]
 8008b36:	e7de      	b.n	8008af6 <_printf_float+0x136>
 8008b38:	b913      	cbnz	r3, 8008b40 <_printf_float+0x180>
 8008b3a:	6822      	ldr	r2, [r4, #0]
 8008b3c:	07d2      	lsls	r2, r2, #31
 8008b3e:	d501      	bpl.n	8008b44 <_printf_float+0x184>
 8008b40:	3302      	adds	r3, #2
 8008b42:	e7f4      	b.n	8008b2e <_printf_float+0x16e>
 8008b44:	2301      	movs	r3, #1
 8008b46:	e7f2      	b.n	8008b2e <_printf_float+0x16e>
 8008b48:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008b4c:	9b08      	ldr	r3, [sp, #32]
 8008b4e:	4299      	cmp	r1, r3
 8008b50:	db05      	blt.n	8008b5e <_printf_float+0x19e>
 8008b52:	6823      	ldr	r3, [r4, #0]
 8008b54:	6121      	str	r1, [r4, #16]
 8008b56:	07d8      	lsls	r0, r3, #31
 8008b58:	d5ea      	bpl.n	8008b30 <_printf_float+0x170>
 8008b5a:	1c4b      	adds	r3, r1, #1
 8008b5c:	e7e7      	b.n	8008b2e <_printf_float+0x16e>
 8008b5e:	2900      	cmp	r1, #0
 8008b60:	bfd4      	ite	le
 8008b62:	f1c1 0202 	rsble	r2, r1, #2
 8008b66:	2201      	movgt	r2, #1
 8008b68:	4413      	add	r3, r2
 8008b6a:	e7e0      	b.n	8008b2e <_printf_float+0x16e>
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	055a      	lsls	r2, r3, #21
 8008b70:	d407      	bmi.n	8008b82 <_printf_float+0x1c2>
 8008b72:	6923      	ldr	r3, [r4, #16]
 8008b74:	4642      	mov	r2, r8
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d12a      	bne.n	8008bd6 <_printf_float+0x216>
 8008b80:	e76a      	b.n	8008a58 <_printf_float+0x98>
 8008b82:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008b86:	f240 80e0 	bls.w	8008d4a <_printf_float+0x38a>
 8008b8a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008b8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b96:	d133      	bne.n	8008c00 <_printf_float+0x240>
 8008b98:	4a37      	ldr	r2, [pc, #220]	; (8008c78 <_printf_float+0x2b8>)
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	f43f af58 	beq.w	8008a58 <_printf_float+0x98>
 8008ba8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	db02      	blt.n	8008bb6 <_printf_float+0x1f6>
 8008bb0:	6823      	ldr	r3, [r4, #0]
 8008bb2:	07d8      	lsls	r0, r3, #31
 8008bb4:	d50f      	bpl.n	8008bd6 <_printf_float+0x216>
 8008bb6:	4653      	mov	r3, sl
 8008bb8:	465a      	mov	r2, fp
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	f43f af49 	beq.w	8008a58 <_printf_float+0x98>
 8008bc6:	f04f 0800 	mov.w	r8, #0
 8008bca:	f104 091a 	add.w	r9, r4, #26
 8008bce:	9b08      	ldr	r3, [sp, #32]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	4543      	cmp	r3, r8
 8008bd4:	dc09      	bgt.n	8008bea <_printf_float+0x22a>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	079b      	lsls	r3, r3, #30
 8008bda:	f100 8106 	bmi.w	8008dea <_printf_float+0x42a>
 8008bde:	68e0      	ldr	r0, [r4, #12]
 8008be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008be2:	4298      	cmp	r0, r3
 8008be4:	bfb8      	it	lt
 8008be6:	4618      	movlt	r0, r3
 8008be8:	e738      	b.n	8008a5c <_printf_float+0x9c>
 8008bea:	2301      	movs	r3, #1
 8008bec:	464a      	mov	r2, r9
 8008bee:	4631      	mov	r1, r6
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	47b8      	blx	r7
 8008bf4:	3001      	adds	r0, #1
 8008bf6:	f43f af2f 	beq.w	8008a58 <_printf_float+0x98>
 8008bfa:	f108 0801 	add.w	r8, r8, #1
 8008bfe:	e7e6      	b.n	8008bce <_printf_float+0x20e>
 8008c00:	9b07      	ldr	r3, [sp, #28]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	dc3a      	bgt.n	8008c7c <_printf_float+0x2bc>
 8008c06:	4a1c      	ldr	r2, [pc, #112]	; (8008c78 <_printf_float+0x2b8>)
 8008c08:	2301      	movs	r3, #1
 8008c0a:	4631      	mov	r1, r6
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	47b8      	blx	r7
 8008c10:	3001      	adds	r0, #1
 8008c12:	f43f af21 	beq.w	8008a58 <_printf_float+0x98>
 8008c16:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	d102      	bne.n	8008c24 <_printf_float+0x264>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	07d9      	lsls	r1, r3, #31
 8008c22:	d5d8      	bpl.n	8008bd6 <_printf_float+0x216>
 8008c24:	4653      	mov	r3, sl
 8008c26:	465a      	mov	r2, fp
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	47b8      	blx	r7
 8008c2e:	3001      	adds	r0, #1
 8008c30:	f43f af12 	beq.w	8008a58 <_printf_float+0x98>
 8008c34:	f04f 0900 	mov.w	r9, #0
 8008c38:	f104 0a1a 	add.w	sl, r4, #26
 8008c3c:	9b07      	ldr	r3, [sp, #28]
 8008c3e:	425b      	negs	r3, r3
 8008c40:	454b      	cmp	r3, r9
 8008c42:	dc01      	bgt.n	8008c48 <_printf_float+0x288>
 8008c44:	9b08      	ldr	r3, [sp, #32]
 8008c46:	e795      	b.n	8008b74 <_printf_float+0x1b4>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	4652      	mov	r2, sl
 8008c4c:	4631      	mov	r1, r6
 8008c4e:	4628      	mov	r0, r5
 8008c50:	47b8      	blx	r7
 8008c52:	3001      	adds	r0, #1
 8008c54:	f43f af00 	beq.w	8008a58 <_printf_float+0x98>
 8008c58:	f109 0901 	add.w	r9, r9, #1
 8008c5c:	e7ee      	b.n	8008c3c <_printf_float+0x27c>
 8008c5e:	bf00      	nop
 8008c60:	ffffffff 	.word	0xffffffff
 8008c64:	7fefffff 	.word	0x7fefffff
 8008c68:	0800b8b8 	.word	0x0800b8b8
 8008c6c:	0800b8bc 	.word	0x0800b8bc
 8008c70:	0800b8c0 	.word	0x0800b8c0
 8008c74:	0800b8c4 	.word	0x0800b8c4
 8008c78:	0800b8c8 	.word	0x0800b8c8
 8008c7c:	9a08      	ldr	r2, [sp, #32]
 8008c7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c80:	429a      	cmp	r2, r3
 8008c82:	bfa8      	it	ge
 8008c84:	461a      	movge	r2, r3
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	4691      	mov	r9, r2
 8008c8a:	dc38      	bgt.n	8008cfe <_printf_float+0x33e>
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	9305      	str	r3, [sp, #20]
 8008c90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c94:	f104 021a 	add.w	r2, r4, #26
 8008c98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008c9a:	9905      	ldr	r1, [sp, #20]
 8008c9c:	9304      	str	r3, [sp, #16]
 8008c9e:	eba3 0309 	sub.w	r3, r3, r9
 8008ca2:	428b      	cmp	r3, r1
 8008ca4:	dc33      	bgt.n	8008d0e <_printf_float+0x34e>
 8008ca6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	db3c      	blt.n	8008d28 <_printf_float+0x368>
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	07da      	lsls	r2, r3, #31
 8008cb2:	d439      	bmi.n	8008d28 <_printf_float+0x368>
 8008cb4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008cb8:	eba2 0903 	sub.w	r9, r2, r3
 8008cbc:	9b04      	ldr	r3, [sp, #16]
 8008cbe:	1ad2      	subs	r2, r2, r3
 8008cc0:	4591      	cmp	r9, r2
 8008cc2:	bfa8      	it	ge
 8008cc4:	4691      	movge	r9, r2
 8008cc6:	f1b9 0f00 	cmp.w	r9, #0
 8008cca:	dc35      	bgt.n	8008d38 <_printf_float+0x378>
 8008ccc:	f04f 0800 	mov.w	r8, #0
 8008cd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cd4:	f104 0a1a 	add.w	sl, r4, #26
 8008cd8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008cdc:	1a9b      	subs	r3, r3, r2
 8008cde:	eba3 0309 	sub.w	r3, r3, r9
 8008ce2:	4543      	cmp	r3, r8
 8008ce4:	f77f af77 	ble.w	8008bd6 <_printf_float+0x216>
 8008ce8:	2301      	movs	r3, #1
 8008cea:	4652      	mov	r2, sl
 8008cec:	4631      	mov	r1, r6
 8008cee:	4628      	mov	r0, r5
 8008cf0:	47b8      	blx	r7
 8008cf2:	3001      	adds	r0, #1
 8008cf4:	f43f aeb0 	beq.w	8008a58 <_printf_float+0x98>
 8008cf8:	f108 0801 	add.w	r8, r8, #1
 8008cfc:	e7ec      	b.n	8008cd8 <_printf_float+0x318>
 8008cfe:	4613      	mov	r3, r2
 8008d00:	4631      	mov	r1, r6
 8008d02:	4642      	mov	r2, r8
 8008d04:	4628      	mov	r0, r5
 8008d06:	47b8      	blx	r7
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d1bf      	bne.n	8008c8c <_printf_float+0x2cc>
 8008d0c:	e6a4      	b.n	8008a58 <_printf_float+0x98>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4631      	mov	r1, r6
 8008d12:	4628      	mov	r0, r5
 8008d14:	9204      	str	r2, [sp, #16]
 8008d16:	47b8      	blx	r7
 8008d18:	3001      	adds	r0, #1
 8008d1a:	f43f ae9d 	beq.w	8008a58 <_printf_float+0x98>
 8008d1e:	9b05      	ldr	r3, [sp, #20]
 8008d20:	9a04      	ldr	r2, [sp, #16]
 8008d22:	3301      	adds	r3, #1
 8008d24:	9305      	str	r3, [sp, #20]
 8008d26:	e7b7      	b.n	8008c98 <_printf_float+0x2d8>
 8008d28:	4653      	mov	r3, sl
 8008d2a:	465a      	mov	r2, fp
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4628      	mov	r0, r5
 8008d30:	47b8      	blx	r7
 8008d32:	3001      	adds	r0, #1
 8008d34:	d1be      	bne.n	8008cb4 <_printf_float+0x2f4>
 8008d36:	e68f      	b.n	8008a58 <_printf_float+0x98>
 8008d38:	9a04      	ldr	r2, [sp, #16]
 8008d3a:	464b      	mov	r3, r9
 8008d3c:	4442      	add	r2, r8
 8008d3e:	4631      	mov	r1, r6
 8008d40:	4628      	mov	r0, r5
 8008d42:	47b8      	blx	r7
 8008d44:	3001      	adds	r0, #1
 8008d46:	d1c1      	bne.n	8008ccc <_printf_float+0x30c>
 8008d48:	e686      	b.n	8008a58 <_printf_float+0x98>
 8008d4a:	9a08      	ldr	r2, [sp, #32]
 8008d4c:	2a01      	cmp	r2, #1
 8008d4e:	dc01      	bgt.n	8008d54 <_printf_float+0x394>
 8008d50:	07db      	lsls	r3, r3, #31
 8008d52:	d537      	bpl.n	8008dc4 <_printf_float+0x404>
 8008d54:	2301      	movs	r3, #1
 8008d56:	4642      	mov	r2, r8
 8008d58:	4631      	mov	r1, r6
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b8      	blx	r7
 8008d5e:	3001      	adds	r0, #1
 8008d60:	f43f ae7a 	beq.w	8008a58 <_printf_float+0x98>
 8008d64:	4653      	mov	r3, sl
 8008d66:	465a      	mov	r2, fp
 8008d68:	4631      	mov	r1, r6
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	47b8      	blx	r7
 8008d6e:	3001      	adds	r0, #1
 8008d70:	f43f ae72 	beq.w	8008a58 <_printf_float+0x98>
 8008d74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008d78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d80:	9b08      	ldr	r3, [sp, #32]
 8008d82:	d01a      	beq.n	8008dba <_printf_float+0x3fa>
 8008d84:	3b01      	subs	r3, #1
 8008d86:	f108 0201 	add.w	r2, r8, #1
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	47b8      	blx	r7
 8008d90:	3001      	adds	r0, #1
 8008d92:	d10e      	bne.n	8008db2 <_printf_float+0x3f2>
 8008d94:	e660      	b.n	8008a58 <_printf_float+0x98>
 8008d96:	2301      	movs	r3, #1
 8008d98:	464a      	mov	r2, r9
 8008d9a:	4631      	mov	r1, r6
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	47b8      	blx	r7
 8008da0:	3001      	adds	r0, #1
 8008da2:	f43f ae59 	beq.w	8008a58 <_printf_float+0x98>
 8008da6:	f108 0801 	add.w	r8, r8, #1
 8008daa:	9b08      	ldr	r3, [sp, #32]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	4543      	cmp	r3, r8
 8008db0:	dcf1      	bgt.n	8008d96 <_printf_float+0x3d6>
 8008db2:	9b04      	ldr	r3, [sp, #16]
 8008db4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008db8:	e6dd      	b.n	8008b76 <_printf_float+0x1b6>
 8008dba:	f04f 0800 	mov.w	r8, #0
 8008dbe:	f104 091a 	add.w	r9, r4, #26
 8008dc2:	e7f2      	b.n	8008daa <_printf_float+0x3ea>
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	4642      	mov	r2, r8
 8008dc8:	e7df      	b.n	8008d8a <_printf_float+0x3ca>
 8008dca:	2301      	movs	r3, #1
 8008dcc:	464a      	mov	r2, r9
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	f43f ae3f 	beq.w	8008a58 <_printf_float+0x98>
 8008dda:	f108 0801 	add.w	r8, r8, #1
 8008dde:	68e3      	ldr	r3, [r4, #12]
 8008de0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008de2:	1a5b      	subs	r3, r3, r1
 8008de4:	4543      	cmp	r3, r8
 8008de6:	dcf0      	bgt.n	8008dca <_printf_float+0x40a>
 8008de8:	e6f9      	b.n	8008bde <_printf_float+0x21e>
 8008dea:	f04f 0800 	mov.w	r8, #0
 8008dee:	f104 0919 	add.w	r9, r4, #25
 8008df2:	e7f4      	b.n	8008dde <_printf_float+0x41e>

08008df4 <_printf_common>:
 8008df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008df8:	4616      	mov	r6, r2
 8008dfa:	4699      	mov	r9, r3
 8008dfc:	688a      	ldr	r2, [r1, #8]
 8008dfe:	690b      	ldr	r3, [r1, #16]
 8008e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e04:	4293      	cmp	r3, r2
 8008e06:	bfb8      	it	lt
 8008e08:	4613      	movlt	r3, r2
 8008e0a:	6033      	str	r3, [r6, #0]
 8008e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008e10:	4607      	mov	r7, r0
 8008e12:	460c      	mov	r4, r1
 8008e14:	b10a      	cbz	r2, 8008e1a <_printf_common+0x26>
 8008e16:	3301      	adds	r3, #1
 8008e18:	6033      	str	r3, [r6, #0]
 8008e1a:	6823      	ldr	r3, [r4, #0]
 8008e1c:	0699      	lsls	r1, r3, #26
 8008e1e:	bf42      	ittt	mi
 8008e20:	6833      	ldrmi	r3, [r6, #0]
 8008e22:	3302      	addmi	r3, #2
 8008e24:	6033      	strmi	r3, [r6, #0]
 8008e26:	6825      	ldr	r5, [r4, #0]
 8008e28:	f015 0506 	ands.w	r5, r5, #6
 8008e2c:	d106      	bne.n	8008e3c <_printf_common+0x48>
 8008e2e:	f104 0a19 	add.w	sl, r4, #25
 8008e32:	68e3      	ldr	r3, [r4, #12]
 8008e34:	6832      	ldr	r2, [r6, #0]
 8008e36:	1a9b      	subs	r3, r3, r2
 8008e38:	42ab      	cmp	r3, r5
 8008e3a:	dc26      	bgt.n	8008e8a <_printf_common+0x96>
 8008e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e40:	1e13      	subs	r3, r2, #0
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	bf18      	it	ne
 8008e46:	2301      	movne	r3, #1
 8008e48:	0692      	lsls	r2, r2, #26
 8008e4a:	d42b      	bmi.n	8008ea4 <_printf_common+0xb0>
 8008e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e50:	4649      	mov	r1, r9
 8008e52:	4638      	mov	r0, r7
 8008e54:	47c0      	blx	r8
 8008e56:	3001      	adds	r0, #1
 8008e58:	d01e      	beq.n	8008e98 <_printf_common+0xa4>
 8008e5a:	6823      	ldr	r3, [r4, #0]
 8008e5c:	6922      	ldr	r2, [r4, #16]
 8008e5e:	f003 0306 	and.w	r3, r3, #6
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	bf02      	ittt	eq
 8008e66:	68e5      	ldreq	r5, [r4, #12]
 8008e68:	6833      	ldreq	r3, [r6, #0]
 8008e6a:	1aed      	subeq	r5, r5, r3
 8008e6c:	68a3      	ldr	r3, [r4, #8]
 8008e6e:	bf0c      	ite	eq
 8008e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e74:	2500      	movne	r5, #0
 8008e76:	4293      	cmp	r3, r2
 8008e78:	bfc4      	itt	gt
 8008e7a:	1a9b      	subgt	r3, r3, r2
 8008e7c:	18ed      	addgt	r5, r5, r3
 8008e7e:	2600      	movs	r6, #0
 8008e80:	341a      	adds	r4, #26
 8008e82:	42b5      	cmp	r5, r6
 8008e84:	d11a      	bne.n	8008ebc <_printf_common+0xc8>
 8008e86:	2000      	movs	r0, #0
 8008e88:	e008      	b.n	8008e9c <_printf_common+0xa8>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	4652      	mov	r2, sl
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4638      	mov	r0, r7
 8008e92:	47c0      	blx	r8
 8008e94:	3001      	adds	r0, #1
 8008e96:	d103      	bne.n	8008ea0 <_printf_common+0xac>
 8008e98:	f04f 30ff 	mov.w	r0, #4294967295
 8008e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	e7c6      	b.n	8008e32 <_printf_common+0x3e>
 8008ea4:	18e1      	adds	r1, r4, r3
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	2030      	movs	r0, #48	; 0x30
 8008eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008eae:	4422      	add	r2, r4
 8008eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008eb8:	3302      	adds	r3, #2
 8008eba:	e7c7      	b.n	8008e4c <_printf_common+0x58>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	4649      	mov	r1, r9
 8008ec2:	4638      	mov	r0, r7
 8008ec4:	47c0      	blx	r8
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d0e6      	beq.n	8008e98 <_printf_common+0xa4>
 8008eca:	3601      	adds	r6, #1
 8008ecc:	e7d9      	b.n	8008e82 <_printf_common+0x8e>
	...

08008ed0 <_printf_i>:
 8008ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	7e0f      	ldrb	r7, [r1, #24]
 8008ed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ed8:	2f78      	cmp	r7, #120	; 0x78
 8008eda:	4691      	mov	r9, r2
 8008edc:	4680      	mov	r8, r0
 8008ede:	460c      	mov	r4, r1
 8008ee0:	469a      	mov	sl, r3
 8008ee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008ee6:	d807      	bhi.n	8008ef8 <_printf_i+0x28>
 8008ee8:	2f62      	cmp	r7, #98	; 0x62
 8008eea:	d80a      	bhi.n	8008f02 <_printf_i+0x32>
 8008eec:	2f00      	cmp	r7, #0
 8008eee:	f000 80d4 	beq.w	800909a <_printf_i+0x1ca>
 8008ef2:	2f58      	cmp	r7, #88	; 0x58
 8008ef4:	f000 80c0 	beq.w	8009078 <_printf_i+0x1a8>
 8008ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f00:	e03a      	b.n	8008f78 <_printf_i+0xa8>
 8008f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f06:	2b15      	cmp	r3, #21
 8008f08:	d8f6      	bhi.n	8008ef8 <_printf_i+0x28>
 8008f0a:	a101      	add	r1, pc, #4	; (adr r1, 8008f10 <_printf_i+0x40>)
 8008f0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f10:	08008f69 	.word	0x08008f69
 8008f14:	08008f7d 	.word	0x08008f7d
 8008f18:	08008ef9 	.word	0x08008ef9
 8008f1c:	08008ef9 	.word	0x08008ef9
 8008f20:	08008ef9 	.word	0x08008ef9
 8008f24:	08008ef9 	.word	0x08008ef9
 8008f28:	08008f7d 	.word	0x08008f7d
 8008f2c:	08008ef9 	.word	0x08008ef9
 8008f30:	08008ef9 	.word	0x08008ef9
 8008f34:	08008ef9 	.word	0x08008ef9
 8008f38:	08008ef9 	.word	0x08008ef9
 8008f3c:	08009081 	.word	0x08009081
 8008f40:	08008fa9 	.word	0x08008fa9
 8008f44:	0800903b 	.word	0x0800903b
 8008f48:	08008ef9 	.word	0x08008ef9
 8008f4c:	08008ef9 	.word	0x08008ef9
 8008f50:	080090a3 	.word	0x080090a3
 8008f54:	08008ef9 	.word	0x08008ef9
 8008f58:	08008fa9 	.word	0x08008fa9
 8008f5c:	08008ef9 	.word	0x08008ef9
 8008f60:	08008ef9 	.word	0x08008ef9
 8008f64:	08009043 	.word	0x08009043
 8008f68:	682b      	ldr	r3, [r5, #0]
 8008f6a:	1d1a      	adds	r2, r3, #4
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	602a      	str	r2, [r5, #0]
 8008f70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f78:	2301      	movs	r3, #1
 8008f7a:	e09f      	b.n	80090bc <_printf_i+0x1ec>
 8008f7c:	6820      	ldr	r0, [r4, #0]
 8008f7e:	682b      	ldr	r3, [r5, #0]
 8008f80:	0607      	lsls	r7, r0, #24
 8008f82:	f103 0104 	add.w	r1, r3, #4
 8008f86:	6029      	str	r1, [r5, #0]
 8008f88:	d501      	bpl.n	8008f8e <_printf_i+0xbe>
 8008f8a:	681e      	ldr	r6, [r3, #0]
 8008f8c:	e003      	b.n	8008f96 <_printf_i+0xc6>
 8008f8e:	0646      	lsls	r6, r0, #25
 8008f90:	d5fb      	bpl.n	8008f8a <_printf_i+0xba>
 8008f92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	da03      	bge.n	8008fa2 <_printf_i+0xd2>
 8008f9a:	232d      	movs	r3, #45	; 0x2d
 8008f9c:	4276      	negs	r6, r6
 8008f9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008fa2:	485a      	ldr	r0, [pc, #360]	; (800910c <_printf_i+0x23c>)
 8008fa4:	230a      	movs	r3, #10
 8008fa6:	e012      	b.n	8008fce <_printf_i+0xfe>
 8008fa8:	682b      	ldr	r3, [r5, #0]
 8008faa:	6820      	ldr	r0, [r4, #0]
 8008fac:	1d19      	adds	r1, r3, #4
 8008fae:	6029      	str	r1, [r5, #0]
 8008fb0:	0605      	lsls	r5, r0, #24
 8008fb2:	d501      	bpl.n	8008fb8 <_printf_i+0xe8>
 8008fb4:	681e      	ldr	r6, [r3, #0]
 8008fb6:	e002      	b.n	8008fbe <_printf_i+0xee>
 8008fb8:	0641      	lsls	r1, r0, #25
 8008fba:	d5fb      	bpl.n	8008fb4 <_printf_i+0xe4>
 8008fbc:	881e      	ldrh	r6, [r3, #0]
 8008fbe:	4853      	ldr	r0, [pc, #332]	; (800910c <_printf_i+0x23c>)
 8008fc0:	2f6f      	cmp	r7, #111	; 0x6f
 8008fc2:	bf0c      	ite	eq
 8008fc4:	2308      	moveq	r3, #8
 8008fc6:	230a      	movne	r3, #10
 8008fc8:	2100      	movs	r1, #0
 8008fca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008fce:	6865      	ldr	r5, [r4, #4]
 8008fd0:	60a5      	str	r5, [r4, #8]
 8008fd2:	2d00      	cmp	r5, #0
 8008fd4:	bfa2      	ittt	ge
 8008fd6:	6821      	ldrge	r1, [r4, #0]
 8008fd8:	f021 0104 	bicge.w	r1, r1, #4
 8008fdc:	6021      	strge	r1, [r4, #0]
 8008fde:	b90e      	cbnz	r6, 8008fe4 <_printf_i+0x114>
 8008fe0:	2d00      	cmp	r5, #0
 8008fe2:	d04b      	beq.n	800907c <_printf_i+0x1ac>
 8008fe4:	4615      	mov	r5, r2
 8008fe6:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fea:	fb03 6711 	mls	r7, r3, r1, r6
 8008fee:	5dc7      	ldrb	r7, [r0, r7]
 8008ff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008ff4:	4637      	mov	r7, r6
 8008ff6:	42bb      	cmp	r3, r7
 8008ff8:	460e      	mov	r6, r1
 8008ffa:	d9f4      	bls.n	8008fe6 <_printf_i+0x116>
 8008ffc:	2b08      	cmp	r3, #8
 8008ffe:	d10b      	bne.n	8009018 <_printf_i+0x148>
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	07de      	lsls	r6, r3, #31
 8009004:	d508      	bpl.n	8009018 <_printf_i+0x148>
 8009006:	6923      	ldr	r3, [r4, #16]
 8009008:	6861      	ldr	r1, [r4, #4]
 800900a:	4299      	cmp	r1, r3
 800900c:	bfde      	ittt	le
 800900e:	2330      	movle	r3, #48	; 0x30
 8009010:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009014:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009018:	1b52      	subs	r2, r2, r5
 800901a:	6122      	str	r2, [r4, #16]
 800901c:	f8cd a000 	str.w	sl, [sp]
 8009020:	464b      	mov	r3, r9
 8009022:	aa03      	add	r2, sp, #12
 8009024:	4621      	mov	r1, r4
 8009026:	4640      	mov	r0, r8
 8009028:	f7ff fee4 	bl	8008df4 <_printf_common>
 800902c:	3001      	adds	r0, #1
 800902e:	d14a      	bne.n	80090c6 <_printf_i+0x1f6>
 8009030:	f04f 30ff 	mov.w	r0, #4294967295
 8009034:	b004      	add	sp, #16
 8009036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	f043 0320 	orr.w	r3, r3, #32
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	4833      	ldr	r0, [pc, #204]	; (8009110 <_printf_i+0x240>)
 8009044:	2778      	movs	r7, #120	; 0x78
 8009046:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	6829      	ldr	r1, [r5, #0]
 800904e:	061f      	lsls	r7, r3, #24
 8009050:	f851 6b04 	ldr.w	r6, [r1], #4
 8009054:	d402      	bmi.n	800905c <_printf_i+0x18c>
 8009056:	065f      	lsls	r7, r3, #25
 8009058:	bf48      	it	mi
 800905a:	b2b6      	uxthmi	r6, r6
 800905c:	07df      	lsls	r7, r3, #31
 800905e:	bf48      	it	mi
 8009060:	f043 0320 	orrmi.w	r3, r3, #32
 8009064:	6029      	str	r1, [r5, #0]
 8009066:	bf48      	it	mi
 8009068:	6023      	strmi	r3, [r4, #0]
 800906a:	b91e      	cbnz	r6, 8009074 <_printf_i+0x1a4>
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	f023 0320 	bic.w	r3, r3, #32
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	2310      	movs	r3, #16
 8009076:	e7a7      	b.n	8008fc8 <_printf_i+0xf8>
 8009078:	4824      	ldr	r0, [pc, #144]	; (800910c <_printf_i+0x23c>)
 800907a:	e7e4      	b.n	8009046 <_printf_i+0x176>
 800907c:	4615      	mov	r5, r2
 800907e:	e7bd      	b.n	8008ffc <_printf_i+0x12c>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	6826      	ldr	r6, [r4, #0]
 8009084:	6961      	ldr	r1, [r4, #20]
 8009086:	1d18      	adds	r0, r3, #4
 8009088:	6028      	str	r0, [r5, #0]
 800908a:	0635      	lsls	r5, r6, #24
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	d501      	bpl.n	8009094 <_printf_i+0x1c4>
 8009090:	6019      	str	r1, [r3, #0]
 8009092:	e002      	b.n	800909a <_printf_i+0x1ca>
 8009094:	0670      	lsls	r0, r6, #25
 8009096:	d5fb      	bpl.n	8009090 <_printf_i+0x1c0>
 8009098:	8019      	strh	r1, [r3, #0]
 800909a:	2300      	movs	r3, #0
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	4615      	mov	r5, r2
 80090a0:	e7bc      	b.n	800901c <_printf_i+0x14c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	1d1a      	adds	r2, r3, #4
 80090a6:	602a      	str	r2, [r5, #0]
 80090a8:	681d      	ldr	r5, [r3, #0]
 80090aa:	6862      	ldr	r2, [r4, #4]
 80090ac:	2100      	movs	r1, #0
 80090ae:	4628      	mov	r0, r5
 80090b0:	f7f7 f8c6 	bl	8000240 <memchr>
 80090b4:	b108      	cbz	r0, 80090ba <_printf_i+0x1ea>
 80090b6:	1b40      	subs	r0, r0, r5
 80090b8:	6060      	str	r0, [r4, #4]
 80090ba:	6863      	ldr	r3, [r4, #4]
 80090bc:	6123      	str	r3, [r4, #16]
 80090be:	2300      	movs	r3, #0
 80090c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090c4:	e7aa      	b.n	800901c <_printf_i+0x14c>
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	462a      	mov	r2, r5
 80090ca:	4649      	mov	r1, r9
 80090cc:	4640      	mov	r0, r8
 80090ce:	47d0      	blx	sl
 80090d0:	3001      	adds	r0, #1
 80090d2:	d0ad      	beq.n	8009030 <_printf_i+0x160>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	079b      	lsls	r3, r3, #30
 80090d8:	d413      	bmi.n	8009102 <_printf_i+0x232>
 80090da:	68e0      	ldr	r0, [r4, #12]
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	4298      	cmp	r0, r3
 80090e0:	bfb8      	it	lt
 80090e2:	4618      	movlt	r0, r3
 80090e4:	e7a6      	b.n	8009034 <_printf_i+0x164>
 80090e6:	2301      	movs	r3, #1
 80090e8:	4632      	mov	r2, r6
 80090ea:	4649      	mov	r1, r9
 80090ec:	4640      	mov	r0, r8
 80090ee:	47d0      	blx	sl
 80090f0:	3001      	adds	r0, #1
 80090f2:	d09d      	beq.n	8009030 <_printf_i+0x160>
 80090f4:	3501      	adds	r5, #1
 80090f6:	68e3      	ldr	r3, [r4, #12]
 80090f8:	9903      	ldr	r1, [sp, #12]
 80090fa:	1a5b      	subs	r3, r3, r1
 80090fc:	42ab      	cmp	r3, r5
 80090fe:	dcf2      	bgt.n	80090e6 <_printf_i+0x216>
 8009100:	e7eb      	b.n	80090da <_printf_i+0x20a>
 8009102:	2500      	movs	r5, #0
 8009104:	f104 0619 	add.w	r6, r4, #25
 8009108:	e7f5      	b.n	80090f6 <_printf_i+0x226>
 800910a:	bf00      	nop
 800910c:	0800b8ca 	.word	0x0800b8ca
 8009110:	0800b8db 	.word	0x0800b8db

08009114 <std>:
 8009114:	2300      	movs	r3, #0
 8009116:	b510      	push	{r4, lr}
 8009118:	4604      	mov	r4, r0
 800911a:	e9c0 3300 	strd	r3, r3, [r0]
 800911e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009122:	6083      	str	r3, [r0, #8]
 8009124:	8181      	strh	r1, [r0, #12]
 8009126:	6643      	str	r3, [r0, #100]	; 0x64
 8009128:	81c2      	strh	r2, [r0, #14]
 800912a:	6183      	str	r3, [r0, #24]
 800912c:	4619      	mov	r1, r3
 800912e:	2208      	movs	r2, #8
 8009130:	305c      	adds	r0, #92	; 0x5c
 8009132:	f000 f948 	bl	80093c6 <memset>
 8009136:	4b0d      	ldr	r3, [pc, #52]	; (800916c <std+0x58>)
 8009138:	6263      	str	r3, [r4, #36]	; 0x24
 800913a:	4b0d      	ldr	r3, [pc, #52]	; (8009170 <std+0x5c>)
 800913c:	62a3      	str	r3, [r4, #40]	; 0x28
 800913e:	4b0d      	ldr	r3, [pc, #52]	; (8009174 <std+0x60>)
 8009140:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009142:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <std+0x64>)
 8009144:	6323      	str	r3, [r4, #48]	; 0x30
 8009146:	4b0d      	ldr	r3, [pc, #52]	; (800917c <std+0x68>)
 8009148:	6224      	str	r4, [r4, #32]
 800914a:	429c      	cmp	r4, r3
 800914c:	d006      	beq.n	800915c <std+0x48>
 800914e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009152:	4294      	cmp	r4, r2
 8009154:	d002      	beq.n	800915c <std+0x48>
 8009156:	33d0      	adds	r3, #208	; 0xd0
 8009158:	429c      	cmp	r4, r3
 800915a:	d105      	bne.n	8009168 <std+0x54>
 800915c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009164:	f000 b9ac 	b.w	80094c0 <__retarget_lock_init_recursive>
 8009168:	bd10      	pop	{r4, pc}
 800916a:	bf00      	nop
 800916c:	08009341 	.word	0x08009341
 8009170:	08009363 	.word	0x08009363
 8009174:	0800939b 	.word	0x0800939b
 8009178:	080093bf 	.word	0x080093bf
 800917c:	200006b8 	.word	0x200006b8

08009180 <stdio_exit_handler>:
 8009180:	4a02      	ldr	r2, [pc, #8]	; (800918c <stdio_exit_handler+0xc>)
 8009182:	4903      	ldr	r1, [pc, #12]	; (8009190 <stdio_exit_handler+0x10>)
 8009184:	4803      	ldr	r0, [pc, #12]	; (8009194 <stdio_exit_handler+0x14>)
 8009186:	f000 b869 	b.w	800925c <_fwalk_sglue>
 800918a:	bf00      	nop
 800918c:	20000080 	.word	0x20000080
 8009190:	0800ad65 	.word	0x0800ad65
 8009194:	2000008c 	.word	0x2000008c

08009198 <cleanup_stdio>:
 8009198:	6841      	ldr	r1, [r0, #4]
 800919a:	4b0c      	ldr	r3, [pc, #48]	; (80091cc <cleanup_stdio+0x34>)
 800919c:	4299      	cmp	r1, r3
 800919e:	b510      	push	{r4, lr}
 80091a0:	4604      	mov	r4, r0
 80091a2:	d001      	beq.n	80091a8 <cleanup_stdio+0x10>
 80091a4:	f001 fdde 	bl	800ad64 <_fflush_r>
 80091a8:	68a1      	ldr	r1, [r4, #8]
 80091aa:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <cleanup_stdio+0x38>)
 80091ac:	4299      	cmp	r1, r3
 80091ae:	d002      	beq.n	80091b6 <cleanup_stdio+0x1e>
 80091b0:	4620      	mov	r0, r4
 80091b2:	f001 fdd7 	bl	800ad64 <_fflush_r>
 80091b6:	68e1      	ldr	r1, [r4, #12]
 80091b8:	4b06      	ldr	r3, [pc, #24]	; (80091d4 <cleanup_stdio+0x3c>)
 80091ba:	4299      	cmp	r1, r3
 80091bc:	d004      	beq.n	80091c8 <cleanup_stdio+0x30>
 80091be:	4620      	mov	r0, r4
 80091c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c4:	f001 bdce 	b.w	800ad64 <_fflush_r>
 80091c8:	bd10      	pop	{r4, pc}
 80091ca:	bf00      	nop
 80091cc:	200006b8 	.word	0x200006b8
 80091d0:	20000720 	.word	0x20000720
 80091d4:	20000788 	.word	0x20000788

080091d8 <global_stdio_init.part.0>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <global_stdio_init.part.0+0x30>)
 80091dc:	4c0b      	ldr	r4, [pc, #44]	; (800920c <global_stdio_init.part.0+0x34>)
 80091de:	4a0c      	ldr	r2, [pc, #48]	; (8009210 <global_stdio_init.part.0+0x38>)
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	4620      	mov	r0, r4
 80091e4:	2200      	movs	r2, #0
 80091e6:	2104      	movs	r1, #4
 80091e8:	f7ff ff94 	bl	8009114 <std>
 80091ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80091f0:	2201      	movs	r2, #1
 80091f2:	2109      	movs	r1, #9
 80091f4:	f7ff ff8e 	bl	8009114 <std>
 80091f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80091fc:	2202      	movs	r2, #2
 80091fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009202:	2112      	movs	r1, #18
 8009204:	f7ff bf86 	b.w	8009114 <std>
 8009208:	200007f0 	.word	0x200007f0
 800920c:	200006b8 	.word	0x200006b8
 8009210:	08009181 	.word	0x08009181

08009214 <__sfp_lock_acquire>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__sfp_lock_acquire+0x8>)
 8009216:	f000 b954 	b.w	80094c2 <__retarget_lock_acquire_recursive>
 800921a:	bf00      	nop
 800921c:	200007f9 	.word	0x200007f9

08009220 <__sfp_lock_release>:
 8009220:	4801      	ldr	r0, [pc, #4]	; (8009228 <__sfp_lock_release+0x8>)
 8009222:	f000 b94f 	b.w	80094c4 <__retarget_lock_release_recursive>
 8009226:	bf00      	nop
 8009228:	200007f9 	.word	0x200007f9

0800922c <__sinit>:
 800922c:	b510      	push	{r4, lr}
 800922e:	4604      	mov	r4, r0
 8009230:	f7ff fff0 	bl	8009214 <__sfp_lock_acquire>
 8009234:	6a23      	ldr	r3, [r4, #32]
 8009236:	b11b      	cbz	r3, 8009240 <__sinit+0x14>
 8009238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800923c:	f7ff bff0 	b.w	8009220 <__sfp_lock_release>
 8009240:	4b04      	ldr	r3, [pc, #16]	; (8009254 <__sinit+0x28>)
 8009242:	6223      	str	r3, [r4, #32]
 8009244:	4b04      	ldr	r3, [pc, #16]	; (8009258 <__sinit+0x2c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1f5      	bne.n	8009238 <__sinit+0xc>
 800924c:	f7ff ffc4 	bl	80091d8 <global_stdio_init.part.0>
 8009250:	e7f2      	b.n	8009238 <__sinit+0xc>
 8009252:	bf00      	nop
 8009254:	08009199 	.word	0x08009199
 8009258:	200007f0 	.word	0x200007f0

0800925c <_fwalk_sglue>:
 800925c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009260:	4607      	mov	r7, r0
 8009262:	4688      	mov	r8, r1
 8009264:	4614      	mov	r4, r2
 8009266:	2600      	movs	r6, #0
 8009268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800926c:	f1b9 0901 	subs.w	r9, r9, #1
 8009270:	d505      	bpl.n	800927e <_fwalk_sglue+0x22>
 8009272:	6824      	ldr	r4, [r4, #0]
 8009274:	2c00      	cmp	r4, #0
 8009276:	d1f7      	bne.n	8009268 <_fwalk_sglue+0xc>
 8009278:	4630      	mov	r0, r6
 800927a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800927e:	89ab      	ldrh	r3, [r5, #12]
 8009280:	2b01      	cmp	r3, #1
 8009282:	d907      	bls.n	8009294 <_fwalk_sglue+0x38>
 8009284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009288:	3301      	adds	r3, #1
 800928a:	d003      	beq.n	8009294 <_fwalk_sglue+0x38>
 800928c:	4629      	mov	r1, r5
 800928e:	4638      	mov	r0, r7
 8009290:	47c0      	blx	r8
 8009292:	4306      	orrs	r6, r0
 8009294:	3568      	adds	r5, #104	; 0x68
 8009296:	e7e9      	b.n	800926c <_fwalk_sglue+0x10>

08009298 <sniprintf>:
 8009298:	b40c      	push	{r2, r3}
 800929a:	b530      	push	{r4, r5, lr}
 800929c:	4b17      	ldr	r3, [pc, #92]	; (80092fc <sniprintf+0x64>)
 800929e:	1e0c      	subs	r4, r1, #0
 80092a0:	681d      	ldr	r5, [r3, #0]
 80092a2:	b09d      	sub	sp, #116	; 0x74
 80092a4:	da08      	bge.n	80092b8 <sniprintf+0x20>
 80092a6:	238b      	movs	r3, #139	; 0x8b
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	f04f 30ff 	mov.w	r0, #4294967295
 80092ae:	b01d      	add	sp, #116	; 0x74
 80092b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092b4:	b002      	add	sp, #8
 80092b6:	4770      	bx	lr
 80092b8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80092bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092c0:	bf14      	ite	ne
 80092c2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092c6:	4623      	moveq	r3, r4
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	9307      	str	r3, [sp, #28]
 80092cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80092d0:	9002      	str	r0, [sp, #8]
 80092d2:	9006      	str	r0, [sp, #24]
 80092d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80092da:	ab21      	add	r3, sp, #132	; 0x84
 80092dc:	a902      	add	r1, sp, #8
 80092de:	4628      	mov	r0, r5
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	f001 fbbb 	bl	800aa5c <_svfiprintf_r>
 80092e6:	1c43      	adds	r3, r0, #1
 80092e8:	bfbc      	itt	lt
 80092ea:	238b      	movlt	r3, #139	; 0x8b
 80092ec:	602b      	strlt	r3, [r5, #0]
 80092ee:	2c00      	cmp	r4, #0
 80092f0:	d0dd      	beq.n	80092ae <sniprintf+0x16>
 80092f2:	9b02      	ldr	r3, [sp, #8]
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
 80092f8:	e7d9      	b.n	80092ae <sniprintf+0x16>
 80092fa:	bf00      	nop
 80092fc:	200000d8 	.word	0x200000d8

08009300 <siprintf>:
 8009300:	b40e      	push	{r1, r2, r3}
 8009302:	b500      	push	{lr}
 8009304:	b09c      	sub	sp, #112	; 0x70
 8009306:	ab1d      	add	r3, sp, #116	; 0x74
 8009308:	9002      	str	r0, [sp, #8]
 800930a:	9006      	str	r0, [sp, #24]
 800930c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009310:	4809      	ldr	r0, [pc, #36]	; (8009338 <siprintf+0x38>)
 8009312:	9107      	str	r1, [sp, #28]
 8009314:	9104      	str	r1, [sp, #16]
 8009316:	4909      	ldr	r1, [pc, #36]	; (800933c <siprintf+0x3c>)
 8009318:	f853 2b04 	ldr.w	r2, [r3], #4
 800931c:	9105      	str	r1, [sp, #20]
 800931e:	6800      	ldr	r0, [r0, #0]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	a902      	add	r1, sp, #8
 8009324:	f001 fb9a 	bl	800aa5c <_svfiprintf_r>
 8009328:	9b02      	ldr	r3, [sp, #8]
 800932a:	2200      	movs	r2, #0
 800932c:	701a      	strb	r2, [r3, #0]
 800932e:	b01c      	add	sp, #112	; 0x70
 8009330:	f85d eb04 	ldr.w	lr, [sp], #4
 8009334:	b003      	add	sp, #12
 8009336:	4770      	bx	lr
 8009338:	200000d8 	.word	0x200000d8
 800933c:	ffff0208 	.word	0xffff0208

08009340 <__sread>:
 8009340:	b510      	push	{r4, lr}
 8009342:	460c      	mov	r4, r1
 8009344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009348:	f000 f86c 	bl	8009424 <_read_r>
 800934c:	2800      	cmp	r0, #0
 800934e:	bfab      	itete	ge
 8009350:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009352:	89a3      	ldrhlt	r3, [r4, #12]
 8009354:	181b      	addge	r3, r3, r0
 8009356:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800935a:	bfac      	ite	ge
 800935c:	6563      	strge	r3, [r4, #84]	; 0x54
 800935e:	81a3      	strhlt	r3, [r4, #12]
 8009360:	bd10      	pop	{r4, pc}

08009362 <__swrite>:
 8009362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009366:	461f      	mov	r7, r3
 8009368:	898b      	ldrh	r3, [r1, #12]
 800936a:	05db      	lsls	r3, r3, #23
 800936c:	4605      	mov	r5, r0
 800936e:	460c      	mov	r4, r1
 8009370:	4616      	mov	r6, r2
 8009372:	d505      	bpl.n	8009380 <__swrite+0x1e>
 8009374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009378:	2302      	movs	r3, #2
 800937a:	2200      	movs	r2, #0
 800937c:	f000 f840 	bl	8009400 <_lseek_r>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	4632      	mov	r2, r6
 800938e:	463b      	mov	r3, r7
 8009390:	4628      	mov	r0, r5
 8009392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009396:	f000 b857 	b.w	8009448 <_write_r>

0800939a <__sseek>:
 800939a:	b510      	push	{r4, lr}
 800939c:	460c      	mov	r4, r1
 800939e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a2:	f000 f82d 	bl	8009400 <_lseek_r>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	bf15      	itete	ne
 80093ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80093ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093b6:	81a3      	strheq	r3, [r4, #12]
 80093b8:	bf18      	it	ne
 80093ba:	81a3      	strhne	r3, [r4, #12]
 80093bc:	bd10      	pop	{r4, pc}

080093be <__sclose>:
 80093be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c2:	f000 b80d 	b.w	80093e0 <_close_r>

080093c6 <memset>:
 80093c6:	4402      	add	r2, r0
 80093c8:	4603      	mov	r3, r0
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d100      	bne.n	80093d0 <memset+0xa>
 80093ce:	4770      	bx	lr
 80093d0:	f803 1b01 	strb.w	r1, [r3], #1
 80093d4:	e7f9      	b.n	80093ca <memset+0x4>
	...

080093d8 <_localeconv_r>:
 80093d8:	4800      	ldr	r0, [pc, #0]	; (80093dc <_localeconv_r+0x4>)
 80093da:	4770      	bx	lr
 80093dc:	200001cc 	.word	0x200001cc

080093e0 <_close_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4d06      	ldr	r5, [pc, #24]	; (80093fc <_close_r+0x1c>)
 80093e4:	2300      	movs	r3, #0
 80093e6:	4604      	mov	r4, r0
 80093e8:	4608      	mov	r0, r1
 80093ea:	602b      	str	r3, [r5, #0]
 80093ec:	f7f9 fdaf 	bl	8002f4e <_close>
 80093f0:	1c43      	adds	r3, r0, #1
 80093f2:	d102      	bne.n	80093fa <_close_r+0x1a>
 80093f4:	682b      	ldr	r3, [r5, #0]
 80093f6:	b103      	cbz	r3, 80093fa <_close_r+0x1a>
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
 80093fc:	200007f4 	.word	0x200007f4

08009400 <_lseek_r>:
 8009400:	b538      	push	{r3, r4, r5, lr}
 8009402:	4d07      	ldr	r5, [pc, #28]	; (8009420 <_lseek_r+0x20>)
 8009404:	4604      	mov	r4, r0
 8009406:	4608      	mov	r0, r1
 8009408:	4611      	mov	r1, r2
 800940a:	2200      	movs	r2, #0
 800940c:	602a      	str	r2, [r5, #0]
 800940e:	461a      	mov	r2, r3
 8009410:	f7f9 fdc4 	bl	8002f9c <_lseek>
 8009414:	1c43      	adds	r3, r0, #1
 8009416:	d102      	bne.n	800941e <_lseek_r+0x1e>
 8009418:	682b      	ldr	r3, [r5, #0]
 800941a:	b103      	cbz	r3, 800941e <_lseek_r+0x1e>
 800941c:	6023      	str	r3, [r4, #0]
 800941e:	bd38      	pop	{r3, r4, r5, pc}
 8009420:	200007f4 	.word	0x200007f4

08009424 <_read_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d07      	ldr	r5, [pc, #28]	; (8009444 <_read_r+0x20>)
 8009428:	4604      	mov	r4, r0
 800942a:	4608      	mov	r0, r1
 800942c:	4611      	mov	r1, r2
 800942e:	2200      	movs	r2, #0
 8009430:	602a      	str	r2, [r5, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	f7f9 fd52 	bl	8002edc <_read>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d102      	bne.n	8009442 <_read_r+0x1e>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	b103      	cbz	r3, 8009442 <_read_r+0x1e>
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	200007f4 	.word	0x200007f4

08009448 <_write_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d07      	ldr	r5, [pc, #28]	; (8009468 <_write_r+0x20>)
 800944c:	4604      	mov	r4, r0
 800944e:	4608      	mov	r0, r1
 8009450:	4611      	mov	r1, r2
 8009452:	2200      	movs	r2, #0
 8009454:	602a      	str	r2, [r5, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	f7f9 fd5d 	bl	8002f16 <_write>
 800945c:	1c43      	adds	r3, r0, #1
 800945e:	d102      	bne.n	8009466 <_write_r+0x1e>
 8009460:	682b      	ldr	r3, [r5, #0]
 8009462:	b103      	cbz	r3, 8009466 <_write_r+0x1e>
 8009464:	6023      	str	r3, [r4, #0]
 8009466:	bd38      	pop	{r3, r4, r5, pc}
 8009468:	200007f4 	.word	0x200007f4

0800946c <__errno>:
 800946c:	4b01      	ldr	r3, [pc, #4]	; (8009474 <__errno+0x8>)
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	200000d8 	.word	0x200000d8

08009478 <__libc_init_array>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	4d0d      	ldr	r5, [pc, #52]	; (80094b0 <__libc_init_array+0x38>)
 800947c:	4c0d      	ldr	r4, [pc, #52]	; (80094b4 <__libc_init_array+0x3c>)
 800947e:	1b64      	subs	r4, r4, r5
 8009480:	10a4      	asrs	r4, r4, #2
 8009482:	2600      	movs	r6, #0
 8009484:	42a6      	cmp	r6, r4
 8009486:	d109      	bne.n	800949c <__libc_init_array+0x24>
 8009488:	4d0b      	ldr	r5, [pc, #44]	; (80094b8 <__libc_init_array+0x40>)
 800948a:	4c0c      	ldr	r4, [pc, #48]	; (80094bc <__libc_init_array+0x44>)
 800948c:	f002 f80e 	bl	800b4ac <_init>
 8009490:	1b64      	subs	r4, r4, r5
 8009492:	10a4      	asrs	r4, r4, #2
 8009494:	2600      	movs	r6, #0
 8009496:	42a6      	cmp	r6, r4
 8009498:	d105      	bne.n	80094a6 <__libc_init_array+0x2e>
 800949a:	bd70      	pop	{r4, r5, r6, pc}
 800949c:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a0:	4798      	blx	r3
 80094a2:	3601      	adds	r6, #1
 80094a4:	e7ee      	b.n	8009484 <__libc_init_array+0xc>
 80094a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80094aa:	4798      	blx	r3
 80094ac:	3601      	adds	r6, #1
 80094ae:	e7f2      	b.n	8009496 <__libc_init_array+0x1e>
 80094b0:	0800bc34 	.word	0x0800bc34
 80094b4:	0800bc34 	.word	0x0800bc34
 80094b8:	0800bc34 	.word	0x0800bc34
 80094bc:	0800bc38 	.word	0x0800bc38

080094c0 <__retarget_lock_init_recursive>:
 80094c0:	4770      	bx	lr

080094c2 <__retarget_lock_acquire_recursive>:
 80094c2:	4770      	bx	lr

080094c4 <__retarget_lock_release_recursive>:
 80094c4:	4770      	bx	lr

080094c6 <quorem>:
 80094c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ca:	6903      	ldr	r3, [r0, #16]
 80094cc:	690c      	ldr	r4, [r1, #16]
 80094ce:	42a3      	cmp	r3, r4
 80094d0:	4607      	mov	r7, r0
 80094d2:	db7e      	blt.n	80095d2 <quorem+0x10c>
 80094d4:	3c01      	subs	r4, #1
 80094d6:	f101 0814 	add.w	r8, r1, #20
 80094da:	f100 0514 	add.w	r5, r0, #20
 80094de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094e2:	9301      	str	r3, [sp, #4]
 80094e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ec:	3301      	adds	r3, #1
 80094ee:	429a      	cmp	r2, r3
 80094f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80094fc:	d331      	bcc.n	8009562 <quorem+0x9c>
 80094fe:	f04f 0e00 	mov.w	lr, #0
 8009502:	4640      	mov	r0, r8
 8009504:	46ac      	mov	ip, r5
 8009506:	46f2      	mov	sl, lr
 8009508:	f850 2b04 	ldr.w	r2, [r0], #4
 800950c:	b293      	uxth	r3, r2
 800950e:	fb06 e303 	mla	r3, r6, r3, lr
 8009512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009516:	0c1a      	lsrs	r2, r3, #16
 8009518:	b29b      	uxth	r3, r3
 800951a:	ebaa 0303 	sub.w	r3, sl, r3
 800951e:	f8dc a000 	ldr.w	sl, [ip]
 8009522:	fa13 f38a 	uxtah	r3, r3, sl
 8009526:	fb06 220e 	mla	r2, r6, lr, r2
 800952a:	9300      	str	r3, [sp, #0]
 800952c:	9b00      	ldr	r3, [sp, #0]
 800952e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009532:	b292      	uxth	r2, r2
 8009534:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800953c:	f8bd 3000 	ldrh.w	r3, [sp]
 8009540:	4581      	cmp	r9, r0
 8009542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009546:	f84c 3b04 	str.w	r3, [ip], #4
 800954a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800954e:	d2db      	bcs.n	8009508 <quorem+0x42>
 8009550:	f855 300b 	ldr.w	r3, [r5, fp]
 8009554:	b92b      	cbnz	r3, 8009562 <quorem+0x9c>
 8009556:	9b01      	ldr	r3, [sp, #4]
 8009558:	3b04      	subs	r3, #4
 800955a:	429d      	cmp	r5, r3
 800955c:	461a      	mov	r2, r3
 800955e:	d32c      	bcc.n	80095ba <quorem+0xf4>
 8009560:	613c      	str	r4, [r7, #16]
 8009562:	4638      	mov	r0, r7
 8009564:	f001 f920 	bl	800a7a8 <__mcmp>
 8009568:	2800      	cmp	r0, #0
 800956a:	db22      	blt.n	80095b2 <quorem+0xec>
 800956c:	3601      	adds	r6, #1
 800956e:	4629      	mov	r1, r5
 8009570:	2000      	movs	r0, #0
 8009572:	f858 2b04 	ldr.w	r2, [r8], #4
 8009576:	f8d1 c000 	ldr.w	ip, [r1]
 800957a:	b293      	uxth	r3, r2
 800957c:	1ac3      	subs	r3, r0, r3
 800957e:	0c12      	lsrs	r2, r2, #16
 8009580:	fa13 f38c 	uxtah	r3, r3, ip
 8009584:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009588:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800958c:	b29b      	uxth	r3, r3
 800958e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009592:	45c1      	cmp	r9, r8
 8009594:	f841 3b04 	str.w	r3, [r1], #4
 8009598:	ea4f 4022 	mov.w	r0, r2, asr #16
 800959c:	d2e9      	bcs.n	8009572 <quorem+0xac>
 800959e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095a6:	b922      	cbnz	r2, 80095b2 <quorem+0xec>
 80095a8:	3b04      	subs	r3, #4
 80095aa:	429d      	cmp	r5, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	d30a      	bcc.n	80095c6 <quorem+0x100>
 80095b0:	613c      	str	r4, [r7, #16]
 80095b2:	4630      	mov	r0, r6
 80095b4:	b003      	add	sp, #12
 80095b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ba:	6812      	ldr	r2, [r2, #0]
 80095bc:	3b04      	subs	r3, #4
 80095be:	2a00      	cmp	r2, #0
 80095c0:	d1ce      	bne.n	8009560 <quorem+0x9a>
 80095c2:	3c01      	subs	r4, #1
 80095c4:	e7c9      	b.n	800955a <quorem+0x94>
 80095c6:	6812      	ldr	r2, [r2, #0]
 80095c8:	3b04      	subs	r3, #4
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	d1f0      	bne.n	80095b0 <quorem+0xea>
 80095ce:	3c01      	subs	r4, #1
 80095d0:	e7eb      	b.n	80095aa <quorem+0xe4>
 80095d2:	2000      	movs	r0, #0
 80095d4:	e7ee      	b.n	80095b4 <quorem+0xee>
	...

080095d8 <_dtoa_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	ed2d 8b02 	vpush	{d8}
 80095e0:	69c5      	ldr	r5, [r0, #28]
 80095e2:	b091      	sub	sp, #68	; 0x44
 80095e4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80095e8:	ec59 8b10 	vmov	r8, r9, d0
 80095ec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80095ee:	9106      	str	r1, [sp, #24]
 80095f0:	4606      	mov	r6, r0
 80095f2:	9208      	str	r2, [sp, #32]
 80095f4:	930c      	str	r3, [sp, #48]	; 0x30
 80095f6:	b975      	cbnz	r5, 8009616 <_dtoa_r+0x3e>
 80095f8:	2010      	movs	r0, #16
 80095fa:	f000 fda5 	bl	800a148 <malloc>
 80095fe:	4602      	mov	r2, r0
 8009600:	61f0      	str	r0, [r6, #28]
 8009602:	b920      	cbnz	r0, 800960e <_dtoa_r+0x36>
 8009604:	4ba6      	ldr	r3, [pc, #664]	; (80098a0 <_dtoa_r+0x2c8>)
 8009606:	21ef      	movs	r1, #239	; 0xef
 8009608:	48a6      	ldr	r0, [pc, #664]	; (80098a4 <_dtoa_r+0x2cc>)
 800960a:	f001 fc0b 	bl	800ae24 <__assert_func>
 800960e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009612:	6005      	str	r5, [r0, #0]
 8009614:	60c5      	str	r5, [r0, #12]
 8009616:	69f3      	ldr	r3, [r6, #28]
 8009618:	6819      	ldr	r1, [r3, #0]
 800961a:	b151      	cbz	r1, 8009632 <_dtoa_r+0x5a>
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	604a      	str	r2, [r1, #4]
 8009620:	2301      	movs	r3, #1
 8009622:	4093      	lsls	r3, r2
 8009624:	608b      	str	r3, [r1, #8]
 8009626:	4630      	mov	r0, r6
 8009628:	f000 fe82 	bl	800a330 <_Bfree>
 800962c:	69f3      	ldr	r3, [r6, #28]
 800962e:	2200      	movs	r2, #0
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	f1b9 0300 	subs.w	r3, r9, #0
 8009636:	bfbb      	ittet	lt
 8009638:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800963c:	9303      	strlt	r3, [sp, #12]
 800963e:	2300      	movge	r3, #0
 8009640:	2201      	movlt	r2, #1
 8009642:	bfac      	ite	ge
 8009644:	6023      	strge	r3, [r4, #0]
 8009646:	6022      	strlt	r2, [r4, #0]
 8009648:	4b97      	ldr	r3, [pc, #604]	; (80098a8 <_dtoa_r+0x2d0>)
 800964a:	9c03      	ldr	r4, [sp, #12]
 800964c:	43a3      	bics	r3, r4
 800964e:	d11c      	bne.n	800968a <_dtoa_r+0xb2>
 8009650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009652:	f242 730f 	movw	r3, #9999	; 0x270f
 8009656:	6013      	str	r3, [r2, #0]
 8009658:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800965c:	ea53 0308 	orrs.w	r3, r3, r8
 8009660:	f000 84fb 	beq.w	800a05a <_dtoa_r+0xa82>
 8009664:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009666:	b963      	cbnz	r3, 8009682 <_dtoa_r+0xaa>
 8009668:	4b90      	ldr	r3, [pc, #576]	; (80098ac <_dtoa_r+0x2d4>)
 800966a:	e020      	b.n	80096ae <_dtoa_r+0xd6>
 800966c:	4b90      	ldr	r3, [pc, #576]	; (80098b0 <_dtoa_r+0x2d8>)
 800966e:	9301      	str	r3, [sp, #4]
 8009670:	3308      	adds	r3, #8
 8009672:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009674:	6013      	str	r3, [r2, #0]
 8009676:	9801      	ldr	r0, [sp, #4]
 8009678:	b011      	add	sp, #68	; 0x44
 800967a:	ecbd 8b02 	vpop	{d8}
 800967e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009682:	4b8a      	ldr	r3, [pc, #552]	; (80098ac <_dtoa_r+0x2d4>)
 8009684:	9301      	str	r3, [sp, #4]
 8009686:	3303      	adds	r3, #3
 8009688:	e7f3      	b.n	8009672 <_dtoa_r+0x9a>
 800968a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800968e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009696:	d10c      	bne.n	80096b2 <_dtoa_r+0xda>
 8009698:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800969a:	2301      	movs	r3, #1
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f000 84d7 	beq.w	800a054 <_dtoa_r+0xa7c>
 80096a6:	4b83      	ldr	r3, [pc, #524]	; (80098b4 <_dtoa_r+0x2dc>)
 80096a8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80096aa:	6013      	str	r3, [r2, #0]
 80096ac:	3b01      	subs	r3, #1
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	e7e1      	b.n	8009676 <_dtoa_r+0x9e>
 80096b2:	aa0e      	add	r2, sp, #56	; 0x38
 80096b4:	a90f      	add	r1, sp, #60	; 0x3c
 80096b6:	4630      	mov	r0, r6
 80096b8:	eeb0 0b48 	vmov.f64	d0, d8
 80096bc:	f001 f91a 	bl	800a8f4 <__d2b>
 80096c0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80096c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096c6:	4605      	mov	r5, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d046      	beq.n	800975a <_dtoa_r+0x182>
 80096cc:	eeb0 7b48 	vmov.f64	d7, d8
 80096d0:	ee18 1a90 	vmov	r1, s17
 80096d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80096d8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80096dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80096e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80096e4:	2000      	movs	r0, #0
 80096e6:	ee07 1a90 	vmov	s15, r1
 80096ea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 80096ee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009888 <_dtoa_r+0x2b0>
 80096f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80096f6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009890 <_dtoa_r+0x2b8>
 80096fa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80096fe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009898 <_dtoa_r+0x2c0>
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800970a:	eeb0 7b46 	vmov.f64	d7, d6
 800970e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009712:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009716:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	ee16 ba90 	vmov	fp, s13
 8009722:	9009      	str	r0, [sp, #36]	; 0x24
 8009724:	d508      	bpl.n	8009738 <_dtoa_r+0x160>
 8009726:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800972a:	eeb4 6b47 	vcmp.f64	d6, d7
 800972e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009732:	bf18      	it	ne
 8009734:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009738:	f1bb 0f16 	cmp.w	fp, #22
 800973c:	d82b      	bhi.n	8009796 <_dtoa_r+0x1be>
 800973e:	495e      	ldr	r1, [pc, #376]	; (80098b8 <_dtoa_r+0x2e0>)
 8009740:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009744:	ed91 7b00 	vldr	d7, [r1]
 8009748:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800974c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009750:	d501      	bpl.n	8009756 <_dtoa_r+0x17e>
 8009752:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009756:	2100      	movs	r1, #0
 8009758:	e01e      	b.n	8009798 <_dtoa_r+0x1c0>
 800975a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800975c:	4413      	add	r3, r2
 800975e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8009762:	2920      	cmp	r1, #32
 8009764:	bfc1      	itttt	gt
 8009766:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800976a:	408c      	lslgt	r4, r1
 800976c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8009770:	fa28 f101 	lsrgt.w	r1, r8, r1
 8009774:	bfd6      	itet	le
 8009776:	f1c1 0120 	rsble	r1, r1, #32
 800977a:	4321      	orrgt	r1, r4
 800977c:	fa08 f101 	lslle.w	r1, r8, r1
 8009780:	ee07 1a90 	vmov	s15, r1
 8009784:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009788:	3b01      	subs	r3, #1
 800978a:	ee17 1a90 	vmov	r1, s15
 800978e:	2001      	movs	r0, #1
 8009790:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009794:	e7a7      	b.n	80096e6 <_dtoa_r+0x10e>
 8009796:	2101      	movs	r1, #1
 8009798:	1ad2      	subs	r2, r2, r3
 800979a:	1e53      	subs	r3, r2, #1
 800979c:	9305      	str	r3, [sp, #20]
 800979e:	bf45      	ittet	mi
 80097a0:	f1c2 0301 	rsbmi	r3, r2, #1
 80097a4:	9304      	strmi	r3, [sp, #16]
 80097a6:	2300      	movpl	r3, #0
 80097a8:	2300      	movmi	r3, #0
 80097aa:	bf4c      	ite	mi
 80097ac:	9305      	strmi	r3, [sp, #20]
 80097ae:	9304      	strpl	r3, [sp, #16]
 80097b0:	f1bb 0f00 	cmp.w	fp, #0
 80097b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80097b6:	db18      	blt.n	80097ea <_dtoa_r+0x212>
 80097b8:	9b05      	ldr	r3, [sp, #20]
 80097ba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80097be:	445b      	add	r3, fp
 80097c0:	9305      	str	r3, [sp, #20]
 80097c2:	2300      	movs	r3, #0
 80097c4:	9a06      	ldr	r2, [sp, #24]
 80097c6:	2a09      	cmp	r2, #9
 80097c8:	d848      	bhi.n	800985c <_dtoa_r+0x284>
 80097ca:	2a05      	cmp	r2, #5
 80097cc:	bfc4      	itt	gt
 80097ce:	3a04      	subgt	r2, #4
 80097d0:	9206      	strgt	r2, [sp, #24]
 80097d2:	9a06      	ldr	r2, [sp, #24]
 80097d4:	f1a2 0202 	sub.w	r2, r2, #2
 80097d8:	bfcc      	ite	gt
 80097da:	2400      	movgt	r4, #0
 80097dc:	2401      	movle	r4, #1
 80097de:	2a03      	cmp	r2, #3
 80097e0:	d847      	bhi.n	8009872 <_dtoa_r+0x29a>
 80097e2:	e8df f002 	tbb	[pc, r2]
 80097e6:	2d0b      	.short	0x2d0b
 80097e8:	392b      	.short	0x392b
 80097ea:	9b04      	ldr	r3, [sp, #16]
 80097ec:	2200      	movs	r2, #0
 80097ee:	eba3 030b 	sub.w	r3, r3, fp
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	920a      	str	r2, [sp, #40]	; 0x28
 80097f6:	f1cb 0300 	rsb	r3, fp, #0
 80097fa:	e7e3      	b.n	80097c4 <_dtoa_r+0x1ec>
 80097fc:	2200      	movs	r2, #0
 80097fe:	9207      	str	r2, [sp, #28]
 8009800:	9a08      	ldr	r2, [sp, #32]
 8009802:	2a00      	cmp	r2, #0
 8009804:	dc38      	bgt.n	8009878 <_dtoa_r+0x2a0>
 8009806:	f04f 0a01 	mov.w	sl, #1
 800980a:	46d1      	mov	r9, sl
 800980c:	4652      	mov	r2, sl
 800980e:	f8cd a020 	str.w	sl, [sp, #32]
 8009812:	69f7      	ldr	r7, [r6, #28]
 8009814:	2100      	movs	r1, #0
 8009816:	2004      	movs	r0, #4
 8009818:	f100 0c14 	add.w	ip, r0, #20
 800981c:	4594      	cmp	ip, r2
 800981e:	d930      	bls.n	8009882 <_dtoa_r+0x2aa>
 8009820:	6079      	str	r1, [r7, #4]
 8009822:	4630      	mov	r0, r6
 8009824:	930d      	str	r3, [sp, #52]	; 0x34
 8009826:	f000 fd43 	bl	800a2b0 <_Balloc>
 800982a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800982c:	9001      	str	r0, [sp, #4]
 800982e:	4602      	mov	r2, r0
 8009830:	2800      	cmp	r0, #0
 8009832:	d145      	bne.n	80098c0 <_dtoa_r+0x2e8>
 8009834:	4b21      	ldr	r3, [pc, #132]	; (80098bc <_dtoa_r+0x2e4>)
 8009836:	f240 11af 	movw	r1, #431	; 0x1af
 800983a:	e6e5      	b.n	8009608 <_dtoa_r+0x30>
 800983c:	2201      	movs	r2, #1
 800983e:	e7de      	b.n	80097fe <_dtoa_r+0x226>
 8009840:	2200      	movs	r2, #0
 8009842:	9207      	str	r2, [sp, #28]
 8009844:	9a08      	ldr	r2, [sp, #32]
 8009846:	eb0b 0a02 	add.w	sl, fp, r2
 800984a:	f10a 0901 	add.w	r9, sl, #1
 800984e:	464a      	mov	r2, r9
 8009850:	2a01      	cmp	r2, #1
 8009852:	bfb8      	it	lt
 8009854:	2201      	movlt	r2, #1
 8009856:	e7dc      	b.n	8009812 <_dtoa_r+0x23a>
 8009858:	2201      	movs	r2, #1
 800985a:	e7f2      	b.n	8009842 <_dtoa_r+0x26a>
 800985c:	2401      	movs	r4, #1
 800985e:	2200      	movs	r2, #0
 8009860:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009864:	f04f 3aff 	mov.w	sl, #4294967295
 8009868:	2100      	movs	r1, #0
 800986a:	46d1      	mov	r9, sl
 800986c:	2212      	movs	r2, #18
 800986e:	9108      	str	r1, [sp, #32]
 8009870:	e7cf      	b.n	8009812 <_dtoa_r+0x23a>
 8009872:	2201      	movs	r2, #1
 8009874:	9207      	str	r2, [sp, #28]
 8009876:	e7f5      	b.n	8009864 <_dtoa_r+0x28c>
 8009878:	f8dd a020 	ldr.w	sl, [sp, #32]
 800987c:	46d1      	mov	r9, sl
 800987e:	4652      	mov	r2, sl
 8009880:	e7c7      	b.n	8009812 <_dtoa_r+0x23a>
 8009882:	3101      	adds	r1, #1
 8009884:	0040      	lsls	r0, r0, #1
 8009886:	e7c7      	b.n	8009818 <_dtoa_r+0x240>
 8009888:	636f4361 	.word	0x636f4361
 800988c:	3fd287a7 	.word	0x3fd287a7
 8009890:	8b60c8b3 	.word	0x8b60c8b3
 8009894:	3fc68a28 	.word	0x3fc68a28
 8009898:	509f79fb 	.word	0x509f79fb
 800989c:	3fd34413 	.word	0x3fd34413
 80098a0:	0800b8f9 	.word	0x0800b8f9
 80098a4:	0800b910 	.word	0x0800b910
 80098a8:	7ff00000 	.word	0x7ff00000
 80098ac:	0800b8f5 	.word	0x0800b8f5
 80098b0:	0800b8ec 	.word	0x0800b8ec
 80098b4:	0800b8c9 	.word	0x0800b8c9
 80098b8:	0800ba00 	.word	0x0800ba00
 80098bc:	0800b968 	.word	0x0800b968
 80098c0:	69f2      	ldr	r2, [r6, #28]
 80098c2:	9901      	ldr	r1, [sp, #4]
 80098c4:	6011      	str	r1, [r2, #0]
 80098c6:	f1b9 0f0e 	cmp.w	r9, #14
 80098ca:	d86c      	bhi.n	80099a6 <_dtoa_r+0x3ce>
 80098cc:	2c00      	cmp	r4, #0
 80098ce:	d06a      	beq.n	80099a6 <_dtoa_r+0x3ce>
 80098d0:	f1bb 0f00 	cmp.w	fp, #0
 80098d4:	f340 80a0 	ble.w	8009a18 <_dtoa_r+0x440>
 80098d8:	4ac1      	ldr	r2, [pc, #772]	; (8009be0 <_dtoa_r+0x608>)
 80098da:	f00b 010f 	and.w	r1, fp, #15
 80098de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80098e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80098e6:	ed92 7b00 	vldr	d7, [r2]
 80098ea:	ea4f 122b 	mov.w	r2, fp, asr #4
 80098ee:	f000 8087 	beq.w	8009a00 <_dtoa_r+0x428>
 80098f2:	49bc      	ldr	r1, [pc, #752]	; (8009be4 <_dtoa_r+0x60c>)
 80098f4:	ed91 6b08 	vldr	d6, [r1, #32]
 80098f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80098fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009900:	f002 020f 	and.w	r2, r2, #15
 8009904:	2103      	movs	r1, #3
 8009906:	48b7      	ldr	r0, [pc, #732]	; (8009be4 <_dtoa_r+0x60c>)
 8009908:	2a00      	cmp	r2, #0
 800990a:	d17b      	bne.n	8009a04 <_dtoa_r+0x42c>
 800990c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009910:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009914:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009918:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800991a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800991e:	2a00      	cmp	r2, #0
 8009920:	f000 80a0 	beq.w	8009a64 <_dtoa_r+0x48c>
 8009924:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009928:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800992c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009930:	f140 8098 	bpl.w	8009a64 <_dtoa_r+0x48c>
 8009934:	f1b9 0f00 	cmp.w	r9, #0
 8009938:	f000 8094 	beq.w	8009a64 <_dtoa_r+0x48c>
 800993c:	f1ba 0f00 	cmp.w	sl, #0
 8009940:	dd2f      	ble.n	80099a2 <_dtoa_r+0x3ca>
 8009942:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009946:	ee27 7b06 	vmul.f64	d7, d7, d6
 800994a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800994e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009952:	3101      	adds	r1, #1
 8009954:	4654      	mov	r4, sl
 8009956:	ed9d 6b02 	vldr	d6, [sp, #8]
 800995a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800995e:	ee07 1a90 	vmov	s15, r1
 8009962:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009966:	eea7 5b06 	vfma.f64	d5, d7, d6
 800996a:	ee15 7a90 	vmov	r7, s11
 800996e:	ec51 0b15 	vmov	r0, r1, d5
 8009972:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009976:	2c00      	cmp	r4, #0
 8009978:	d177      	bne.n	8009a6a <_dtoa_r+0x492>
 800997a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800997e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009982:	ec41 0b17 	vmov	d7, r0, r1
 8009986:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800998a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800998e:	f300 826a 	bgt.w	8009e66 <_dtoa_r+0x88e>
 8009992:	eeb1 7b47 	vneg.f64	d7, d7
 8009996:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800999a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800999e:	f100 8260 	bmi.w	8009e62 <_dtoa_r+0x88a>
 80099a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80099a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80099a8:	2a00      	cmp	r2, #0
 80099aa:	f2c0 811d 	blt.w	8009be8 <_dtoa_r+0x610>
 80099ae:	f1bb 0f0e 	cmp.w	fp, #14
 80099b2:	f300 8119 	bgt.w	8009be8 <_dtoa_r+0x610>
 80099b6:	4b8a      	ldr	r3, [pc, #552]	; (8009be0 <_dtoa_r+0x608>)
 80099b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099bc:	ed93 6b00 	vldr	d6, [r3]
 80099c0:	9b08      	ldr	r3, [sp, #32]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f280 80b7 	bge.w	8009b36 <_dtoa_r+0x55e>
 80099c8:	f1b9 0f00 	cmp.w	r9, #0
 80099cc:	f300 80b3 	bgt.w	8009b36 <_dtoa_r+0x55e>
 80099d0:	f040 8246 	bne.w	8009e60 <_dtoa_r+0x888>
 80099d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80099d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80099dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80099e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e8:	464c      	mov	r4, r9
 80099ea:	464f      	mov	r7, r9
 80099ec:	f280 821c 	bge.w	8009e28 <_dtoa_r+0x850>
 80099f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80099f4:	2331      	movs	r3, #49	; 0x31
 80099f6:	f808 3b01 	strb.w	r3, [r8], #1
 80099fa:	f10b 0b01 	add.w	fp, fp, #1
 80099fe:	e218      	b.n	8009e32 <_dtoa_r+0x85a>
 8009a00:	2102      	movs	r1, #2
 8009a02:	e780      	b.n	8009906 <_dtoa_r+0x32e>
 8009a04:	07d4      	lsls	r4, r2, #31
 8009a06:	d504      	bpl.n	8009a12 <_dtoa_r+0x43a>
 8009a08:	ed90 6b00 	vldr	d6, [r0]
 8009a0c:	3101      	adds	r1, #1
 8009a0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a12:	1052      	asrs	r2, r2, #1
 8009a14:	3008      	adds	r0, #8
 8009a16:	e777      	b.n	8009908 <_dtoa_r+0x330>
 8009a18:	d022      	beq.n	8009a60 <_dtoa_r+0x488>
 8009a1a:	f1cb 0200 	rsb	r2, fp, #0
 8009a1e:	4970      	ldr	r1, [pc, #448]	; (8009be0 <_dtoa_r+0x608>)
 8009a20:	f002 000f 	and.w	r0, r2, #15
 8009a24:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009a28:	ed91 7b00 	vldr	d7, [r1]
 8009a2c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a34:	486b      	ldr	r0, [pc, #428]	; (8009be4 <_dtoa_r+0x60c>)
 8009a36:	1112      	asrs	r2, r2, #4
 8009a38:	2400      	movs	r4, #0
 8009a3a:	2102      	movs	r1, #2
 8009a3c:	b92a      	cbnz	r2, 8009a4a <_dtoa_r+0x472>
 8009a3e:	2c00      	cmp	r4, #0
 8009a40:	f43f af6a 	beq.w	8009918 <_dtoa_r+0x340>
 8009a44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a48:	e766      	b.n	8009918 <_dtoa_r+0x340>
 8009a4a:	07d7      	lsls	r7, r2, #31
 8009a4c:	d505      	bpl.n	8009a5a <_dtoa_r+0x482>
 8009a4e:	ed90 6b00 	vldr	d6, [r0]
 8009a52:	3101      	adds	r1, #1
 8009a54:	2401      	movs	r4, #1
 8009a56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a5a:	1052      	asrs	r2, r2, #1
 8009a5c:	3008      	adds	r0, #8
 8009a5e:	e7ed      	b.n	8009a3c <_dtoa_r+0x464>
 8009a60:	2102      	movs	r1, #2
 8009a62:	e759      	b.n	8009918 <_dtoa_r+0x340>
 8009a64:	465a      	mov	r2, fp
 8009a66:	464c      	mov	r4, r9
 8009a68:	e775      	b.n	8009956 <_dtoa_r+0x37e>
 8009a6a:	ec41 0b17 	vmov	d7, r0, r1
 8009a6e:	495c      	ldr	r1, [pc, #368]	; (8009be0 <_dtoa_r+0x608>)
 8009a70:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009a74:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009a78:	9901      	ldr	r1, [sp, #4]
 8009a7a:	440c      	add	r4, r1
 8009a7c:	9907      	ldr	r1, [sp, #28]
 8009a7e:	b351      	cbz	r1, 8009ad6 <_dtoa_r+0x4fe>
 8009a80:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009a84:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009a88:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009a8c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009a90:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009a94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009a98:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009a9c:	ee14 1a90 	vmov	r1, s9
 8009aa0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009aa4:	3130      	adds	r1, #48	; 0x30
 8009aa6:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009aaa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab2:	f808 1b01 	strb.w	r1, [r8], #1
 8009ab6:	d439      	bmi.n	8009b2c <_dtoa_r+0x554>
 8009ab8:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009abc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ac4:	d472      	bmi.n	8009bac <_dtoa_r+0x5d4>
 8009ac6:	45a0      	cmp	r8, r4
 8009ac8:	f43f af6b 	beq.w	80099a2 <_dtoa_r+0x3ca>
 8009acc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009ad0:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009ad4:	e7e0      	b.n	8009a98 <_dtoa_r+0x4c0>
 8009ad6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009ada:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ade:	4620      	mov	r0, r4
 8009ae0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009ae4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009ae8:	ee14 1a90 	vmov	r1, s9
 8009aec:	3130      	adds	r1, #48	; 0x30
 8009aee:	f808 1b01 	strb.w	r1, [r8], #1
 8009af2:	45a0      	cmp	r8, r4
 8009af4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009af8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009afc:	d118      	bne.n	8009b30 <_dtoa_r+0x558>
 8009afe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009b02:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009b06:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b0e:	dc4d      	bgt.n	8009bac <_dtoa_r+0x5d4>
 8009b10:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009b14:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1c:	f57f af41 	bpl.w	80099a2 <_dtoa_r+0x3ca>
 8009b20:	4680      	mov	r8, r0
 8009b22:	3801      	subs	r0, #1
 8009b24:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009b28:	2b30      	cmp	r3, #48	; 0x30
 8009b2a:	d0f9      	beq.n	8009b20 <_dtoa_r+0x548>
 8009b2c:	4693      	mov	fp, r2
 8009b2e:	e02a      	b.n	8009b86 <_dtoa_r+0x5ae>
 8009b30:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009b34:	e7d6      	b.n	8009ae4 <_dtoa_r+0x50c>
 8009b36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b3a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009b3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009b42:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009b46:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009b4a:	ee15 3a10 	vmov	r3, s10
 8009b4e:	3330      	adds	r3, #48	; 0x30
 8009b50:	f808 3b01 	strb.w	r3, [r8], #1
 8009b54:	9b01      	ldr	r3, [sp, #4]
 8009b56:	eba8 0303 	sub.w	r3, r8, r3
 8009b5a:	4599      	cmp	r9, r3
 8009b5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009b60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009b64:	d133      	bne.n	8009bce <_dtoa_r+0x5f6>
 8009b66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009b6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b72:	dc1a      	bgt.n	8009baa <_dtoa_r+0x5d2>
 8009b74:	eeb4 7b46 	vcmp.f64	d7, d6
 8009b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b7c:	d103      	bne.n	8009b86 <_dtoa_r+0x5ae>
 8009b7e:	ee15 3a10 	vmov	r3, s10
 8009b82:	07d9      	lsls	r1, r3, #31
 8009b84:	d411      	bmi.n	8009baa <_dtoa_r+0x5d2>
 8009b86:	4629      	mov	r1, r5
 8009b88:	4630      	mov	r0, r6
 8009b8a:	f000 fbd1 	bl	800a330 <_Bfree>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b92:	f888 3000 	strb.w	r3, [r8]
 8009b96:	f10b 0301 	add.w	r3, fp, #1
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f43f ad69 	beq.w	8009676 <_dtoa_r+0x9e>
 8009ba4:	f8c3 8000 	str.w	r8, [r3]
 8009ba8:	e565      	b.n	8009676 <_dtoa_r+0x9e>
 8009baa:	465a      	mov	r2, fp
 8009bac:	4643      	mov	r3, r8
 8009bae:	4698      	mov	r8, r3
 8009bb0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009bb4:	2939      	cmp	r1, #57	; 0x39
 8009bb6:	d106      	bne.n	8009bc6 <_dtoa_r+0x5ee>
 8009bb8:	9901      	ldr	r1, [sp, #4]
 8009bba:	4299      	cmp	r1, r3
 8009bbc:	d1f7      	bne.n	8009bae <_dtoa_r+0x5d6>
 8009bbe:	9801      	ldr	r0, [sp, #4]
 8009bc0:	2130      	movs	r1, #48	; 0x30
 8009bc2:	3201      	adds	r2, #1
 8009bc4:	7001      	strb	r1, [r0, #0]
 8009bc6:	7819      	ldrb	r1, [r3, #0]
 8009bc8:	3101      	adds	r1, #1
 8009bca:	7019      	strb	r1, [r3, #0]
 8009bcc:	e7ae      	b.n	8009b2c <_dtoa_r+0x554>
 8009bce:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bda:	d1b2      	bne.n	8009b42 <_dtoa_r+0x56a>
 8009bdc:	e7d3      	b.n	8009b86 <_dtoa_r+0x5ae>
 8009bde:	bf00      	nop
 8009be0:	0800ba00 	.word	0x0800ba00
 8009be4:	0800b9d8 	.word	0x0800b9d8
 8009be8:	9907      	ldr	r1, [sp, #28]
 8009bea:	2900      	cmp	r1, #0
 8009bec:	f000 80d0 	beq.w	8009d90 <_dtoa_r+0x7b8>
 8009bf0:	9906      	ldr	r1, [sp, #24]
 8009bf2:	2901      	cmp	r1, #1
 8009bf4:	f300 80b4 	bgt.w	8009d60 <_dtoa_r+0x788>
 8009bf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bfa:	2900      	cmp	r1, #0
 8009bfc:	f000 80ac 	beq.w	8009d58 <_dtoa_r+0x780>
 8009c00:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009c04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009c08:	461c      	mov	r4, r3
 8009c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009c0c:	9b04      	ldr	r3, [sp, #16]
 8009c0e:	4413      	add	r3, r2
 8009c10:	9304      	str	r3, [sp, #16]
 8009c12:	9b05      	ldr	r3, [sp, #20]
 8009c14:	2101      	movs	r1, #1
 8009c16:	4413      	add	r3, r2
 8009c18:	4630      	mov	r0, r6
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	f000 fc3e 	bl	800a49c <__i2b>
 8009c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c22:	4607      	mov	r7, r0
 8009c24:	f1b8 0f00 	cmp.w	r8, #0
 8009c28:	d00d      	beq.n	8009c46 <_dtoa_r+0x66e>
 8009c2a:	9a05      	ldr	r2, [sp, #20]
 8009c2c:	2a00      	cmp	r2, #0
 8009c2e:	dd0a      	ble.n	8009c46 <_dtoa_r+0x66e>
 8009c30:	4542      	cmp	r2, r8
 8009c32:	9904      	ldr	r1, [sp, #16]
 8009c34:	bfa8      	it	ge
 8009c36:	4642      	movge	r2, r8
 8009c38:	1a89      	subs	r1, r1, r2
 8009c3a:	9104      	str	r1, [sp, #16]
 8009c3c:	9905      	ldr	r1, [sp, #20]
 8009c3e:	eba8 0802 	sub.w	r8, r8, r2
 8009c42:	1a8a      	subs	r2, r1, r2
 8009c44:	9205      	str	r2, [sp, #20]
 8009c46:	b303      	cbz	r3, 8009c8a <_dtoa_r+0x6b2>
 8009c48:	9a07      	ldr	r2, [sp, #28]
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	f000 80a5 	beq.w	8009d9a <_dtoa_r+0x7c2>
 8009c50:	2c00      	cmp	r4, #0
 8009c52:	dd13      	ble.n	8009c7c <_dtoa_r+0x6a4>
 8009c54:	4639      	mov	r1, r7
 8009c56:	4622      	mov	r2, r4
 8009c58:	4630      	mov	r0, r6
 8009c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c5c:	f000 fcde 	bl	800a61c <__pow5mult>
 8009c60:	462a      	mov	r2, r5
 8009c62:	4601      	mov	r1, r0
 8009c64:	4607      	mov	r7, r0
 8009c66:	4630      	mov	r0, r6
 8009c68:	f000 fc2e 	bl	800a4c8 <__multiply>
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	9009      	str	r0, [sp, #36]	; 0x24
 8009c70:	4630      	mov	r0, r6
 8009c72:	f000 fb5d 	bl	800a330 <_Bfree>
 8009c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c7a:	4615      	mov	r5, r2
 8009c7c:	1b1a      	subs	r2, r3, r4
 8009c7e:	d004      	beq.n	8009c8a <_dtoa_r+0x6b2>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4630      	mov	r0, r6
 8009c84:	f000 fcca 	bl	800a61c <__pow5mult>
 8009c88:	4605      	mov	r5, r0
 8009c8a:	2101      	movs	r1, #1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f000 fc05 	bl	800a49c <__i2b>
 8009c92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	4604      	mov	r4, r0
 8009c98:	f340 8081 	ble.w	8009d9e <_dtoa_r+0x7c6>
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f000 fcbb 	bl	800a61c <__pow5mult>
 8009ca6:	9b06      	ldr	r3, [sp, #24]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	4604      	mov	r4, r0
 8009cac:	dd7a      	ble.n	8009da4 <_dtoa_r+0x7cc>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb2:	6922      	ldr	r2, [r4, #16]
 8009cb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009cb8:	6910      	ldr	r0, [r2, #16]
 8009cba:	f000 fba1 	bl	800a400 <__hi0bits>
 8009cbe:	f1c0 0020 	rsb	r0, r0, #32
 8009cc2:	9b05      	ldr	r3, [sp, #20]
 8009cc4:	4418      	add	r0, r3
 8009cc6:	f010 001f 	ands.w	r0, r0, #31
 8009cca:	f000 8093 	beq.w	8009df4 <_dtoa_r+0x81c>
 8009cce:	f1c0 0220 	rsb	r2, r0, #32
 8009cd2:	2a04      	cmp	r2, #4
 8009cd4:	f340 8085 	ble.w	8009de2 <_dtoa_r+0x80a>
 8009cd8:	9b04      	ldr	r3, [sp, #16]
 8009cda:	f1c0 001c 	rsb	r0, r0, #28
 8009cde:	4403      	add	r3, r0
 8009ce0:	9304      	str	r3, [sp, #16]
 8009ce2:	9b05      	ldr	r3, [sp, #20]
 8009ce4:	4480      	add	r8, r0
 8009ce6:	4403      	add	r3, r0
 8009ce8:	9305      	str	r3, [sp, #20]
 8009cea:	9b04      	ldr	r3, [sp, #16]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd05      	ble.n	8009cfc <_dtoa_r+0x724>
 8009cf0:	4629      	mov	r1, r5
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	f000 fceb 	bl	800a6d0 <__lshift>
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	9b05      	ldr	r3, [sp, #20]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	dd05      	ble.n	8009d0e <_dtoa_r+0x736>
 8009d02:	4621      	mov	r1, r4
 8009d04:	461a      	mov	r2, r3
 8009d06:	4630      	mov	r0, r6
 8009d08:	f000 fce2 	bl	800a6d0 <__lshift>
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d071      	beq.n	8009df8 <_dtoa_r+0x820>
 8009d14:	4621      	mov	r1, r4
 8009d16:	4628      	mov	r0, r5
 8009d18:	f000 fd46 	bl	800a7a8 <__mcmp>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	da6b      	bge.n	8009df8 <_dtoa_r+0x820>
 8009d20:	2300      	movs	r3, #0
 8009d22:	4629      	mov	r1, r5
 8009d24:	220a      	movs	r2, #10
 8009d26:	4630      	mov	r0, r6
 8009d28:	f000 fb24 	bl	800a374 <__multadd>
 8009d2c:	9b07      	ldr	r3, [sp, #28]
 8009d2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d32:	4605      	mov	r5, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 8197 	beq.w	800a068 <_dtoa_r+0xa90>
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	220a      	movs	r2, #10
 8009d40:	4630      	mov	r0, r6
 8009d42:	f000 fb17 	bl	800a374 <__multadd>
 8009d46:	f1ba 0f00 	cmp.w	sl, #0
 8009d4a:	4607      	mov	r7, r0
 8009d4c:	f300 8093 	bgt.w	8009e76 <_dtoa_r+0x89e>
 8009d50:	9b06      	ldr	r3, [sp, #24]
 8009d52:	2b02      	cmp	r3, #2
 8009d54:	dc57      	bgt.n	8009e06 <_dtoa_r+0x82e>
 8009d56:	e08e      	b.n	8009e76 <_dtoa_r+0x89e>
 8009d58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009d5e:	e751      	b.n	8009c04 <_dtoa_r+0x62c>
 8009d60:	f109 34ff 	add.w	r4, r9, #4294967295
 8009d64:	42a3      	cmp	r3, r4
 8009d66:	bfbf      	itttt	lt
 8009d68:	1ae2      	sublt	r2, r4, r3
 8009d6a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009d6c:	189b      	addlt	r3, r3, r2
 8009d6e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009d70:	bfae      	itee	ge
 8009d72:	1b1c      	subge	r4, r3, r4
 8009d74:	4623      	movlt	r3, r4
 8009d76:	2400      	movlt	r4, #0
 8009d78:	f1b9 0f00 	cmp.w	r9, #0
 8009d7c:	bfb5      	itete	lt
 8009d7e:	9a04      	ldrlt	r2, [sp, #16]
 8009d80:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009d84:	eba2 0809 	sublt.w	r8, r2, r9
 8009d88:	464a      	movge	r2, r9
 8009d8a:	bfb8      	it	lt
 8009d8c:	2200      	movlt	r2, #0
 8009d8e:	e73c      	b.n	8009c0a <_dtoa_r+0x632>
 8009d90:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009d94:	9f07      	ldr	r7, [sp, #28]
 8009d96:	461c      	mov	r4, r3
 8009d98:	e744      	b.n	8009c24 <_dtoa_r+0x64c>
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	e770      	b.n	8009c80 <_dtoa_r+0x6a8>
 8009d9e:	9b06      	ldr	r3, [sp, #24]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	dc18      	bgt.n	8009dd6 <_dtoa_r+0x7fe>
 8009da4:	9b02      	ldr	r3, [sp, #8]
 8009da6:	b9b3      	cbnz	r3, 8009dd6 <_dtoa_r+0x7fe>
 8009da8:	9b03      	ldr	r3, [sp, #12]
 8009daa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009dae:	b9a2      	cbnz	r2, 8009dda <_dtoa_r+0x802>
 8009db0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009db4:	0d12      	lsrs	r2, r2, #20
 8009db6:	0512      	lsls	r2, r2, #20
 8009db8:	b18a      	cbz	r2, 8009dde <_dtoa_r+0x806>
 8009dba:	9b04      	ldr	r3, [sp, #16]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	9304      	str	r3, [sp, #16]
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	9305      	str	r3, [sp, #20]
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	f47f af70 	bne.w	8009cb2 <_dtoa_r+0x6da>
 8009dd2:	2001      	movs	r0, #1
 8009dd4:	e775      	b.n	8009cc2 <_dtoa_r+0x6ea>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	e7f6      	b.n	8009dc8 <_dtoa_r+0x7f0>
 8009dda:	9b02      	ldr	r3, [sp, #8]
 8009ddc:	e7f4      	b.n	8009dc8 <_dtoa_r+0x7f0>
 8009dde:	9209      	str	r2, [sp, #36]	; 0x24
 8009de0:	e7f3      	b.n	8009dca <_dtoa_r+0x7f2>
 8009de2:	d082      	beq.n	8009cea <_dtoa_r+0x712>
 8009de4:	9b04      	ldr	r3, [sp, #16]
 8009de6:	321c      	adds	r2, #28
 8009de8:	4413      	add	r3, r2
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	9b05      	ldr	r3, [sp, #20]
 8009dee:	4490      	add	r8, r2
 8009df0:	4413      	add	r3, r2
 8009df2:	e779      	b.n	8009ce8 <_dtoa_r+0x710>
 8009df4:	4602      	mov	r2, r0
 8009df6:	e7f5      	b.n	8009de4 <_dtoa_r+0x80c>
 8009df8:	f1b9 0f00 	cmp.w	r9, #0
 8009dfc:	dc36      	bgt.n	8009e6c <_dtoa_r+0x894>
 8009dfe:	9b06      	ldr	r3, [sp, #24]
 8009e00:	2b02      	cmp	r3, #2
 8009e02:	dd33      	ble.n	8009e6c <_dtoa_r+0x894>
 8009e04:	46ca      	mov	sl, r9
 8009e06:	f1ba 0f00 	cmp.w	sl, #0
 8009e0a:	d10d      	bne.n	8009e28 <_dtoa_r+0x850>
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	4653      	mov	r3, sl
 8009e10:	2205      	movs	r2, #5
 8009e12:	4630      	mov	r0, r6
 8009e14:	f000 faae 	bl	800a374 <__multadd>
 8009e18:	4601      	mov	r1, r0
 8009e1a:	4604      	mov	r4, r0
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	f000 fcc3 	bl	800a7a8 <__mcmp>
 8009e22:	2800      	cmp	r0, #0
 8009e24:	f73f ade4 	bgt.w	80099f0 <_dtoa_r+0x418>
 8009e28:	9b08      	ldr	r3, [sp, #32]
 8009e2a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e2e:	ea6f 0b03 	mvn.w	fp, r3
 8009e32:	f04f 0900 	mov.w	r9, #0
 8009e36:	4621      	mov	r1, r4
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f000 fa79 	bl	800a330 <_Bfree>
 8009e3e:	2f00      	cmp	r7, #0
 8009e40:	f43f aea1 	beq.w	8009b86 <_dtoa_r+0x5ae>
 8009e44:	f1b9 0f00 	cmp.w	r9, #0
 8009e48:	d005      	beq.n	8009e56 <_dtoa_r+0x87e>
 8009e4a:	45b9      	cmp	r9, r7
 8009e4c:	d003      	beq.n	8009e56 <_dtoa_r+0x87e>
 8009e4e:	4649      	mov	r1, r9
 8009e50:	4630      	mov	r0, r6
 8009e52:	f000 fa6d 	bl	800a330 <_Bfree>
 8009e56:	4639      	mov	r1, r7
 8009e58:	4630      	mov	r0, r6
 8009e5a:	f000 fa69 	bl	800a330 <_Bfree>
 8009e5e:	e692      	b.n	8009b86 <_dtoa_r+0x5ae>
 8009e60:	2400      	movs	r4, #0
 8009e62:	4627      	mov	r7, r4
 8009e64:	e7e0      	b.n	8009e28 <_dtoa_r+0x850>
 8009e66:	4693      	mov	fp, r2
 8009e68:	4627      	mov	r7, r4
 8009e6a:	e5c1      	b.n	80099f0 <_dtoa_r+0x418>
 8009e6c:	9b07      	ldr	r3, [sp, #28]
 8009e6e:	46ca      	mov	sl, r9
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	f000 8100 	beq.w	800a076 <_dtoa_r+0xa9e>
 8009e76:	f1b8 0f00 	cmp.w	r8, #0
 8009e7a:	dd05      	ble.n	8009e88 <_dtoa_r+0x8b0>
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	4642      	mov	r2, r8
 8009e80:	4630      	mov	r0, r6
 8009e82:	f000 fc25 	bl	800a6d0 <__lshift>
 8009e86:	4607      	mov	r7, r0
 8009e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d05d      	beq.n	8009f4a <_dtoa_r+0x972>
 8009e8e:	6879      	ldr	r1, [r7, #4]
 8009e90:	4630      	mov	r0, r6
 8009e92:	f000 fa0d 	bl	800a2b0 <_Balloc>
 8009e96:	4680      	mov	r8, r0
 8009e98:	b928      	cbnz	r0, 8009ea6 <_dtoa_r+0x8ce>
 8009e9a:	4b82      	ldr	r3, [pc, #520]	; (800a0a4 <_dtoa_r+0xacc>)
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009ea2:	f7ff bbb1 	b.w	8009608 <_dtoa_r+0x30>
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	3202      	adds	r2, #2
 8009eaa:	0092      	lsls	r2, r2, #2
 8009eac:	f107 010c 	add.w	r1, r7, #12
 8009eb0:	300c      	adds	r0, #12
 8009eb2:	f000 ffa9 	bl	800ae08 <memcpy>
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	4641      	mov	r1, r8
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f000 fc08 	bl	800a6d0 <__lshift>
 8009ec0:	9b01      	ldr	r3, [sp, #4]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	9304      	str	r3, [sp, #16]
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	4453      	add	r3, sl
 8009eca:	9308      	str	r3, [sp, #32]
 8009ecc:	9b02      	ldr	r3, [sp, #8]
 8009ece:	f003 0301 	and.w	r3, r3, #1
 8009ed2:	46b9      	mov	r9, r7
 8009ed4:	9307      	str	r3, [sp, #28]
 8009ed6:	4607      	mov	r7, r0
 8009ed8:	9b04      	ldr	r3, [sp, #16]
 8009eda:	4621      	mov	r1, r4
 8009edc:	3b01      	subs	r3, #1
 8009ede:	4628      	mov	r0, r5
 8009ee0:	9302      	str	r3, [sp, #8]
 8009ee2:	f7ff faf0 	bl	80094c6 <quorem>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	3330      	adds	r3, #48	; 0x30
 8009eea:	9005      	str	r0, [sp, #20]
 8009eec:	4649      	mov	r1, r9
 8009eee:	4628      	mov	r0, r5
 8009ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ef2:	f000 fc59 	bl	800a7a8 <__mcmp>
 8009ef6:	463a      	mov	r2, r7
 8009ef8:	4682      	mov	sl, r0
 8009efa:	4621      	mov	r1, r4
 8009efc:	4630      	mov	r0, r6
 8009efe:	f000 fc6f 	bl	800a7e0 <__mdiff>
 8009f02:	68c2      	ldr	r2, [r0, #12]
 8009f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f06:	4680      	mov	r8, r0
 8009f08:	bb0a      	cbnz	r2, 8009f4e <_dtoa_r+0x976>
 8009f0a:	4601      	mov	r1, r0
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f000 fc4b 	bl	800a7a8 <__mcmp>
 8009f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f14:	4602      	mov	r2, r0
 8009f16:	4641      	mov	r1, r8
 8009f18:	4630      	mov	r0, r6
 8009f1a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8009f1e:	f000 fa07 	bl	800a330 <_Bfree>
 8009f22:	9b06      	ldr	r3, [sp, #24]
 8009f24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f26:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009f2a:	ea43 0102 	orr.w	r1, r3, r2
 8009f2e:	9b07      	ldr	r3, [sp, #28]
 8009f30:	4319      	orrs	r1, r3
 8009f32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f34:	d10d      	bne.n	8009f52 <_dtoa_r+0x97a>
 8009f36:	2b39      	cmp	r3, #57	; 0x39
 8009f38:	d029      	beq.n	8009f8e <_dtoa_r+0x9b6>
 8009f3a:	f1ba 0f00 	cmp.w	sl, #0
 8009f3e:	dd01      	ble.n	8009f44 <_dtoa_r+0x96c>
 8009f40:	9b05      	ldr	r3, [sp, #20]
 8009f42:	3331      	adds	r3, #49	; 0x31
 8009f44:	9a02      	ldr	r2, [sp, #8]
 8009f46:	7013      	strb	r3, [r2, #0]
 8009f48:	e775      	b.n	8009e36 <_dtoa_r+0x85e>
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	e7b8      	b.n	8009ec0 <_dtoa_r+0x8e8>
 8009f4e:	2201      	movs	r2, #1
 8009f50:	e7e1      	b.n	8009f16 <_dtoa_r+0x93e>
 8009f52:	f1ba 0f00 	cmp.w	sl, #0
 8009f56:	db06      	blt.n	8009f66 <_dtoa_r+0x98e>
 8009f58:	9906      	ldr	r1, [sp, #24]
 8009f5a:	ea41 0a0a 	orr.w	sl, r1, sl
 8009f5e:	9907      	ldr	r1, [sp, #28]
 8009f60:	ea5a 0a01 	orrs.w	sl, sl, r1
 8009f64:	d120      	bne.n	8009fa8 <_dtoa_r+0x9d0>
 8009f66:	2a00      	cmp	r2, #0
 8009f68:	ddec      	ble.n	8009f44 <_dtoa_r+0x96c>
 8009f6a:	4629      	mov	r1, r5
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	4630      	mov	r0, r6
 8009f70:	9304      	str	r3, [sp, #16]
 8009f72:	f000 fbad 	bl	800a6d0 <__lshift>
 8009f76:	4621      	mov	r1, r4
 8009f78:	4605      	mov	r5, r0
 8009f7a:	f000 fc15 	bl	800a7a8 <__mcmp>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	9b04      	ldr	r3, [sp, #16]
 8009f82:	dc02      	bgt.n	8009f8a <_dtoa_r+0x9b2>
 8009f84:	d1de      	bne.n	8009f44 <_dtoa_r+0x96c>
 8009f86:	07da      	lsls	r2, r3, #31
 8009f88:	d5dc      	bpl.n	8009f44 <_dtoa_r+0x96c>
 8009f8a:	2b39      	cmp	r3, #57	; 0x39
 8009f8c:	d1d8      	bne.n	8009f40 <_dtoa_r+0x968>
 8009f8e:	9a02      	ldr	r2, [sp, #8]
 8009f90:	2339      	movs	r3, #57	; 0x39
 8009f92:	7013      	strb	r3, [r2, #0]
 8009f94:	4643      	mov	r3, r8
 8009f96:	4698      	mov	r8, r3
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009f9e:	2a39      	cmp	r2, #57	; 0x39
 8009fa0:	d051      	beq.n	800a046 <_dtoa_r+0xa6e>
 8009fa2:	3201      	adds	r2, #1
 8009fa4:	701a      	strb	r2, [r3, #0]
 8009fa6:	e746      	b.n	8009e36 <_dtoa_r+0x85e>
 8009fa8:	2a00      	cmp	r2, #0
 8009faa:	dd03      	ble.n	8009fb4 <_dtoa_r+0x9dc>
 8009fac:	2b39      	cmp	r3, #57	; 0x39
 8009fae:	d0ee      	beq.n	8009f8e <_dtoa_r+0x9b6>
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	e7c7      	b.n	8009f44 <_dtoa_r+0x96c>
 8009fb4:	9a04      	ldr	r2, [sp, #16]
 8009fb6:	9908      	ldr	r1, [sp, #32]
 8009fb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009fbc:	428a      	cmp	r2, r1
 8009fbe:	d02b      	beq.n	800a018 <_dtoa_r+0xa40>
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	220a      	movs	r2, #10
 8009fc6:	4630      	mov	r0, r6
 8009fc8:	f000 f9d4 	bl	800a374 <__multadd>
 8009fcc:	45b9      	cmp	r9, r7
 8009fce:	4605      	mov	r5, r0
 8009fd0:	f04f 0300 	mov.w	r3, #0
 8009fd4:	f04f 020a 	mov.w	r2, #10
 8009fd8:	4649      	mov	r1, r9
 8009fda:	4630      	mov	r0, r6
 8009fdc:	d107      	bne.n	8009fee <_dtoa_r+0xa16>
 8009fde:	f000 f9c9 	bl	800a374 <__multadd>
 8009fe2:	4681      	mov	r9, r0
 8009fe4:	4607      	mov	r7, r0
 8009fe6:	9b04      	ldr	r3, [sp, #16]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	e774      	b.n	8009ed8 <_dtoa_r+0x900>
 8009fee:	f000 f9c1 	bl	800a374 <__multadd>
 8009ff2:	4639      	mov	r1, r7
 8009ff4:	4681      	mov	r9, r0
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	220a      	movs	r2, #10
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	f000 f9ba 	bl	800a374 <__multadd>
 800a000:	4607      	mov	r7, r0
 800a002:	e7f0      	b.n	8009fe6 <_dtoa_r+0xa0e>
 800a004:	f1ba 0f00 	cmp.w	sl, #0
 800a008:	9a01      	ldr	r2, [sp, #4]
 800a00a:	bfcc      	ite	gt
 800a00c:	46d0      	movgt	r8, sl
 800a00e:	f04f 0801 	movle.w	r8, #1
 800a012:	4490      	add	r8, r2
 800a014:	f04f 0900 	mov.w	r9, #0
 800a018:	4629      	mov	r1, r5
 800a01a:	2201      	movs	r2, #1
 800a01c:	4630      	mov	r0, r6
 800a01e:	9302      	str	r3, [sp, #8]
 800a020:	f000 fb56 	bl	800a6d0 <__lshift>
 800a024:	4621      	mov	r1, r4
 800a026:	4605      	mov	r5, r0
 800a028:	f000 fbbe 	bl	800a7a8 <__mcmp>
 800a02c:	2800      	cmp	r0, #0
 800a02e:	dcb1      	bgt.n	8009f94 <_dtoa_r+0x9bc>
 800a030:	d102      	bne.n	800a038 <_dtoa_r+0xa60>
 800a032:	9b02      	ldr	r3, [sp, #8]
 800a034:	07db      	lsls	r3, r3, #31
 800a036:	d4ad      	bmi.n	8009f94 <_dtoa_r+0x9bc>
 800a038:	4643      	mov	r3, r8
 800a03a:	4698      	mov	r8, r3
 800a03c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a040:	2a30      	cmp	r2, #48	; 0x30
 800a042:	d0fa      	beq.n	800a03a <_dtoa_r+0xa62>
 800a044:	e6f7      	b.n	8009e36 <_dtoa_r+0x85e>
 800a046:	9a01      	ldr	r2, [sp, #4]
 800a048:	429a      	cmp	r2, r3
 800a04a:	d1a4      	bne.n	8009f96 <_dtoa_r+0x9be>
 800a04c:	f10b 0b01 	add.w	fp, fp, #1
 800a050:	2331      	movs	r3, #49	; 0x31
 800a052:	e778      	b.n	8009f46 <_dtoa_r+0x96e>
 800a054:	4b14      	ldr	r3, [pc, #80]	; (800a0a8 <_dtoa_r+0xad0>)
 800a056:	f7ff bb2a 	b.w	80096ae <_dtoa_r+0xd6>
 800a05a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f47f ab05 	bne.w	800966c <_dtoa_r+0x94>
 800a062:	4b12      	ldr	r3, [pc, #72]	; (800a0ac <_dtoa_r+0xad4>)
 800a064:	f7ff bb23 	b.w	80096ae <_dtoa_r+0xd6>
 800a068:	f1ba 0f00 	cmp.w	sl, #0
 800a06c:	dc03      	bgt.n	800a076 <_dtoa_r+0xa9e>
 800a06e:	9b06      	ldr	r3, [sp, #24]
 800a070:	2b02      	cmp	r3, #2
 800a072:	f73f aec8 	bgt.w	8009e06 <_dtoa_r+0x82e>
 800a076:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a07a:	4621      	mov	r1, r4
 800a07c:	4628      	mov	r0, r5
 800a07e:	f7ff fa22 	bl	80094c6 <quorem>
 800a082:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a086:	f808 3b01 	strb.w	r3, [r8], #1
 800a08a:	9a01      	ldr	r2, [sp, #4]
 800a08c:	eba8 0202 	sub.w	r2, r8, r2
 800a090:	4592      	cmp	sl, r2
 800a092:	ddb7      	ble.n	800a004 <_dtoa_r+0xa2c>
 800a094:	4629      	mov	r1, r5
 800a096:	2300      	movs	r3, #0
 800a098:	220a      	movs	r2, #10
 800a09a:	4630      	mov	r0, r6
 800a09c:	f000 f96a 	bl	800a374 <__multadd>
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	e7ea      	b.n	800a07a <_dtoa_r+0xaa2>
 800a0a4:	0800b968 	.word	0x0800b968
 800a0a8:	0800b8c8 	.word	0x0800b8c8
 800a0ac:	0800b8ec 	.word	0x0800b8ec

0800a0b0 <_free_r>:
 800a0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	d044      	beq.n	800a140 <_free_r+0x90>
 800a0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ba:	9001      	str	r0, [sp, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f1a1 0404 	sub.w	r4, r1, #4
 800a0c2:	bfb8      	it	lt
 800a0c4:	18e4      	addlt	r4, r4, r3
 800a0c6:	f000 f8e7 	bl	800a298 <__malloc_lock>
 800a0ca:	4a1e      	ldr	r2, [pc, #120]	; (800a144 <_free_r+0x94>)
 800a0cc:	9801      	ldr	r0, [sp, #4]
 800a0ce:	6813      	ldr	r3, [r2, #0]
 800a0d0:	b933      	cbnz	r3, 800a0e0 <_free_r+0x30>
 800a0d2:	6063      	str	r3, [r4, #4]
 800a0d4:	6014      	str	r4, [r2, #0]
 800a0d6:	b003      	add	sp, #12
 800a0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0dc:	f000 b8e2 	b.w	800a2a4 <__malloc_unlock>
 800a0e0:	42a3      	cmp	r3, r4
 800a0e2:	d908      	bls.n	800a0f6 <_free_r+0x46>
 800a0e4:	6825      	ldr	r5, [r4, #0]
 800a0e6:	1961      	adds	r1, r4, r5
 800a0e8:	428b      	cmp	r3, r1
 800a0ea:	bf01      	itttt	eq
 800a0ec:	6819      	ldreq	r1, [r3, #0]
 800a0ee:	685b      	ldreq	r3, [r3, #4]
 800a0f0:	1949      	addeq	r1, r1, r5
 800a0f2:	6021      	streq	r1, [r4, #0]
 800a0f4:	e7ed      	b.n	800a0d2 <_free_r+0x22>
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	b10b      	cbz	r3, 800a100 <_free_r+0x50>
 800a0fc:	42a3      	cmp	r3, r4
 800a0fe:	d9fa      	bls.n	800a0f6 <_free_r+0x46>
 800a100:	6811      	ldr	r1, [r2, #0]
 800a102:	1855      	adds	r5, r2, r1
 800a104:	42a5      	cmp	r5, r4
 800a106:	d10b      	bne.n	800a120 <_free_r+0x70>
 800a108:	6824      	ldr	r4, [r4, #0]
 800a10a:	4421      	add	r1, r4
 800a10c:	1854      	adds	r4, r2, r1
 800a10e:	42a3      	cmp	r3, r4
 800a110:	6011      	str	r1, [r2, #0]
 800a112:	d1e0      	bne.n	800a0d6 <_free_r+0x26>
 800a114:	681c      	ldr	r4, [r3, #0]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	6053      	str	r3, [r2, #4]
 800a11a:	440c      	add	r4, r1
 800a11c:	6014      	str	r4, [r2, #0]
 800a11e:	e7da      	b.n	800a0d6 <_free_r+0x26>
 800a120:	d902      	bls.n	800a128 <_free_r+0x78>
 800a122:	230c      	movs	r3, #12
 800a124:	6003      	str	r3, [r0, #0]
 800a126:	e7d6      	b.n	800a0d6 <_free_r+0x26>
 800a128:	6825      	ldr	r5, [r4, #0]
 800a12a:	1961      	adds	r1, r4, r5
 800a12c:	428b      	cmp	r3, r1
 800a12e:	bf04      	itt	eq
 800a130:	6819      	ldreq	r1, [r3, #0]
 800a132:	685b      	ldreq	r3, [r3, #4]
 800a134:	6063      	str	r3, [r4, #4]
 800a136:	bf04      	itt	eq
 800a138:	1949      	addeq	r1, r1, r5
 800a13a:	6021      	streq	r1, [r4, #0]
 800a13c:	6054      	str	r4, [r2, #4]
 800a13e:	e7ca      	b.n	800a0d6 <_free_r+0x26>
 800a140:	b003      	add	sp, #12
 800a142:	bd30      	pop	{r4, r5, pc}
 800a144:	200007fc 	.word	0x200007fc

0800a148 <malloc>:
 800a148:	4b02      	ldr	r3, [pc, #8]	; (800a154 <malloc+0xc>)
 800a14a:	4601      	mov	r1, r0
 800a14c:	6818      	ldr	r0, [r3, #0]
 800a14e:	f000 b823 	b.w	800a198 <_malloc_r>
 800a152:	bf00      	nop
 800a154:	200000d8 	.word	0x200000d8

0800a158 <sbrk_aligned>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4e0e      	ldr	r6, [pc, #56]	; (800a194 <sbrk_aligned+0x3c>)
 800a15c:	460c      	mov	r4, r1
 800a15e:	6831      	ldr	r1, [r6, #0]
 800a160:	4605      	mov	r5, r0
 800a162:	b911      	cbnz	r1, 800a16a <sbrk_aligned+0x12>
 800a164:	f000 fe40 	bl	800ade8 <_sbrk_r>
 800a168:	6030      	str	r0, [r6, #0]
 800a16a:	4621      	mov	r1, r4
 800a16c:	4628      	mov	r0, r5
 800a16e:	f000 fe3b 	bl	800ade8 <_sbrk_r>
 800a172:	1c43      	adds	r3, r0, #1
 800a174:	d00a      	beq.n	800a18c <sbrk_aligned+0x34>
 800a176:	1cc4      	adds	r4, r0, #3
 800a178:	f024 0403 	bic.w	r4, r4, #3
 800a17c:	42a0      	cmp	r0, r4
 800a17e:	d007      	beq.n	800a190 <sbrk_aligned+0x38>
 800a180:	1a21      	subs	r1, r4, r0
 800a182:	4628      	mov	r0, r5
 800a184:	f000 fe30 	bl	800ade8 <_sbrk_r>
 800a188:	3001      	adds	r0, #1
 800a18a:	d101      	bne.n	800a190 <sbrk_aligned+0x38>
 800a18c:	f04f 34ff 	mov.w	r4, #4294967295
 800a190:	4620      	mov	r0, r4
 800a192:	bd70      	pop	{r4, r5, r6, pc}
 800a194:	20000800 	.word	0x20000800

0800a198 <_malloc_r>:
 800a198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a19c:	1ccd      	adds	r5, r1, #3
 800a19e:	f025 0503 	bic.w	r5, r5, #3
 800a1a2:	3508      	adds	r5, #8
 800a1a4:	2d0c      	cmp	r5, #12
 800a1a6:	bf38      	it	cc
 800a1a8:	250c      	movcc	r5, #12
 800a1aa:	2d00      	cmp	r5, #0
 800a1ac:	4607      	mov	r7, r0
 800a1ae:	db01      	blt.n	800a1b4 <_malloc_r+0x1c>
 800a1b0:	42a9      	cmp	r1, r5
 800a1b2:	d905      	bls.n	800a1c0 <_malloc_r+0x28>
 800a1b4:	230c      	movs	r3, #12
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	2600      	movs	r6, #0
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a294 <_malloc_r+0xfc>
 800a1c4:	f000 f868 	bl	800a298 <__malloc_lock>
 800a1c8:	f8d8 3000 	ldr.w	r3, [r8]
 800a1cc:	461c      	mov	r4, r3
 800a1ce:	bb5c      	cbnz	r4, 800a228 <_malloc_r+0x90>
 800a1d0:	4629      	mov	r1, r5
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	f7ff ffc0 	bl	800a158 <sbrk_aligned>
 800a1d8:	1c43      	adds	r3, r0, #1
 800a1da:	4604      	mov	r4, r0
 800a1dc:	d155      	bne.n	800a28a <_malloc_r+0xf2>
 800a1de:	f8d8 4000 	ldr.w	r4, [r8]
 800a1e2:	4626      	mov	r6, r4
 800a1e4:	2e00      	cmp	r6, #0
 800a1e6:	d145      	bne.n	800a274 <_malloc_r+0xdc>
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	d048      	beq.n	800a27e <_malloc_r+0xe6>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	4631      	mov	r1, r6
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	eb04 0903 	add.w	r9, r4, r3
 800a1f6:	f000 fdf7 	bl	800ade8 <_sbrk_r>
 800a1fa:	4581      	cmp	r9, r0
 800a1fc:	d13f      	bne.n	800a27e <_malloc_r+0xe6>
 800a1fe:	6821      	ldr	r1, [r4, #0]
 800a200:	1a6d      	subs	r5, r5, r1
 800a202:	4629      	mov	r1, r5
 800a204:	4638      	mov	r0, r7
 800a206:	f7ff ffa7 	bl	800a158 <sbrk_aligned>
 800a20a:	3001      	adds	r0, #1
 800a20c:	d037      	beq.n	800a27e <_malloc_r+0xe6>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	442b      	add	r3, r5
 800a212:	6023      	str	r3, [r4, #0]
 800a214:	f8d8 3000 	ldr.w	r3, [r8]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d038      	beq.n	800a28e <_malloc_r+0xf6>
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	42a2      	cmp	r2, r4
 800a220:	d12b      	bne.n	800a27a <_malloc_r+0xe2>
 800a222:	2200      	movs	r2, #0
 800a224:	605a      	str	r2, [r3, #4]
 800a226:	e00f      	b.n	800a248 <_malloc_r+0xb0>
 800a228:	6822      	ldr	r2, [r4, #0]
 800a22a:	1b52      	subs	r2, r2, r5
 800a22c:	d41f      	bmi.n	800a26e <_malloc_r+0xd6>
 800a22e:	2a0b      	cmp	r2, #11
 800a230:	d917      	bls.n	800a262 <_malloc_r+0xca>
 800a232:	1961      	adds	r1, r4, r5
 800a234:	42a3      	cmp	r3, r4
 800a236:	6025      	str	r5, [r4, #0]
 800a238:	bf18      	it	ne
 800a23a:	6059      	strne	r1, [r3, #4]
 800a23c:	6863      	ldr	r3, [r4, #4]
 800a23e:	bf08      	it	eq
 800a240:	f8c8 1000 	streq.w	r1, [r8]
 800a244:	5162      	str	r2, [r4, r5]
 800a246:	604b      	str	r3, [r1, #4]
 800a248:	4638      	mov	r0, r7
 800a24a:	f104 060b 	add.w	r6, r4, #11
 800a24e:	f000 f829 	bl	800a2a4 <__malloc_unlock>
 800a252:	f026 0607 	bic.w	r6, r6, #7
 800a256:	1d23      	adds	r3, r4, #4
 800a258:	1af2      	subs	r2, r6, r3
 800a25a:	d0ae      	beq.n	800a1ba <_malloc_r+0x22>
 800a25c:	1b9b      	subs	r3, r3, r6
 800a25e:	50a3      	str	r3, [r4, r2]
 800a260:	e7ab      	b.n	800a1ba <_malloc_r+0x22>
 800a262:	42a3      	cmp	r3, r4
 800a264:	6862      	ldr	r2, [r4, #4]
 800a266:	d1dd      	bne.n	800a224 <_malloc_r+0x8c>
 800a268:	f8c8 2000 	str.w	r2, [r8]
 800a26c:	e7ec      	b.n	800a248 <_malloc_r+0xb0>
 800a26e:	4623      	mov	r3, r4
 800a270:	6864      	ldr	r4, [r4, #4]
 800a272:	e7ac      	b.n	800a1ce <_malloc_r+0x36>
 800a274:	4634      	mov	r4, r6
 800a276:	6876      	ldr	r6, [r6, #4]
 800a278:	e7b4      	b.n	800a1e4 <_malloc_r+0x4c>
 800a27a:	4613      	mov	r3, r2
 800a27c:	e7cc      	b.n	800a218 <_malloc_r+0x80>
 800a27e:	230c      	movs	r3, #12
 800a280:	603b      	str	r3, [r7, #0]
 800a282:	4638      	mov	r0, r7
 800a284:	f000 f80e 	bl	800a2a4 <__malloc_unlock>
 800a288:	e797      	b.n	800a1ba <_malloc_r+0x22>
 800a28a:	6025      	str	r5, [r4, #0]
 800a28c:	e7dc      	b.n	800a248 <_malloc_r+0xb0>
 800a28e:	605b      	str	r3, [r3, #4]
 800a290:	deff      	udf	#255	; 0xff
 800a292:	bf00      	nop
 800a294:	200007fc 	.word	0x200007fc

0800a298 <__malloc_lock>:
 800a298:	4801      	ldr	r0, [pc, #4]	; (800a2a0 <__malloc_lock+0x8>)
 800a29a:	f7ff b912 	b.w	80094c2 <__retarget_lock_acquire_recursive>
 800a29e:	bf00      	nop
 800a2a0:	200007f8 	.word	0x200007f8

0800a2a4 <__malloc_unlock>:
 800a2a4:	4801      	ldr	r0, [pc, #4]	; (800a2ac <__malloc_unlock+0x8>)
 800a2a6:	f7ff b90d 	b.w	80094c4 <__retarget_lock_release_recursive>
 800a2aa:	bf00      	nop
 800a2ac:	200007f8 	.word	0x200007f8

0800a2b0 <_Balloc>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	69c6      	ldr	r6, [r0, #28]
 800a2b4:	4604      	mov	r4, r0
 800a2b6:	460d      	mov	r5, r1
 800a2b8:	b976      	cbnz	r6, 800a2d8 <_Balloc+0x28>
 800a2ba:	2010      	movs	r0, #16
 800a2bc:	f7ff ff44 	bl	800a148 <malloc>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	61e0      	str	r0, [r4, #28]
 800a2c4:	b920      	cbnz	r0, 800a2d0 <_Balloc+0x20>
 800a2c6:	4b18      	ldr	r3, [pc, #96]	; (800a328 <_Balloc+0x78>)
 800a2c8:	4818      	ldr	r0, [pc, #96]	; (800a32c <_Balloc+0x7c>)
 800a2ca:	216b      	movs	r1, #107	; 0x6b
 800a2cc:	f000 fdaa 	bl	800ae24 <__assert_func>
 800a2d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2d4:	6006      	str	r6, [r0, #0]
 800a2d6:	60c6      	str	r6, [r0, #12]
 800a2d8:	69e6      	ldr	r6, [r4, #28]
 800a2da:	68f3      	ldr	r3, [r6, #12]
 800a2dc:	b183      	cbz	r3, 800a300 <_Balloc+0x50>
 800a2de:	69e3      	ldr	r3, [r4, #28]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a2e6:	b9b8      	cbnz	r0, 800a318 <_Balloc+0x68>
 800a2e8:	2101      	movs	r1, #1
 800a2ea:	fa01 f605 	lsl.w	r6, r1, r5
 800a2ee:	1d72      	adds	r2, r6, #5
 800a2f0:	0092      	lsls	r2, r2, #2
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 fdb4 	bl	800ae60 <_calloc_r>
 800a2f8:	b160      	cbz	r0, 800a314 <_Balloc+0x64>
 800a2fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a2fe:	e00e      	b.n	800a31e <_Balloc+0x6e>
 800a300:	2221      	movs	r2, #33	; 0x21
 800a302:	2104      	movs	r1, #4
 800a304:	4620      	mov	r0, r4
 800a306:	f000 fdab 	bl	800ae60 <_calloc_r>
 800a30a:	69e3      	ldr	r3, [r4, #28]
 800a30c:	60f0      	str	r0, [r6, #12]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e4      	bne.n	800a2de <_Balloc+0x2e>
 800a314:	2000      	movs	r0, #0
 800a316:	bd70      	pop	{r4, r5, r6, pc}
 800a318:	6802      	ldr	r2, [r0, #0]
 800a31a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a31e:	2300      	movs	r3, #0
 800a320:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a324:	e7f7      	b.n	800a316 <_Balloc+0x66>
 800a326:	bf00      	nop
 800a328:	0800b8f9 	.word	0x0800b8f9
 800a32c:	0800b979 	.word	0x0800b979

0800a330 <_Bfree>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	69c6      	ldr	r6, [r0, #28]
 800a334:	4605      	mov	r5, r0
 800a336:	460c      	mov	r4, r1
 800a338:	b976      	cbnz	r6, 800a358 <_Bfree+0x28>
 800a33a:	2010      	movs	r0, #16
 800a33c:	f7ff ff04 	bl	800a148 <malloc>
 800a340:	4602      	mov	r2, r0
 800a342:	61e8      	str	r0, [r5, #28]
 800a344:	b920      	cbnz	r0, 800a350 <_Bfree+0x20>
 800a346:	4b09      	ldr	r3, [pc, #36]	; (800a36c <_Bfree+0x3c>)
 800a348:	4809      	ldr	r0, [pc, #36]	; (800a370 <_Bfree+0x40>)
 800a34a:	218f      	movs	r1, #143	; 0x8f
 800a34c:	f000 fd6a 	bl	800ae24 <__assert_func>
 800a350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a354:	6006      	str	r6, [r0, #0]
 800a356:	60c6      	str	r6, [r0, #12]
 800a358:	b13c      	cbz	r4, 800a36a <_Bfree+0x3a>
 800a35a:	69eb      	ldr	r3, [r5, #28]
 800a35c:	6862      	ldr	r2, [r4, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a364:	6021      	str	r1, [r4, #0]
 800a366:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a36a:	bd70      	pop	{r4, r5, r6, pc}
 800a36c:	0800b8f9 	.word	0x0800b8f9
 800a370:	0800b979 	.word	0x0800b979

0800a374 <__multadd>:
 800a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a378:	690d      	ldr	r5, [r1, #16]
 800a37a:	4607      	mov	r7, r0
 800a37c:	460c      	mov	r4, r1
 800a37e:	461e      	mov	r6, r3
 800a380:	f101 0c14 	add.w	ip, r1, #20
 800a384:	2000      	movs	r0, #0
 800a386:	f8dc 3000 	ldr.w	r3, [ip]
 800a38a:	b299      	uxth	r1, r3
 800a38c:	fb02 6101 	mla	r1, r2, r1, r6
 800a390:	0c1e      	lsrs	r6, r3, #16
 800a392:	0c0b      	lsrs	r3, r1, #16
 800a394:	fb02 3306 	mla	r3, r2, r6, r3
 800a398:	b289      	uxth	r1, r1
 800a39a:	3001      	adds	r0, #1
 800a39c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3a0:	4285      	cmp	r5, r0
 800a3a2:	f84c 1b04 	str.w	r1, [ip], #4
 800a3a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3aa:	dcec      	bgt.n	800a386 <__multadd+0x12>
 800a3ac:	b30e      	cbz	r6, 800a3f2 <__multadd+0x7e>
 800a3ae:	68a3      	ldr	r3, [r4, #8]
 800a3b0:	42ab      	cmp	r3, r5
 800a3b2:	dc19      	bgt.n	800a3e8 <__multadd+0x74>
 800a3b4:	6861      	ldr	r1, [r4, #4]
 800a3b6:	4638      	mov	r0, r7
 800a3b8:	3101      	adds	r1, #1
 800a3ba:	f7ff ff79 	bl	800a2b0 <_Balloc>
 800a3be:	4680      	mov	r8, r0
 800a3c0:	b928      	cbnz	r0, 800a3ce <__multadd+0x5a>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4b0c      	ldr	r3, [pc, #48]	; (800a3f8 <__multadd+0x84>)
 800a3c6:	480d      	ldr	r0, [pc, #52]	; (800a3fc <__multadd+0x88>)
 800a3c8:	21ba      	movs	r1, #186	; 0xba
 800a3ca:	f000 fd2b 	bl	800ae24 <__assert_func>
 800a3ce:	6922      	ldr	r2, [r4, #16]
 800a3d0:	3202      	adds	r2, #2
 800a3d2:	f104 010c 	add.w	r1, r4, #12
 800a3d6:	0092      	lsls	r2, r2, #2
 800a3d8:	300c      	adds	r0, #12
 800a3da:	f000 fd15 	bl	800ae08 <memcpy>
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4638      	mov	r0, r7
 800a3e2:	f7ff ffa5 	bl	800a330 <_Bfree>
 800a3e6:	4644      	mov	r4, r8
 800a3e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a3ec:	3501      	adds	r5, #1
 800a3ee:	615e      	str	r6, [r3, #20]
 800a3f0:	6125      	str	r5, [r4, #16]
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3f8:	0800b968 	.word	0x0800b968
 800a3fc:	0800b979 	.word	0x0800b979

0800a400 <__hi0bits>:
 800a400:	0c03      	lsrs	r3, r0, #16
 800a402:	041b      	lsls	r3, r3, #16
 800a404:	b9d3      	cbnz	r3, 800a43c <__hi0bits+0x3c>
 800a406:	0400      	lsls	r0, r0, #16
 800a408:	2310      	movs	r3, #16
 800a40a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a40e:	bf04      	itt	eq
 800a410:	0200      	lsleq	r0, r0, #8
 800a412:	3308      	addeq	r3, #8
 800a414:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a418:	bf04      	itt	eq
 800a41a:	0100      	lsleq	r0, r0, #4
 800a41c:	3304      	addeq	r3, #4
 800a41e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a422:	bf04      	itt	eq
 800a424:	0080      	lsleq	r0, r0, #2
 800a426:	3302      	addeq	r3, #2
 800a428:	2800      	cmp	r0, #0
 800a42a:	db05      	blt.n	800a438 <__hi0bits+0x38>
 800a42c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a430:	f103 0301 	add.w	r3, r3, #1
 800a434:	bf08      	it	eq
 800a436:	2320      	moveq	r3, #32
 800a438:	4618      	mov	r0, r3
 800a43a:	4770      	bx	lr
 800a43c:	2300      	movs	r3, #0
 800a43e:	e7e4      	b.n	800a40a <__hi0bits+0xa>

0800a440 <__lo0bits>:
 800a440:	6803      	ldr	r3, [r0, #0]
 800a442:	f013 0207 	ands.w	r2, r3, #7
 800a446:	d00c      	beq.n	800a462 <__lo0bits+0x22>
 800a448:	07d9      	lsls	r1, r3, #31
 800a44a:	d422      	bmi.n	800a492 <__lo0bits+0x52>
 800a44c:	079a      	lsls	r2, r3, #30
 800a44e:	bf49      	itett	mi
 800a450:	085b      	lsrmi	r3, r3, #1
 800a452:	089b      	lsrpl	r3, r3, #2
 800a454:	6003      	strmi	r3, [r0, #0]
 800a456:	2201      	movmi	r2, #1
 800a458:	bf5c      	itt	pl
 800a45a:	6003      	strpl	r3, [r0, #0]
 800a45c:	2202      	movpl	r2, #2
 800a45e:	4610      	mov	r0, r2
 800a460:	4770      	bx	lr
 800a462:	b299      	uxth	r1, r3
 800a464:	b909      	cbnz	r1, 800a46a <__lo0bits+0x2a>
 800a466:	0c1b      	lsrs	r3, r3, #16
 800a468:	2210      	movs	r2, #16
 800a46a:	b2d9      	uxtb	r1, r3
 800a46c:	b909      	cbnz	r1, 800a472 <__lo0bits+0x32>
 800a46e:	3208      	adds	r2, #8
 800a470:	0a1b      	lsrs	r3, r3, #8
 800a472:	0719      	lsls	r1, r3, #28
 800a474:	bf04      	itt	eq
 800a476:	091b      	lsreq	r3, r3, #4
 800a478:	3204      	addeq	r2, #4
 800a47a:	0799      	lsls	r1, r3, #30
 800a47c:	bf04      	itt	eq
 800a47e:	089b      	lsreq	r3, r3, #2
 800a480:	3202      	addeq	r2, #2
 800a482:	07d9      	lsls	r1, r3, #31
 800a484:	d403      	bmi.n	800a48e <__lo0bits+0x4e>
 800a486:	085b      	lsrs	r3, r3, #1
 800a488:	f102 0201 	add.w	r2, r2, #1
 800a48c:	d003      	beq.n	800a496 <__lo0bits+0x56>
 800a48e:	6003      	str	r3, [r0, #0]
 800a490:	e7e5      	b.n	800a45e <__lo0bits+0x1e>
 800a492:	2200      	movs	r2, #0
 800a494:	e7e3      	b.n	800a45e <__lo0bits+0x1e>
 800a496:	2220      	movs	r2, #32
 800a498:	e7e1      	b.n	800a45e <__lo0bits+0x1e>
	...

0800a49c <__i2b>:
 800a49c:	b510      	push	{r4, lr}
 800a49e:	460c      	mov	r4, r1
 800a4a0:	2101      	movs	r1, #1
 800a4a2:	f7ff ff05 	bl	800a2b0 <_Balloc>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	b928      	cbnz	r0, 800a4b6 <__i2b+0x1a>
 800a4aa:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <__i2b+0x24>)
 800a4ac:	4805      	ldr	r0, [pc, #20]	; (800a4c4 <__i2b+0x28>)
 800a4ae:	f240 1145 	movw	r1, #325	; 0x145
 800a4b2:	f000 fcb7 	bl	800ae24 <__assert_func>
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	6144      	str	r4, [r0, #20]
 800a4ba:	6103      	str	r3, [r0, #16]
 800a4bc:	bd10      	pop	{r4, pc}
 800a4be:	bf00      	nop
 800a4c0:	0800b968 	.word	0x0800b968
 800a4c4:	0800b979 	.word	0x0800b979

0800a4c8 <__multiply>:
 800a4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4cc:	4691      	mov	r9, r2
 800a4ce:	690a      	ldr	r2, [r1, #16]
 800a4d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	bfb8      	it	lt
 800a4d8:	460b      	movlt	r3, r1
 800a4da:	460c      	mov	r4, r1
 800a4dc:	bfbc      	itt	lt
 800a4de:	464c      	movlt	r4, r9
 800a4e0:	4699      	movlt	r9, r3
 800a4e2:	6927      	ldr	r7, [r4, #16]
 800a4e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4e8:	68a3      	ldr	r3, [r4, #8]
 800a4ea:	6861      	ldr	r1, [r4, #4]
 800a4ec:	eb07 060a 	add.w	r6, r7, sl
 800a4f0:	42b3      	cmp	r3, r6
 800a4f2:	b085      	sub	sp, #20
 800a4f4:	bfb8      	it	lt
 800a4f6:	3101      	addlt	r1, #1
 800a4f8:	f7ff feda 	bl	800a2b0 <_Balloc>
 800a4fc:	b930      	cbnz	r0, 800a50c <__multiply+0x44>
 800a4fe:	4602      	mov	r2, r0
 800a500:	4b44      	ldr	r3, [pc, #272]	; (800a614 <__multiply+0x14c>)
 800a502:	4845      	ldr	r0, [pc, #276]	; (800a618 <__multiply+0x150>)
 800a504:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a508:	f000 fc8c 	bl	800ae24 <__assert_func>
 800a50c:	f100 0514 	add.w	r5, r0, #20
 800a510:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a514:	462b      	mov	r3, r5
 800a516:	2200      	movs	r2, #0
 800a518:	4543      	cmp	r3, r8
 800a51a:	d321      	bcc.n	800a560 <__multiply+0x98>
 800a51c:	f104 0314 	add.w	r3, r4, #20
 800a520:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a524:	f109 0314 	add.w	r3, r9, #20
 800a528:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a52c:	9202      	str	r2, [sp, #8]
 800a52e:	1b3a      	subs	r2, r7, r4
 800a530:	3a15      	subs	r2, #21
 800a532:	f022 0203 	bic.w	r2, r2, #3
 800a536:	3204      	adds	r2, #4
 800a538:	f104 0115 	add.w	r1, r4, #21
 800a53c:	428f      	cmp	r7, r1
 800a53e:	bf38      	it	cc
 800a540:	2204      	movcc	r2, #4
 800a542:	9201      	str	r2, [sp, #4]
 800a544:	9a02      	ldr	r2, [sp, #8]
 800a546:	9303      	str	r3, [sp, #12]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d80c      	bhi.n	800a566 <__multiply+0x9e>
 800a54c:	2e00      	cmp	r6, #0
 800a54e:	dd03      	ble.n	800a558 <__multiply+0x90>
 800a550:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a554:	2b00      	cmp	r3, #0
 800a556:	d05b      	beq.n	800a610 <__multiply+0x148>
 800a558:	6106      	str	r6, [r0, #16]
 800a55a:	b005      	add	sp, #20
 800a55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a560:	f843 2b04 	str.w	r2, [r3], #4
 800a564:	e7d8      	b.n	800a518 <__multiply+0x50>
 800a566:	f8b3 a000 	ldrh.w	sl, [r3]
 800a56a:	f1ba 0f00 	cmp.w	sl, #0
 800a56e:	d024      	beq.n	800a5ba <__multiply+0xf2>
 800a570:	f104 0e14 	add.w	lr, r4, #20
 800a574:	46a9      	mov	r9, r5
 800a576:	f04f 0c00 	mov.w	ip, #0
 800a57a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a57e:	f8d9 1000 	ldr.w	r1, [r9]
 800a582:	fa1f fb82 	uxth.w	fp, r2
 800a586:	b289      	uxth	r1, r1
 800a588:	fb0a 110b 	mla	r1, sl, fp, r1
 800a58c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a590:	f8d9 2000 	ldr.w	r2, [r9]
 800a594:	4461      	add	r1, ip
 800a596:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a59a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a59e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a5a2:	b289      	uxth	r1, r1
 800a5a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5a8:	4577      	cmp	r7, lr
 800a5aa:	f849 1b04 	str.w	r1, [r9], #4
 800a5ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a5b2:	d8e2      	bhi.n	800a57a <__multiply+0xb2>
 800a5b4:	9a01      	ldr	r2, [sp, #4]
 800a5b6:	f845 c002 	str.w	ip, [r5, r2]
 800a5ba:	9a03      	ldr	r2, [sp, #12]
 800a5bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	f1b9 0f00 	cmp.w	r9, #0
 800a5c6:	d021      	beq.n	800a60c <__multiply+0x144>
 800a5c8:	6829      	ldr	r1, [r5, #0]
 800a5ca:	f104 0c14 	add.w	ip, r4, #20
 800a5ce:	46ae      	mov	lr, r5
 800a5d0:	f04f 0a00 	mov.w	sl, #0
 800a5d4:	f8bc b000 	ldrh.w	fp, [ip]
 800a5d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a5dc:	fb09 220b 	mla	r2, r9, fp, r2
 800a5e0:	4452      	add	r2, sl
 800a5e2:	b289      	uxth	r1, r1
 800a5e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a5e8:	f84e 1b04 	str.w	r1, [lr], #4
 800a5ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a5f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a5f4:	f8be 1000 	ldrh.w	r1, [lr]
 800a5f8:	fb09 110a 	mla	r1, r9, sl, r1
 800a5fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a600:	4567      	cmp	r7, ip
 800a602:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a606:	d8e5      	bhi.n	800a5d4 <__multiply+0x10c>
 800a608:	9a01      	ldr	r2, [sp, #4]
 800a60a:	50a9      	str	r1, [r5, r2]
 800a60c:	3504      	adds	r5, #4
 800a60e:	e799      	b.n	800a544 <__multiply+0x7c>
 800a610:	3e01      	subs	r6, #1
 800a612:	e79b      	b.n	800a54c <__multiply+0x84>
 800a614:	0800b968 	.word	0x0800b968
 800a618:	0800b979 	.word	0x0800b979

0800a61c <__pow5mult>:
 800a61c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a620:	4615      	mov	r5, r2
 800a622:	f012 0203 	ands.w	r2, r2, #3
 800a626:	4606      	mov	r6, r0
 800a628:	460f      	mov	r7, r1
 800a62a:	d007      	beq.n	800a63c <__pow5mult+0x20>
 800a62c:	4c25      	ldr	r4, [pc, #148]	; (800a6c4 <__pow5mult+0xa8>)
 800a62e:	3a01      	subs	r2, #1
 800a630:	2300      	movs	r3, #0
 800a632:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a636:	f7ff fe9d 	bl	800a374 <__multadd>
 800a63a:	4607      	mov	r7, r0
 800a63c:	10ad      	asrs	r5, r5, #2
 800a63e:	d03d      	beq.n	800a6bc <__pow5mult+0xa0>
 800a640:	69f4      	ldr	r4, [r6, #28]
 800a642:	b97c      	cbnz	r4, 800a664 <__pow5mult+0x48>
 800a644:	2010      	movs	r0, #16
 800a646:	f7ff fd7f 	bl	800a148 <malloc>
 800a64a:	4602      	mov	r2, r0
 800a64c:	61f0      	str	r0, [r6, #28]
 800a64e:	b928      	cbnz	r0, 800a65c <__pow5mult+0x40>
 800a650:	4b1d      	ldr	r3, [pc, #116]	; (800a6c8 <__pow5mult+0xac>)
 800a652:	481e      	ldr	r0, [pc, #120]	; (800a6cc <__pow5mult+0xb0>)
 800a654:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a658:	f000 fbe4 	bl	800ae24 <__assert_func>
 800a65c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a660:	6004      	str	r4, [r0, #0]
 800a662:	60c4      	str	r4, [r0, #12]
 800a664:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a668:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a66c:	b94c      	cbnz	r4, 800a682 <__pow5mult+0x66>
 800a66e:	f240 2171 	movw	r1, #625	; 0x271
 800a672:	4630      	mov	r0, r6
 800a674:	f7ff ff12 	bl	800a49c <__i2b>
 800a678:	2300      	movs	r3, #0
 800a67a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a67e:	4604      	mov	r4, r0
 800a680:	6003      	str	r3, [r0, #0]
 800a682:	f04f 0900 	mov.w	r9, #0
 800a686:	07eb      	lsls	r3, r5, #31
 800a688:	d50a      	bpl.n	800a6a0 <__pow5mult+0x84>
 800a68a:	4639      	mov	r1, r7
 800a68c:	4622      	mov	r2, r4
 800a68e:	4630      	mov	r0, r6
 800a690:	f7ff ff1a 	bl	800a4c8 <__multiply>
 800a694:	4639      	mov	r1, r7
 800a696:	4680      	mov	r8, r0
 800a698:	4630      	mov	r0, r6
 800a69a:	f7ff fe49 	bl	800a330 <_Bfree>
 800a69e:	4647      	mov	r7, r8
 800a6a0:	106d      	asrs	r5, r5, #1
 800a6a2:	d00b      	beq.n	800a6bc <__pow5mult+0xa0>
 800a6a4:	6820      	ldr	r0, [r4, #0]
 800a6a6:	b938      	cbnz	r0, 800a6b8 <__pow5mult+0x9c>
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	4630      	mov	r0, r6
 800a6ae:	f7ff ff0b 	bl	800a4c8 <__multiply>
 800a6b2:	6020      	str	r0, [r4, #0]
 800a6b4:	f8c0 9000 	str.w	r9, [r0]
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	e7e4      	b.n	800a686 <__pow5mult+0x6a>
 800a6bc:	4638      	mov	r0, r7
 800a6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6c2:	bf00      	nop
 800a6c4:	0800bac8 	.word	0x0800bac8
 800a6c8:	0800b8f9 	.word	0x0800b8f9
 800a6cc:	0800b979 	.word	0x0800b979

0800a6d0 <__lshift>:
 800a6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6d4:	460c      	mov	r4, r1
 800a6d6:	6849      	ldr	r1, [r1, #4]
 800a6d8:	6923      	ldr	r3, [r4, #16]
 800a6da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6de:	68a3      	ldr	r3, [r4, #8]
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	4691      	mov	r9, r2
 800a6e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6e8:	f108 0601 	add.w	r6, r8, #1
 800a6ec:	42b3      	cmp	r3, r6
 800a6ee:	db0b      	blt.n	800a708 <__lshift+0x38>
 800a6f0:	4638      	mov	r0, r7
 800a6f2:	f7ff fddd 	bl	800a2b0 <_Balloc>
 800a6f6:	4605      	mov	r5, r0
 800a6f8:	b948      	cbnz	r0, 800a70e <__lshift+0x3e>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	4b28      	ldr	r3, [pc, #160]	; (800a7a0 <__lshift+0xd0>)
 800a6fe:	4829      	ldr	r0, [pc, #164]	; (800a7a4 <__lshift+0xd4>)
 800a700:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a704:	f000 fb8e 	bl	800ae24 <__assert_func>
 800a708:	3101      	adds	r1, #1
 800a70a:	005b      	lsls	r3, r3, #1
 800a70c:	e7ee      	b.n	800a6ec <__lshift+0x1c>
 800a70e:	2300      	movs	r3, #0
 800a710:	f100 0114 	add.w	r1, r0, #20
 800a714:	f100 0210 	add.w	r2, r0, #16
 800a718:	4618      	mov	r0, r3
 800a71a:	4553      	cmp	r3, sl
 800a71c:	db33      	blt.n	800a786 <__lshift+0xb6>
 800a71e:	6920      	ldr	r0, [r4, #16]
 800a720:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a724:	f104 0314 	add.w	r3, r4, #20
 800a728:	f019 091f 	ands.w	r9, r9, #31
 800a72c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a730:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a734:	d02b      	beq.n	800a78e <__lshift+0xbe>
 800a736:	f1c9 0e20 	rsb	lr, r9, #32
 800a73a:	468a      	mov	sl, r1
 800a73c:	2200      	movs	r2, #0
 800a73e:	6818      	ldr	r0, [r3, #0]
 800a740:	fa00 f009 	lsl.w	r0, r0, r9
 800a744:	4310      	orrs	r0, r2
 800a746:	f84a 0b04 	str.w	r0, [sl], #4
 800a74a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a74e:	459c      	cmp	ip, r3
 800a750:	fa22 f20e 	lsr.w	r2, r2, lr
 800a754:	d8f3      	bhi.n	800a73e <__lshift+0x6e>
 800a756:	ebac 0304 	sub.w	r3, ip, r4
 800a75a:	3b15      	subs	r3, #21
 800a75c:	f023 0303 	bic.w	r3, r3, #3
 800a760:	3304      	adds	r3, #4
 800a762:	f104 0015 	add.w	r0, r4, #21
 800a766:	4584      	cmp	ip, r0
 800a768:	bf38      	it	cc
 800a76a:	2304      	movcc	r3, #4
 800a76c:	50ca      	str	r2, [r1, r3]
 800a76e:	b10a      	cbz	r2, 800a774 <__lshift+0xa4>
 800a770:	f108 0602 	add.w	r6, r8, #2
 800a774:	3e01      	subs	r6, #1
 800a776:	4638      	mov	r0, r7
 800a778:	612e      	str	r6, [r5, #16]
 800a77a:	4621      	mov	r1, r4
 800a77c:	f7ff fdd8 	bl	800a330 <_Bfree>
 800a780:	4628      	mov	r0, r5
 800a782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a786:	f842 0f04 	str.w	r0, [r2, #4]!
 800a78a:	3301      	adds	r3, #1
 800a78c:	e7c5      	b.n	800a71a <__lshift+0x4a>
 800a78e:	3904      	subs	r1, #4
 800a790:	f853 2b04 	ldr.w	r2, [r3], #4
 800a794:	f841 2f04 	str.w	r2, [r1, #4]!
 800a798:	459c      	cmp	ip, r3
 800a79a:	d8f9      	bhi.n	800a790 <__lshift+0xc0>
 800a79c:	e7ea      	b.n	800a774 <__lshift+0xa4>
 800a79e:	bf00      	nop
 800a7a0:	0800b968 	.word	0x0800b968
 800a7a4:	0800b979 	.word	0x0800b979

0800a7a8 <__mcmp>:
 800a7a8:	b530      	push	{r4, r5, lr}
 800a7aa:	6902      	ldr	r2, [r0, #16]
 800a7ac:	690c      	ldr	r4, [r1, #16]
 800a7ae:	1b12      	subs	r2, r2, r4
 800a7b0:	d10e      	bne.n	800a7d0 <__mcmp+0x28>
 800a7b2:	f100 0314 	add.w	r3, r0, #20
 800a7b6:	3114      	adds	r1, #20
 800a7b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7c8:	42a5      	cmp	r5, r4
 800a7ca:	d003      	beq.n	800a7d4 <__mcmp+0x2c>
 800a7cc:	d305      	bcc.n	800a7da <__mcmp+0x32>
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	4610      	mov	r0, r2
 800a7d2:	bd30      	pop	{r4, r5, pc}
 800a7d4:	4283      	cmp	r3, r0
 800a7d6:	d3f3      	bcc.n	800a7c0 <__mcmp+0x18>
 800a7d8:	e7fa      	b.n	800a7d0 <__mcmp+0x28>
 800a7da:	f04f 32ff 	mov.w	r2, #4294967295
 800a7de:	e7f7      	b.n	800a7d0 <__mcmp+0x28>

0800a7e0 <__mdiff>:
 800a7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	4606      	mov	r6, r0
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	4690      	mov	r8, r2
 800a7ee:	f7ff ffdb 	bl	800a7a8 <__mcmp>
 800a7f2:	1e05      	subs	r5, r0, #0
 800a7f4:	d110      	bne.n	800a818 <__mdiff+0x38>
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f7ff fd59 	bl	800a2b0 <_Balloc>
 800a7fe:	b930      	cbnz	r0, 800a80e <__mdiff+0x2e>
 800a800:	4b3a      	ldr	r3, [pc, #232]	; (800a8ec <__mdiff+0x10c>)
 800a802:	4602      	mov	r2, r0
 800a804:	f240 2137 	movw	r1, #567	; 0x237
 800a808:	4839      	ldr	r0, [pc, #228]	; (800a8f0 <__mdiff+0x110>)
 800a80a:	f000 fb0b 	bl	800ae24 <__assert_func>
 800a80e:	2301      	movs	r3, #1
 800a810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a818:	bfa4      	itt	ge
 800a81a:	4643      	movge	r3, r8
 800a81c:	46a0      	movge	r8, r4
 800a81e:	4630      	mov	r0, r6
 800a820:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a824:	bfa6      	itte	ge
 800a826:	461c      	movge	r4, r3
 800a828:	2500      	movge	r5, #0
 800a82a:	2501      	movlt	r5, #1
 800a82c:	f7ff fd40 	bl	800a2b0 <_Balloc>
 800a830:	b920      	cbnz	r0, 800a83c <__mdiff+0x5c>
 800a832:	4b2e      	ldr	r3, [pc, #184]	; (800a8ec <__mdiff+0x10c>)
 800a834:	4602      	mov	r2, r0
 800a836:	f240 2145 	movw	r1, #581	; 0x245
 800a83a:	e7e5      	b.n	800a808 <__mdiff+0x28>
 800a83c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a840:	6926      	ldr	r6, [r4, #16]
 800a842:	60c5      	str	r5, [r0, #12]
 800a844:	f104 0914 	add.w	r9, r4, #20
 800a848:	f108 0514 	add.w	r5, r8, #20
 800a84c:	f100 0e14 	add.w	lr, r0, #20
 800a850:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a854:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a858:	f108 0210 	add.w	r2, r8, #16
 800a85c:	46f2      	mov	sl, lr
 800a85e:	2100      	movs	r1, #0
 800a860:	f859 3b04 	ldr.w	r3, [r9], #4
 800a864:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a868:	fa11 f88b 	uxtah	r8, r1, fp
 800a86c:	b299      	uxth	r1, r3
 800a86e:	0c1b      	lsrs	r3, r3, #16
 800a870:	eba8 0801 	sub.w	r8, r8, r1
 800a874:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a878:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a87c:	fa1f f888 	uxth.w	r8, r8
 800a880:	1419      	asrs	r1, r3, #16
 800a882:	454e      	cmp	r6, r9
 800a884:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a888:	f84a 3b04 	str.w	r3, [sl], #4
 800a88c:	d8e8      	bhi.n	800a860 <__mdiff+0x80>
 800a88e:	1b33      	subs	r3, r6, r4
 800a890:	3b15      	subs	r3, #21
 800a892:	f023 0303 	bic.w	r3, r3, #3
 800a896:	3304      	adds	r3, #4
 800a898:	3415      	adds	r4, #21
 800a89a:	42a6      	cmp	r6, r4
 800a89c:	bf38      	it	cc
 800a89e:	2304      	movcc	r3, #4
 800a8a0:	441d      	add	r5, r3
 800a8a2:	4473      	add	r3, lr
 800a8a4:	469e      	mov	lr, r3
 800a8a6:	462e      	mov	r6, r5
 800a8a8:	4566      	cmp	r6, ip
 800a8aa:	d30e      	bcc.n	800a8ca <__mdiff+0xea>
 800a8ac:	f10c 0203 	add.w	r2, ip, #3
 800a8b0:	1b52      	subs	r2, r2, r5
 800a8b2:	f022 0203 	bic.w	r2, r2, #3
 800a8b6:	3d03      	subs	r5, #3
 800a8b8:	45ac      	cmp	ip, r5
 800a8ba:	bf38      	it	cc
 800a8bc:	2200      	movcc	r2, #0
 800a8be:	4413      	add	r3, r2
 800a8c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a8c4:	b17a      	cbz	r2, 800a8e6 <__mdiff+0x106>
 800a8c6:	6107      	str	r7, [r0, #16]
 800a8c8:	e7a4      	b.n	800a814 <__mdiff+0x34>
 800a8ca:	f856 8b04 	ldr.w	r8, [r6], #4
 800a8ce:	fa11 f288 	uxtah	r2, r1, r8
 800a8d2:	1414      	asrs	r4, r2, #16
 800a8d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a8d8:	b292      	uxth	r2, r2
 800a8da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a8de:	f84e 2b04 	str.w	r2, [lr], #4
 800a8e2:	1421      	asrs	r1, r4, #16
 800a8e4:	e7e0      	b.n	800a8a8 <__mdiff+0xc8>
 800a8e6:	3f01      	subs	r7, #1
 800a8e8:	e7ea      	b.n	800a8c0 <__mdiff+0xe0>
 800a8ea:	bf00      	nop
 800a8ec:	0800b968 	.word	0x0800b968
 800a8f0:	0800b979 	.word	0x0800b979

0800a8f4 <__d2b>:
 800a8f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	2101      	movs	r1, #1
 800a8fc:	ec59 8b10 	vmov	r8, r9, d0
 800a900:	4616      	mov	r6, r2
 800a902:	f7ff fcd5 	bl	800a2b0 <_Balloc>
 800a906:	4604      	mov	r4, r0
 800a908:	b930      	cbnz	r0, 800a918 <__d2b+0x24>
 800a90a:	4602      	mov	r2, r0
 800a90c:	4b24      	ldr	r3, [pc, #144]	; (800a9a0 <__d2b+0xac>)
 800a90e:	4825      	ldr	r0, [pc, #148]	; (800a9a4 <__d2b+0xb0>)
 800a910:	f240 310f 	movw	r1, #783	; 0x30f
 800a914:	f000 fa86 	bl	800ae24 <__assert_func>
 800a918:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a91c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a920:	bb2d      	cbnz	r5, 800a96e <__d2b+0x7a>
 800a922:	9301      	str	r3, [sp, #4]
 800a924:	f1b8 0300 	subs.w	r3, r8, #0
 800a928:	d026      	beq.n	800a978 <__d2b+0x84>
 800a92a:	4668      	mov	r0, sp
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	f7ff fd87 	bl	800a440 <__lo0bits>
 800a932:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a936:	b1e8      	cbz	r0, 800a974 <__d2b+0x80>
 800a938:	f1c0 0320 	rsb	r3, r0, #32
 800a93c:	fa02 f303 	lsl.w	r3, r2, r3
 800a940:	430b      	orrs	r3, r1
 800a942:	40c2      	lsrs	r2, r0
 800a944:	6163      	str	r3, [r4, #20]
 800a946:	9201      	str	r2, [sp, #4]
 800a948:	9b01      	ldr	r3, [sp, #4]
 800a94a:	61a3      	str	r3, [r4, #24]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bf14      	ite	ne
 800a950:	2202      	movne	r2, #2
 800a952:	2201      	moveq	r2, #1
 800a954:	6122      	str	r2, [r4, #16]
 800a956:	b1bd      	cbz	r5, 800a988 <__d2b+0x94>
 800a958:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a95c:	4405      	add	r5, r0
 800a95e:	603d      	str	r5, [r7, #0]
 800a960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a964:	6030      	str	r0, [r6, #0]
 800a966:	4620      	mov	r0, r4
 800a968:	b003      	add	sp, #12
 800a96a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a96e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a972:	e7d6      	b.n	800a922 <__d2b+0x2e>
 800a974:	6161      	str	r1, [r4, #20]
 800a976:	e7e7      	b.n	800a948 <__d2b+0x54>
 800a978:	a801      	add	r0, sp, #4
 800a97a:	f7ff fd61 	bl	800a440 <__lo0bits>
 800a97e:	9b01      	ldr	r3, [sp, #4]
 800a980:	6163      	str	r3, [r4, #20]
 800a982:	3020      	adds	r0, #32
 800a984:	2201      	movs	r2, #1
 800a986:	e7e5      	b.n	800a954 <__d2b+0x60>
 800a988:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a98c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a990:	6038      	str	r0, [r7, #0]
 800a992:	6918      	ldr	r0, [r3, #16]
 800a994:	f7ff fd34 	bl	800a400 <__hi0bits>
 800a998:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a99c:	e7e2      	b.n	800a964 <__d2b+0x70>
 800a99e:	bf00      	nop
 800a9a0:	0800b968 	.word	0x0800b968
 800a9a4:	0800b979 	.word	0x0800b979

0800a9a8 <__ssputs_r>:
 800a9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ac:	688e      	ldr	r6, [r1, #8]
 800a9ae:	461f      	mov	r7, r3
 800a9b0:	42be      	cmp	r6, r7
 800a9b2:	680b      	ldr	r3, [r1, #0]
 800a9b4:	4682      	mov	sl, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	4690      	mov	r8, r2
 800a9ba:	d82c      	bhi.n	800aa16 <__ssputs_r+0x6e>
 800a9bc:	898a      	ldrh	r2, [r1, #12]
 800a9be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9c2:	d026      	beq.n	800aa12 <__ssputs_r+0x6a>
 800a9c4:	6965      	ldr	r5, [r4, #20]
 800a9c6:	6909      	ldr	r1, [r1, #16]
 800a9c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9cc:	eba3 0901 	sub.w	r9, r3, r1
 800a9d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9d4:	1c7b      	adds	r3, r7, #1
 800a9d6:	444b      	add	r3, r9
 800a9d8:	106d      	asrs	r5, r5, #1
 800a9da:	429d      	cmp	r5, r3
 800a9dc:	bf38      	it	cc
 800a9de:	461d      	movcc	r5, r3
 800a9e0:	0553      	lsls	r3, r2, #21
 800a9e2:	d527      	bpl.n	800aa34 <__ssputs_r+0x8c>
 800a9e4:	4629      	mov	r1, r5
 800a9e6:	f7ff fbd7 	bl	800a198 <_malloc_r>
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	b360      	cbz	r0, 800aa48 <__ssputs_r+0xa0>
 800a9ee:	6921      	ldr	r1, [r4, #16]
 800a9f0:	464a      	mov	r2, r9
 800a9f2:	f000 fa09 	bl	800ae08 <memcpy>
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa00:	81a3      	strh	r3, [r4, #12]
 800aa02:	6126      	str	r6, [r4, #16]
 800aa04:	6165      	str	r5, [r4, #20]
 800aa06:	444e      	add	r6, r9
 800aa08:	eba5 0509 	sub.w	r5, r5, r9
 800aa0c:	6026      	str	r6, [r4, #0]
 800aa0e:	60a5      	str	r5, [r4, #8]
 800aa10:	463e      	mov	r6, r7
 800aa12:	42be      	cmp	r6, r7
 800aa14:	d900      	bls.n	800aa18 <__ssputs_r+0x70>
 800aa16:	463e      	mov	r6, r7
 800aa18:	6820      	ldr	r0, [r4, #0]
 800aa1a:	4632      	mov	r2, r6
 800aa1c:	4641      	mov	r1, r8
 800aa1e:	f000 f9c9 	bl	800adb4 <memmove>
 800aa22:	68a3      	ldr	r3, [r4, #8]
 800aa24:	1b9b      	subs	r3, r3, r6
 800aa26:	60a3      	str	r3, [r4, #8]
 800aa28:	6823      	ldr	r3, [r4, #0]
 800aa2a:	4433      	add	r3, r6
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	2000      	movs	r0, #0
 800aa30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa34:	462a      	mov	r2, r5
 800aa36:	f000 fa3b 	bl	800aeb0 <_realloc_r>
 800aa3a:	4606      	mov	r6, r0
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	d1e0      	bne.n	800aa02 <__ssputs_r+0x5a>
 800aa40:	6921      	ldr	r1, [r4, #16]
 800aa42:	4650      	mov	r0, sl
 800aa44:	f7ff fb34 	bl	800a0b0 <_free_r>
 800aa48:	230c      	movs	r3, #12
 800aa4a:	f8ca 3000 	str.w	r3, [sl]
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa54:	81a3      	strh	r3, [r4, #12]
 800aa56:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5a:	e7e9      	b.n	800aa30 <__ssputs_r+0x88>

0800aa5c <_svfiprintf_r>:
 800aa5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa60:	4698      	mov	r8, r3
 800aa62:	898b      	ldrh	r3, [r1, #12]
 800aa64:	061b      	lsls	r3, r3, #24
 800aa66:	b09d      	sub	sp, #116	; 0x74
 800aa68:	4607      	mov	r7, r0
 800aa6a:	460d      	mov	r5, r1
 800aa6c:	4614      	mov	r4, r2
 800aa6e:	d50e      	bpl.n	800aa8e <_svfiprintf_r+0x32>
 800aa70:	690b      	ldr	r3, [r1, #16]
 800aa72:	b963      	cbnz	r3, 800aa8e <_svfiprintf_r+0x32>
 800aa74:	2140      	movs	r1, #64	; 0x40
 800aa76:	f7ff fb8f 	bl	800a198 <_malloc_r>
 800aa7a:	6028      	str	r0, [r5, #0]
 800aa7c:	6128      	str	r0, [r5, #16]
 800aa7e:	b920      	cbnz	r0, 800aa8a <_svfiprintf_r+0x2e>
 800aa80:	230c      	movs	r3, #12
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	f04f 30ff 	mov.w	r0, #4294967295
 800aa88:	e0d0      	b.n	800ac2c <_svfiprintf_r+0x1d0>
 800aa8a:	2340      	movs	r3, #64	; 0x40
 800aa8c:	616b      	str	r3, [r5, #20]
 800aa8e:	2300      	movs	r3, #0
 800aa90:	9309      	str	r3, [sp, #36]	; 0x24
 800aa92:	2320      	movs	r3, #32
 800aa94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa98:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa9c:	2330      	movs	r3, #48	; 0x30
 800aa9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac44 <_svfiprintf_r+0x1e8>
 800aaa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aaa6:	f04f 0901 	mov.w	r9, #1
 800aaaa:	4623      	mov	r3, r4
 800aaac:	469a      	mov	sl, r3
 800aaae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aab2:	b10a      	cbz	r2, 800aab8 <_svfiprintf_r+0x5c>
 800aab4:	2a25      	cmp	r2, #37	; 0x25
 800aab6:	d1f9      	bne.n	800aaac <_svfiprintf_r+0x50>
 800aab8:	ebba 0b04 	subs.w	fp, sl, r4
 800aabc:	d00b      	beq.n	800aad6 <_svfiprintf_r+0x7a>
 800aabe:	465b      	mov	r3, fp
 800aac0:	4622      	mov	r2, r4
 800aac2:	4629      	mov	r1, r5
 800aac4:	4638      	mov	r0, r7
 800aac6:	f7ff ff6f 	bl	800a9a8 <__ssputs_r>
 800aaca:	3001      	adds	r0, #1
 800aacc:	f000 80a9 	beq.w	800ac22 <_svfiprintf_r+0x1c6>
 800aad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aad2:	445a      	add	r2, fp
 800aad4:	9209      	str	r2, [sp, #36]	; 0x24
 800aad6:	f89a 3000 	ldrb.w	r3, [sl]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f000 80a1 	beq.w	800ac22 <_svfiprintf_r+0x1c6>
 800aae0:	2300      	movs	r3, #0
 800aae2:	f04f 32ff 	mov.w	r2, #4294967295
 800aae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aaea:	f10a 0a01 	add.w	sl, sl, #1
 800aaee:	9304      	str	r3, [sp, #16]
 800aaf0:	9307      	str	r3, [sp, #28]
 800aaf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaf6:	931a      	str	r3, [sp, #104]	; 0x68
 800aaf8:	4654      	mov	r4, sl
 800aafa:	2205      	movs	r2, #5
 800aafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab00:	4850      	ldr	r0, [pc, #320]	; (800ac44 <_svfiprintf_r+0x1e8>)
 800ab02:	f7f5 fb9d 	bl	8000240 <memchr>
 800ab06:	9a04      	ldr	r2, [sp, #16]
 800ab08:	b9d8      	cbnz	r0, 800ab42 <_svfiprintf_r+0xe6>
 800ab0a:	06d0      	lsls	r0, r2, #27
 800ab0c:	bf44      	itt	mi
 800ab0e:	2320      	movmi	r3, #32
 800ab10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab14:	0711      	lsls	r1, r2, #28
 800ab16:	bf44      	itt	mi
 800ab18:	232b      	movmi	r3, #43	; 0x2b
 800ab1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab22:	2b2a      	cmp	r3, #42	; 0x2a
 800ab24:	d015      	beq.n	800ab52 <_svfiprintf_r+0xf6>
 800ab26:	9a07      	ldr	r2, [sp, #28]
 800ab28:	4654      	mov	r4, sl
 800ab2a:	2000      	movs	r0, #0
 800ab2c:	f04f 0c0a 	mov.w	ip, #10
 800ab30:	4621      	mov	r1, r4
 800ab32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab36:	3b30      	subs	r3, #48	; 0x30
 800ab38:	2b09      	cmp	r3, #9
 800ab3a:	d94d      	bls.n	800abd8 <_svfiprintf_r+0x17c>
 800ab3c:	b1b0      	cbz	r0, 800ab6c <_svfiprintf_r+0x110>
 800ab3e:	9207      	str	r2, [sp, #28]
 800ab40:	e014      	b.n	800ab6c <_svfiprintf_r+0x110>
 800ab42:	eba0 0308 	sub.w	r3, r0, r8
 800ab46:	fa09 f303 	lsl.w	r3, r9, r3
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	9304      	str	r3, [sp, #16]
 800ab4e:	46a2      	mov	sl, r4
 800ab50:	e7d2      	b.n	800aaf8 <_svfiprintf_r+0x9c>
 800ab52:	9b03      	ldr	r3, [sp, #12]
 800ab54:	1d19      	adds	r1, r3, #4
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	9103      	str	r1, [sp, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	bfbb      	ittet	lt
 800ab5e:	425b      	neglt	r3, r3
 800ab60:	f042 0202 	orrlt.w	r2, r2, #2
 800ab64:	9307      	strge	r3, [sp, #28]
 800ab66:	9307      	strlt	r3, [sp, #28]
 800ab68:	bfb8      	it	lt
 800ab6a:	9204      	strlt	r2, [sp, #16]
 800ab6c:	7823      	ldrb	r3, [r4, #0]
 800ab6e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab70:	d10c      	bne.n	800ab8c <_svfiprintf_r+0x130>
 800ab72:	7863      	ldrb	r3, [r4, #1]
 800ab74:	2b2a      	cmp	r3, #42	; 0x2a
 800ab76:	d134      	bne.n	800abe2 <_svfiprintf_r+0x186>
 800ab78:	9b03      	ldr	r3, [sp, #12]
 800ab7a:	1d1a      	adds	r2, r3, #4
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	9203      	str	r2, [sp, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	bfb8      	it	lt
 800ab84:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab88:	3402      	adds	r4, #2
 800ab8a:	9305      	str	r3, [sp, #20]
 800ab8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac54 <_svfiprintf_r+0x1f8>
 800ab90:	7821      	ldrb	r1, [r4, #0]
 800ab92:	2203      	movs	r2, #3
 800ab94:	4650      	mov	r0, sl
 800ab96:	f7f5 fb53 	bl	8000240 <memchr>
 800ab9a:	b138      	cbz	r0, 800abac <_svfiprintf_r+0x150>
 800ab9c:	9b04      	ldr	r3, [sp, #16]
 800ab9e:	eba0 000a 	sub.w	r0, r0, sl
 800aba2:	2240      	movs	r2, #64	; 0x40
 800aba4:	4082      	lsls	r2, r0
 800aba6:	4313      	orrs	r3, r2
 800aba8:	3401      	adds	r4, #1
 800abaa:	9304      	str	r3, [sp, #16]
 800abac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abb0:	4825      	ldr	r0, [pc, #148]	; (800ac48 <_svfiprintf_r+0x1ec>)
 800abb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abb6:	2206      	movs	r2, #6
 800abb8:	f7f5 fb42 	bl	8000240 <memchr>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d038      	beq.n	800ac32 <_svfiprintf_r+0x1d6>
 800abc0:	4b22      	ldr	r3, [pc, #136]	; (800ac4c <_svfiprintf_r+0x1f0>)
 800abc2:	bb1b      	cbnz	r3, 800ac0c <_svfiprintf_r+0x1b0>
 800abc4:	9b03      	ldr	r3, [sp, #12]
 800abc6:	3307      	adds	r3, #7
 800abc8:	f023 0307 	bic.w	r3, r3, #7
 800abcc:	3308      	adds	r3, #8
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abd2:	4433      	add	r3, r6
 800abd4:	9309      	str	r3, [sp, #36]	; 0x24
 800abd6:	e768      	b.n	800aaaa <_svfiprintf_r+0x4e>
 800abd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800abdc:	460c      	mov	r4, r1
 800abde:	2001      	movs	r0, #1
 800abe0:	e7a6      	b.n	800ab30 <_svfiprintf_r+0xd4>
 800abe2:	2300      	movs	r3, #0
 800abe4:	3401      	adds	r4, #1
 800abe6:	9305      	str	r3, [sp, #20]
 800abe8:	4619      	mov	r1, r3
 800abea:	f04f 0c0a 	mov.w	ip, #10
 800abee:	4620      	mov	r0, r4
 800abf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800abf4:	3a30      	subs	r2, #48	; 0x30
 800abf6:	2a09      	cmp	r2, #9
 800abf8:	d903      	bls.n	800ac02 <_svfiprintf_r+0x1a6>
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0c6      	beq.n	800ab8c <_svfiprintf_r+0x130>
 800abfe:	9105      	str	r1, [sp, #20]
 800ac00:	e7c4      	b.n	800ab8c <_svfiprintf_r+0x130>
 800ac02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac06:	4604      	mov	r4, r0
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e7f0      	b.n	800abee <_svfiprintf_r+0x192>
 800ac0c:	ab03      	add	r3, sp, #12
 800ac0e:	9300      	str	r3, [sp, #0]
 800ac10:	462a      	mov	r2, r5
 800ac12:	4b0f      	ldr	r3, [pc, #60]	; (800ac50 <_svfiprintf_r+0x1f4>)
 800ac14:	a904      	add	r1, sp, #16
 800ac16:	4638      	mov	r0, r7
 800ac18:	f7fd fed2 	bl	80089c0 <_printf_float>
 800ac1c:	1c42      	adds	r2, r0, #1
 800ac1e:	4606      	mov	r6, r0
 800ac20:	d1d6      	bne.n	800abd0 <_svfiprintf_r+0x174>
 800ac22:	89ab      	ldrh	r3, [r5, #12]
 800ac24:	065b      	lsls	r3, r3, #25
 800ac26:	f53f af2d 	bmi.w	800aa84 <_svfiprintf_r+0x28>
 800ac2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac2c:	b01d      	add	sp, #116	; 0x74
 800ac2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac32:	ab03      	add	r3, sp, #12
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	462a      	mov	r2, r5
 800ac38:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <_svfiprintf_r+0x1f4>)
 800ac3a:	a904      	add	r1, sp, #16
 800ac3c:	4638      	mov	r0, r7
 800ac3e:	f7fe f947 	bl	8008ed0 <_printf_i>
 800ac42:	e7eb      	b.n	800ac1c <_svfiprintf_r+0x1c0>
 800ac44:	0800bad4 	.word	0x0800bad4
 800ac48:	0800bade 	.word	0x0800bade
 800ac4c:	080089c1 	.word	0x080089c1
 800ac50:	0800a9a9 	.word	0x0800a9a9
 800ac54:	0800bada 	.word	0x0800bada

0800ac58 <__sflush_r>:
 800ac58:	898a      	ldrh	r2, [r1, #12]
 800ac5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	4605      	mov	r5, r0
 800ac60:	0710      	lsls	r0, r2, #28
 800ac62:	460c      	mov	r4, r1
 800ac64:	d458      	bmi.n	800ad18 <__sflush_r+0xc0>
 800ac66:	684b      	ldr	r3, [r1, #4]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dc05      	bgt.n	800ac78 <__sflush_r+0x20>
 800ac6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	dc02      	bgt.n	800ac78 <__sflush_r+0x20>
 800ac72:	2000      	movs	r0, #0
 800ac74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac7a:	2e00      	cmp	r6, #0
 800ac7c:	d0f9      	beq.n	800ac72 <__sflush_r+0x1a>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac84:	682f      	ldr	r7, [r5, #0]
 800ac86:	6a21      	ldr	r1, [r4, #32]
 800ac88:	602b      	str	r3, [r5, #0]
 800ac8a:	d032      	beq.n	800acf2 <__sflush_r+0x9a>
 800ac8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac8e:	89a3      	ldrh	r3, [r4, #12]
 800ac90:	075a      	lsls	r2, r3, #29
 800ac92:	d505      	bpl.n	800aca0 <__sflush_r+0x48>
 800ac94:	6863      	ldr	r3, [r4, #4]
 800ac96:	1ac0      	subs	r0, r0, r3
 800ac98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac9a:	b10b      	cbz	r3, 800aca0 <__sflush_r+0x48>
 800ac9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac9e:	1ac0      	subs	r0, r0, r3
 800aca0:	2300      	movs	r3, #0
 800aca2:	4602      	mov	r2, r0
 800aca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aca6:	6a21      	ldr	r1, [r4, #32]
 800aca8:	4628      	mov	r0, r5
 800acaa:	47b0      	blx	r6
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	89a3      	ldrh	r3, [r4, #12]
 800acb0:	d106      	bne.n	800acc0 <__sflush_r+0x68>
 800acb2:	6829      	ldr	r1, [r5, #0]
 800acb4:	291d      	cmp	r1, #29
 800acb6:	d82b      	bhi.n	800ad10 <__sflush_r+0xb8>
 800acb8:	4a29      	ldr	r2, [pc, #164]	; (800ad60 <__sflush_r+0x108>)
 800acba:	410a      	asrs	r2, r1
 800acbc:	07d6      	lsls	r6, r2, #31
 800acbe:	d427      	bmi.n	800ad10 <__sflush_r+0xb8>
 800acc0:	2200      	movs	r2, #0
 800acc2:	6062      	str	r2, [r4, #4]
 800acc4:	04d9      	lsls	r1, r3, #19
 800acc6:	6922      	ldr	r2, [r4, #16]
 800acc8:	6022      	str	r2, [r4, #0]
 800acca:	d504      	bpl.n	800acd6 <__sflush_r+0x7e>
 800accc:	1c42      	adds	r2, r0, #1
 800acce:	d101      	bne.n	800acd4 <__sflush_r+0x7c>
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	b903      	cbnz	r3, 800acd6 <__sflush_r+0x7e>
 800acd4:	6560      	str	r0, [r4, #84]	; 0x54
 800acd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acd8:	602f      	str	r7, [r5, #0]
 800acda:	2900      	cmp	r1, #0
 800acdc:	d0c9      	beq.n	800ac72 <__sflush_r+0x1a>
 800acde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ace2:	4299      	cmp	r1, r3
 800ace4:	d002      	beq.n	800acec <__sflush_r+0x94>
 800ace6:	4628      	mov	r0, r5
 800ace8:	f7ff f9e2 	bl	800a0b0 <_free_r>
 800acec:	2000      	movs	r0, #0
 800acee:	6360      	str	r0, [r4, #52]	; 0x34
 800acf0:	e7c0      	b.n	800ac74 <__sflush_r+0x1c>
 800acf2:	2301      	movs	r3, #1
 800acf4:	4628      	mov	r0, r5
 800acf6:	47b0      	blx	r6
 800acf8:	1c41      	adds	r1, r0, #1
 800acfa:	d1c8      	bne.n	800ac8e <__sflush_r+0x36>
 800acfc:	682b      	ldr	r3, [r5, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d0c5      	beq.n	800ac8e <__sflush_r+0x36>
 800ad02:	2b1d      	cmp	r3, #29
 800ad04:	d001      	beq.n	800ad0a <__sflush_r+0xb2>
 800ad06:	2b16      	cmp	r3, #22
 800ad08:	d101      	bne.n	800ad0e <__sflush_r+0xb6>
 800ad0a:	602f      	str	r7, [r5, #0]
 800ad0c:	e7b1      	b.n	800ac72 <__sflush_r+0x1a>
 800ad0e:	89a3      	ldrh	r3, [r4, #12]
 800ad10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad14:	81a3      	strh	r3, [r4, #12]
 800ad16:	e7ad      	b.n	800ac74 <__sflush_r+0x1c>
 800ad18:	690f      	ldr	r7, [r1, #16]
 800ad1a:	2f00      	cmp	r7, #0
 800ad1c:	d0a9      	beq.n	800ac72 <__sflush_r+0x1a>
 800ad1e:	0793      	lsls	r3, r2, #30
 800ad20:	680e      	ldr	r6, [r1, #0]
 800ad22:	bf08      	it	eq
 800ad24:	694b      	ldreq	r3, [r1, #20]
 800ad26:	600f      	str	r7, [r1, #0]
 800ad28:	bf18      	it	ne
 800ad2a:	2300      	movne	r3, #0
 800ad2c:	eba6 0807 	sub.w	r8, r6, r7
 800ad30:	608b      	str	r3, [r1, #8]
 800ad32:	f1b8 0f00 	cmp.w	r8, #0
 800ad36:	dd9c      	ble.n	800ac72 <__sflush_r+0x1a>
 800ad38:	6a21      	ldr	r1, [r4, #32]
 800ad3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad3c:	4643      	mov	r3, r8
 800ad3e:	463a      	mov	r2, r7
 800ad40:	4628      	mov	r0, r5
 800ad42:	47b0      	blx	r6
 800ad44:	2800      	cmp	r0, #0
 800ad46:	dc06      	bgt.n	800ad56 <__sflush_r+0xfe>
 800ad48:	89a3      	ldrh	r3, [r4, #12]
 800ad4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad4e:	81a3      	strh	r3, [r4, #12]
 800ad50:	f04f 30ff 	mov.w	r0, #4294967295
 800ad54:	e78e      	b.n	800ac74 <__sflush_r+0x1c>
 800ad56:	4407      	add	r7, r0
 800ad58:	eba8 0800 	sub.w	r8, r8, r0
 800ad5c:	e7e9      	b.n	800ad32 <__sflush_r+0xda>
 800ad5e:	bf00      	nop
 800ad60:	dfbffffe 	.word	0xdfbffffe

0800ad64 <_fflush_r>:
 800ad64:	b538      	push	{r3, r4, r5, lr}
 800ad66:	690b      	ldr	r3, [r1, #16]
 800ad68:	4605      	mov	r5, r0
 800ad6a:	460c      	mov	r4, r1
 800ad6c:	b913      	cbnz	r3, 800ad74 <_fflush_r+0x10>
 800ad6e:	2500      	movs	r5, #0
 800ad70:	4628      	mov	r0, r5
 800ad72:	bd38      	pop	{r3, r4, r5, pc}
 800ad74:	b118      	cbz	r0, 800ad7e <_fflush_r+0x1a>
 800ad76:	6a03      	ldr	r3, [r0, #32]
 800ad78:	b90b      	cbnz	r3, 800ad7e <_fflush_r+0x1a>
 800ad7a:	f7fe fa57 	bl	800922c <__sinit>
 800ad7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d0f3      	beq.n	800ad6e <_fflush_r+0xa>
 800ad86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad88:	07d0      	lsls	r0, r2, #31
 800ad8a:	d404      	bmi.n	800ad96 <_fflush_r+0x32>
 800ad8c:	0599      	lsls	r1, r3, #22
 800ad8e:	d402      	bmi.n	800ad96 <_fflush_r+0x32>
 800ad90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad92:	f7fe fb96 	bl	80094c2 <__retarget_lock_acquire_recursive>
 800ad96:	4628      	mov	r0, r5
 800ad98:	4621      	mov	r1, r4
 800ad9a:	f7ff ff5d 	bl	800ac58 <__sflush_r>
 800ad9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ada0:	07da      	lsls	r2, r3, #31
 800ada2:	4605      	mov	r5, r0
 800ada4:	d4e4      	bmi.n	800ad70 <_fflush_r+0xc>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	059b      	lsls	r3, r3, #22
 800adaa:	d4e1      	bmi.n	800ad70 <_fflush_r+0xc>
 800adac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adae:	f7fe fb89 	bl	80094c4 <__retarget_lock_release_recursive>
 800adb2:	e7dd      	b.n	800ad70 <_fflush_r+0xc>

0800adb4 <memmove>:
 800adb4:	4288      	cmp	r0, r1
 800adb6:	b510      	push	{r4, lr}
 800adb8:	eb01 0402 	add.w	r4, r1, r2
 800adbc:	d902      	bls.n	800adc4 <memmove+0x10>
 800adbe:	4284      	cmp	r4, r0
 800adc0:	4623      	mov	r3, r4
 800adc2:	d807      	bhi.n	800add4 <memmove+0x20>
 800adc4:	1e43      	subs	r3, r0, #1
 800adc6:	42a1      	cmp	r1, r4
 800adc8:	d008      	beq.n	800addc <memmove+0x28>
 800adca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800add2:	e7f8      	b.n	800adc6 <memmove+0x12>
 800add4:	4402      	add	r2, r0
 800add6:	4601      	mov	r1, r0
 800add8:	428a      	cmp	r2, r1
 800adda:	d100      	bne.n	800adde <memmove+0x2a>
 800addc:	bd10      	pop	{r4, pc}
 800adde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ade2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ade6:	e7f7      	b.n	800add8 <memmove+0x24>

0800ade8 <_sbrk_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4d06      	ldr	r5, [pc, #24]	; (800ae04 <_sbrk_r+0x1c>)
 800adec:	2300      	movs	r3, #0
 800adee:	4604      	mov	r4, r0
 800adf0:	4608      	mov	r0, r1
 800adf2:	602b      	str	r3, [r5, #0]
 800adf4:	f7f8 f8e0 	bl	8002fb8 <_sbrk>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d102      	bne.n	800ae02 <_sbrk_r+0x1a>
 800adfc:	682b      	ldr	r3, [r5, #0]
 800adfe:	b103      	cbz	r3, 800ae02 <_sbrk_r+0x1a>
 800ae00:	6023      	str	r3, [r4, #0]
 800ae02:	bd38      	pop	{r3, r4, r5, pc}
 800ae04:	200007f4 	.word	0x200007f4

0800ae08 <memcpy>:
 800ae08:	440a      	add	r2, r1
 800ae0a:	4291      	cmp	r1, r2
 800ae0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae10:	d100      	bne.n	800ae14 <memcpy+0xc>
 800ae12:	4770      	bx	lr
 800ae14:	b510      	push	{r4, lr}
 800ae16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae1e:	4291      	cmp	r1, r2
 800ae20:	d1f9      	bne.n	800ae16 <memcpy+0xe>
 800ae22:	bd10      	pop	{r4, pc}

0800ae24 <__assert_func>:
 800ae24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae26:	4614      	mov	r4, r2
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4b09      	ldr	r3, [pc, #36]	; (800ae50 <__assert_func+0x2c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4605      	mov	r5, r0
 800ae30:	68d8      	ldr	r0, [r3, #12]
 800ae32:	b14c      	cbz	r4, 800ae48 <__assert_func+0x24>
 800ae34:	4b07      	ldr	r3, [pc, #28]	; (800ae54 <__assert_func+0x30>)
 800ae36:	9100      	str	r1, [sp, #0]
 800ae38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae3c:	4906      	ldr	r1, [pc, #24]	; (800ae58 <__assert_func+0x34>)
 800ae3e:	462b      	mov	r3, r5
 800ae40:	f000 f872 	bl	800af28 <fiprintf>
 800ae44:	f000 f882 	bl	800af4c <abort>
 800ae48:	4b04      	ldr	r3, [pc, #16]	; (800ae5c <__assert_func+0x38>)
 800ae4a:	461c      	mov	r4, r3
 800ae4c:	e7f3      	b.n	800ae36 <__assert_func+0x12>
 800ae4e:	bf00      	nop
 800ae50:	200000d8 	.word	0x200000d8
 800ae54:	0800baef 	.word	0x0800baef
 800ae58:	0800bafc 	.word	0x0800bafc
 800ae5c:	0800bb2a 	.word	0x0800bb2a

0800ae60 <_calloc_r>:
 800ae60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae62:	fba1 2402 	umull	r2, r4, r1, r2
 800ae66:	b94c      	cbnz	r4, 800ae7c <_calloc_r+0x1c>
 800ae68:	4611      	mov	r1, r2
 800ae6a:	9201      	str	r2, [sp, #4]
 800ae6c:	f7ff f994 	bl	800a198 <_malloc_r>
 800ae70:	9a01      	ldr	r2, [sp, #4]
 800ae72:	4605      	mov	r5, r0
 800ae74:	b930      	cbnz	r0, 800ae84 <_calloc_r+0x24>
 800ae76:	4628      	mov	r0, r5
 800ae78:	b003      	add	sp, #12
 800ae7a:	bd30      	pop	{r4, r5, pc}
 800ae7c:	220c      	movs	r2, #12
 800ae7e:	6002      	str	r2, [r0, #0]
 800ae80:	2500      	movs	r5, #0
 800ae82:	e7f8      	b.n	800ae76 <_calloc_r+0x16>
 800ae84:	4621      	mov	r1, r4
 800ae86:	f7fe fa9e 	bl	80093c6 <memset>
 800ae8a:	e7f4      	b.n	800ae76 <_calloc_r+0x16>

0800ae8c <__ascii_mbtowc>:
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	b901      	cbnz	r1, 800ae92 <__ascii_mbtowc+0x6>
 800ae90:	a901      	add	r1, sp, #4
 800ae92:	b142      	cbz	r2, 800aea6 <__ascii_mbtowc+0x1a>
 800ae94:	b14b      	cbz	r3, 800aeaa <__ascii_mbtowc+0x1e>
 800ae96:	7813      	ldrb	r3, [r2, #0]
 800ae98:	600b      	str	r3, [r1, #0]
 800ae9a:	7812      	ldrb	r2, [r2, #0]
 800ae9c:	1e10      	subs	r0, r2, #0
 800ae9e:	bf18      	it	ne
 800aea0:	2001      	movne	r0, #1
 800aea2:	b002      	add	sp, #8
 800aea4:	4770      	bx	lr
 800aea6:	4610      	mov	r0, r2
 800aea8:	e7fb      	b.n	800aea2 <__ascii_mbtowc+0x16>
 800aeaa:	f06f 0001 	mvn.w	r0, #1
 800aeae:	e7f8      	b.n	800aea2 <__ascii_mbtowc+0x16>

0800aeb0 <_realloc_r>:
 800aeb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	4614      	mov	r4, r2
 800aeb8:	460e      	mov	r6, r1
 800aeba:	b921      	cbnz	r1, 800aec6 <_realloc_r+0x16>
 800aebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aec0:	4611      	mov	r1, r2
 800aec2:	f7ff b969 	b.w	800a198 <_malloc_r>
 800aec6:	b92a      	cbnz	r2, 800aed4 <_realloc_r+0x24>
 800aec8:	f7ff f8f2 	bl	800a0b0 <_free_r>
 800aecc:	4625      	mov	r5, r4
 800aece:	4628      	mov	r0, r5
 800aed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aed4:	f000 f841 	bl	800af5a <_malloc_usable_size_r>
 800aed8:	4284      	cmp	r4, r0
 800aeda:	4607      	mov	r7, r0
 800aedc:	d802      	bhi.n	800aee4 <_realloc_r+0x34>
 800aede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aee2:	d812      	bhi.n	800af0a <_realloc_r+0x5a>
 800aee4:	4621      	mov	r1, r4
 800aee6:	4640      	mov	r0, r8
 800aee8:	f7ff f956 	bl	800a198 <_malloc_r>
 800aeec:	4605      	mov	r5, r0
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d0ed      	beq.n	800aece <_realloc_r+0x1e>
 800aef2:	42bc      	cmp	r4, r7
 800aef4:	4622      	mov	r2, r4
 800aef6:	4631      	mov	r1, r6
 800aef8:	bf28      	it	cs
 800aefa:	463a      	movcs	r2, r7
 800aefc:	f7ff ff84 	bl	800ae08 <memcpy>
 800af00:	4631      	mov	r1, r6
 800af02:	4640      	mov	r0, r8
 800af04:	f7ff f8d4 	bl	800a0b0 <_free_r>
 800af08:	e7e1      	b.n	800aece <_realloc_r+0x1e>
 800af0a:	4635      	mov	r5, r6
 800af0c:	e7df      	b.n	800aece <_realloc_r+0x1e>

0800af0e <__ascii_wctomb>:
 800af0e:	b149      	cbz	r1, 800af24 <__ascii_wctomb+0x16>
 800af10:	2aff      	cmp	r2, #255	; 0xff
 800af12:	bf85      	ittet	hi
 800af14:	238a      	movhi	r3, #138	; 0x8a
 800af16:	6003      	strhi	r3, [r0, #0]
 800af18:	700a      	strbls	r2, [r1, #0]
 800af1a:	f04f 30ff 	movhi.w	r0, #4294967295
 800af1e:	bf98      	it	ls
 800af20:	2001      	movls	r0, #1
 800af22:	4770      	bx	lr
 800af24:	4608      	mov	r0, r1
 800af26:	4770      	bx	lr

0800af28 <fiprintf>:
 800af28:	b40e      	push	{r1, r2, r3}
 800af2a:	b503      	push	{r0, r1, lr}
 800af2c:	4601      	mov	r1, r0
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	4805      	ldr	r0, [pc, #20]	; (800af48 <fiprintf+0x20>)
 800af32:	f853 2b04 	ldr.w	r2, [r3], #4
 800af36:	6800      	ldr	r0, [r0, #0]
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	f000 f83f 	bl	800afbc <_vfiprintf_r>
 800af3e:	b002      	add	sp, #8
 800af40:	f85d eb04 	ldr.w	lr, [sp], #4
 800af44:	b003      	add	sp, #12
 800af46:	4770      	bx	lr
 800af48:	200000d8 	.word	0x200000d8

0800af4c <abort>:
 800af4c:	b508      	push	{r3, lr}
 800af4e:	2006      	movs	r0, #6
 800af50:	f000 fa0c 	bl	800b36c <raise>
 800af54:	2001      	movs	r0, #1
 800af56:	f7f7 ffb7 	bl	8002ec8 <_exit>

0800af5a <_malloc_usable_size_r>:
 800af5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af5e:	1f18      	subs	r0, r3, #4
 800af60:	2b00      	cmp	r3, #0
 800af62:	bfbc      	itt	lt
 800af64:	580b      	ldrlt	r3, [r1, r0]
 800af66:	18c0      	addlt	r0, r0, r3
 800af68:	4770      	bx	lr

0800af6a <__sfputc_r>:
 800af6a:	6893      	ldr	r3, [r2, #8]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	b410      	push	{r4}
 800af72:	6093      	str	r3, [r2, #8]
 800af74:	da08      	bge.n	800af88 <__sfputc_r+0x1e>
 800af76:	6994      	ldr	r4, [r2, #24]
 800af78:	42a3      	cmp	r3, r4
 800af7a:	db01      	blt.n	800af80 <__sfputc_r+0x16>
 800af7c:	290a      	cmp	r1, #10
 800af7e:	d103      	bne.n	800af88 <__sfputc_r+0x1e>
 800af80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af84:	f000 b934 	b.w	800b1f0 <__swbuf_r>
 800af88:	6813      	ldr	r3, [r2, #0]
 800af8a:	1c58      	adds	r0, r3, #1
 800af8c:	6010      	str	r0, [r2, #0]
 800af8e:	7019      	strb	r1, [r3, #0]
 800af90:	4608      	mov	r0, r1
 800af92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <__sfputs_r>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	4606      	mov	r6, r0
 800af9c:	460f      	mov	r7, r1
 800af9e:	4614      	mov	r4, r2
 800afa0:	18d5      	adds	r5, r2, r3
 800afa2:	42ac      	cmp	r4, r5
 800afa4:	d101      	bne.n	800afaa <__sfputs_r+0x12>
 800afa6:	2000      	movs	r0, #0
 800afa8:	e007      	b.n	800afba <__sfputs_r+0x22>
 800afaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afae:	463a      	mov	r2, r7
 800afb0:	4630      	mov	r0, r6
 800afb2:	f7ff ffda 	bl	800af6a <__sfputc_r>
 800afb6:	1c43      	adds	r3, r0, #1
 800afb8:	d1f3      	bne.n	800afa2 <__sfputs_r+0xa>
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afbc <_vfiprintf_r>:
 800afbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc0:	460d      	mov	r5, r1
 800afc2:	b09d      	sub	sp, #116	; 0x74
 800afc4:	4614      	mov	r4, r2
 800afc6:	4698      	mov	r8, r3
 800afc8:	4606      	mov	r6, r0
 800afca:	b118      	cbz	r0, 800afd4 <_vfiprintf_r+0x18>
 800afcc:	6a03      	ldr	r3, [r0, #32]
 800afce:	b90b      	cbnz	r3, 800afd4 <_vfiprintf_r+0x18>
 800afd0:	f7fe f92c 	bl	800922c <__sinit>
 800afd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afd6:	07d9      	lsls	r1, r3, #31
 800afd8:	d405      	bmi.n	800afe6 <_vfiprintf_r+0x2a>
 800afda:	89ab      	ldrh	r3, [r5, #12]
 800afdc:	059a      	lsls	r2, r3, #22
 800afde:	d402      	bmi.n	800afe6 <_vfiprintf_r+0x2a>
 800afe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afe2:	f7fe fa6e 	bl	80094c2 <__retarget_lock_acquire_recursive>
 800afe6:	89ab      	ldrh	r3, [r5, #12]
 800afe8:	071b      	lsls	r3, r3, #28
 800afea:	d501      	bpl.n	800aff0 <_vfiprintf_r+0x34>
 800afec:	692b      	ldr	r3, [r5, #16]
 800afee:	b99b      	cbnz	r3, 800b018 <_vfiprintf_r+0x5c>
 800aff0:	4629      	mov	r1, r5
 800aff2:	4630      	mov	r0, r6
 800aff4:	f000 f93a 	bl	800b26c <__swsetup_r>
 800aff8:	b170      	cbz	r0, 800b018 <_vfiprintf_r+0x5c>
 800affa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800affc:	07dc      	lsls	r4, r3, #31
 800affe:	d504      	bpl.n	800b00a <_vfiprintf_r+0x4e>
 800b000:	f04f 30ff 	mov.w	r0, #4294967295
 800b004:	b01d      	add	sp, #116	; 0x74
 800b006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00a:	89ab      	ldrh	r3, [r5, #12]
 800b00c:	0598      	lsls	r0, r3, #22
 800b00e:	d4f7      	bmi.n	800b000 <_vfiprintf_r+0x44>
 800b010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b012:	f7fe fa57 	bl	80094c4 <__retarget_lock_release_recursive>
 800b016:	e7f3      	b.n	800b000 <_vfiprintf_r+0x44>
 800b018:	2300      	movs	r3, #0
 800b01a:	9309      	str	r3, [sp, #36]	; 0x24
 800b01c:	2320      	movs	r3, #32
 800b01e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b022:	f8cd 800c 	str.w	r8, [sp, #12]
 800b026:	2330      	movs	r3, #48	; 0x30
 800b028:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b1dc <_vfiprintf_r+0x220>
 800b02c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b030:	f04f 0901 	mov.w	r9, #1
 800b034:	4623      	mov	r3, r4
 800b036:	469a      	mov	sl, r3
 800b038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b03c:	b10a      	cbz	r2, 800b042 <_vfiprintf_r+0x86>
 800b03e:	2a25      	cmp	r2, #37	; 0x25
 800b040:	d1f9      	bne.n	800b036 <_vfiprintf_r+0x7a>
 800b042:	ebba 0b04 	subs.w	fp, sl, r4
 800b046:	d00b      	beq.n	800b060 <_vfiprintf_r+0xa4>
 800b048:	465b      	mov	r3, fp
 800b04a:	4622      	mov	r2, r4
 800b04c:	4629      	mov	r1, r5
 800b04e:	4630      	mov	r0, r6
 800b050:	f7ff ffa2 	bl	800af98 <__sfputs_r>
 800b054:	3001      	adds	r0, #1
 800b056:	f000 80a9 	beq.w	800b1ac <_vfiprintf_r+0x1f0>
 800b05a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b05c:	445a      	add	r2, fp
 800b05e:	9209      	str	r2, [sp, #36]	; 0x24
 800b060:	f89a 3000 	ldrb.w	r3, [sl]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 80a1 	beq.w	800b1ac <_vfiprintf_r+0x1f0>
 800b06a:	2300      	movs	r3, #0
 800b06c:	f04f 32ff 	mov.w	r2, #4294967295
 800b070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b074:	f10a 0a01 	add.w	sl, sl, #1
 800b078:	9304      	str	r3, [sp, #16]
 800b07a:	9307      	str	r3, [sp, #28]
 800b07c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b080:	931a      	str	r3, [sp, #104]	; 0x68
 800b082:	4654      	mov	r4, sl
 800b084:	2205      	movs	r2, #5
 800b086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b08a:	4854      	ldr	r0, [pc, #336]	; (800b1dc <_vfiprintf_r+0x220>)
 800b08c:	f7f5 f8d8 	bl	8000240 <memchr>
 800b090:	9a04      	ldr	r2, [sp, #16]
 800b092:	b9d8      	cbnz	r0, 800b0cc <_vfiprintf_r+0x110>
 800b094:	06d1      	lsls	r1, r2, #27
 800b096:	bf44      	itt	mi
 800b098:	2320      	movmi	r3, #32
 800b09a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b09e:	0713      	lsls	r3, r2, #28
 800b0a0:	bf44      	itt	mi
 800b0a2:	232b      	movmi	r3, #43	; 0x2b
 800b0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800b0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ae:	d015      	beq.n	800b0dc <_vfiprintf_r+0x120>
 800b0b0:	9a07      	ldr	r2, [sp, #28]
 800b0b2:	4654      	mov	r4, sl
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	f04f 0c0a 	mov.w	ip, #10
 800b0ba:	4621      	mov	r1, r4
 800b0bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0c0:	3b30      	subs	r3, #48	; 0x30
 800b0c2:	2b09      	cmp	r3, #9
 800b0c4:	d94d      	bls.n	800b162 <_vfiprintf_r+0x1a6>
 800b0c6:	b1b0      	cbz	r0, 800b0f6 <_vfiprintf_r+0x13a>
 800b0c8:	9207      	str	r2, [sp, #28]
 800b0ca:	e014      	b.n	800b0f6 <_vfiprintf_r+0x13a>
 800b0cc:	eba0 0308 	sub.w	r3, r0, r8
 800b0d0:	fa09 f303 	lsl.w	r3, r9, r3
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	46a2      	mov	sl, r4
 800b0da:	e7d2      	b.n	800b082 <_vfiprintf_r+0xc6>
 800b0dc:	9b03      	ldr	r3, [sp, #12]
 800b0de:	1d19      	adds	r1, r3, #4
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	9103      	str	r1, [sp, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	bfbb      	ittet	lt
 800b0e8:	425b      	neglt	r3, r3
 800b0ea:	f042 0202 	orrlt.w	r2, r2, #2
 800b0ee:	9307      	strge	r3, [sp, #28]
 800b0f0:	9307      	strlt	r3, [sp, #28]
 800b0f2:	bfb8      	it	lt
 800b0f4:	9204      	strlt	r2, [sp, #16]
 800b0f6:	7823      	ldrb	r3, [r4, #0]
 800b0f8:	2b2e      	cmp	r3, #46	; 0x2e
 800b0fa:	d10c      	bne.n	800b116 <_vfiprintf_r+0x15a>
 800b0fc:	7863      	ldrb	r3, [r4, #1]
 800b0fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b100:	d134      	bne.n	800b16c <_vfiprintf_r+0x1b0>
 800b102:	9b03      	ldr	r3, [sp, #12]
 800b104:	1d1a      	adds	r2, r3, #4
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	9203      	str	r2, [sp, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	bfb8      	it	lt
 800b10e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b112:	3402      	adds	r4, #2
 800b114:	9305      	str	r3, [sp, #20]
 800b116:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b1ec <_vfiprintf_r+0x230>
 800b11a:	7821      	ldrb	r1, [r4, #0]
 800b11c:	2203      	movs	r2, #3
 800b11e:	4650      	mov	r0, sl
 800b120:	f7f5 f88e 	bl	8000240 <memchr>
 800b124:	b138      	cbz	r0, 800b136 <_vfiprintf_r+0x17a>
 800b126:	9b04      	ldr	r3, [sp, #16]
 800b128:	eba0 000a 	sub.w	r0, r0, sl
 800b12c:	2240      	movs	r2, #64	; 0x40
 800b12e:	4082      	lsls	r2, r0
 800b130:	4313      	orrs	r3, r2
 800b132:	3401      	adds	r4, #1
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b13a:	4829      	ldr	r0, [pc, #164]	; (800b1e0 <_vfiprintf_r+0x224>)
 800b13c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b140:	2206      	movs	r2, #6
 800b142:	f7f5 f87d 	bl	8000240 <memchr>
 800b146:	2800      	cmp	r0, #0
 800b148:	d03f      	beq.n	800b1ca <_vfiprintf_r+0x20e>
 800b14a:	4b26      	ldr	r3, [pc, #152]	; (800b1e4 <_vfiprintf_r+0x228>)
 800b14c:	bb1b      	cbnz	r3, 800b196 <_vfiprintf_r+0x1da>
 800b14e:	9b03      	ldr	r3, [sp, #12]
 800b150:	3307      	adds	r3, #7
 800b152:	f023 0307 	bic.w	r3, r3, #7
 800b156:	3308      	adds	r3, #8
 800b158:	9303      	str	r3, [sp, #12]
 800b15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15c:	443b      	add	r3, r7
 800b15e:	9309      	str	r3, [sp, #36]	; 0x24
 800b160:	e768      	b.n	800b034 <_vfiprintf_r+0x78>
 800b162:	fb0c 3202 	mla	r2, ip, r2, r3
 800b166:	460c      	mov	r4, r1
 800b168:	2001      	movs	r0, #1
 800b16a:	e7a6      	b.n	800b0ba <_vfiprintf_r+0xfe>
 800b16c:	2300      	movs	r3, #0
 800b16e:	3401      	adds	r4, #1
 800b170:	9305      	str	r3, [sp, #20]
 800b172:	4619      	mov	r1, r3
 800b174:	f04f 0c0a 	mov.w	ip, #10
 800b178:	4620      	mov	r0, r4
 800b17a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b17e:	3a30      	subs	r2, #48	; 0x30
 800b180:	2a09      	cmp	r2, #9
 800b182:	d903      	bls.n	800b18c <_vfiprintf_r+0x1d0>
 800b184:	2b00      	cmp	r3, #0
 800b186:	d0c6      	beq.n	800b116 <_vfiprintf_r+0x15a>
 800b188:	9105      	str	r1, [sp, #20]
 800b18a:	e7c4      	b.n	800b116 <_vfiprintf_r+0x15a>
 800b18c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b190:	4604      	mov	r4, r0
 800b192:	2301      	movs	r3, #1
 800b194:	e7f0      	b.n	800b178 <_vfiprintf_r+0x1bc>
 800b196:	ab03      	add	r3, sp, #12
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	462a      	mov	r2, r5
 800b19c:	4b12      	ldr	r3, [pc, #72]	; (800b1e8 <_vfiprintf_r+0x22c>)
 800b19e:	a904      	add	r1, sp, #16
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	f7fd fc0d 	bl	80089c0 <_printf_float>
 800b1a6:	4607      	mov	r7, r0
 800b1a8:	1c78      	adds	r0, r7, #1
 800b1aa:	d1d6      	bne.n	800b15a <_vfiprintf_r+0x19e>
 800b1ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ae:	07d9      	lsls	r1, r3, #31
 800b1b0:	d405      	bmi.n	800b1be <_vfiprintf_r+0x202>
 800b1b2:	89ab      	ldrh	r3, [r5, #12]
 800b1b4:	059a      	lsls	r2, r3, #22
 800b1b6:	d402      	bmi.n	800b1be <_vfiprintf_r+0x202>
 800b1b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1ba:	f7fe f983 	bl	80094c4 <__retarget_lock_release_recursive>
 800b1be:	89ab      	ldrh	r3, [r5, #12]
 800b1c0:	065b      	lsls	r3, r3, #25
 800b1c2:	f53f af1d 	bmi.w	800b000 <_vfiprintf_r+0x44>
 800b1c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1c8:	e71c      	b.n	800b004 <_vfiprintf_r+0x48>
 800b1ca:	ab03      	add	r3, sp, #12
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	462a      	mov	r2, r5
 800b1d0:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <_vfiprintf_r+0x22c>)
 800b1d2:	a904      	add	r1, sp, #16
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f7fd fe7b 	bl	8008ed0 <_printf_i>
 800b1da:	e7e4      	b.n	800b1a6 <_vfiprintf_r+0x1ea>
 800b1dc:	0800bad4 	.word	0x0800bad4
 800b1e0:	0800bade 	.word	0x0800bade
 800b1e4:	080089c1 	.word	0x080089c1
 800b1e8:	0800af99 	.word	0x0800af99
 800b1ec:	0800bada 	.word	0x0800bada

0800b1f0 <__swbuf_r>:
 800b1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1f2:	460e      	mov	r6, r1
 800b1f4:	4614      	mov	r4, r2
 800b1f6:	4605      	mov	r5, r0
 800b1f8:	b118      	cbz	r0, 800b202 <__swbuf_r+0x12>
 800b1fa:	6a03      	ldr	r3, [r0, #32]
 800b1fc:	b90b      	cbnz	r3, 800b202 <__swbuf_r+0x12>
 800b1fe:	f7fe f815 	bl	800922c <__sinit>
 800b202:	69a3      	ldr	r3, [r4, #24]
 800b204:	60a3      	str	r3, [r4, #8]
 800b206:	89a3      	ldrh	r3, [r4, #12]
 800b208:	071a      	lsls	r2, r3, #28
 800b20a:	d525      	bpl.n	800b258 <__swbuf_r+0x68>
 800b20c:	6923      	ldr	r3, [r4, #16]
 800b20e:	b31b      	cbz	r3, 800b258 <__swbuf_r+0x68>
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	6922      	ldr	r2, [r4, #16]
 800b214:	1a98      	subs	r0, r3, r2
 800b216:	6963      	ldr	r3, [r4, #20]
 800b218:	b2f6      	uxtb	r6, r6
 800b21a:	4283      	cmp	r3, r0
 800b21c:	4637      	mov	r7, r6
 800b21e:	dc04      	bgt.n	800b22a <__swbuf_r+0x3a>
 800b220:	4621      	mov	r1, r4
 800b222:	4628      	mov	r0, r5
 800b224:	f7ff fd9e 	bl	800ad64 <_fflush_r>
 800b228:	b9e0      	cbnz	r0, 800b264 <__swbuf_r+0x74>
 800b22a:	68a3      	ldr	r3, [r4, #8]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	60a3      	str	r3, [r4, #8]
 800b230:	6823      	ldr	r3, [r4, #0]
 800b232:	1c5a      	adds	r2, r3, #1
 800b234:	6022      	str	r2, [r4, #0]
 800b236:	701e      	strb	r6, [r3, #0]
 800b238:	6962      	ldr	r2, [r4, #20]
 800b23a:	1c43      	adds	r3, r0, #1
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d004      	beq.n	800b24a <__swbuf_r+0x5a>
 800b240:	89a3      	ldrh	r3, [r4, #12]
 800b242:	07db      	lsls	r3, r3, #31
 800b244:	d506      	bpl.n	800b254 <__swbuf_r+0x64>
 800b246:	2e0a      	cmp	r6, #10
 800b248:	d104      	bne.n	800b254 <__swbuf_r+0x64>
 800b24a:	4621      	mov	r1, r4
 800b24c:	4628      	mov	r0, r5
 800b24e:	f7ff fd89 	bl	800ad64 <_fflush_r>
 800b252:	b938      	cbnz	r0, 800b264 <__swbuf_r+0x74>
 800b254:	4638      	mov	r0, r7
 800b256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b258:	4621      	mov	r1, r4
 800b25a:	4628      	mov	r0, r5
 800b25c:	f000 f806 	bl	800b26c <__swsetup_r>
 800b260:	2800      	cmp	r0, #0
 800b262:	d0d5      	beq.n	800b210 <__swbuf_r+0x20>
 800b264:	f04f 37ff 	mov.w	r7, #4294967295
 800b268:	e7f4      	b.n	800b254 <__swbuf_r+0x64>
	...

0800b26c <__swsetup_r>:
 800b26c:	b538      	push	{r3, r4, r5, lr}
 800b26e:	4b2a      	ldr	r3, [pc, #168]	; (800b318 <__swsetup_r+0xac>)
 800b270:	4605      	mov	r5, r0
 800b272:	6818      	ldr	r0, [r3, #0]
 800b274:	460c      	mov	r4, r1
 800b276:	b118      	cbz	r0, 800b280 <__swsetup_r+0x14>
 800b278:	6a03      	ldr	r3, [r0, #32]
 800b27a:	b90b      	cbnz	r3, 800b280 <__swsetup_r+0x14>
 800b27c:	f7fd ffd6 	bl	800922c <__sinit>
 800b280:	89a3      	ldrh	r3, [r4, #12]
 800b282:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b286:	0718      	lsls	r0, r3, #28
 800b288:	d422      	bmi.n	800b2d0 <__swsetup_r+0x64>
 800b28a:	06d9      	lsls	r1, r3, #27
 800b28c:	d407      	bmi.n	800b29e <__swsetup_r+0x32>
 800b28e:	2309      	movs	r3, #9
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b296:	81a3      	strh	r3, [r4, #12]
 800b298:	f04f 30ff 	mov.w	r0, #4294967295
 800b29c:	e034      	b.n	800b308 <__swsetup_r+0x9c>
 800b29e:	0758      	lsls	r0, r3, #29
 800b2a0:	d512      	bpl.n	800b2c8 <__swsetup_r+0x5c>
 800b2a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2a4:	b141      	cbz	r1, 800b2b8 <__swsetup_r+0x4c>
 800b2a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2aa:	4299      	cmp	r1, r3
 800b2ac:	d002      	beq.n	800b2b4 <__swsetup_r+0x48>
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	f7fe fefe 	bl	800a0b0 <_free_r>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6363      	str	r3, [r4, #52]	; 0x34
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2be:	81a3      	strh	r3, [r4, #12]
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	6063      	str	r3, [r4, #4]
 800b2c4:	6923      	ldr	r3, [r4, #16]
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	89a3      	ldrh	r3, [r4, #12]
 800b2ca:	f043 0308 	orr.w	r3, r3, #8
 800b2ce:	81a3      	strh	r3, [r4, #12]
 800b2d0:	6923      	ldr	r3, [r4, #16]
 800b2d2:	b94b      	cbnz	r3, 800b2e8 <__swsetup_r+0x7c>
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2de:	d003      	beq.n	800b2e8 <__swsetup_r+0x7c>
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	f000 f884 	bl	800b3f0 <__smakebuf_r>
 800b2e8:	89a0      	ldrh	r0, [r4, #12]
 800b2ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2ee:	f010 0301 	ands.w	r3, r0, #1
 800b2f2:	d00a      	beq.n	800b30a <__swsetup_r+0x9e>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60a3      	str	r3, [r4, #8]
 800b2f8:	6963      	ldr	r3, [r4, #20]
 800b2fa:	425b      	negs	r3, r3
 800b2fc:	61a3      	str	r3, [r4, #24]
 800b2fe:	6923      	ldr	r3, [r4, #16]
 800b300:	b943      	cbnz	r3, 800b314 <__swsetup_r+0xa8>
 800b302:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b306:	d1c4      	bne.n	800b292 <__swsetup_r+0x26>
 800b308:	bd38      	pop	{r3, r4, r5, pc}
 800b30a:	0781      	lsls	r1, r0, #30
 800b30c:	bf58      	it	pl
 800b30e:	6963      	ldrpl	r3, [r4, #20]
 800b310:	60a3      	str	r3, [r4, #8]
 800b312:	e7f4      	b.n	800b2fe <__swsetup_r+0x92>
 800b314:	2000      	movs	r0, #0
 800b316:	e7f7      	b.n	800b308 <__swsetup_r+0x9c>
 800b318:	200000d8 	.word	0x200000d8

0800b31c <_raise_r>:
 800b31c:	291f      	cmp	r1, #31
 800b31e:	b538      	push	{r3, r4, r5, lr}
 800b320:	4604      	mov	r4, r0
 800b322:	460d      	mov	r5, r1
 800b324:	d904      	bls.n	800b330 <_raise_r+0x14>
 800b326:	2316      	movs	r3, #22
 800b328:	6003      	str	r3, [r0, #0]
 800b32a:	f04f 30ff 	mov.w	r0, #4294967295
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b332:	b112      	cbz	r2, 800b33a <_raise_r+0x1e>
 800b334:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b338:	b94b      	cbnz	r3, 800b34e <_raise_r+0x32>
 800b33a:	4620      	mov	r0, r4
 800b33c:	f000 f830 	bl	800b3a0 <_getpid_r>
 800b340:	462a      	mov	r2, r5
 800b342:	4601      	mov	r1, r0
 800b344:	4620      	mov	r0, r4
 800b346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b34a:	f000 b817 	b.w	800b37c <_kill_r>
 800b34e:	2b01      	cmp	r3, #1
 800b350:	d00a      	beq.n	800b368 <_raise_r+0x4c>
 800b352:	1c59      	adds	r1, r3, #1
 800b354:	d103      	bne.n	800b35e <_raise_r+0x42>
 800b356:	2316      	movs	r3, #22
 800b358:	6003      	str	r3, [r0, #0]
 800b35a:	2001      	movs	r0, #1
 800b35c:	e7e7      	b.n	800b32e <_raise_r+0x12>
 800b35e:	2400      	movs	r4, #0
 800b360:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b364:	4628      	mov	r0, r5
 800b366:	4798      	blx	r3
 800b368:	2000      	movs	r0, #0
 800b36a:	e7e0      	b.n	800b32e <_raise_r+0x12>

0800b36c <raise>:
 800b36c:	4b02      	ldr	r3, [pc, #8]	; (800b378 <raise+0xc>)
 800b36e:	4601      	mov	r1, r0
 800b370:	6818      	ldr	r0, [r3, #0]
 800b372:	f7ff bfd3 	b.w	800b31c <_raise_r>
 800b376:	bf00      	nop
 800b378:	200000d8 	.word	0x200000d8

0800b37c <_kill_r>:
 800b37c:	b538      	push	{r3, r4, r5, lr}
 800b37e:	4d07      	ldr	r5, [pc, #28]	; (800b39c <_kill_r+0x20>)
 800b380:	2300      	movs	r3, #0
 800b382:	4604      	mov	r4, r0
 800b384:	4608      	mov	r0, r1
 800b386:	4611      	mov	r1, r2
 800b388:	602b      	str	r3, [r5, #0]
 800b38a:	f7f7 fd8d 	bl	8002ea8 <_kill>
 800b38e:	1c43      	adds	r3, r0, #1
 800b390:	d102      	bne.n	800b398 <_kill_r+0x1c>
 800b392:	682b      	ldr	r3, [r5, #0]
 800b394:	b103      	cbz	r3, 800b398 <_kill_r+0x1c>
 800b396:	6023      	str	r3, [r4, #0]
 800b398:	bd38      	pop	{r3, r4, r5, pc}
 800b39a:	bf00      	nop
 800b39c:	200007f4 	.word	0x200007f4

0800b3a0 <_getpid_r>:
 800b3a0:	f7f7 bd7a 	b.w	8002e98 <_getpid>

0800b3a4 <__swhatbuf_r>:
 800b3a4:	b570      	push	{r4, r5, r6, lr}
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ac:	2900      	cmp	r1, #0
 800b3ae:	b096      	sub	sp, #88	; 0x58
 800b3b0:	4615      	mov	r5, r2
 800b3b2:	461e      	mov	r6, r3
 800b3b4:	da0d      	bge.n	800b3d2 <__swhatbuf_r+0x2e>
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b3bc:	f04f 0100 	mov.w	r1, #0
 800b3c0:	bf0c      	ite	eq
 800b3c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b3c6:	2340      	movne	r3, #64	; 0x40
 800b3c8:	2000      	movs	r0, #0
 800b3ca:	6031      	str	r1, [r6, #0]
 800b3cc:	602b      	str	r3, [r5, #0]
 800b3ce:	b016      	add	sp, #88	; 0x58
 800b3d0:	bd70      	pop	{r4, r5, r6, pc}
 800b3d2:	466a      	mov	r2, sp
 800b3d4:	f000 f848 	bl	800b468 <_fstat_r>
 800b3d8:	2800      	cmp	r0, #0
 800b3da:	dbec      	blt.n	800b3b6 <__swhatbuf_r+0x12>
 800b3dc:	9901      	ldr	r1, [sp, #4]
 800b3de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b3e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b3e6:	4259      	negs	r1, r3
 800b3e8:	4159      	adcs	r1, r3
 800b3ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3ee:	e7eb      	b.n	800b3c8 <__swhatbuf_r+0x24>

0800b3f0 <__smakebuf_r>:
 800b3f0:	898b      	ldrh	r3, [r1, #12]
 800b3f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3f4:	079d      	lsls	r5, r3, #30
 800b3f6:	4606      	mov	r6, r0
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	d507      	bpl.n	800b40c <__smakebuf_r+0x1c>
 800b3fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	6123      	str	r3, [r4, #16]
 800b404:	2301      	movs	r3, #1
 800b406:	6163      	str	r3, [r4, #20]
 800b408:	b002      	add	sp, #8
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	ab01      	add	r3, sp, #4
 800b40e:	466a      	mov	r2, sp
 800b410:	f7ff ffc8 	bl	800b3a4 <__swhatbuf_r>
 800b414:	9900      	ldr	r1, [sp, #0]
 800b416:	4605      	mov	r5, r0
 800b418:	4630      	mov	r0, r6
 800b41a:	f7fe febd 	bl	800a198 <_malloc_r>
 800b41e:	b948      	cbnz	r0, 800b434 <__smakebuf_r+0x44>
 800b420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b424:	059a      	lsls	r2, r3, #22
 800b426:	d4ef      	bmi.n	800b408 <__smakebuf_r+0x18>
 800b428:	f023 0303 	bic.w	r3, r3, #3
 800b42c:	f043 0302 	orr.w	r3, r3, #2
 800b430:	81a3      	strh	r3, [r4, #12]
 800b432:	e7e3      	b.n	800b3fc <__smakebuf_r+0xc>
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	6020      	str	r0, [r4, #0]
 800b438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b43c:	81a3      	strh	r3, [r4, #12]
 800b43e:	9b00      	ldr	r3, [sp, #0]
 800b440:	6163      	str	r3, [r4, #20]
 800b442:	9b01      	ldr	r3, [sp, #4]
 800b444:	6120      	str	r0, [r4, #16]
 800b446:	b15b      	cbz	r3, 800b460 <__smakebuf_r+0x70>
 800b448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b44c:	4630      	mov	r0, r6
 800b44e:	f000 f81d 	bl	800b48c <_isatty_r>
 800b452:	b128      	cbz	r0, 800b460 <__smakebuf_r+0x70>
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	f023 0303 	bic.w	r3, r3, #3
 800b45a:	f043 0301 	orr.w	r3, r3, #1
 800b45e:	81a3      	strh	r3, [r4, #12]
 800b460:	89a3      	ldrh	r3, [r4, #12]
 800b462:	431d      	orrs	r5, r3
 800b464:	81a5      	strh	r5, [r4, #12]
 800b466:	e7cf      	b.n	800b408 <__smakebuf_r+0x18>

0800b468 <_fstat_r>:
 800b468:	b538      	push	{r3, r4, r5, lr}
 800b46a:	4d07      	ldr	r5, [pc, #28]	; (800b488 <_fstat_r+0x20>)
 800b46c:	2300      	movs	r3, #0
 800b46e:	4604      	mov	r4, r0
 800b470:	4608      	mov	r0, r1
 800b472:	4611      	mov	r1, r2
 800b474:	602b      	str	r3, [r5, #0]
 800b476:	f7f7 fd76 	bl	8002f66 <_fstat>
 800b47a:	1c43      	adds	r3, r0, #1
 800b47c:	d102      	bne.n	800b484 <_fstat_r+0x1c>
 800b47e:	682b      	ldr	r3, [r5, #0]
 800b480:	b103      	cbz	r3, 800b484 <_fstat_r+0x1c>
 800b482:	6023      	str	r3, [r4, #0]
 800b484:	bd38      	pop	{r3, r4, r5, pc}
 800b486:	bf00      	nop
 800b488:	200007f4 	.word	0x200007f4

0800b48c <_isatty_r>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4d06      	ldr	r5, [pc, #24]	; (800b4a8 <_isatty_r+0x1c>)
 800b490:	2300      	movs	r3, #0
 800b492:	4604      	mov	r4, r0
 800b494:	4608      	mov	r0, r1
 800b496:	602b      	str	r3, [r5, #0]
 800b498:	f7f7 fd75 	bl	8002f86 <_isatty>
 800b49c:	1c43      	adds	r3, r0, #1
 800b49e:	d102      	bne.n	800b4a6 <_isatty_r+0x1a>
 800b4a0:	682b      	ldr	r3, [r5, #0]
 800b4a2:	b103      	cbz	r3, 800b4a6 <_isatty_r+0x1a>
 800b4a4:	6023      	str	r3, [r4, #0]
 800b4a6:	bd38      	pop	{r3, r4, r5, pc}
 800b4a8:	200007f4 	.word	0x200007f4

0800b4ac <_init>:
 800b4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ae:	bf00      	nop
 800b4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4b2:	bc08      	pop	{r3}
 800b4b4:	469e      	mov	lr, r3
 800b4b6:	4770      	bx	lr

0800b4b8 <_fini>:
 800b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ba:	bf00      	nop
 800b4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4be:	bc08      	pop	{r3}
 800b4c0:	469e      	mov	lr, r3
 800b4c2:	4770      	bx	lr
